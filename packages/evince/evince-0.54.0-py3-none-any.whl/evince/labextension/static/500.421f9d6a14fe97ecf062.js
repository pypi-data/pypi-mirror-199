(self.webpackChunkevince=self.webpackChunkevince||[]).push([[500],{500:(e,t,i)=>{"use strict";i.r(t),i.d(t,{BraketModel:()=>a,BraketView:()=>l,TemplateModel:()=>d.TemplateModel,TemplateView:()=>d.TemplateView,version:()=>v.i8});var n=i(672),o=i(960),r=i(47),s=i(146);class a extends n.DOMWidgetModel{defaults(){return{...super.defaults(),_model_name:"BraketModel",_view_name:"BraketView",_model_module:"evince",_view_module:"evince",_model_module_version:"0.30.0",_view_module_version:"0.30.0"}}}class l extends n.DOMWidgetView{render(){console.log("Hello from BraketView 3.2");const e=new o.Scene;this.scene=e;let t=new o.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);this.camera=t,t.position.z=5;const i=new o.WebGLRenderer;this.renderer=i,this.renderer.setSize(.9*document.activeElement.clientWidth,.9*document.activeElement.clientWidth*.6);const n=new o.Color(this.model.get("bg_color")[0],this.model.get("bg_color")[1],this.model.get("bg_color")[2]);this.renderer.setClearColor(n,1),this.renderer.antialias=!0,this.el.appendChild(s.N.createButton(this.renderer)),this.renderer.xr.enabled=!0,new r.OrbitControls(this.camera,this.renderer.domElement),this.init_changed(),this.el.append(this.renderer.domElement),this.ao_changed(),this.model.on("change:init",this.init_changed,this),this.model.on("change:ao",this.ao_changed,this),this.animate()}animate(){this.renderer.setAnimationLoop(this.render)}render(){for(let e=0;e<this.scene.children.length;e++)performance.now(),this.scene.children[e].material.uniforms.time.value+=.01;this.renderer.render(this.scene,this.camera)}init_changed(){this.pos=this.model.get("pos"),this.masses=this.model.get("masses"),this.colors=this.model.get("colors")}pos_changed(){this.pos=this.model.get("pos");for(let e=0;e<this.pos.length;e++){let t=this.pos[e],i=this.scene.children[e];i.position.x=t[0],i.position.y=t[1],i.position.z=t[2]}}surf_changed(){this.surf=this.model.get("surf");for(let e=0;e<this.surf.length;e++){let e=new o.ShaderMaterial({uniforms:{time:{value:0},resolution:{value:new o.Vector2}},vertexShader:"uniform float time;\n            uniform vec2 resolution;\n            varying vec2 vUv;\n            varying vec3 pos;\n            varying vec3 tex;\n\n            void main() {\n                vUv = uv;\n                pos = vec3(position.x, position.y, position.z);\n                tex = vec3(position.x+time, position.y, position.z);\n                //pos = vec3(position.x + time * resolution.x, position.y + time * resolution.y, position.z);\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\n            }",fragmentShader:"uniform vec3 user_color;\nuniform float time;\n\nvarying vec2 vUv;\nvarying vec3 pos;\nvarying vec3 tex;\nvarying float q;\n\nvoid main() {\n\nvec2 p = vUv;\nfloat q = tex[0]*tex[0] + tex[1]*tex[1] + tex[2]*tex[2];\n\n    gl_FragColor = gl_FragColor + .01*vec4(.5 + 1.7369481664870148*sqrt(15)*pow(3.141592653589793, -0.75)*tex[2]*(pow(tex[0], 2) - pow(tex[1], 2))*exp(-pow(tex[0], 2) - pow(tex[1], 2) - pow(tex[2], 2)), 0.2, 0.5, 0.5);\n}",side:o.DoubleSide,blending:o.SubtractiveBlending});e.depthWrite=!1;let t=new o.BufferGeometry;t.setIndex(this.surf[1]),t.setAttribute("position",new o.Float32BufferAttribute(this.surf[0],3)),new o.Mesh(t,e)}}ao_changed(){this.ao=this.model.get("ao"),this.surface_view=this.model.get("surface_view");var e=this.model.get("fragment_shader");if(this.surface_view){var t="uniform float time;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvarying vec3 pos;\nvarying vec3 tex;\n\nvoid main() {\n\tvUv = uv;\n\tpos = vec3(position.x, position.y, position.z);\n\ttex = vec3(position.x, position.y, position.z);\n\t//pos = vec3(position.x + time * resolution.x, position.y + time * resolution.y, position.z);\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\n}";let i=new o.ShaderMaterial({uniforms:{time:{value:0},resolution:{value:new o.Vector2}},vertexShader:t,fragmentShader:e,side:o.DoubleSide,blending:o.SubtractiveBlending});i.depthWrite=!1,this.model.get("additive")&&(i.blending=o.AdditiveBlending);let n=new o.PlaneGeometry(1e4,1e4),r=new o.Mesh(n,i);r.position.x=0,r.position.y=0,r.position.z=0,this.scene.add(r)}else{t="uniform float time;\nuniform vec2 resolution;\nvarying vec2 vUv;\nvarying vec3 pos;\nvarying vec3 tex;\n\nvoid main() {\n\tvUv = uv;\n\tpos = vec3(position.x, position.y, position.z);\n\ttex = vec3(position.x, position.y, position.z);\n\t//pos = vec3(position.x + time * resolution.x, position.y + time * resolution.y, position.z);\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\n}";let i=new o.SphereBufferGeometry(.3),n=(new o.InstancedBufferGeometry).copy(i),r=120;n.maxInstancedCount=r;let s=[],a=[];for(let e=0;e<r;e++)a.push(0,0,0),s.push(.03*(e**1.1+.1),0,0);let l=new Float32Array(a);n.setAttribute("aCurve",new o.InstancedBufferAttribute(l,3,!1));let d=new Float32Array(s);n.setAttribute("aRadius",new o.InstancedBufferAttribute(d,3,!1)),this.instancedGeometry=n;let v=new o.ShaderMaterial({fragmentShader:e,vertexShader:"// Define the attributes\nvarying vec3 vColor;\nvarying vec3 tex;\nvarying vec2 vUv;\n\nattribute vec3 aRadius;\nattribute vec3 aCurve;\n\nvoid main(){\nvec3 transformed = position*aRadius.x*length(cameraPosition);\ntex = vec3(transformed.x, transformed.y, transformed.z) + cameraPosition;\n\n\n// 3. Get position and add it to the final position\n//vec3 curvePosition = vec3(aCurve.x, aCurve.y, aCurve.z);\n\n//transformed += curvePosition;\n\ngl_Position = projectionMatrix * modelViewMatrix * vec4(tex, 1.0);\n//vColor = aColor;\n//vPis = gl_position;\n}",uniforms:{time:{value:0},resolution:{value:new o.Vector2}},side:o.BackSide,blending:o.SubtractiveBlending});this.model.get("additive")&&(v.blending=o.AdditiveBlending),v.depthWrite=!1;let c=new o.InstancedMesh(n,v,r);c.instanceMatrix.needsUpdate=!0,this.scene.add(c)}}}var d=i(292);const v={i8:"0.30.0"}},292:(e,t,i)=>{var n=i(672),o=(i(431),i(960)),r=i(47);class s extends n.DOMWidgetModel{defaults(){return{...super.defaults(),_model_name:"TemplateModel",_view_name:"TemaplteView",_model_module:"evince",_view_module:"evince",_model_module_version:"0.30.0",_view_module_version:"0.30.0"}}}class a extends n.DOMWidgetView{render(){const e=new o.Scene;this.scene=e;let t=new o.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);this.camera=t,this.camera.position.z=5;const i=new o.WebGLRenderer;this.renderer=i,this.renderer.setAnimationLoop((function(){i.render(e,t)})),this.renderer.setSize(.5*window.innerWidth,.5*window.innerHeight),this.renderer.setClearColor(986927,1),this.renderer.antialias=!0;let n=new r(this.camera,this.renderer.domElement);this.controls=n,this.value_changed(),this.model.on("change:value",this.value_changed,this)}value_changed(){this.el.textContent=this.model.get("value")}}e.exports={TemplateModel:s,TemplateView:a}}}]);