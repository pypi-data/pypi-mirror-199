{"version":3,"file":"lib_index_js.d0ec14e0f1c3b64c7639.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClC+D;AACP;AACc;AACd;AAChB;AACD;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,OAAO;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU,gCAAgC,kBAAkB,oBAAoB,6BAA6B;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB,GAAG,yCAAyC,KAAK,qCAAqC,GAAG,gFAAgF;AAC9N,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ,GAAG,sBAAsB;AAC/D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mBAAmB;AAC3F;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,QAAQ,oDAAU,0BAA0B,WAAW;AACvD;AACA;AACA;AACA;AACA,qDAAqD,sBAAsB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,GAAG,wBAAwB;AAClE,+CAA+C,gDAAgD;AAC/F;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mBAAmB;AAC3F;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,+DAAa;AAC1C,kBAAkB,kEAAW;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,kDAAK;AAC5C;AACA;AACA,8CAA8C,kEAAW;AACzD,gEAAgE,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mCAAmC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wCAAwC;AACpF,qGAAqG,EAAE;AACvG;AACA;AACA;AACA,wCAAwC,wCAAwC;AAChF,iGAAiG,EAAE;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB,EAAE,iEAAe,EAAE,kEAAgB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_daisy/./lib/handler.js","webpack://jupyterlab_daisy/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-daisy', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ToolbarButton, ICommandPalette } from '@jupyterlab/apputils';\nimport { paletteIcon } from '@jupyterlab/ui-components';\nimport { Panel } from '@lumino/widgets';\nimport { requestAPI } from './handler';\n// TODO: Should probably split sidebar logic/layout from button class\nclass ButtonExtension {\n    constructor(app, tracker) {\n        this.sidebar = undefined;\n        this.editor = undefined;\n        this.daisy_address = \"\";\n        this.app = app;\n        this.tracker = tracker;\n    }\n    // Closes the sidebar and replaces the selected text\n    // TODO: If the user modifies the selection, the sidebar should also close\n    closeAndReplace(ev, sidebar) {\n        var _a, _b;\n        sidebar === null || sidebar === void 0 ? void 0 : sidebar.close();\n        let chosen = (_a = ev.target.textContent) !== null && _a !== void 0 ? _a : '';\n        (_b = this.editor) === null || _b === void 0 ? void 0 : _b.replaceSelection(`${chosen}`);\n    }\n    setDaisyAddress(daisy_address) {\n        this.daisy_address = daisy_address;\n    }\n    // TODO: Remove code duplication\n    populateListRelated(source_asset_name, target_asset_names, list) {\n        while (list.firstChild != null) {\n            list.removeChild(list.firstChild);\n        }\n        requestAPI(`get-related?source_asset_id=${source_asset_name}&target_asset_ids=${target_asset_names.join(',')}`)\n            .then(json => {\n            var _a;\n            (_a = json['RelatedTables']) === null || _a === void 0 ? void 0 : _a.forEach((entry) => {\n                const bla = document.createElement('li');\n                const button = document.createElement('button');\n                button.className = 'my-button';\n                button.textContent = '+';\n                const text = document.createElement('p');\n                const splitLinks = entry.links.map(l => l.split('/'));\n                const itemName = `${splitLinks[0][0]}/${splitLinks[0][splitLinks[0].length - 1]} -> ${splitLinks[splitLinks.length - 1][0]}/${splitLinks[splitLinks.length - 1][splitLinks[splitLinks.length - 1].length - 1]}`;\n                bla.setAttribute('title', `${itemName}. Click '+' for details...`);\n                text.textContent = itemName;\n                text.className = 'my-list-item-text';\n                const tableContainer = document.createElement('div');\n                const table = document.createElement('table');\n                table.setAttribute('style', 'width: 100%;');\n                tableContainer.className =\n                    'my-column-table-div-collapsed';\n                tableContainer.setAttribute('style', 'height: 0px');\n                tableContainer.appendChild(table);\n                const itemDiv = document.createElement('div');\n                itemDiv.className = 'my-list-item-div';\n                itemDiv.appendChild(button);\n                itemDiv.appendChild(text);\n                bla.appendChild(itemDiv);\n                bla.appendChild(tableContainer);\n                bla.className = 'my-list-item';\n                const tableHeader = document.createElement('tr');\n                tableHeader.innerHTML = `\n                    <th>Connected via</th>\n                    `;\n                table.appendChild(tableHeader);\n                splitLinks.forEach(link => {\n                    const tr = document.createElement('tr');\n                    tr.innerHTML = `\n                        <td>${link[0]}/${link[link.length - 1]}</td>\n                      `;\n                    table.appendChild(tr);\n                });\n                button.onclick = () => {\n                    if (tableContainer.className === 'my-column-table-div') {\n                        tableContainer.className =\n                            'my-column-table-div-collapsed';\n                        button.className = 'my-button';\n                        button.textContent = '+';\n                        tableContainer.setAttribute('style', 'height: 0px');\n                    }\n                    else {\n                        tableContainer.className = 'my-column-table-div';\n                        button.className = 'my-button-toggled';\n                        button.textContent = '-';\n                        tableContainer.setAttribute('style', `height: ${table.clientHeight}px`);\n                    }\n                };\n                text.onclick = ev => this.closeAndReplace(ev, this.sidebar);\n                list.appendChild(bla);\n            });\n        })\n            .catch(reason => {\n            const notFound = document.createElement('div');\n            notFound.textContent = \"Could not find any connections\";\n            notFound.className = \"my-list-item-error\";\n            list.appendChild(notFound);\n            console.log(\"RES\", reason);\n        });\n    }\n    populateList(asset_name, list) {\n        while (list.firstChild != null) {\n            list.removeChild(list.firstChild);\n        }\n        requestAPI(`get-joinable?asset_id=${asset_name}`)\n            .then(json => {\n            var _a;\n            (_a = json['JoinableTables']) === null || _a === void 0 ? void 0 : _a.forEach((entry) => {\n                const bla = document.createElement('li');\n                bla.setAttribute('title', `Matched ${entry.matches.length} columns, click '+' for details...`);\n                const button = document.createElement('button');\n                button.className = 'my-button';\n                button.textContent = '+';\n                const text = document.createElement('p');\n                text.textContent = entry.table_path.split('/')[0];\n                text.className = 'my-list-item-text';\n                const tableContainer = document.createElement('div');\n                const table = document.createElement('table');\n                table.setAttribute('style', 'width: 100%;');\n                tableContainer.className =\n                    'my-column-table-div-collapsed';\n                tableContainer.setAttribute('style', 'height: 0px');\n                tableContainer.appendChild(table);\n                const itemDiv = document.createElement('div');\n                itemDiv.className = 'my-list-item-div';\n                itemDiv.appendChild(button);\n                itemDiv.appendChild(text);\n                bla.appendChild(itemDiv);\n                bla.appendChild(tableContainer);\n                bla.className = 'my-list-item';\n                const tableHeader = document.createElement('tr');\n                tableHeader.innerHTML = `\n                    <th>Column Name</th>\n                    <th align=\"right\">COMA Score</th>\n                    `;\n                table.appendChild(tableHeader);\n                entry.matches.forEach(match => {\n                    const tr = document.createElement('tr');\n                    const split = match['PK']['from_id'].split('/');\n                    tr.setAttribute('title', match['PK']['from_id']);\n                    tr.innerHTML = `\n                        <td>${split[0]}/${split[split.length - 1]}</td>\n                        <td class='alnright'>${parseFloat(match['RELATED']['coma']).toFixed(3)}</td>\n                      `;\n                    table.appendChild(tr);\n                });\n                button.onclick = () => {\n                    if (tableContainer.className === 'my-column-table-div') {\n                        tableContainer.className =\n                            'my-column-table-div-collapsed';\n                        button.className = 'my-button';\n                        button.textContent = '+';\n                        tableContainer.setAttribute('style', 'height: 0px');\n                    }\n                    else {\n                        tableContainer.className = 'my-column-table-div';\n                        button.className = 'my-button-toggled';\n                        button.textContent = '-';\n                        tableContainer.setAttribute('style', `height: ${table.clientHeight}px`);\n                    }\n                };\n                text.onclick = ev => this.closeAndReplace(ev, this.sidebar);\n                list.appendChild(bla);\n            });\n        })\n            .catch(reason => {\n            const notFound = document.createElement('div');\n            notFound.className = \"my-list-item-error\";\n            notFound.textContent = \"Oh no, something went wrong...\";\n            if (reason.message.includes('400')) {\n                notFound.textContent = \"Wrong input, make sure to fill in all fields...\";\n            }\n            else if (reason.message.includes('404')) {\n                notFound.textContent = \"Could not find any connections...\";\n            }\n            list.appendChild(notFound);\n            console.log(\"RES\", reason.message);\n        });\n    }\n    createNew(panel, context) {\n        const mybutton = new ToolbarButton({\n            icon: paletteIcon,\n            tooltip: \"Augment Data\",\n            onClick: () => {\n                var _a, _b, _c, _d, _e;\n                (_a = this.sidebar) === null || _a === void 0 ? void 0 : _a.close();\n                const activeCell = this.tracker.activeCell;\n                if (activeCell !== null) {\n                    this.editor = activeCell.editor;\n                    let value = this.editor.getRange(this.editor.getCursor('start'), this.editor.getCursor('end'));\n                    this.sidebar = new Panel();\n                    this.sidebar.addClass('my-panel');\n                    this.sidebar.id = 'daisy-jupyterlab';\n                    this.sidebar.title.icon = paletteIcon;\n                    this.app.shell.add(this.sidebar, 'right', { rank: 50000 });\n                    this.app.shell.activateById(this.sidebar.id);\n                    const header = document.createElement('h1');\n                    header.textContent = 'Related Datasets';\n                    const runButton = document.createElement('button');\n                    runButton.textContent = 'Execute Query';\n                    runButton.className = 'my-query-button';\n                    const inp = document.createElement('input');\n                    inp.type = \"text\";\n                    inp.name = \"name\";\n                    inp.id = \"source\";\n                    inp.value = value;\n                    inp.className = 'my-highlighted-item';\n                    inp.placeholder = \"Source Table Name\";\n                    const sep = document.createElement('hr');\n                    sep.className = 'solid';\n                    const additionalFields = document.createElement('div');\n                    additionalFields.id = \"targets\";\n                    const form = document.createElement('form');\n                    form.appendChild(inp);\n                    form.appendChild(sep);\n                    form.appendChild(additionalFields);\n                    form.appendChild(runButton);\n                    const checkbox = document.createElement('input');\n                    checkbox.type = \"checkbox\";\n                    checkbox.id = \"related\";\n                    checkbox.name = \"related\";\n                    const checkboxLabel = document.createElement('label');\n                    checkboxLabel.htmlFor = \"related\";\n                    checkboxLabel.textContent = \"Connect to existing assets\";\n                    const checkboxSpan = document.createElement('span');\n                    checkboxSpan.appendChild(checkbox);\n                    checkboxSpan.appendChild(checkboxLabel);\n                    const addField = function (node) {\n                        var _a;\n                        const extraInp = document.createElement('input');\n                        extraInp.type = \"text\";\n                        extraInp.name = `target-${additionalFields.childElementCount}`;\n                        extraInp.value = \"\";\n                        extraInp.className = 'my-highlighted-item';\n                        const delButton = document.createElement('button');\n                        delButton.className = 'my-button';\n                        delButton.textContent = '-';\n                        delButton.type = \"button\";\n                        const fieldSpan = document.createElement('span');\n                        fieldSpan.className = \"my-input-span\";\n                        fieldSpan.appendChild(extraInp);\n                        fieldSpan.appendChild(delButton);\n                        delButton.onclick = (event) => {\n                            fieldSpan.remove();\n                            for (let i = 0; i < additionalFields.childElementCount; i++) {\n                                additionalFields.children[i].children[0].placeholder = `Table Name ${i}`;\n                            }\n                        };\n                        additionalFields.insertBefore(fieldSpan, (_a = node === null || node === void 0 ? void 0 : node.nextSibling) !== null && _a !== void 0 ? _a : null);\n                        for (let i = 0; i < additionalFields.childElementCount; i++) {\n                            additionalFields.children[i].children[0].placeholder = `Table Name ${i}`;\n                        }\n                    };\n                    checkbox.addEventListener('change', (event) => {\n                        if (event.currentTarget.checked) {\n                            addField(null);\n                            const addButton = document.createElement('button');\n                            addButton.className = 'my-query-button';\n                            addButton.textContent = 'Add Item';\n                            addButton.type = \"button\";\n                            addButton.onclick = () => { addField(additionalFields.lastChild); };\n                            addButton.id = \"addButton\";\n                            form.insertBefore(addButton, runButton);\n                        }\n                        else {\n                            while (additionalFields.firstChild != null) {\n                                additionalFields.removeChild(additionalFields.firstChild);\n                            }\n                            document.getElementById('addButton').remove();\n                        }\n                    });\n                    const list = document.createElement('ul');\n                    list.className = 'my-list';\n                    const temp = this;\n                    form.onsubmit = function (event) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        if (!checkbox.checked) {\n                            temp.populateList(inp.value, list);\n                        }\n                        else {\n                            const targets = [];\n                            for (const child of additionalFields.children) {\n                                const target = child.children[0].value;\n                                targets.push(target);\n                            }\n                            temp.populateListRelated(inp.value, targets, list);\n                        }\n                    };\n                    (_b = this.sidebar) === null || _b === void 0 ? void 0 : _b.node.appendChild(header);\n                    (_c = this.sidebar) === null || _c === void 0 ? void 0 : _c.node.appendChild(checkboxSpan);\n                    (_d = this.sidebar) === null || _d === void 0 ? void 0 : _d.node.appendChild(form);\n                    (_e = this.sidebar) === null || _e === void 0 ? void 0 : _e.node.appendChild(list);\n                    this.populateList(value, list);\n                }\n            }\n        });\n        // Add the toolbar button to the notebook toolbar\n        panel.toolbar.insertItem(10, 'mybutton', mybutton);\n        return mybutton;\n    }\n}\n/**\n * Initialization data for the jupyterlab_daisy extension.\n */\nconst plugin = {\n    id: 'jupyterlab_daisy:plugin',\n    autoStart: true,\n    optional: [ISettingRegistry, ICommandPalette, INotebookTracker],\n    activate: (app, settingRegistry, palette, tracker) => {\n        console.log('JupyterLab extension jupyterlab_daisy is activated!');\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('jupyterlab_daisy settings loaded:', settings.composite);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for jupyterlab_daisy.', reason);\n            });\n        }\n        const button = new ButtonExtension(app, tracker);\n        app.docRegistry.addWidgetExtension('Notebook', button);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}