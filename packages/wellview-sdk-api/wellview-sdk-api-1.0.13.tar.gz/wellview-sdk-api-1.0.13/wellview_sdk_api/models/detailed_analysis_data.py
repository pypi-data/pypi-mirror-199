# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DetailedAnalysisData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actionrqd': 'bool',
        'analysistyp': 'str',
        'analyst': 'str',
        'com': 'str',
        'condition': 'str',
        'dttminspect': 'datetime',
        'durequip': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'material': 'str',
        'metallurgy': 'str',
        'partcost': 'float',
        'partdes': 'str',
        'partrefno': 'str',
        'parttyp1': 'str',
        'parttyp2': 'str',
        'rootcause1': 'str',
        'rootcause2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actionrqd': 'actionrqd',
        'analysistyp': 'analysistyp',
        'analyst': 'analyst',
        'com': 'com',
        'condition': 'condition',
        'dttminspect': 'dttminspect',
        'durequip': 'durequip',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'material': 'material',
        'metallurgy': 'metallurgy',
        'partcost': 'partcost',
        'partdes': 'partdes',
        'partrefno': 'partrefno',
        'parttyp1': 'parttyp1',
        'parttyp2': 'parttyp2',
        'rootcause1': 'rootcause1',
        'rootcause2': 'rootcause2',
        'systag': 'systag'
    }

    def __init__(self, actionrqd=None, analysistyp=None, analyst=None, com=None, condition=None, dttminspect=None, durequip=None, idrec=None, idrecparent=None, idwell=None, material=None, metallurgy=None, partcost=None, partdes=None, partrefno=None, parttyp1=None, parttyp2=None, rootcause1=None, rootcause2=None, systag=None):  # noqa: E501
        """DetailedAnalysisData - a model defined in Swagger"""  # noqa: E501
        self._actionrqd = None
        self._analysistyp = None
        self._analyst = None
        self._com = None
        self._condition = None
        self._dttminspect = None
        self._durequip = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._material = None
        self._metallurgy = None
        self._partcost = None
        self._partdes = None
        self._partrefno = None
        self._parttyp1 = None
        self._parttyp2 = None
        self._rootcause1 = None
        self._rootcause2 = None
        self._systag = None
        self.discriminator = None
        if actionrqd is not None:
            self.actionrqd = actionrqd
        if analysistyp is not None:
            self.analysistyp = analysistyp
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if condition is not None:
            self.condition = condition
        if dttminspect is not None:
            self.dttminspect = dttminspect
        if durequip is not None:
            self.durequip = durequip
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if material is not None:
            self.material = material
        if metallurgy is not None:
            self.metallurgy = metallurgy
        if partcost is not None:
            self.partcost = partcost
        if partdes is not None:
            self.partdes = partdes
        if partrefno is not None:
            self.partrefno = partrefno
        if parttyp1 is not None:
            self.parttyp1 = parttyp1
        if parttyp2 is not None:
            self.parttyp2 = parttyp2
        if rootcause1 is not None:
            self.rootcause1 = rootcause1
        if rootcause2 is not None:
            self.rootcause2 = rootcause2
        if systag is not None:
            self.systag = systag

    @property
    def actionrqd(self):
        """Gets the actionrqd of this DetailedAnalysisData.  # noqa: E501


        :return: The actionrqd of this DetailedAnalysisData.  # noqa: E501
        :rtype: bool
        """
        return self._actionrqd

    @actionrqd.setter
    def actionrqd(self, actionrqd):
        """Sets the actionrqd of this DetailedAnalysisData.


        :param actionrqd: The actionrqd of this DetailedAnalysisData.  # noqa: E501
        :type: bool
        """

        self._actionrqd = actionrqd

    @property
    def analysistyp(self):
        """Gets the analysistyp of this DetailedAnalysisData.  # noqa: E501


        :return: The analysistyp of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._analysistyp

    @analysistyp.setter
    def analysistyp(self, analysistyp):
        """Sets the analysistyp of this DetailedAnalysisData.


        :param analysistyp: The analysistyp of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._analysistyp = analysistyp

    @property
    def analyst(self):
        """Gets the analyst of this DetailedAnalysisData.  # noqa: E501


        :return: The analyst of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this DetailedAnalysisData.


        :param analyst: The analyst of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this DetailedAnalysisData.  # noqa: E501


        :return: The com of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this DetailedAnalysisData.


        :param com: The com of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def condition(self):
        """Gets the condition of this DetailedAnalysisData.  # noqa: E501


        :return: The condition of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this DetailedAnalysisData.


        :param condition: The condition of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def dttminspect(self):
        """Gets the dttminspect of this DetailedAnalysisData.  # noqa: E501


        :return: The dttminspect of this DetailedAnalysisData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttminspect

    @dttminspect.setter
    def dttminspect(self, dttminspect):
        """Sets the dttminspect of this DetailedAnalysisData.


        :param dttminspect: The dttminspect of this DetailedAnalysisData.  # noqa: E501
        :type: datetime
        """

        self._dttminspect = dttminspect

    @property
    def durequip(self):
        """Gets the durequip of this DetailedAnalysisData.  # noqa: E501


        :return: The durequip of this DetailedAnalysisData.  # noqa: E501
        :rtype: float
        """
        return self._durequip

    @durequip.setter
    def durequip(self, durequip):
        """Sets the durequip of this DetailedAnalysisData.


        :param durequip: The durequip of this DetailedAnalysisData.  # noqa: E501
        :type: float
        """

        self._durequip = durequip

    @property
    def idrec(self):
        """Gets the idrec of this DetailedAnalysisData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DetailedAnalysisData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this DetailedAnalysisData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this DetailedAnalysisData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this DetailedAnalysisData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DetailedAnalysisData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def material(self):
        """Gets the material of this DetailedAnalysisData.  # noqa: E501


        :return: The material of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this DetailedAnalysisData.


        :param material: The material of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def metallurgy(self):
        """Gets the metallurgy of this DetailedAnalysisData.  # noqa: E501


        :return: The metallurgy of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._metallurgy

    @metallurgy.setter
    def metallurgy(self, metallurgy):
        """Sets the metallurgy of this DetailedAnalysisData.


        :param metallurgy: The metallurgy of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._metallurgy = metallurgy

    @property
    def partcost(self):
        """Gets the partcost of this DetailedAnalysisData.  # noqa: E501


        :return: The partcost of this DetailedAnalysisData.  # noqa: E501
        :rtype: float
        """
        return self._partcost

    @partcost.setter
    def partcost(self, partcost):
        """Sets the partcost of this DetailedAnalysisData.


        :param partcost: The partcost of this DetailedAnalysisData.  # noqa: E501
        :type: float
        """

        self._partcost = partcost

    @property
    def partdes(self):
        """Gets the partdes of this DetailedAnalysisData.  # noqa: E501


        :return: The partdes of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._partdes

    @partdes.setter
    def partdes(self, partdes):
        """Sets the partdes of this DetailedAnalysisData.


        :param partdes: The partdes of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._partdes = partdes

    @property
    def partrefno(self):
        """Gets the partrefno of this DetailedAnalysisData.  # noqa: E501


        :return: The partrefno of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._partrefno

    @partrefno.setter
    def partrefno(self, partrefno):
        """Sets the partrefno of this DetailedAnalysisData.


        :param partrefno: The partrefno of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._partrefno = partrefno

    @property
    def parttyp1(self):
        """Gets the parttyp1 of this DetailedAnalysisData.  # noqa: E501


        :return: The parttyp1 of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._parttyp1

    @parttyp1.setter
    def parttyp1(self, parttyp1):
        """Sets the parttyp1 of this DetailedAnalysisData.


        :param parttyp1: The parttyp1 of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._parttyp1 = parttyp1

    @property
    def parttyp2(self):
        """Gets the parttyp2 of this DetailedAnalysisData.  # noqa: E501


        :return: The parttyp2 of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._parttyp2

    @parttyp2.setter
    def parttyp2(self, parttyp2):
        """Sets the parttyp2 of this DetailedAnalysisData.


        :param parttyp2: The parttyp2 of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._parttyp2 = parttyp2

    @property
    def rootcause1(self):
        """Gets the rootcause1 of this DetailedAnalysisData.  # noqa: E501


        :return: The rootcause1 of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._rootcause1

    @rootcause1.setter
    def rootcause1(self, rootcause1):
        """Sets the rootcause1 of this DetailedAnalysisData.


        :param rootcause1: The rootcause1 of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._rootcause1 = rootcause1

    @property
    def rootcause2(self):
        """Gets the rootcause2 of this DetailedAnalysisData.  # noqa: E501


        :return: The rootcause2 of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._rootcause2

    @rootcause2.setter
    def rootcause2(self, rootcause2):
        """Sets the rootcause2 of this DetailedAnalysisData.


        :param rootcause2: The rootcause2 of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._rootcause2 = rootcause2

    @property
    def systag(self):
        """Gets the systag of this DetailedAnalysisData.  # noqa: E501


        :return: The systag of this DetailedAnalysisData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DetailedAnalysisData.


        :param systag: The systag of this DetailedAnalysisData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailedAnalysisData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedAnalysisData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
