# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ESPPumpData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activestgs': 'int',
        'hsngmat': 'str',
        'hsngstgs': 'int',
        'hydheaddesign': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'impellermat': 'str',
        'powerrating': 'float',
        'presindesign': 'float',
        'volratedesign': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'activestgs': 'activestgs',
        'hsngmat': 'hsngmat',
        'hsngstgs': 'hsngstgs',
        'hydheaddesign': 'hydheaddesign',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'impellermat': 'impellermat',
        'powerrating': 'powerrating',
        'presindesign': 'presindesign',
        'volratedesign': 'volratedesign',
        'systag': 'systag'
    }

    def __init__(self, activestgs=None, hsngmat=None, hsngstgs=None, hydheaddesign=None, idrec=None, idrecparent=None, idwell=None, impellermat=None, powerrating=None, presindesign=None, volratedesign=None, systag=None):  # noqa: E501
        """ESPPumpData - a model defined in Swagger"""  # noqa: E501
        self._activestgs = None
        self._hsngmat = None
        self._hsngstgs = None
        self._hydheaddesign = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._impellermat = None
        self._powerrating = None
        self._presindesign = None
        self._volratedesign = None
        self._systag = None
        self.discriminator = None
        if activestgs is not None:
            self.activestgs = activestgs
        if hsngmat is not None:
            self.hsngmat = hsngmat
        if hsngstgs is not None:
            self.hsngstgs = hsngstgs
        if hydheaddesign is not None:
            self.hydheaddesign = hydheaddesign
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if impellermat is not None:
            self.impellermat = impellermat
        if powerrating is not None:
            self.powerrating = powerrating
        if presindesign is not None:
            self.presindesign = presindesign
        if volratedesign is not None:
            self.volratedesign = volratedesign
        if systag is not None:
            self.systag = systag

    @property
    def activestgs(self):
        """Gets the activestgs of this ESPPumpData.  # noqa: E501


        :return: The activestgs of this ESPPumpData.  # noqa: E501
        :rtype: int
        """
        return self._activestgs

    @activestgs.setter
    def activestgs(self, activestgs):
        """Sets the activestgs of this ESPPumpData.


        :param activestgs: The activestgs of this ESPPumpData.  # noqa: E501
        :type: int
        """

        self._activestgs = activestgs

    @property
    def hsngmat(self):
        """Gets the hsngmat of this ESPPumpData.  # noqa: E501


        :return: The hsngmat of this ESPPumpData.  # noqa: E501
        :rtype: str
        """
        return self._hsngmat

    @hsngmat.setter
    def hsngmat(self, hsngmat):
        """Sets the hsngmat of this ESPPumpData.


        :param hsngmat: The hsngmat of this ESPPumpData.  # noqa: E501
        :type: str
        """

        self._hsngmat = hsngmat

    @property
    def hsngstgs(self):
        """Gets the hsngstgs of this ESPPumpData.  # noqa: E501


        :return: The hsngstgs of this ESPPumpData.  # noqa: E501
        :rtype: int
        """
        return self._hsngstgs

    @hsngstgs.setter
    def hsngstgs(self, hsngstgs):
        """Sets the hsngstgs of this ESPPumpData.


        :param hsngstgs: The hsngstgs of this ESPPumpData.  # noqa: E501
        :type: int
        """

        self._hsngstgs = hsngstgs

    @property
    def hydheaddesign(self):
        """Gets the hydheaddesign of this ESPPumpData.  # noqa: E501


        :return: The hydheaddesign of this ESPPumpData.  # noqa: E501
        :rtype: float
        """
        return self._hydheaddesign

    @hydheaddesign.setter
    def hydheaddesign(self, hydheaddesign):
        """Sets the hydheaddesign of this ESPPumpData.


        :param hydheaddesign: The hydheaddesign of this ESPPumpData.  # noqa: E501
        :type: float
        """

        self._hydheaddesign = hydheaddesign

    @property
    def idrec(self):
        """Gets the idrec of this ESPPumpData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ESPPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ESPPumpData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ESPPumpData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ESPPumpData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ESPPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ESPPumpData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ESPPumpData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ESPPumpData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ESPPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ESPPumpData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ESPPumpData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def impellermat(self):
        """Gets the impellermat of this ESPPumpData.  # noqa: E501


        :return: The impellermat of this ESPPumpData.  # noqa: E501
        :rtype: str
        """
        return self._impellermat

    @impellermat.setter
    def impellermat(self, impellermat):
        """Sets the impellermat of this ESPPumpData.


        :param impellermat: The impellermat of this ESPPumpData.  # noqa: E501
        :type: str
        """

        self._impellermat = impellermat

    @property
    def powerrating(self):
        """Gets the powerrating of this ESPPumpData.  # noqa: E501


        :return: The powerrating of this ESPPumpData.  # noqa: E501
        :rtype: float
        """
        return self._powerrating

    @powerrating.setter
    def powerrating(self, powerrating):
        """Sets the powerrating of this ESPPumpData.


        :param powerrating: The powerrating of this ESPPumpData.  # noqa: E501
        :type: float
        """

        self._powerrating = powerrating

    @property
    def presindesign(self):
        """Gets the presindesign of this ESPPumpData.  # noqa: E501


        :return: The presindesign of this ESPPumpData.  # noqa: E501
        :rtype: float
        """
        return self._presindesign

    @presindesign.setter
    def presindesign(self, presindesign):
        """Sets the presindesign of this ESPPumpData.


        :param presindesign: The presindesign of this ESPPumpData.  # noqa: E501
        :type: float
        """

        self._presindesign = presindesign

    @property
    def volratedesign(self):
        """Gets the volratedesign of this ESPPumpData.  # noqa: E501


        :return: The volratedesign of this ESPPumpData.  # noqa: E501
        :rtype: float
        """
        return self._volratedesign

    @volratedesign.setter
    def volratedesign(self, volratedesign):
        """Sets the volratedesign of this ESPPumpData.


        :param volratedesign: The volratedesign of this ESPPumpData.  # noqa: E501
        :type: float
        """

        self._volratedesign = volratedesign

    @property
    def systag(self):
        """Gets the systag of this ESPPumpData.  # noqa: E501


        :return: The systag of this ESPPumpData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ESPPumpData.


        :param systag: The systag of this ESPPumpData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESPPumpData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESPPumpData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
