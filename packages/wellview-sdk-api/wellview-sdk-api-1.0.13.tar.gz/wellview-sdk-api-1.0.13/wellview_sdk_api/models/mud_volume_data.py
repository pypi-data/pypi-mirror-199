# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MudVolumeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densitytankref': 'float',
        'depthref': 'float',
        'excludeactive': 'bool',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idrecjobrigtank': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'syscarryfwdp': 'bool',
        'system': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'voltyp': 'str',
        'volume': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'densitytankref': 'densitytankref',
        'depthref': 'depthref',
        'excludeactive': 'excludeactive',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idrecjobrigtank': 'idrecjobrigtank',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'syscarryfwdp': 'syscarryfwdp',
        'system': 'system',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'voltyp': 'voltyp',
        'volume': 'volume',
        'systag': 'systag'
    }

    def __init__(self, com=None, densitytankref=None, depthref=None, excludeactive=None, fluidtyp=None, idrec=None, idrecjobrigtank=None, idrecparent=None, idrecwellbore=None, idwell=None, syscarryfwdp=None, system=None, typ1=None, typ2=None, voltyp=None, volume=None, systag=None):  # noqa: E501
        """MudVolumeData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densitytankref = None
        self._depthref = None
        self._excludeactive = None
        self._fluidtyp = None
        self._idrec = None
        self._idrecjobrigtank = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._syscarryfwdp = None
        self._system = None
        self._typ1 = None
        self._typ2 = None
        self._voltyp = None
        self._volume = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densitytankref is not None:
            self.densitytankref = densitytankref
        if depthref is not None:
            self.depthref = depthref
        if excludeactive is not None:
            self.excludeactive = excludeactive
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idrecjobrigtank is not None:
            self.idrecjobrigtank = idrecjobrigtank
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if syscarryfwdp is not None:
            self.syscarryfwdp = syscarryfwdp
        if system is not None:
            self.system = system
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if voltyp is not None:
            self.voltyp = voltyp
        if volume is not None:
            self.volume = volume
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this MudVolumeData.  # noqa: E501


        :return: The com of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this MudVolumeData.


        :param com: The com of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densitytankref(self):
        """Gets the densitytankref of this MudVolumeData.  # noqa: E501


        :return: The densitytankref of this MudVolumeData.  # noqa: E501
        :rtype: float
        """
        return self._densitytankref

    @densitytankref.setter
    def densitytankref(self, densitytankref):
        """Sets the densitytankref of this MudVolumeData.


        :param densitytankref: The densitytankref of this MudVolumeData.  # noqa: E501
        :type: float
        """

        self._densitytankref = densitytankref

    @property
    def depthref(self):
        """Gets the depthref of this MudVolumeData.  # noqa: E501


        :return: The depthref of this MudVolumeData.  # noqa: E501
        :rtype: float
        """
        return self._depthref

    @depthref.setter
    def depthref(self, depthref):
        """Sets the depthref of this MudVolumeData.


        :param depthref: The depthref of this MudVolumeData.  # noqa: E501
        :type: float
        """

        self._depthref = depthref

    @property
    def excludeactive(self):
        """Gets the excludeactive of this MudVolumeData.  # noqa: E501


        :return: The excludeactive of this MudVolumeData.  # noqa: E501
        :rtype: bool
        """
        return self._excludeactive

    @excludeactive.setter
    def excludeactive(self, excludeactive):
        """Sets the excludeactive of this MudVolumeData.


        :param excludeactive: The excludeactive of this MudVolumeData.  # noqa: E501
        :type: bool
        """

        self._excludeactive = excludeactive

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this MudVolumeData.  # noqa: E501


        :return: The fluidtyp of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this MudVolumeData.


        :param fluidtyp: The fluidtyp of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this MudVolumeData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this MudVolumeData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobrigtank(self):
        """Gets the idrecjobrigtank of this MudVolumeData.  # noqa: E501


        :return: The idrecjobrigtank of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobrigtank

    @idrecjobrigtank.setter
    def idrecjobrigtank(self, idrecjobrigtank):
        """Sets the idrecjobrigtank of this MudVolumeData.


        :param idrecjobrigtank: The idrecjobrigtank of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._idrecjobrigtank = idrecjobrigtank

    @property
    def idrecparent(self):
        """Gets the idrecparent of this MudVolumeData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this MudVolumeData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this MudVolumeData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this MudVolumeData.  # noqa: E501


        :return: The idrecwellbore of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this MudVolumeData.


        :param idrecwellbore: The idrecwellbore of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this MudVolumeData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this MudVolumeData.

        id of well  # noqa: E501

        :param idwell: The idwell of this MudVolumeData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def syscarryfwdp(self):
        """Gets the syscarryfwdp of this MudVolumeData.  # noqa: E501


        :return: The syscarryfwdp of this MudVolumeData.  # noqa: E501
        :rtype: bool
        """
        return self._syscarryfwdp

    @syscarryfwdp.setter
    def syscarryfwdp(self, syscarryfwdp):
        """Sets the syscarryfwdp of this MudVolumeData.


        :param syscarryfwdp: The syscarryfwdp of this MudVolumeData.  # noqa: E501
        :type: bool
        """

        self._syscarryfwdp = syscarryfwdp

    @property
    def system(self):
        """Gets the system of this MudVolumeData.  # noqa: E501


        :return: The system of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this MudVolumeData.


        :param system: The system of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._system = system

    @property
    def typ1(self):
        """Gets the typ1 of this MudVolumeData.  # noqa: E501


        :return: The typ1 of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this MudVolumeData.


        :param typ1: The typ1 of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this MudVolumeData.  # noqa: E501


        :return: The typ2 of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this MudVolumeData.


        :param typ2: The typ2 of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def voltyp(self):
        """Gets the voltyp of this MudVolumeData.  # noqa: E501


        :return: The voltyp of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._voltyp

    @voltyp.setter
    def voltyp(self, voltyp):
        """Sets the voltyp of this MudVolumeData.


        :param voltyp: The voltyp of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._voltyp = voltyp

    @property
    def volume(self):
        """Gets the volume of this MudVolumeData.  # noqa: E501


        :return: The volume of this MudVolumeData.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MudVolumeData.


        :param volume: The volume of this MudVolumeData.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def systag(self):
        """Gets the systag of this MudVolumeData.  # noqa: E501


        :return: The systag of this MudVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this MudVolumeData.


        :param systag: The systag of this MudVolumeData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MudVolumeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MudVolumeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
