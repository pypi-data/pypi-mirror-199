# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RigsUnitsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchorlinetyp': 'str',
        'anchormaxtension': 'float',
        'anchorno': 'int',
        'anchortyp': 'str',
        'com': 'str',
        'contractor': 'str',
        'contractorparent': 'str',
        'contracttyp': 'str',
        'depthmax': 'float',
        'derricktyp': 'str',
        'drawworkmake': 'str',
        'drawworkmodel': 'str',
        'drawworktyp': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'heightmastclearance': 'float',
        'heightsubclear': 'float',
        'hookloadmax': 'float',
        'idrec': 'str',
        'idrecjobcontactcontractor': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'inventoryno': 'str',
        'lengthchokeline': 'float',
        'lengthkillline': 'float',
        'maxvariableload': 'float',
        'postyp': 'str',
        'power': 'float',
        'powertyp': 'str',
        'proposed': 'bool',
        'purpose': 'str',
        'refheight': 'float',
        'rigno': 'str',
        'rigrateref': 'float',
        'rotarysystem': 'str',
        'setbackcapacity': 'float',
        'slipjtextmax': 'float',
        'szidchokeline': 'float',
        'szidkillline': 'float',
        'torquemax': 'float',
        'transportloads': 'int',
        'typ1': 'str',
        'typ2': 'str',
        'volsurfline': 'float',
        'waterdepthmax': 'float',
        'weightblock': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'anchorlinetyp': 'anchorlinetyp',
        'anchormaxtension': 'anchormaxtension',
        'anchorno': 'anchorno',
        'anchortyp': 'anchortyp',
        'com': 'com',
        'contractor': 'contractor',
        'contractorparent': 'contractorparent',
        'contracttyp': 'contracttyp',
        'depthmax': 'depthmax',
        'derricktyp': 'derricktyp',
        'drawworkmake': 'drawworkmake',
        'drawworkmodel': 'drawworkmodel',
        'drawworktyp': 'drawworktyp',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'heightmastclearance': 'heightmastclearance',
        'heightsubclear': 'heightsubclear',
        'hookloadmax': 'hookloadmax',
        'idrec': 'idrec',
        'idrecjobcontactcontractor': 'idrecjobcontactcontractor',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'inventoryno': 'inventoryno',
        'lengthchokeline': 'lengthchokeline',
        'lengthkillline': 'lengthkillline',
        'maxvariableload': 'maxvariableload',
        'postyp': 'postyp',
        'power': 'power',
        'powertyp': 'powertyp',
        'proposed': 'proposed',
        'purpose': 'purpose',
        'refheight': 'refheight',
        'rigno': 'rigno',
        'rigrateref': 'rigrateref',
        'rotarysystem': 'rotarysystem',
        'setbackcapacity': 'setbackcapacity',
        'slipjtextmax': 'slipjtextmax',
        'szidchokeline': 'szidchokeline',
        'szidkillline': 'szidkillline',
        'torquemax': 'torquemax',
        'transportloads': 'transportloads',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'volsurfline': 'volsurfline',
        'waterdepthmax': 'waterdepthmax',
        'weightblock': 'weightblock',
        'systag': 'systag'
    }

    def __init__(self, anchorlinetyp=None, anchormaxtension=None, anchorno=None, anchortyp=None, com=None, contractor=None, contractorparent=None, contracttyp=None, depthmax=None, derricktyp=None, drawworkmake=None, drawworkmodel=None, drawworktyp=None, dttmend=None, dttmstart=None, heightmastclearance=None, heightsubclear=None, hookloadmax=None, idrec=None, idrecjobcontactcontractor=None, idrecparent=None, idwell=None, inventoryno=None, lengthchokeline=None, lengthkillline=None, maxvariableload=None, postyp=None, power=None, powertyp=None, proposed=None, purpose=None, refheight=None, rigno=None, rigrateref=None, rotarysystem=None, setbackcapacity=None, slipjtextmax=None, szidchokeline=None, szidkillline=None, torquemax=None, transportloads=None, typ1=None, typ2=None, volsurfline=None, waterdepthmax=None, weightblock=None, systag=None):  # noqa: E501
        """RigsUnitsData - a model defined in Swagger"""  # noqa: E501
        self._anchorlinetyp = None
        self._anchormaxtension = None
        self._anchorno = None
        self._anchortyp = None
        self._com = None
        self._contractor = None
        self._contractorparent = None
        self._contracttyp = None
        self._depthmax = None
        self._derricktyp = None
        self._drawworkmake = None
        self._drawworkmodel = None
        self._drawworktyp = None
        self._dttmend = None
        self._dttmstart = None
        self._heightmastclearance = None
        self._heightsubclear = None
        self._hookloadmax = None
        self._idrec = None
        self._idrecjobcontactcontractor = None
        self._idrecparent = None
        self._idwell = None
        self._inventoryno = None
        self._lengthchokeline = None
        self._lengthkillline = None
        self._maxvariableload = None
        self._postyp = None
        self._power = None
        self._powertyp = None
        self._proposed = None
        self._purpose = None
        self._refheight = None
        self._rigno = None
        self._rigrateref = None
        self._rotarysystem = None
        self._setbackcapacity = None
        self._slipjtextmax = None
        self._szidchokeline = None
        self._szidkillline = None
        self._torquemax = None
        self._transportloads = None
        self._typ1 = None
        self._typ2 = None
        self._volsurfline = None
        self._waterdepthmax = None
        self._weightblock = None
        self._systag = None
        self.discriminator = None
        if anchorlinetyp is not None:
            self.anchorlinetyp = anchorlinetyp
        if anchormaxtension is not None:
            self.anchormaxtension = anchormaxtension
        if anchorno is not None:
            self.anchorno = anchorno
        if anchortyp is not None:
            self.anchortyp = anchortyp
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if contractorparent is not None:
            self.contractorparent = contractorparent
        if contracttyp is not None:
            self.contracttyp = contracttyp
        if depthmax is not None:
            self.depthmax = depthmax
        if derricktyp is not None:
            self.derricktyp = derricktyp
        if drawworkmake is not None:
            self.drawworkmake = drawworkmake
        if drawworkmodel is not None:
            self.drawworkmodel = drawworkmodel
        if drawworktyp is not None:
            self.drawworktyp = drawworktyp
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if heightmastclearance is not None:
            self.heightmastclearance = heightmastclearance
        if heightsubclear is not None:
            self.heightsubclear = heightsubclear
        if hookloadmax is not None:
            self.hookloadmax = hookloadmax
        if idrec is not None:
            self.idrec = idrec
        if idrecjobcontactcontractor is not None:
            self.idrecjobcontactcontractor = idrecjobcontactcontractor
        self.idrecparent = idrecparent
        self.idwell = idwell
        if inventoryno is not None:
            self.inventoryno = inventoryno
        if lengthchokeline is not None:
            self.lengthchokeline = lengthchokeline
        if lengthkillline is not None:
            self.lengthkillline = lengthkillline
        if maxvariableload is not None:
            self.maxvariableload = maxvariableload
        if postyp is not None:
            self.postyp = postyp
        if power is not None:
            self.power = power
        if powertyp is not None:
            self.powertyp = powertyp
        if proposed is not None:
            self.proposed = proposed
        if purpose is not None:
            self.purpose = purpose
        if refheight is not None:
            self.refheight = refheight
        if rigno is not None:
            self.rigno = rigno
        if rigrateref is not None:
            self.rigrateref = rigrateref
        if rotarysystem is not None:
            self.rotarysystem = rotarysystem
        if setbackcapacity is not None:
            self.setbackcapacity = setbackcapacity
        if slipjtextmax is not None:
            self.slipjtextmax = slipjtextmax
        if szidchokeline is not None:
            self.szidchokeline = szidchokeline
        if szidkillline is not None:
            self.szidkillline = szidkillline
        if torquemax is not None:
            self.torquemax = torquemax
        if transportloads is not None:
            self.transportloads = transportloads
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if volsurfline is not None:
            self.volsurfline = volsurfline
        if waterdepthmax is not None:
            self.waterdepthmax = waterdepthmax
        if weightblock is not None:
            self.weightblock = weightblock
        if systag is not None:
            self.systag = systag

    @property
    def anchorlinetyp(self):
        """Gets the anchorlinetyp of this RigsUnitsData.  # noqa: E501


        :return: The anchorlinetyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._anchorlinetyp

    @anchorlinetyp.setter
    def anchorlinetyp(self, anchorlinetyp):
        """Sets the anchorlinetyp of this RigsUnitsData.


        :param anchorlinetyp: The anchorlinetyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._anchorlinetyp = anchorlinetyp

    @property
    def anchormaxtension(self):
        """Gets the anchormaxtension of this RigsUnitsData.  # noqa: E501


        :return: The anchormaxtension of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._anchormaxtension

    @anchormaxtension.setter
    def anchormaxtension(self, anchormaxtension):
        """Sets the anchormaxtension of this RigsUnitsData.


        :param anchormaxtension: The anchormaxtension of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._anchormaxtension = anchormaxtension

    @property
    def anchorno(self):
        """Gets the anchorno of this RigsUnitsData.  # noqa: E501


        :return: The anchorno of this RigsUnitsData.  # noqa: E501
        :rtype: int
        """
        return self._anchorno

    @anchorno.setter
    def anchorno(self, anchorno):
        """Sets the anchorno of this RigsUnitsData.


        :param anchorno: The anchorno of this RigsUnitsData.  # noqa: E501
        :type: int
        """

        self._anchorno = anchorno

    @property
    def anchortyp(self):
        """Gets the anchortyp of this RigsUnitsData.  # noqa: E501


        :return: The anchortyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._anchortyp

    @anchortyp.setter
    def anchortyp(self, anchortyp):
        """Sets the anchortyp of this RigsUnitsData.


        :param anchortyp: The anchortyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._anchortyp = anchortyp

    @property
    def com(self):
        """Gets the com of this RigsUnitsData.  # noqa: E501


        :return: The com of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this RigsUnitsData.


        :param com: The com of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this RigsUnitsData.  # noqa: E501


        :return: The contractor of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this RigsUnitsData.


        :param contractor: The contractor of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def contractorparent(self):
        """Gets the contractorparent of this RigsUnitsData.  # noqa: E501


        :return: The contractorparent of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._contractorparent

    @contractorparent.setter
    def contractorparent(self, contractorparent):
        """Sets the contractorparent of this RigsUnitsData.


        :param contractorparent: The contractorparent of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._contractorparent = contractorparent

    @property
    def contracttyp(self):
        """Gets the contracttyp of this RigsUnitsData.  # noqa: E501


        :return: The contracttyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._contracttyp

    @contracttyp.setter
    def contracttyp(self, contracttyp):
        """Sets the contracttyp of this RigsUnitsData.


        :param contracttyp: The contracttyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._contracttyp = contracttyp

    @property
    def depthmax(self):
        """Gets the depthmax of this RigsUnitsData.  # noqa: E501


        :return: The depthmax of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._depthmax

    @depthmax.setter
    def depthmax(self, depthmax):
        """Sets the depthmax of this RigsUnitsData.


        :param depthmax: The depthmax of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._depthmax = depthmax

    @property
    def derricktyp(self):
        """Gets the derricktyp of this RigsUnitsData.  # noqa: E501


        :return: The derricktyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._derricktyp

    @derricktyp.setter
    def derricktyp(self, derricktyp):
        """Sets the derricktyp of this RigsUnitsData.


        :param derricktyp: The derricktyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._derricktyp = derricktyp

    @property
    def drawworkmake(self):
        """Gets the drawworkmake of this RigsUnitsData.  # noqa: E501


        :return: The drawworkmake of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._drawworkmake

    @drawworkmake.setter
    def drawworkmake(self, drawworkmake):
        """Sets the drawworkmake of this RigsUnitsData.


        :param drawworkmake: The drawworkmake of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._drawworkmake = drawworkmake

    @property
    def drawworkmodel(self):
        """Gets the drawworkmodel of this RigsUnitsData.  # noqa: E501


        :return: The drawworkmodel of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._drawworkmodel

    @drawworkmodel.setter
    def drawworkmodel(self, drawworkmodel):
        """Sets the drawworkmodel of this RigsUnitsData.


        :param drawworkmodel: The drawworkmodel of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._drawworkmodel = drawworkmodel

    @property
    def drawworktyp(self):
        """Gets the drawworktyp of this RigsUnitsData.  # noqa: E501


        :return: The drawworktyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._drawworktyp

    @drawworktyp.setter
    def drawworktyp(self, drawworktyp):
        """Sets the drawworktyp of this RigsUnitsData.


        :param drawworktyp: The drawworktyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._drawworktyp = drawworktyp

    @property
    def dttmend(self):
        """Gets the dttmend of this RigsUnitsData.  # noqa: E501


        :return: The dttmend of this RigsUnitsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this RigsUnitsData.


        :param dttmend: The dttmend of this RigsUnitsData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this RigsUnitsData.  # noqa: E501


        :return: The dttmstart of this RigsUnitsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this RigsUnitsData.


        :param dttmstart: The dttmstart of this RigsUnitsData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def heightmastclearance(self):
        """Gets the heightmastclearance of this RigsUnitsData.  # noqa: E501


        :return: The heightmastclearance of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._heightmastclearance

    @heightmastclearance.setter
    def heightmastclearance(self, heightmastclearance):
        """Sets the heightmastclearance of this RigsUnitsData.


        :param heightmastclearance: The heightmastclearance of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._heightmastclearance = heightmastclearance

    @property
    def heightsubclear(self):
        """Gets the heightsubclear of this RigsUnitsData.  # noqa: E501


        :return: The heightsubclear of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._heightsubclear

    @heightsubclear.setter
    def heightsubclear(self, heightsubclear):
        """Sets the heightsubclear of this RigsUnitsData.


        :param heightsubclear: The heightsubclear of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._heightsubclear = heightsubclear

    @property
    def hookloadmax(self):
        """Gets the hookloadmax of this RigsUnitsData.  # noqa: E501


        :return: The hookloadmax of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._hookloadmax

    @hookloadmax.setter
    def hookloadmax(self, hookloadmax):
        """Sets the hookloadmax of this RigsUnitsData.


        :param hookloadmax: The hookloadmax of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._hookloadmax = hookloadmax

    @property
    def idrec(self):
        """Gets the idrec of this RigsUnitsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RigsUnitsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobcontactcontractor(self):
        """Gets the idrecjobcontactcontractor of this RigsUnitsData.  # noqa: E501


        :return: The idrecjobcontactcontractor of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobcontactcontractor

    @idrecjobcontactcontractor.setter
    def idrecjobcontactcontractor(self, idrecjobcontactcontractor):
        """Sets the idrecjobcontactcontractor of this RigsUnitsData.


        :param idrecjobcontactcontractor: The idrecjobcontactcontractor of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._idrecjobcontactcontractor = idrecjobcontactcontractor

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RigsUnitsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RigsUnitsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this RigsUnitsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this RigsUnitsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RigsUnitsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RigsUnitsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def inventoryno(self):
        """Gets the inventoryno of this RigsUnitsData.  # noqa: E501


        :return: The inventoryno of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._inventoryno

    @inventoryno.setter
    def inventoryno(self, inventoryno):
        """Sets the inventoryno of this RigsUnitsData.


        :param inventoryno: The inventoryno of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._inventoryno = inventoryno

    @property
    def lengthchokeline(self):
        """Gets the lengthchokeline of this RigsUnitsData.  # noqa: E501


        :return: The lengthchokeline of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._lengthchokeline

    @lengthchokeline.setter
    def lengthchokeline(self, lengthchokeline):
        """Sets the lengthchokeline of this RigsUnitsData.


        :param lengthchokeline: The lengthchokeline of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._lengthchokeline = lengthchokeline

    @property
    def lengthkillline(self):
        """Gets the lengthkillline of this RigsUnitsData.  # noqa: E501


        :return: The lengthkillline of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._lengthkillline

    @lengthkillline.setter
    def lengthkillline(self, lengthkillline):
        """Sets the lengthkillline of this RigsUnitsData.


        :param lengthkillline: The lengthkillline of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._lengthkillline = lengthkillline

    @property
    def maxvariableload(self):
        """Gets the maxvariableload of this RigsUnitsData.  # noqa: E501


        :return: The maxvariableload of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._maxvariableload

    @maxvariableload.setter
    def maxvariableload(self, maxvariableload):
        """Sets the maxvariableload of this RigsUnitsData.


        :param maxvariableload: The maxvariableload of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._maxvariableload = maxvariableload

    @property
    def postyp(self):
        """Gets the postyp of this RigsUnitsData.  # noqa: E501


        :return: The postyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._postyp

    @postyp.setter
    def postyp(self, postyp):
        """Sets the postyp of this RigsUnitsData.


        :param postyp: The postyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._postyp = postyp

    @property
    def power(self):
        """Gets the power of this RigsUnitsData.  # noqa: E501


        :return: The power of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this RigsUnitsData.


        :param power: The power of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._power = power

    @property
    def powertyp(self):
        """Gets the powertyp of this RigsUnitsData.  # noqa: E501


        :return: The powertyp of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._powertyp

    @powertyp.setter
    def powertyp(self, powertyp):
        """Sets the powertyp of this RigsUnitsData.


        :param powertyp: The powertyp of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._powertyp = powertyp

    @property
    def proposed(self):
        """Gets the proposed of this RigsUnitsData.  # noqa: E501


        :return: The proposed of this RigsUnitsData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this RigsUnitsData.


        :param proposed: The proposed of this RigsUnitsData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def purpose(self):
        """Gets the purpose of this RigsUnitsData.  # noqa: E501


        :return: The purpose of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this RigsUnitsData.


        :param purpose: The purpose of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def refheight(self):
        """Gets the refheight of this RigsUnitsData.  # noqa: E501


        :return: The refheight of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._refheight

    @refheight.setter
    def refheight(self, refheight):
        """Sets the refheight of this RigsUnitsData.


        :param refheight: The refheight of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._refheight = refheight

    @property
    def rigno(self):
        """Gets the rigno of this RigsUnitsData.  # noqa: E501


        :return: The rigno of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._rigno

    @rigno.setter
    def rigno(self, rigno):
        """Sets the rigno of this RigsUnitsData.


        :param rigno: The rigno of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._rigno = rigno

    @property
    def rigrateref(self):
        """Gets the rigrateref of this RigsUnitsData.  # noqa: E501


        :return: The rigrateref of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._rigrateref

    @rigrateref.setter
    def rigrateref(self, rigrateref):
        """Sets the rigrateref of this RigsUnitsData.


        :param rigrateref: The rigrateref of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._rigrateref = rigrateref

    @property
    def rotarysystem(self):
        """Gets the rotarysystem of this RigsUnitsData.  # noqa: E501


        :return: The rotarysystem of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._rotarysystem

    @rotarysystem.setter
    def rotarysystem(self, rotarysystem):
        """Sets the rotarysystem of this RigsUnitsData.


        :param rotarysystem: The rotarysystem of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._rotarysystem = rotarysystem

    @property
    def setbackcapacity(self):
        """Gets the setbackcapacity of this RigsUnitsData.  # noqa: E501


        :return: The setbackcapacity of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._setbackcapacity

    @setbackcapacity.setter
    def setbackcapacity(self, setbackcapacity):
        """Sets the setbackcapacity of this RigsUnitsData.


        :param setbackcapacity: The setbackcapacity of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._setbackcapacity = setbackcapacity

    @property
    def slipjtextmax(self):
        """Gets the slipjtextmax of this RigsUnitsData.  # noqa: E501


        :return: The slipjtextmax of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._slipjtextmax

    @slipjtextmax.setter
    def slipjtextmax(self, slipjtextmax):
        """Sets the slipjtextmax of this RigsUnitsData.


        :param slipjtextmax: The slipjtextmax of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._slipjtextmax = slipjtextmax

    @property
    def szidchokeline(self):
        """Gets the szidchokeline of this RigsUnitsData.  # noqa: E501


        :return: The szidchokeline of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._szidchokeline

    @szidchokeline.setter
    def szidchokeline(self, szidchokeline):
        """Sets the szidchokeline of this RigsUnitsData.


        :param szidchokeline: The szidchokeline of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._szidchokeline = szidchokeline

    @property
    def szidkillline(self):
        """Gets the szidkillline of this RigsUnitsData.  # noqa: E501


        :return: The szidkillline of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._szidkillline

    @szidkillline.setter
    def szidkillline(self, szidkillline):
        """Sets the szidkillline of this RigsUnitsData.


        :param szidkillline: The szidkillline of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._szidkillline = szidkillline

    @property
    def torquemax(self):
        """Gets the torquemax of this RigsUnitsData.  # noqa: E501


        :return: The torquemax of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._torquemax

    @torquemax.setter
    def torquemax(self, torquemax):
        """Sets the torquemax of this RigsUnitsData.


        :param torquemax: The torquemax of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._torquemax = torquemax

    @property
    def transportloads(self):
        """Gets the transportloads of this RigsUnitsData.  # noqa: E501


        :return: The transportloads of this RigsUnitsData.  # noqa: E501
        :rtype: int
        """
        return self._transportloads

    @transportloads.setter
    def transportloads(self, transportloads):
        """Sets the transportloads of this RigsUnitsData.


        :param transportloads: The transportloads of this RigsUnitsData.  # noqa: E501
        :type: int
        """

        self._transportloads = transportloads

    @property
    def typ1(self):
        """Gets the typ1 of this RigsUnitsData.  # noqa: E501


        :return: The typ1 of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this RigsUnitsData.


        :param typ1: The typ1 of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this RigsUnitsData.  # noqa: E501


        :return: The typ2 of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this RigsUnitsData.


        :param typ2: The typ2 of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def volsurfline(self):
        """Gets the volsurfline of this RigsUnitsData.  # noqa: E501


        :return: The volsurfline of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._volsurfline

    @volsurfline.setter
    def volsurfline(self, volsurfline):
        """Sets the volsurfline of this RigsUnitsData.


        :param volsurfline: The volsurfline of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._volsurfline = volsurfline

    @property
    def waterdepthmax(self):
        """Gets the waterdepthmax of this RigsUnitsData.  # noqa: E501


        :return: The waterdepthmax of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._waterdepthmax

    @waterdepthmax.setter
    def waterdepthmax(self, waterdepthmax):
        """Sets the waterdepthmax of this RigsUnitsData.


        :param waterdepthmax: The waterdepthmax of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._waterdepthmax = waterdepthmax

    @property
    def weightblock(self):
        """Gets the weightblock of this RigsUnitsData.  # noqa: E501


        :return: The weightblock of this RigsUnitsData.  # noqa: E501
        :rtype: float
        """
        return self._weightblock

    @weightblock.setter
    def weightblock(self, weightblock):
        """Sets the weightblock of this RigsUnitsData.


        :param weightblock: The weightblock of this RigsUnitsData.  # noqa: E501
        :type: float
        """

        self._weightblock = weightblock

    @property
    def systag(self):
        """Gets the systag of this RigsUnitsData.  # noqa: E501


        :return: The systag of this RigsUnitsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RigsUnitsData.


        :param systag: The systag of this RigsUnitsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RigsUnitsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RigsUnitsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
