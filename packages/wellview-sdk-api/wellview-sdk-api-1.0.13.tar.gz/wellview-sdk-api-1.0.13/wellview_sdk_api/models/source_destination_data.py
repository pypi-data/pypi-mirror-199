# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SourceDestinationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'des': 'str',
        'diversionauth': 'str',
        'diversiontyp1': 'str',
        'diversiontyp2': 'str',
        'dttmlicenseend': 'datetime',
        'dttmlicensestart': 'datetime',
        'geologicaldes': 'str',
        'idrec': 'str',
        'idrecsvsite': 'str',
        'idrecsvwatersource': 'str',
        'idrecsvwatersourcedetail': 'str',
        'idwell': 'str',
        'licenseno': 'str',
        'ratediversionmax': 'float',
        'refid': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'des': 'des',
        'diversionauth': 'diversionauth',
        'diversiontyp1': 'diversiontyp1',
        'diversiontyp2': 'diversiontyp2',
        'dttmlicenseend': 'dttmlicenseend',
        'dttmlicensestart': 'dttmlicensestart',
        'geologicaldes': 'geologicaldes',
        'idrec': 'idrec',
        'idrecsvsite': 'idrecsvsite',
        'idrecsvwatersource': 'idrecsvwatersource',
        'idrecsvwatersourcedetail': 'idrecsvwatersourcedetail',
        'idwell': 'idwell',
        'licenseno': 'licenseno',
        'ratediversionmax': 'ratediversionmax',
        'refid': 'refid',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, com=None, des=None, diversionauth=None, diversiontyp1=None, diversiontyp2=None, dttmlicenseend=None, dttmlicensestart=None, geologicaldes=None, idrec=None, idrecsvsite=None, idrecsvwatersource=None, idrecsvwatersourcedetail=None, idwell=None, licenseno=None, ratediversionmax=None, refid=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """SourceDestinationData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._des = None
        self._diversionauth = None
        self._diversiontyp1 = None
        self._diversiontyp2 = None
        self._dttmlicenseend = None
        self._dttmlicensestart = None
        self._geologicaldes = None
        self._idrec = None
        self._idrecsvsite = None
        self._idrecsvwatersource = None
        self._idrecsvwatersourcedetail = None
        self._idwell = None
        self._licenseno = None
        self._ratediversionmax = None
        self._refid = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if diversionauth is not None:
            self.diversionauth = diversionauth
        if diversiontyp1 is not None:
            self.diversiontyp1 = diversiontyp1
        if diversiontyp2 is not None:
            self.diversiontyp2 = diversiontyp2
        if dttmlicenseend is not None:
            self.dttmlicenseend = dttmlicenseend
        if dttmlicensestart is not None:
            self.dttmlicensestart = dttmlicensestart
        if geologicaldes is not None:
            self.geologicaldes = geologicaldes
        if idrec is not None:
            self.idrec = idrec
        if idrecsvsite is not None:
            self.idrecsvsite = idrecsvsite
        if idrecsvwatersource is not None:
            self.idrecsvwatersource = idrecsvwatersource
        if idrecsvwatersourcedetail is not None:
            self.idrecsvwatersourcedetail = idrecsvwatersourcedetail
        self.idwell = idwell
        if licenseno is not None:
            self.licenseno = licenseno
        if ratediversionmax is not None:
            self.ratediversionmax = ratediversionmax
        if refid is not None:
            self.refid = refid
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this SourceDestinationData.  # noqa: E501


        :return: The com of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SourceDestinationData.


        :param com: The com of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this SourceDestinationData.  # noqa: E501


        :return: The des of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this SourceDestinationData.


        :param des: The des of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def diversionauth(self):
        """Gets the diversionauth of this SourceDestinationData.  # noqa: E501


        :return: The diversionauth of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._diversionauth

    @diversionauth.setter
    def diversionauth(self, diversionauth):
        """Sets the diversionauth of this SourceDestinationData.


        :param diversionauth: The diversionauth of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._diversionauth = diversionauth

    @property
    def diversiontyp1(self):
        """Gets the diversiontyp1 of this SourceDestinationData.  # noqa: E501


        :return: The diversiontyp1 of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._diversiontyp1

    @diversiontyp1.setter
    def diversiontyp1(self, diversiontyp1):
        """Sets the diversiontyp1 of this SourceDestinationData.


        :param diversiontyp1: The diversiontyp1 of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._diversiontyp1 = diversiontyp1

    @property
    def diversiontyp2(self):
        """Gets the diversiontyp2 of this SourceDestinationData.  # noqa: E501


        :return: The diversiontyp2 of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._diversiontyp2

    @diversiontyp2.setter
    def diversiontyp2(self, diversiontyp2):
        """Sets the diversiontyp2 of this SourceDestinationData.


        :param diversiontyp2: The diversiontyp2 of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._diversiontyp2 = diversiontyp2

    @property
    def dttmlicenseend(self):
        """Gets the dttmlicenseend of this SourceDestinationData.  # noqa: E501


        :return: The dttmlicenseend of this SourceDestinationData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlicenseend

    @dttmlicenseend.setter
    def dttmlicenseend(self, dttmlicenseend):
        """Sets the dttmlicenseend of this SourceDestinationData.


        :param dttmlicenseend: The dttmlicenseend of this SourceDestinationData.  # noqa: E501
        :type: datetime
        """

        self._dttmlicenseend = dttmlicenseend

    @property
    def dttmlicensestart(self):
        """Gets the dttmlicensestart of this SourceDestinationData.  # noqa: E501


        :return: The dttmlicensestart of this SourceDestinationData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlicensestart

    @dttmlicensestart.setter
    def dttmlicensestart(self, dttmlicensestart):
        """Sets the dttmlicensestart of this SourceDestinationData.


        :param dttmlicensestart: The dttmlicensestart of this SourceDestinationData.  # noqa: E501
        :type: datetime
        """

        self._dttmlicensestart = dttmlicensestart

    @property
    def geologicaldes(self):
        """Gets the geologicaldes of this SourceDestinationData.  # noqa: E501


        :return: The geologicaldes of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._geologicaldes

    @geologicaldes.setter
    def geologicaldes(self, geologicaldes):
        """Sets the geologicaldes of this SourceDestinationData.


        :param geologicaldes: The geologicaldes of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._geologicaldes = geologicaldes

    @property
    def idrec(self):
        """Gets the idrec of this SourceDestinationData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SourceDestinationData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecsvsite(self):
        """Gets the idrecsvsite of this SourceDestinationData.  # noqa: E501


        :return: The idrecsvsite of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvsite

    @idrecsvsite.setter
    def idrecsvsite(self, idrecsvsite):
        """Sets the idrecsvsite of this SourceDestinationData.


        :param idrecsvsite: The idrecsvsite of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._idrecsvsite = idrecsvsite

    @property
    def idrecsvwatersource(self):
        """Gets the idrecsvwatersource of this SourceDestinationData.  # noqa: E501


        :return: The idrecsvwatersource of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvwatersource

    @idrecsvwatersource.setter
    def idrecsvwatersource(self, idrecsvwatersource):
        """Sets the idrecsvwatersource of this SourceDestinationData.


        :param idrecsvwatersource: The idrecsvwatersource of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._idrecsvwatersource = idrecsvwatersource

    @property
    def idrecsvwatersourcedetail(self):
        """Gets the idrecsvwatersourcedetail of this SourceDestinationData.  # noqa: E501


        :return: The idrecsvwatersourcedetail of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecsvwatersourcedetail

    @idrecsvwatersourcedetail.setter
    def idrecsvwatersourcedetail(self, idrecsvwatersourcedetail):
        """Sets the idrecsvwatersourcedetail of this SourceDestinationData.


        :param idrecsvwatersourcedetail: The idrecsvwatersourcedetail of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._idrecsvwatersourcedetail = idrecsvwatersourcedetail

    @property
    def idwell(self):
        """Gets the idwell of this SourceDestinationData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SourceDestinationData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SourceDestinationData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def licenseno(self):
        """Gets the licenseno of this SourceDestinationData.  # noqa: E501


        :return: The licenseno of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._licenseno

    @licenseno.setter
    def licenseno(self, licenseno):
        """Sets the licenseno of this SourceDestinationData.


        :param licenseno: The licenseno of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._licenseno = licenseno

    @property
    def ratediversionmax(self):
        """Gets the ratediversionmax of this SourceDestinationData.  # noqa: E501


        :return: The ratediversionmax of this SourceDestinationData.  # noqa: E501
        :rtype: float
        """
        return self._ratediversionmax

    @ratediversionmax.setter
    def ratediversionmax(self, ratediversionmax):
        """Sets the ratediversionmax of this SourceDestinationData.


        :param ratediversionmax: The ratediversionmax of this SourceDestinationData.  # noqa: E501
        :type: float
        """

        self._ratediversionmax = ratediversionmax

    @property
    def refid(self):
        """Gets the refid of this SourceDestinationData.  # noqa: E501


        :return: The refid of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this SourceDestinationData.


        :param refid: The refid of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def typ1(self):
        """Gets the typ1 of this SourceDestinationData.  # noqa: E501


        :return: The typ1 of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this SourceDestinationData.


        :param typ1: The typ1 of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this SourceDestinationData.  # noqa: E501


        :return: The typ2 of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this SourceDestinationData.


        :param typ2: The typ2 of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this SourceDestinationData.  # noqa: E501


        :return: The systag of this SourceDestinationData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SourceDestinationData.


        :param systag: The systag of this SourceDestinationData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SourceDestinationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SourceDestinationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
