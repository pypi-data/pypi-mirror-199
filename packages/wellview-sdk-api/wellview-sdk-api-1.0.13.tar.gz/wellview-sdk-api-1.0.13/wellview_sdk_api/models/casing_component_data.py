# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CasingComponentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'compsubtyp': 'str',
        'connszbtm': 'float',
        'connsztop': 'float',
        'conntgtperfbtm': 'str',
        'conntgtperftop': 'str',
        'connthrdbtm': 'str',
        'connthrdtop': 'str',
        'conntypbtm': 'str',
        'conntyptop': 'str',
        'cost': 'float',
        'costunitlabel': 'str',
        'depthtopcorrected': 'float',
        'des': 'str',
        'dttmmanufacture': 'datetime',
        'grade': 'str',
        'heatrating': 'str',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'joints': 'int',
        'length': 'float',
        'make': 'str',
        'material': 'str',
        'model': 'str',
        'presaxialinner': 'float',
        'presaxialouter': 'float',
        'presburst': 'float',
        'prescollapse': 'float',
        'refid': 'str',
        'sn': 'str',
        'szdrift': 'float',
        'szidnom': 'float',
        'szodmax': 'float',
        'szodnom': 'float',
        'tensilemax': 'float',
        'torquemax': 'float',
        'torquemin': 'float',
        'upsetbtm': 'str',
        'upsettop': 'str',
        'usedclass': 'str',
        'wtperlength': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'compsubtyp': 'compsubtyp',
        'connszbtm': 'connszbtm',
        'connsztop': 'connsztop',
        'conntgtperfbtm': 'conntgtperfbtm',
        'conntgtperftop': 'conntgtperftop',
        'connthrdbtm': 'connthrdbtm',
        'connthrdtop': 'connthrdtop',
        'conntypbtm': 'conntypbtm',
        'conntyptop': 'conntyptop',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'depthtopcorrected': 'depthtopcorrected',
        'des': 'des',
        'dttmmanufacture': 'dttmmanufacture',
        'grade': 'grade',
        'heatrating': 'heatrating',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'joints': 'joints',
        'length': 'length',
        'make': 'make',
        'material': 'material',
        'model': 'model',
        'presaxialinner': 'presaxialinner',
        'presaxialouter': 'presaxialouter',
        'presburst': 'presburst',
        'prescollapse': 'prescollapse',
        'refid': 'refid',
        'sn': 'sn',
        'szdrift': 'szdrift',
        'szidnom': 'szidnom',
        'szodmax': 'szodmax',
        'szodnom': 'szodnom',
        'tensilemax': 'tensilemax',
        'torquemax': 'torquemax',
        'torquemin': 'torquemin',
        'upsetbtm': 'upsetbtm',
        'upsettop': 'upsettop',
        'usedclass': 'usedclass',
        'wtperlength': 'wtperlength',
        'systag': 'systag'
    }

    def __init__(self, com=None, compsubtyp=None, connszbtm=None, connsztop=None, conntgtperfbtm=None, conntgtperftop=None, connthrdbtm=None, connthrdtop=None, conntypbtm=None, conntyptop=None, cost=None, costunitlabel=None, depthtopcorrected=None, des=None, dttmmanufacture=None, grade=None, heatrating=None, iconname=None, idrec=None, idrecparent=None, idwell=None, joints=None, length=None, make=None, material=None, model=None, presaxialinner=None, presaxialouter=None, presburst=None, prescollapse=None, refid=None, sn=None, szdrift=None, szidnom=None, szodmax=None, szodnom=None, tensilemax=None, torquemax=None, torquemin=None, upsetbtm=None, upsettop=None, usedclass=None, wtperlength=None, systag=None):  # noqa: E501
        """CasingComponentData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._compsubtyp = None
        self._connszbtm = None
        self._connsztop = None
        self._conntgtperfbtm = None
        self._conntgtperftop = None
        self._connthrdbtm = None
        self._connthrdtop = None
        self._conntypbtm = None
        self._conntyptop = None
        self._cost = None
        self._costunitlabel = None
        self._depthtopcorrected = None
        self._des = None
        self._dttmmanufacture = None
        self._grade = None
        self._heatrating = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._joints = None
        self._length = None
        self._make = None
        self._material = None
        self._model = None
        self._presaxialinner = None
        self._presaxialouter = None
        self._presburst = None
        self._prescollapse = None
        self._refid = None
        self._sn = None
        self._szdrift = None
        self._szidnom = None
        self._szodmax = None
        self._szodnom = None
        self._tensilemax = None
        self._torquemax = None
        self._torquemin = None
        self._upsetbtm = None
        self._upsettop = None
        self._usedclass = None
        self._wtperlength = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if compsubtyp is not None:
            self.compsubtyp = compsubtyp
        if connszbtm is not None:
            self.connszbtm = connszbtm
        if connsztop is not None:
            self.connsztop = connsztop
        if conntgtperfbtm is not None:
            self.conntgtperfbtm = conntgtperfbtm
        if conntgtperftop is not None:
            self.conntgtperftop = conntgtperftop
        if connthrdbtm is not None:
            self.connthrdbtm = connthrdbtm
        if connthrdtop is not None:
            self.connthrdtop = connthrdtop
        if conntypbtm is not None:
            self.conntypbtm = conntypbtm
        if conntyptop is not None:
            self.conntyptop = conntyptop
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if depthtopcorrected is not None:
            self.depthtopcorrected = depthtopcorrected
        if des is not None:
            self.des = des
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if grade is not None:
            self.grade = grade
        if heatrating is not None:
            self.heatrating = heatrating
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if joints is not None:
            self.joints = joints
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if material is not None:
            self.material = material
        if model is not None:
            self.model = model
        if presaxialinner is not None:
            self.presaxialinner = presaxialinner
        if presaxialouter is not None:
            self.presaxialouter = presaxialouter
        if presburst is not None:
            self.presburst = presburst
        if prescollapse is not None:
            self.prescollapse = prescollapse
        if refid is not None:
            self.refid = refid
        if sn is not None:
            self.sn = sn
        if szdrift is not None:
            self.szdrift = szdrift
        if szidnom is not None:
            self.szidnom = szidnom
        if szodmax is not None:
            self.szodmax = szodmax
        if szodnom is not None:
            self.szodnom = szodnom
        if tensilemax is not None:
            self.tensilemax = tensilemax
        if torquemax is not None:
            self.torquemax = torquemax
        if torquemin is not None:
            self.torquemin = torquemin
        if upsetbtm is not None:
            self.upsetbtm = upsetbtm
        if upsettop is not None:
            self.upsettop = upsettop
        if usedclass is not None:
            self.usedclass = usedclass
        if wtperlength is not None:
            self.wtperlength = wtperlength
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this CasingComponentData.  # noqa: E501


        :return: The com of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CasingComponentData.


        :param com: The com of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def compsubtyp(self):
        """Gets the compsubtyp of this CasingComponentData.  # noqa: E501


        :return: The compsubtyp of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._compsubtyp

    @compsubtyp.setter
    def compsubtyp(self, compsubtyp):
        """Sets the compsubtyp of this CasingComponentData.


        :param compsubtyp: The compsubtyp of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._compsubtyp = compsubtyp

    @property
    def connszbtm(self):
        """Gets the connszbtm of this CasingComponentData.  # noqa: E501


        :return: The connszbtm of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._connszbtm

    @connszbtm.setter
    def connszbtm(self, connszbtm):
        """Sets the connszbtm of this CasingComponentData.


        :param connszbtm: The connszbtm of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._connszbtm = connszbtm

    @property
    def connsztop(self):
        """Gets the connsztop of this CasingComponentData.  # noqa: E501


        :return: The connsztop of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._connsztop

    @connsztop.setter
    def connsztop(self, connsztop):
        """Sets the connsztop of this CasingComponentData.


        :param connsztop: The connsztop of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._connsztop = connsztop

    @property
    def conntgtperfbtm(self):
        """Gets the conntgtperfbtm of this CasingComponentData.  # noqa: E501


        :return: The conntgtperfbtm of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._conntgtperfbtm

    @conntgtperfbtm.setter
    def conntgtperfbtm(self, conntgtperfbtm):
        """Sets the conntgtperfbtm of this CasingComponentData.


        :param conntgtperfbtm: The conntgtperfbtm of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._conntgtperfbtm = conntgtperfbtm

    @property
    def conntgtperftop(self):
        """Gets the conntgtperftop of this CasingComponentData.  # noqa: E501


        :return: The conntgtperftop of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._conntgtperftop

    @conntgtperftop.setter
    def conntgtperftop(self, conntgtperftop):
        """Sets the conntgtperftop of this CasingComponentData.


        :param conntgtperftop: The conntgtperftop of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._conntgtperftop = conntgtperftop

    @property
    def connthrdbtm(self):
        """Gets the connthrdbtm of this CasingComponentData.  # noqa: E501


        :return: The connthrdbtm of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._connthrdbtm

    @connthrdbtm.setter
    def connthrdbtm(self, connthrdbtm):
        """Sets the connthrdbtm of this CasingComponentData.


        :param connthrdbtm: The connthrdbtm of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._connthrdbtm = connthrdbtm

    @property
    def connthrdtop(self):
        """Gets the connthrdtop of this CasingComponentData.  # noqa: E501


        :return: The connthrdtop of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._connthrdtop

    @connthrdtop.setter
    def connthrdtop(self, connthrdtop):
        """Sets the connthrdtop of this CasingComponentData.


        :param connthrdtop: The connthrdtop of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._connthrdtop = connthrdtop

    @property
    def conntypbtm(self):
        """Gets the conntypbtm of this CasingComponentData.  # noqa: E501


        :return: The conntypbtm of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._conntypbtm

    @conntypbtm.setter
    def conntypbtm(self, conntypbtm):
        """Sets the conntypbtm of this CasingComponentData.


        :param conntypbtm: The conntypbtm of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._conntypbtm = conntypbtm

    @property
    def conntyptop(self):
        """Gets the conntyptop of this CasingComponentData.  # noqa: E501


        :return: The conntyptop of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._conntyptop

    @conntyptop.setter
    def conntyptop(self, conntyptop):
        """Sets the conntyptop of this CasingComponentData.


        :param conntyptop: The conntyptop of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._conntyptop = conntyptop

    @property
    def cost(self):
        """Gets the cost of this CasingComponentData.  # noqa: E501


        :return: The cost of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this CasingComponentData.


        :param cost: The cost of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this CasingComponentData.  # noqa: E501


        :return: The costunitlabel of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this CasingComponentData.


        :param costunitlabel: The costunitlabel of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def depthtopcorrected(self):
        """Gets the depthtopcorrected of this CasingComponentData.  # noqa: E501


        :return: The depthtopcorrected of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._depthtopcorrected

    @depthtopcorrected.setter
    def depthtopcorrected(self, depthtopcorrected):
        """Sets the depthtopcorrected of this CasingComponentData.


        :param depthtopcorrected: The depthtopcorrected of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._depthtopcorrected = depthtopcorrected

    @property
    def des(self):
        """Gets the des of this CasingComponentData.  # noqa: E501


        :return: The des of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this CasingComponentData.


        :param des: The des of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this CasingComponentData.  # noqa: E501


        :return: The dttmmanufacture of this CasingComponentData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this CasingComponentData.


        :param dttmmanufacture: The dttmmanufacture of this CasingComponentData.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def grade(self):
        """Gets the grade of this CasingComponentData.  # noqa: E501


        :return: The grade of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this CasingComponentData.


        :param grade: The grade of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def heatrating(self):
        """Gets the heatrating of this CasingComponentData.  # noqa: E501


        :return: The heatrating of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._heatrating

    @heatrating.setter
    def heatrating(self, heatrating):
        """Sets the heatrating of this CasingComponentData.


        :param heatrating: The heatrating of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._heatrating = heatrating

    @property
    def iconname(self):
        """Gets the iconname of this CasingComponentData.  # noqa: E501


        :return: The iconname of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this CasingComponentData.


        :param iconname: The iconname of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this CasingComponentData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CasingComponentData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CasingComponentData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CasingComponentData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this CasingComponentData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CasingComponentData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CasingComponentData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CasingComponentData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def joints(self):
        """Gets the joints of this CasingComponentData.  # noqa: E501


        :return: The joints of this CasingComponentData.  # noqa: E501
        :rtype: int
        """
        return self._joints

    @joints.setter
    def joints(self, joints):
        """Sets the joints of this CasingComponentData.


        :param joints: The joints of this CasingComponentData.  # noqa: E501
        :type: int
        """

        self._joints = joints

    @property
    def length(self):
        """Gets the length of this CasingComponentData.  # noqa: E501


        :return: The length of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CasingComponentData.


        :param length: The length of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this CasingComponentData.  # noqa: E501


        :return: The make of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this CasingComponentData.


        :param make: The make of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def material(self):
        """Gets the material of this CasingComponentData.  # noqa: E501


        :return: The material of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this CasingComponentData.


        :param material: The material of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def model(self):
        """Gets the model of this CasingComponentData.  # noqa: E501


        :return: The model of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this CasingComponentData.


        :param model: The model of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def presaxialinner(self):
        """Gets the presaxialinner of this CasingComponentData.  # noqa: E501


        :return: The presaxialinner of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._presaxialinner

    @presaxialinner.setter
    def presaxialinner(self, presaxialinner):
        """Sets the presaxialinner of this CasingComponentData.


        :param presaxialinner: The presaxialinner of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._presaxialinner = presaxialinner

    @property
    def presaxialouter(self):
        """Gets the presaxialouter of this CasingComponentData.  # noqa: E501


        :return: The presaxialouter of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._presaxialouter

    @presaxialouter.setter
    def presaxialouter(self, presaxialouter):
        """Sets the presaxialouter of this CasingComponentData.


        :param presaxialouter: The presaxialouter of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._presaxialouter = presaxialouter

    @property
    def presburst(self):
        """Gets the presburst of this CasingComponentData.  # noqa: E501


        :return: The presburst of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._presburst

    @presburst.setter
    def presburst(self, presburst):
        """Sets the presburst of this CasingComponentData.


        :param presburst: The presburst of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._presburst = presburst

    @property
    def prescollapse(self):
        """Gets the prescollapse of this CasingComponentData.  # noqa: E501


        :return: The prescollapse of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._prescollapse

    @prescollapse.setter
    def prescollapse(self, prescollapse):
        """Sets the prescollapse of this CasingComponentData.


        :param prescollapse: The prescollapse of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._prescollapse = prescollapse

    @property
    def refid(self):
        """Gets the refid of this CasingComponentData.  # noqa: E501


        :return: The refid of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this CasingComponentData.


        :param refid: The refid of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sn(self):
        """Gets the sn of this CasingComponentData.  # noqa: E501


        :return: The sn of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this CasingComponentData.


        :param sn: The sn of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def szdrift(self):
        """Gets the szdrift of this CasingComponentData.  # noqa: E501


        :return: The szdrift of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._szdrift

    @szdrift.setter
    def szdrift(self, szdrift):
        """Sets the szdrift of this CasingComponentData.


        :param szdrift: The szdrift of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._szdrift = szdrift

    @property
    def szidnom(self):
        """Gets the szidnom of this CasingComponentData.  # noqa: E501


        :return: The szidnom of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this CasingComponentData.


        :param szidnom: The szidnom of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._szidnom = szidnom

    @property
    def szodmax(self):
        """Gets the szodmax of this CasingComponentData.  # noqa: E501


        :return: The szodmax of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._szodmax

    @szodmax.setter
    def szodmax(self, szodmax):
        """Sets the szodmax of this CasingComponentData.


        :param szodmax: The szodmax of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._szodmax = szodmax

    @property
    def szodnom(self):
        """Gets the szodnom of this CasingComponentData.  # noqa: E501


        :return: The szodnom of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this CasingComponentData.


        :param szodnom: The szodnom of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._szodnom = szodnom

    @property
    def tensilemax(self):
        """Gets the tensilemax of this CasingComponentData.  # noqa: E501


        :return: The tensilemax of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._tensilemax

    @tensilemax.setter
    def tensilemax(self, tensilemax):
        """Sets the tensilemax of this CasingComponentData.


        :param tensilemax: The tensilemax of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._tensilemax = tensilemax

    @property
    def torquemax(self):
        """Gets the torquemax of this CasingComponentData.  # noqa: E501


        :return: The torquemax of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._torquemax

    @torquemax.setter
    def torquemax(self, torquemax):
        """Sets the torquemax of this CasingComponentData.


        :param torquemax: The torquemax of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._torquemax = torquemax

    @property
    def torquemin(self):
        """Gets the torquemin of this CasingComponentData.  # noqa: E501


        :return: The torquemin of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._torquemin

    @torquemin.setter
    def torquemin(self, torquemin):
        """Sets the torquemin of this CasingComponentData.


        :param torquemin: The torquemin of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._torquemin = torquemin

    @property
    def upsetbtm(self):
        """Gets the upsetbtm of this CasingComponentData.  # noqa: E501


        :return: The upsetbtm of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._upsetbtm

    @upsetbtm.setter
    def upsetbtm(self, upsetbtm):
        """Sets the upsetbtm of this CasingComponentData.


        :param upsetbtm: The upsetbtm of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._upsetbtm = upsetbtm

    @property
    def upsettop(self):
        """Gets the upsettop of this CasingComponentData.  # noqa: E501


        :return: The upsettop of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._upsettop

    @upsettop.setter
    def upsettop(self, upsettop):
        """Sets the upsettop of this CasingComponentData.


        :param upsettop: The upsettop of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._upsettop = upsettop

    @property
    def usedclass(self):
        """Gets the usedclass of this CasingComponentData.  # noqa: E501


        :return: The usedclass of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._usedclass

    @usedclass.setter
    def usedclass(self, usedclass):
        """Sets the usedclass of this CasingComponentData.


        :param usedclass: The usedclass of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._usedclass = usedclass

    @property
    def wtperlength(self):
        """Gets the wtperlength of this CasingComponentData.  # noqa: E501


        :return: The wtperlength of this CasingComponentData.  # noqa: E501
        :rtype: float
        """
        return self._wtperlength

    @wtperlength.setter
    def wtperlength(self, wtperlength):
        """Sets the wtperlength of this CasingComponentData.


        :param wtperlength: The wtperlength of this CasingComponentData.  # noqa: E501
        :type: float
        """

        self._wtperlength = wtperlength

    @property
    def systag(self):
        """Gets the systag of this CasingComponentData.  # noqa: E501


        :return: The systag of this CasingComponentData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CasingComponentData.


        :param systag: The systag of this CasingComponentData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CasingComponentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CasingComponentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
