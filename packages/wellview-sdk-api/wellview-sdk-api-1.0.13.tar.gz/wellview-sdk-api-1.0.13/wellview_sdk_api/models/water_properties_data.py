# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WaterPropertiesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densityrel': 'float',
        'h2s': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'ph': 'float',
        'refractiveindex': 'float',
        'resistivity': 'float',
        'salinity': 'float',
        'solidstotalevap': 'float',
        'solidstotallignition': 'float',
        'temprefdensityrel': 'float',
        'temprefh2s': 'float',
        'temprefph': 'float',
        'temprefrefractiveindex': 'float',
        'temprefresistivity': 'float',
        'temprefsolidstotalevap': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'densityrel': 'densityrel',
        'h2s': 'h2s',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'ph': 'ph',
        'refractiveindex': 'refractiveindex',
        'resistivity': 'resistivity',
        'salinity': 'salinity',
        'solidstotalevap': 'solidstotalevap',
        'solidstotallignition': 'solidstotallignition',
        'temprefdensityrel': 'temprefdensityrel',
        'temprefh2s': 'temprefh2s',
        'temprefph': 'temprefph',
        'temprefrefractiveindex': 'temprefrefractiveindex',
        'temprefresistivity': 'temprefresistivity',
        'temprefsolidstotalevap': 'temprefsolidstotalevap',
        'systag': 'systag'
    }

    def __init__(self, com=None, densityrel=None, h2s=None, idrec=None, idrecparent=None, idwell=None, ph=None, refractiveindex=None, resistivity=None, salinity=None, solidstotalevap=None, solidstotallignition=None, temprefdensityrel=None, temprefh2s=None, temprefph=None, temprefrefractiveindex=None, temprefresistivity=None, temprefsolidstotalevap=None, systag=None):  # noqa: E501
        """WaterPropertiesData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densityrel = None
        self._h2s = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._ph = None
        self._refractiveindex = None
        self._resistivity = None
        self._salinity = None
        self._solidstotalevap = None
        self._solidstotallignition = None
        self._temprefdensityrel = None
        self._temprefh2s = None
        self._temprefph = None
        self._temprefrefractiveindex = None
        self._temprefresistivity = None
        self._temprefsolidstotalevap = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densityrel is not None:
            self.densityrel = densityrel
        if h2s is not None:
            self.h2s = h2s
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if ph is not None:
            self.ph = ph
        if refractiveindex is not None:
            self.refractiveindex = refractiveindex
        if resistivity is not None:
            self.resistivity = resistivity
        if salinity is not None:
            self.salinity = salinity
        if solidstotalevap is not None:
            self.solidstotalevap = solidstotalevap
        if solidstotallignition is not None:
            self.solidstotallignition = solidstotallignition
        if temprefdensityrel is not None:
            self.temprefdensityrel = temprefdensityrel
        if temprefh2s is not None:
            self.temprefh2s = temprefh2s
        if temprefph is not None:
            self.temprefph = temprefph
        if temprefrefractiveindex is not None:
            self.temprefrefractiveindex = temprefrefractiveindex
        if temprefresistivity is not None:
            self.temprefresistivity = temprefresistivity
        if temprefsolidstotalevap is not None:
            self.temprefsolidstotalevap = temprefsolidstotalevap
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this WaterPropertiesData.  # noqa: E501


        :return: The com of this WaterPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WaterPropertiesData.


        :param com: The com of this WaterPropertiesData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityrel(self):
        """Gets the densityrel of this WaterPropertiesData.  # noqa: E501


        :return: The densityrel of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityrel

    @densityrel.setter
    def densityrel(self, densityrel):
        """Sets the densityrel of this WaterPropertiesData.


        :param densityrel: The densityrel of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityrel = densityrel

    @property
    def h2s(self):
        """Gets the h2s of this WaterPropertiesData.  # noqa: E501


        :return: The h2s of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._h2s

    @h2s.setter
    def h2s(self, h2s):
        """Sets the h2s of this WaterPropertiesData.


        :param h2s: The h2s of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._h2s = h2s

    @property
    def idrec(self):
        """Gets the idrec of this WaterPropertiesData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WaterPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WaterPropertiesData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WaterPropertiesData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WaterPropertiesData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this WaterPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WaterPropertiesData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this WaterPropertiesData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WaterPropertiesData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WaterPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WaterPropertiesData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WaterPropertiesData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def ph(self):
        """Gets the ph of this WaterPropertiesData.  # noqa: E501


        :return: The ph of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._ph

    @ph.setter
    def ph(self, ph):
        """Sets the ph of this WaterPropertiesData.


        :param ph: The ph of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._ph = ph

    @property
    def refractiveindex(self):
        """Gets the refractiveindex of this WaterPropertiesData.  # noqa: E501


        :return: The refractiveindex of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._refractiveindex

    @refractiveindex.setter
    def refractiveindex(self, refractiveindex):
        """Sets the refractiveindex of this WaterPropertiesData.


        :param refractiveindex: The refractiveindex of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._refractiveindex = refractiveindex

    @property
    def resistivity(self):
        """Gets the resistivity of this WaterPropertiesData.  # noqa: E501


        :return: The resistivity of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._resistivity

    @resistivity.setter
    def resistivity(self, resistivity):
        """Sets the resistivity of this WaterPropertiesData.


        :param resistivity: The resistivity of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._resistivity = resistivity

    @property
    def salinity(self):
        """Gets the salinity of this WaterPropertiesData.  # noqa: E501


        :return: The salinity of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._salinity

    @salinity.setter
    def salinity(self, salinity):
        """Sets the salinity of this WaterPropertiesData.


        :param salinity: The salinity of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._salinity = salinity

    @property
    def solidstotalevap(self):
        """Gets the solidstotalevap of this WaterPropertiesData.  # noqa: E501


        :return: The solidstotalevap of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._solidstotalevap

    @solidstotalevap.setter
    def solidstotalevap(self, solidstotalevap):
        """Sets the solidstotalevap of this WaterPropertiesData.


        :param solidstotalevap: The solidstotalevap of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._solidstotalevap = solidstotalevap

    @property
    def solidstotallignition(self):
        """Gets the solidstotallignition of this WaterPropertiesData.  # noqa: E501


        :return: The solidstotallignition of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._solidstotallignition

    @solidstotallignition.setter
    def solidstotallignition(self, solidstotallignition):
        """Sets the solidstotallignition of this WaterPropertiesData.


        :param solidstotallignition: The solidstotallignition of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._solidstotallignition = solidstotallignition

    @property
    def temprefdensityrel(self):
        """Gets the temprefdensityrel of this WaterPropertiesData.  # noqa: E501


        :return: The temprefdensityrel of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefdensityrel

    @temprefdensityrel.setter
    def temprefdensityrel(self, temprefdensityrel):
        """Sets the temprefdensityrel of this WaterPropertiesData.


        :param temprefdensityrel: The temprefdensityrel of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefdensityrel = temprefdensityrel

    @property
    def temprefh2s(self):
        """Gets the temprefh2s of this WaterPropertiesData.  # noqa: E501


        :return: The temprefh2s of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefh2s

    @temprefh2s.setter
    def temprefh2s(self, temprefh2s):
        """Sets the temprefh2s of this WaterPropertiesData.


        :param temprefh2s: The temprefh2s of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefh2s = temprefh2s

    @property
    def temprefph(self):
        """Gets the temprefph of this WaterPropertiesData.  # noqa: E501


        :return: The temprefph of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefph

    @temprefph.setter
    def temprefph(self, temprefph):
        """Sets the temprefph of this WaterPropertiesData.


        :param temprefph: The temprefph of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefph = temprefph

    @property
    def temprefrefractiveindex(self):
        """Gets the temprefrefractiveindex of this WaterPropertiesData.  # noqa: E501


        :return: The temprefrefractiveindex of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefrefractiveindex

    @temprefrefractiveindex.setter
    def temprefrefractiveindex(self, temprefrefractiveindex):
        """Sets the temprefrefractiveindex of this WaterPropertiesData.


        :param temprefrefractiveindex: The temprefrefractiveindex of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefrefractiveindex = temprefrefractiveindex

    @property
    def temprefresistivity(self):
        """Gets the temprefresistivity of this WaterPropertiesData.  # noqa: E501


        :return: The temprefresistivity of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefresistivity

    @temprefresistivity.setter
    def temprefresistivity(self, temprefresistivity):
        """Sets the temprefresistivity of this WaterPropertiesData.


        :param temprefresistivity: The temprefresistivity of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefresistivity = temprefresistivity

    @property
    def temprefsolidstotalevap(self):
        """Gets the temprefsolidstotalevap of this WaterPropertiesData.  # noqa: E501


        :return: The temprefsolidstotalevap of this WaterPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefsolidstotalevap

    @temprefsolidstotalevap.setter
    def temprefsolidstotalevap(self, temprefsolidstotalevap):
        """Sets the temprefsolidstotalevap of this WaterPropertiesData.


        :param temprefsolidstotalevap: The temprefsolidstotalevap of this WaterPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefsolidstotalevap = temprefsolidstotalevap

    @property
    def systag(self):
        """Gets the systag of this WaterPropertiesData.  # noqa: E501


        :return: The systag of this WaterPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WaterPropertiesData.


        :param systag: The systag of this WaterPropertiesData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WaterPropertiesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterPropertiesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
