# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DrillStringData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bitno': 'str',
        'bittfa': 'float',
        'com': 'str',
        'des': 'str',
        'dircontrolmethod': 'str',
        'dttmoutofhole': 'datetime',
        'dttmpickup': 'datetime',
        'idrec': 'str',
        'idrecbit': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'proposed': 'bool',
        'stringno': 'int',
        'stringobjective': 'str',
        'stringresult': 'str',
        'stringresultdetail': 'str',
        'stringresultnote': 'str',
        'travelequipwt': 'float',
        'triphookloadmax': 'float',
        'tripnote': 'str',
        'tripoverpullmax': 'float',
        'triprateinavg': 'float',
        'triprateinmax': 'float',
        'triprateoutavg': 'float',
        'triprateoutmax': 'float',
        'wearbearing': 'str',
        'weardull': 'str',
        'weargauge': 'str',
        'wearinner': 'int',
        'wearloc': 'str',
        'wearother': 'str',
        'wearouter': 'int',
        'wearpulled': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'bitno': 'bitno',
        'bittfa': 'bittfa',
        'com': 'com',
        'des': 'des',
        'dircontrolmethod': 'dircontrolmethod',
        'dttmoutofhole': 'dttmoutofhole',
        'dttmpickup': 'dttmpickup',
        'idrec': 'idrec',
        'idrecbit': 'idrecbit',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'proposed': 'proposed',
        'stringno': 'stringno',
        'stringobjective': 'stringobjective',
        'stringresult': 'stringresult',
        'stringresultdetail': 'stringresultdetail',
        'stringresultnote': 'stringresultnote',
        'travelequipwt': 'travelequipwt',
        'triphookloadmax': 'triphookloadmax',
        'tripnote': 'tripnote',
        'tripoverpullmax': 'tripoverpullmax',
        'triprateinavg': 'triprateinavg',
        'triprateinmax': 'triprateinmax',
        'triprateoutavg': 'triprateoutavg',
        'triprateoutmax': 'triprateoutmax',
        'wearbearing': 'wearbearing',
        'weardull': 'weardull',
        'weargauge': 'weargauge',
        'wearinner': 'wearinner',
        'wearloc': 'wearloc',
        'wearother': 'wearother',
        'wearouter': 'wearouter',
        'wearpulled': 'wearpulled',
        'systag': 'systag'
    }

    def __init__(self, bitno=None, bittfa=None, com=None, des=None, dircontrolmethod=None, dttmoutofhole=None, dttmpickup=None, idrec=None, idrecbit=None, idrecparent=None, idwell=None, proposed=None, stringno=None, stringobjective=None, stringresult=None, stringresultdetail=None, stringresultnote=None, travelequipwt=None, triphookloadmax=None, tripnote=None, tripoverpullmax=None, triprateinavg=None, triprateinmax=None, triprateoutavg=None, triprateoutmax=None, wearbearing=None, weardull=None, weargauge=None, wearinner=None, wearloc=None, wearother=None, wearouter=None, wearpulled=None, systag=None):  # noqa: E501
        """DrillStringData - a model defined in Swagger"""  # noqa: E501
        self._bitno = None
        self._bittfa = None
        self._com = None
        self._des = None
        self._dircontrolmethod = None
        self._dttmoutofhole = None
        self._dttmpickup = None
        self._idrec = None
        self._idrecbit = None
        self._idrecparent = None
        self._idwell = None
        self._proposed = None
        self._stringno = None
        self._stringobjective = None
        self._stringresult = None
        self._stringresultdetail = None
        self._stringresultnote = None
        self._travelequipwt = None
        self._triphookloadmax = None
        self._tripnote = None
        self._tripoverpullmax = None
        self._triprateinavg = None
        self._triprateinmax = None
        self._triprateoutavg = None
        self._triprateoutmax = None
        self._wearbearing = None
        self._weardull = None
        self._weargauge = None
        self._wearinner = None
        self._wearloc = None
        self._wearother = None
        self._wearouter = None
        self._wearpulled = None
        self._systag = None
        self.discriminator = None
        if bitno is not None:
            self.bitno = bitno
        if bittfa is not None:
            self.bittfa = bittfa
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dircontrolmethod is not None:
            self.dircontrolmethod = dircontrolmethod
        if dttmoutofhole is not None:
            self.dttmoutofhole = dttmoutofhole
        if dttmpickup is not None:
            self.dttmpickup = dttmpickup
        if idrec is not None:
            self.idrec = idrec
        if idrecbit is not None:
            self.idrecbit = idrecbit
        self.idrecparent = idrecparent
        self.idwell = idwell
        if proposed is not None:
            self.proposed = proposed
        if stringno is not None:
            self.stringno = stringno
        if stringobjective is not None:
            self.stringobjective = stringobjective
        if stringresult is not None:
            self.stringresult = stringresult
        if stringresultdetail is not None:
            self.stringresultdetail = stringresultdetail
        if stringresultnote is not None:
            self.stringresultnote = stringresultnote
        if travelequipwt is not None:
            self.travelequipwt = travelequipwt
        if triphookloadmax is not None:
            self.triphookloadmax = triphookloadmax
        if tripnote is not None:
            self.tripnote = tripnote
        if tripoverpullmax is not None:
            self.tripoverpullmax = tripoverpullmax
        if triprateinavg is not None:
            self.triprateinavg = triprateinavg
        if triprateinmax is not None:
            self.triprateinmax = triprateinmax
        if triprateoutavg is not None:
            self.triprateoutavg = triprateoutavg
        if triprateoutmax is not None:
            self.triprateoutmax = triprateoutmax
        if wearbearing is not None:
            self.wearbearing = wearbearing
        if weardull is not None:
            self.weardull = weardull
        if weargauge is not None:
            self.weargauge = weargauge
        if wearinner is not None:
            self.wearinner = wearinner
        if wearloc is not None:
            self.wearloc = wearloc
        if wearother is not None:
            self.wearother = wearother
        if wearouter is not None:
            self.wearouter = wearouter
        if wearpulled is not None:
            self.wearpulled = wearpulled
        if systag is not None:
            self.systag = systag

    @property
    def bitno(self):
        """Gets the bitno of this DrillStringData.  # noqa: E501


        :return: The bitno of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._bitno

    @bitno.setter
    def bitno(self, bitno):
        """Sets the bitno of this DrillStringData.


        :param bitno: The bitno of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._bitno = bitno

    @property
    def bittfa(self):
        """Gets the bittfa of this DrillStringData.  # noqa: E501


        :return: The bittfa of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._bittfa

    @bittfa.setter
    def bittfa(self, bittfa):
        """Sets the bittfa of this DrillStringData.


        :param bittfa: The bittfa of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._bittfa = bittfa

    @property
    def com(self):
        """Gets the com of this DrillStringData.  # noqa: E501


        :return: The com of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this DrillStringData.


        :param com: The com of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this DrillStringData.  # noqa: E501


        :return: The des of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this DrillStringData.


        :param des: The des of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dircontrolmethod(self):
        """Gets the dircontrolmethod of this DrillStringData.  # noqa: E501


        :return: The dircontrolmethod of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._dircontrolmethod

    @dircontrolmethod.setter
    def dircontrolmethod(self, dircontrolmethod):
        """Sets the dircontrolmethod of this DrillStringData.


        :param dircontrolmethod: The dircontrolmethod of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._dircontrolmethod = dircontrolmethod

    @property
    def dttmoutofhole(self):
        """Gets the dttmoutofhole of this DrillStringData.  # noqa: E501


        :return: The dttmoutofhole of this DrillStringData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmoutofhole

    @dttmoutofhole.setter
    def dttmoutofhole(self, dttmoutofhole):
        """Sets the dttmoutofhole of this DrillStringData.


        :param dttmoutofhole: The dttmoutofhole of this DrillStringData.  # noqa: E501
        :type: datetime
        """

        self._dttmoutofhole = dttmoutofhole

    @property
    def dttmpickup(self):
        """Gets the dttmpickup of this DrillStringData.  # noqa: E501


        :return: The dttmpickup of this DrillStringData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpickup

    @dttmpickup.setter
    def dttmpickup(self, dttmpickup):
        """Sets the dttmpickup of this DrillStringData.


        :param dttmpickup: The dttmpickup of this DrillStringData.  # noqa: E501
        :type: datetime
        """

        self._dttmpickup = dttmpickup

    @property
    def idrec(self):
        """Gets the idrec of this DrillStringData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DrillStringData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecbit(self):
        """Gets the idrecbit of this DrillStringData.  # noqa: E501


        :return: The idrecbit of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._idrecbit

    @idrecbit.setter
    def idrecbit(self, idrecbit):
        """Sets the idrecbit of this DrillStringData.


        :param idrecbit: The idrecbit of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._idrecbit = idrecbit

    @property
    def idrecparent(self):
        """Gets the idrecparent of this DrillStringData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this DrillStringData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this DrillStringData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this DrillStringData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DrillStringData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DrillStringData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def proposed(self):
        """Gets the proposed of this DrillStringData.  # noqa: E501


        :return: The proposed of this DrillStringData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this DrillStringData.


        :param proposed: The proposed of this DrillStringData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def stringno(self):
        """Gets the stringno of this DrillStringData.  # noqa: E501


        :return: The stringno of this DrillStringData.  # noqa: E501
        :rtype: int
        """
        return self._stringno

    @stringno.setter
    def stringno(self, stringno):
        """Sets the stringno of this DrillStringData.


        :param stringno: The stringno of this DrillStringData.  # noqa: E501
        :type: int
        """

        self._stringno = stringno

    @property
    def stringobjective(self):
        """Gets the stringobjective of this DrillStringData.  # noqa: E501


        :return: The stringobjective of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._stringobjective

    @stringobjective.setter
    def stringobjective(self, stringobjective):
        """Sets the stringobjective of this DrillStringData.


        :param stringobjective: The stringobjective of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._stringobjective = stringobjective

    @property
    def stringresult(self):
        """Gets the stringresult of this DrillStringData.  # noqa: E501


        :return: The stringresult of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._stringresult

    @stringresult.setter
    def stringresult(self, stringresult):
        """Sets the stringresult of this DrillStringData.


        :param stringresult: The stringresult of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._stringresult = stringresult

    @property
    def stringresultdetail(self):
        """Gets the stringresultdetail of this DrillStringData.  # noqa: E501


        :return: The stringresultdetail of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._stringresultdetail

    @stringresultdetail.setter
    def stringresultdetail(self, stringresultdetail):
        """Sets the stringresultdetail of this DrillStringData.


        :param stringresultdetail: The stringresultdetail of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._stringresultdetail = stringresultdetail

    @property
    def stringresultnote(self):
        """Gets the stringresultnote of this DrillStringData.  # noqa: E501


        :return: The stringresultnote of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._stringresultnote

    @stringresultnote.setter
    def stringresultnote(self, stringresultnote):
        """Sets the stringresultnote of this DrillStringData.


        :param stringresultnote: The stringresultnote of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._stringresultnote = stringresultnote

    @property
    def travelequipwt(self):
        """Gets the travelequipwt of this DrillStringData.  # noqa: E501


        :return: The travelequipwt of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._travelequipwt

    @travelequipwt.setter
    def travelequipwt(self, travelequipwt):
        """Sets the travelequipwt of this DrillStringData.


        :param travelequipwt: The travelequipwt of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._travelequipwt = travelequipwt

    @property
    def triphookloadmax(self):
        """Gets the triphookloadmax of this DrillStringData.  # noqa: E501


        :return: The triphookloadmax of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._triphookloadmax

    @triphookloadmax.setter
    def triphookloadmax(self, triphookloadmax):
        """Sets the triphookloadmax of this DrillStringData.


        :param triphookloadmax: The triphookloadmax of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._triphookloadmax = triphookloadmax

    @property
    def tripnote(self):
        """Gets the tripnote of this DrillStringData.  # noqa: E501


        :return: The tripnote of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._tripnote

    @tripnote.setter
    def tripnote(self, tripnote):
        """Sets the tripnote of this DrillStringData.


        :param tripnote: The tripnote of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._tripnote = tripnote

    @property
    def tripoverpullmax(self):
        """Gets the tripoverpullmax of this DrillStringData.  # noqa: E501


        :return: The tripoverpullmax of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._tripoverpullmax

    @tripoverpullmax.setter
    def tripoverpullmax(self, tripoverpullmax):
        """Sets the tripoverpullmax of this DrillStringData.


        :param tripoverpullmax: The tripoverpullmax of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._tripoverpullmax = tripoverpullmax

    @property
    def triprateinavg(self):
        """Gets the triprateinavg of this DrillStringData.  # noqa: E501


        :return: The triprateinavg of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._triprateinavg

    @triprateinavg.setter
    def triprateinavg(self, triprateinavg):
        """Sets the triprateinavg of this DrillStringData.


        :param triprateinavg: The triprateinavg of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._triprateinavg = triprateinavg

    @property
    def triprateinmax(self):
        """Gets the triprateinmax of this DrillStringData.  # noqa: E501


        :return: The triprateinmax of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._triprateinmax

    @triprateinmax.setter
    def triprateinmax(self, triprateinmax):
        """Sets the triprateinmax of this DrillStringData.


        :param triprateinmax: The triprateinmax of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._triprateinmax = triprateinmax

    @property
    def triprateoutavg(self):
        """Gets the triprateoutavg of this DrillStringData.  # noqa: E501


        :return: The triprateoutavg of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._triprateoutavg

    @triprateoutavg.setter
    def triprateoutavg(self, triprateoutavg):
        """Sets the triprateoutavg of this DrillStringData.


        :param triprateoutavg: The triprateoutavg of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._triprateoutavg = triprateoutavg

    @property
    def triprateoutmax(self):
        """Gets the triprateoutmax of this DrillStringData.  # noqa: E501


        :return: The triprateoutmax of this DrillStringData.  # noqa: E501
        :rtype: float
        """
        return self._triprateoutmax

    @triprateoutmax.setter
    def triprateoutmax(self, triprateoutmax):
        """Sets the triprateoutmax of this DrillStringData.


        :param triprateoutmax: The triprateoutmax of this DrillStringData.  # noqa: E501
        :type: float
        """

        self._triprateoutmax = triprateoutmax

    @property
    def wearbearing(self):
        """Gets the wearbearing of this DrillStringData.  # noqa: E501


        :return: The wearbearing of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._wearbearing

    @wearbearing.setter
    def wearbearing(self, wearbearing):
        """Sets the wearbearing of this DrillStringData.


        :param wearbearing: The wearbearing of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._wearbearing = wearbearing

    @property
    def weardull(self):
        """Gets the weardull of this DrillStringData.  # noqa: E501


        :return: The weardull of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._weardull

    @weardull.setter
    def weardull(self, weardull):
        """Sets the weardull of this DrillStringData.


        :param weardull: The weardull of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._weardull = weardull

    @property
    def weargauge(self):
        """Gets the weargauge of this DrillStringData.  # noqa: E501


        :return: The weargauge of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._weargauge

    @weargauge.setter
    def weargauge(self, weargauge):
        """Sets the weargauge of this DrillStringData.


        :param weargauge: The weargauge of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._weargauge = weargauge

    @property
    def wearinner(self):
        """Gets the wearinner of this DrillStringData.  # noqa: E501


        :return: The wearinner of this DrillStringData.  # noqa: E501
        :rtype: int
        """
        return self._wearinner

    @wearinner.setter
    def wearinner(self, wearinner):
        """Sets the wearinner of this DrillStringData.


        :param wearinner: The wearinner of this DrillStringData.  # noqa: E501
        :type: int
        """

        self._wearinner = wearinner

    @property
    def wearloc(self):
        """Gets the wearloc of this DrillStringData.  # noqa: E501


        :return: The wearloc of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._wearloc

    @wearloc.setter
    def wearloc(self, wearloc):
        """Sets the wearloc of this DrillStringData.


        :param wearloc: The wearloc of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._wearloc = wearloc

    @property
    def wearother(self):
        """Gets the wearother of this DrillStringData.  # noqa: E501


        :return: The wearother of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._wearother

    @wearother.setter
    def wearother(self, wearother):
        """Sets the wearother of this DrillStringData.


        :param wearother: The wearother of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._wearother = wearother

    @property
    def wearouter(self):
        """Gets the wearouter of this DrillStringData.  # noqa: E501


        :return: The wearouter of this DrillStringData.  # noqa: E501
        :rtype: int
        """
        return self._wearouter

    @wearouter.setter
    def wearouter(self, wearouter):
        """Sets the wearouter of this DrillStringData.


        :param wearouter: The wearouter of this DrillStringData.  # noqa: E501
        :type: int
        """

        self._wearouter = wearouter

    @property
    def wearpulled(self):
        """Gets the wearpulled of this DrillStringData.  # noqa: E501


        :return: The wearpulled of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._wearpulled

    @wearpulled.setter
    def wearpulled(self, wearpulled):
        """Sets the wearpulled of this DrillStringData.


        :param wearpulled: The wearpulled of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._wearpulled = wearpulled

    @property
    def systag(self):
        """Gets the systag of this DrillStringData.  # noqa: E501


        :return: The systag of this DrillStringData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DrillStringData.


        :param systag: The systag of this DrillStringData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrillStringData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrillStringData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
