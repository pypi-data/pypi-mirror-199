# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlungerLiftData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'length': 'float',
        'make': 'str',
        'model': 'str',
        'pullreason': 'str',
        'refid': 'str',
        'refno': 'str',
        'sn': 'str',
        'szod': 'float',
        'typ': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'length': 'length',
        'make': 'make',
        'model': 'model',
        'pullreason': 'pullreason',
        'refid': 'refid',
        'refno': 'refno',
        'sn': 'sn',
        'szod': 'szod',
        'typ': 'typ',
        'systag': 'systag'
    }

    def __init__(self, com=None, dttmpull=None, dttmrun=None, idrec=None, idrecparent=None, idwell=None, length=None, make=None, model=None, pullreason=None, refid=None, refno=None, sn=None, szod=None, typ=None, systag=None):  # noqa: E501
        """PlungerLiftData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._length = None
        self._make = None
        self._model = None
        self._pullreason = None
        self._refid = None
        self._refno = None
        self._sn = None
        self._szod = None
        self._typ = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if pullreason is not None:
            self.pullreason = pullreason
        if refid is not None:
            self.refid = refid
        if refno is not None:
            self.refno = refno
        if sn is not None:
            self.sn = sn
        if szod is not None:
            self.szod = szod
        if typ is not None:
            self.typ = typ
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this PlungerLiftData.  # noqa: E501


        :return: The com of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this PlungerLiftData.


        :param com: The com of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttmpull(self):
        """Gets the dttmpull of this PlungerLiftData.  # noqa: E501


        :return: The dttmpull of this PlungerLiftData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this PlungerLiftData.


        :param dttmpull: The dttmpull of this PlungerLiftData.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this PlungerLiftData.  # noqa: E501


        :return: The dttmrun of this PlungerLiftData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this PlungerLiftData.


        :param dttmrun: The dttmrun of this PlungerLiftData.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this PlungerLiftData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PlungerLiftData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this PlungerLiftData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this PlungerLiftData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this PlungerLiftData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this PlungerLiftData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PlungerLiftData.

        id of well  # noqa: E501

        :param idwell: The idwell of this PlungerLiftData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def length(self):
        """Gets the length of this PlungerLiftData.  # noqa: E501


        :return: The length of this PlungerLiftData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PlungerLiftData.


        :param length: The length of this PlungerLiftData.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this PlungerLiftData.  # noqa: E501


        :return: The make of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this PlungerLiftData.


        :param make: The make of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this PlungerLiftData.  # noqa: E501


        :return: The model of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PlungerLiftData.


        :param model: The model of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def pullreason(self):
        """Gets the pullreason of this PlungerLiftData.  # noqa: E501


        :return: The pullreason of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this PlungerLiftData.


        :param pullreason: The pullreason of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def refid(self):
        """Gets the refid of this PlungerLiftData.  # noqa: E501


        :return: The refid of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this PlungerLiftData.


        :param refid: The refid of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def refno(self):
        """Gets the refno of this PlungerLiftData.  # noqa: E501


        :return: The refno of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this PlungerLiftData.


        :param refno: The refno of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def sn(self):
        """Gets the sn of this PlungerLiftData.  # noqa: E501


        :return: The sn of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this PlungerLiftData.


        :param sn: The sn of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def szod(self):
        """Gets the szod of this PlungerLiftData.  # noqa: E501


        :return: The szod of this PlungerLiftData.  # noqa: E501
        :rtype: float
        """
        return self._szod

    @szod.setter
    def szod(self, szod):
        """Sets the szod of this PlungerLiftData.


        :param szod: The szod of this PlungerLiftData.  # noqa: E501
        :type: float
        """

        self._szod = szod

    @property
    def typ(self):
        """Gets the typ of this PlungerLiftData.  # noqa: E501


        :return: The typ of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this PlungerLiftData.


        :param typ: The typ of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def systag(self):
        """Gets the systag of this PlungerLiftData.  # noqa: E501


        :return: The systag of this PlungerLiftData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PlungerLiftData.


        :param systag: The systag of this PlungerLiftData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlungerLiftData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlungerLiftData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
