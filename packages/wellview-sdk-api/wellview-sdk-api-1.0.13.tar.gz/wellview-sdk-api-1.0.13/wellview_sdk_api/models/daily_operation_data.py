# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DailyOperationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condhole': 'str',
        'condlease': 'str',
        'condroad': 'str',
        'condtemp': 'float',
        'condwave': 'str',
        'condweather': 'str',
        'condwind': 'str',
        'depthtvdendprojmethod': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'durationsinceltinc': 'float',
        'durationsincerptinc': 'float',
        'gasbackgroundavg': 'float',
        'gasbackgroundmax': 'float',
        'gasconnectionavg': 'float',
        'gasconnectionmax': 'float',
        'gasdrillavg': 'float',
        'gasdrillmax': 'float',
        'gastripavg': 'float',
        'gastripmax': 'float',
        'h2smax': 'float',
        'idrec': 'str',
        'idrecnextcas': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'plannextrptops': 'str',
        'remarks': 'str',
        'rigtime': 'float',
        'rpttmactops': 'str',
        'statusend': 'str',
        'summaryops': 'str',
        'userboolean1': 'bool',
        'userboolean2': 'bool',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'usernum4': 'float',
        'usernum5': 'float',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'condhole': 'condhole',
        'condlease': 'condlease',
        'condroad': 'condroad',
        'condtemp': 'condtemp',
        'condwave': 'condwave',
        'condweather': 'condweather',
        'condwind': 'condwind',
        'depthtvdendprojmethod': 'depthtvdendprojmethod',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'durationsinceltinc': 'durationsinceltinc',
        'durationsincerptinc': 'durationsincerptinc',
        'gasbackgroundavg': 'gasbackgroundavg',
        'gasbackgroundmax': 'gasbackgroundmax',
        'gasconnectionavg': 'gasconnectionavg',
        'gasconnectionmax': 'gasconnectionmax',
        'gasdrillavg': 'gasdrillavg',
        'gasdrillmax': 'gasdrillmax',
        'gastripavg': 'gastripavg',
        'gastripmax': 'gastripmax',
        'h2smax': 'h2smax',
        'idrec': 'idrec',
        'idrecnextcas': 'idrecnextcas',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'plannextrptops': 'plannextrptops',
        'remarks': 'remarks',
        'rigtime': 'rigtime',
        'rpttmactops': 'rpttmactops',
        'statusend': 'statusend',
        'summaryops': 'summaryops',
        'userboolean1': 'userboolean1',
        'userboolean2': 'userboolean2',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usernum4': 'usernum4',
        'usernum5': 'usernum5',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'systag': 'systag'
    }

    def __init__(self, condhole=None, condlease=None, condroad=None, condtemp=None, condwave=None, condweather=None, condwind=None, depthtvdendprojmethod=None, dttmend=None, dttmstart=None, durationsinceltinc=None, durationsincerptinc=None, gasbackgroundavg=None, gasbackgroundmax=None, gasconnectionavg=None, gasconnectionmax=None, gasdrillavg=None, gasdrillmax=None, gastripavg=None, gastripmax=None, h2smax=None, idrec=None, idrecnextcas=None, idrecparent=None, idwell=None, plannextrptops=None, remarks=None, rigtime=None, rpttmactops=None, statusend=None, summaryops=None, userboolean1=None, userboolean2=None, usernum1=None, usernum2=None, usernum3=None, usernum4=None, usernum5=None, usertxt1=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, systag=None):  # noqa: E501
        """DailyOperationData - a model defined in Swagger"""  # noqa: E501
        self._condhole = None
        self._condlease = None
        self._condroad = None
        self._condtemp = None
        self._condwave = None
        self._condweather = None
        self._condwind = None
        self._depthtvdendprojmethod = None
        self._dttmend = None
        self._dttmstart = None
        self._durationsinceltinc = None
        self._durationsincerptinc = None
        self._gasbackgroundavg = None
        self._gasbackgroundmax = None
        self._gasconnectionavg = None
        self._gasconnectionmax = None
        self._gasdrillavg = None
        self._gasdrillmax = None
        self._gastripavg = None
        self._gastripmax = None
        self._h2smax = None
        self._idrec = None
        self._idrecnextcas = None
        self._idrecparent = None
        self._idwell = None
        self._plannextrptops = None
        self._remarks = None
        self._rigtime = None
        self._rpttmactops = None
        self._statusend = None
        self._summaryops = None
        self._userboolean1 = None
        self._userboolean2 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usernum4 = None
        self._usernum5 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._systag = None
        self.discriminator = None
        if condhole is not None:
            self.condhole = condhole
        if condlease is not None:
            self.condlease = condlease
        if condroad is not None:
            self.condroad = condroad
        if condtemp is not None:
            self.condtemp = condtemp
        if condwave is not None:
            self.condwave = condwave
        if condweather is not None:
            self.condweather = condweather
        if condwind is not None:
            self.condwind = condwind
        if depthtvdendprojmethod is not None:
            self.depthtvdendprojmethod = depthtvdendprojmethod
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if durationsinceltinc is not None:
            self.durationsinceltinc = durationsinceltinc
        if durationsincerptinc is not None:
            self.durationsincerptinc = durationsincerptinc
        if gasbackgroundavg is not None:
            self.gasbackgroundavg = gasbackgroundavg
        if gasbackgroundmax is not None:
            self.gasbackgroundmax = gasbackgroundmax
        if gasconnectionavg is not None:
            self.gasconnectionavg = gasconnectionavg
        if gasconnectionmax is not None:
            self.gasconnectionmax = gasconnectionmax
        if gasdrillavg is not None:
            self.gasdrillavg = gasdrillavg
        if gasdrillmax is not None:
            self.gasdrillmax = gasdrillmax
        if gastripavg is not None:
            self.gastripavg = gastripavg
        if gastripmax is not None:
            self.gastripmax = gastripmax
        if h2smax is not None:
            self.h2smax = h2smax
        if idrec is not None:
            self.idrec = idrec
        if idrecnextcas is not None:
            self.idrecnextcas = idrecnextcas
        self.idrecparent = idrecparent
        self.idwell = idwell
        if plannextrptops is not None:
            self.plannextrptops = plannextrptops
        if remarks is not None:
            self.remarks = remarks
        if rigtime is not None:
            self.rigtime = rigtime
        if rpttmactops is not None:
            self.rpttmactops = rpttmactops
        if statusend is not None:
            self.statusend = statusend
        if summaryops is not None:
            self.summaryops = summaryops
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if userboolean2 is not None:
            self.userboolean2 = userboolean2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usernum4 is not None:
            self.usernum4 = usernum4
        if usernum5 is not None:
            self.usernum5 = usernum5
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if systag is not None:
            self.systag = systag

    @property
    def condhole(self):
        """Gets the condhole of this DailyOperationData.  # noqa: E501


        :return: The condhole of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._condhole

    @condhole.setter
    def condhole(self, condhole):
        """Sets the condhole of this DailyOperationData.


        :param condhole: The condhole of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._condhole = condhole

    @property
    def condlease(self):
        """Gets the condlease of this DailyOperationData.  # noqa: E501


        :return: The condlease of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._condlease

    @condlease.setter
    def condlease(self, condlease):
        """Sets the condlease of this DailyOperationData.


        :param condlease: The condlease of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._condlease = condlease

    @property
    def condroad(self):
        """Gets the condroad of this DailyOperationData.  # noqa: E501


        :return: The condroad of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._condroad

    @condroad.setter
    def condroad(self, condroad):
        """Sets the condroad of this DailyOperationData.


        :param condroad: The condroad of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._condroad = condroad

    @property
    def condtemp(self):
        """Gets the condtemp of this DailyOperationData.  # noqa: E501


        :return: The condtemp of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._condtemp

    @condtemp.setter
    def condtemp(self, condtemp):
        """Sets the condtemp of this DailyOperationData.


        :param condtemp: The condtemp of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._condtemp = condtemp

    @property
    def condwave(self):
        """Gets the condwave of this DailyOperationData.  # noqa: E501


        :return: The condwave of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._condwave

    @condwave.setter
    def condwave(self, condwave):
        """Sets the condwave of this DailyOperationData.


        :param condwave: The condwave of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._condwave = condwave

    @property
    def condweather(self):
        """Gets the condweather of this DailyOperationData.  # noqa: E501


        :return: The condweather of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._condweather

    @condweather.setter
    def condweather(self, condweather):
        """Sets the condweather of this DailyOperationData.


        :param condweather: The condweather of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._condweather = condweather

    @property
    def condwind(self):
        """Gets the condwind of this DailyOperationData.  # noqa: E501


        :return: The condwind of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._condwind

    @condwind.setter
    def condwind(self, condwind):
        """Sets the condwind of this DailyOperationData.


        :param condwind: The condwind of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._condwind = condwind

    @property
    def depthtvdendprojmethod(self):
        """Gets the depthtvdendprojmethod of this DailyOperationData.  # noqa: E501


        :return: The depthtvdendprojmethod of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._depthtvdendprojmethod

    @depthtvdendprojmethod.setter
    def depthtvdendprojmethod(self, depthtvdendprojmethod):
        """Sets the depthtvdendprojmethod of this DailyOperationData.


        :param depthtvdendprojmethod: The depthtvdendprojmethod of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._depthtvdendprojmethod = depthtvdendprojmethod

    @property
    def dttmend(self):
        """Gets the dttmend of this DailyOperationData.  # noqa: E501


        :return: The dttmend of this DailyOperationData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this DailyOperationData.


        :param dttmend: The dttmend of this DailyOperationData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this DailyOperationData.  # noqa: E501


        :return: The dttmstart of this DailyOperationData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this DailyOperationData.


        :param dttmstart: The dttmstart of this DailyOperationData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def durationsinceltinc(self):
        """Gets the durationsinceltinc of this DailyOperationData.  # noqa: E501


        :return: The durationsinceltinc of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._durationsinceltinc

    @durationsinceltinc.setter
    def durationsinceltinc(self, durationsinceltinc):
        """Sets the durationsinceltinc of this DailyOperationData.


        :param durationsinceltinc: The durationsinceltinc of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._durationsinceltinc = durationsinceltinc

    @property
    def durationsincerptinc(self):
        """Gets the durationsincerptinc of this DailyOperationData.  # noqa: E501


        :return: The durationsincerptinc of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._durationsincerptinc

    @durationsincerptinc.setter
    def durationsincerptinc(self, durationsincerptinc):
        """Sets the durationsincerptinc of this DailyOperationData.


        :param durationsincerptinc: The durationsincerptinc of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._durationsincerptinc = durationsincerptinc

    @property
    def gasbackgroundavg(self):
        """Gets the gasbackgroundavg of this DailyOperationData.  # noqa: E501


        :return: The gasbackgroundavg of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gasbackgroundavg

    @gasbackgroundavg.setter
    def gasbackgroundavg(self, gasbackgroundavg):
        """Sets the gasbackgroundavg of this DailyOperationData.


        :param gasbackgroundavg: The gasbackgroundavg of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gasbackgroundavg = gasbackgroundavg

    @property
    def gasbackgroundmax(self):
        """Gets the gasbackgroundmax of this DailyOperationData.  # noqa: E501


        :return: The gasbackgroundmax of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gasbackgroundmax

    @gasbackgroundmax.setter
    def gasbackgroundmax(self, gasbackgroundmax):
        """Sets the gasbackgroundmax of this DailyOperationData.


        :param gasbackgroundmax: The gasbackgroundmax of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gasbackgroundmax = gasbackgroundmax

    @property
    def gasconnectionavg(self):
        """Gets the gasconnectionavg of this DailyOperationData.  # noqa: E501


        :return: The gasconnectionavg of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gasconnectionavg

    @gasconnectionavg.setter
    def gasconnectionavg(self, gasconnectionavg):
        """Sets the gasconnectionavg of this DailyOperationData.


        :param gasconnectionavg: The gasconnectionavg of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gasconnectionavg = gasconnectionavg

    @property
    def gasconnectionmax(self):
        """Gets the gasconnectionmax of this DailyOperationData.  # noqa: E501


        :return: The gasconnectionmax of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gasconnectionmax

    @gasconnectionmax.setter
    def gasconnectionmax(self, gasconnectionmax):
        """Sets the gasconnectionmax of this DailyOperationData.


        :param gasconnectionmax: The gasconnectionmax of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gasconnectionmax = gasconnectionmax

    @property
    def gasdrillavg(self):
        """Gets the gasdrillavg of this DailyOperationData.  # noqa: E501


        :return: The gasdrillavg of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gasdrillavg

    @gasdrillavg.setter
    def gasdrillavg(self, gasdrillavg):
        """Sets the gasdrillavg of this DailyOperationData.


        :param gasdrillavg: The gasdrillavg of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gasdrillavg = gasdrillavg

    @property
    def gasdrillmax(self):
        """Gets the gasdrillmax of this DailyOperationData.  # noqa: E501


        :return: The gasdrillmax of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gasdrillmax

    @gasdrillmax.setter
    def gasdrillmax(self, gasdrillmax):
        """Sets the gasdrillmax of this DailyOperationData.


        :param gasdrillmax: The gasdrillmax of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gasdrillmax = gasdrillmax

    @property
    def gastripavg(self):
        """Gets the gastripavg of this DailyOperationData.  # noqa: E501


        :return: The gastripavg of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gastripavg

    @gastripavg.setter
    def gastripavg(self, gastripavg):
        """Sets the gastripavg of this DailyOperationData.


        :param gastripavg: The gastripavg of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gastripavg = gastripavg

    @property
    def gastripmax(self):
        """Gets the gastripmax of this DailyOperationData.  # noqa: E501


        :return: The gastripmax of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._gastripmax

    @gastripmax.setter
    def gastripmax(self, gastripmax):
        """Sets the gastripmax of this DailyOperationData.


        :param gastripmax: The gastripmax of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._gastripmax = gastripmax

    @property
    def h2smax(self):
        """Gets the h2smax of this DailyOperationData.  # noqa: E501


        :return: The h2smax of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._h2smax

    @h2smax.setter
    def h2smax(self, h2smax):
        """Sets the h2smax of this DailyOperationData.


        :param h2smax: The h2smax of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._h2smax = h2smax

    @property
    def idrec(self):
        """Gets the idrec of this DailyOperationData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DailyOperationData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecnextcas(self):
        """Gets the idrecnextcas of this DailyOperationData.  # noqa: E501


        :return: The idrecnextcas of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecnextcas

    @idrecnextcas.setter
    def idrecnextcas(self, idrecnextcas):
        """Sets the idrecnextcas of this DailyOperationData.


        :param idrecnextcas: The idrecnextcas of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._idrecnextcas = idrecnextcas

    @property
    def idrecparent(self):
        """Gets the idrecparent of this DailyOperationData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this DailyOperationData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this DailyOperationData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this DailyOperationData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DailyOperationData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DailyOperationData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def plannextrptops(self):
        """Gets the plannextrptops of this DailyOperationData.  # noqa: E501


        :return: The plannextrptops of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._plannextrptops

    @plannextrptops.setter
    def plannextrptops(self, plannextrptops):
        """Sets the plannextrptops of this DailyOperationData.


        :param plannextrptops: The plannextrptops of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._plannextrptops = plannextrptops

    @property
    def remarks(self):
        """Gets the remarks of this DailyOperationData.  # noqa: E501


        :return: The remarks of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this DailyOperationData.


        :param remarks: The remarks of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def rigtime(self):
        """Gets the rigtime of this DailyOperationData.  # noqa: E501


        :return: The rigtime of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._rigtime

    @rigtime.setter
    def rigtime(self, rigtime):
        """Sets the rigtime of this DailyOperationData.


        :param rigtime: The rigtime of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._rigtime = rigtime

    @property
    def rpttmactops(self):
        """Gets the rpttmactops of this DailyOperationData.  # noqa: E501


        :return: The rpttmactops of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._rpttmactops

    @rpttmactops.setter
    def rpttmactops(self, rpttmactops):
        """Sets the rpttmactops of this DailyOperationData.


        :param rpttmactops: The rpttmactops of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._rpttmactops = rpttmactops

    @property
    def statusend(self):
        """Gets the statusend of this DailyOperationData.  # noqa: E501


        :return: The statusend of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._statusend

    @statusend.setter
    def statusend(self, statusend):
        """Sets the statusend of this DailyOperationData.


        :param statusend: The statusend of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._statusend = statusend

    @property
    def summaryops(self):
        """Gets the summaryops of this DailyOperationData.  # noqa: E501


        :return: The summaryops of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._summaryops

    @summaryops.setter
    def summaryops(self, summaryops):
        """Sets the summaryops of this DailyOperationData.


        :param summaryops: The summaryops of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._summaryops = summaryops

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this DailyOperationData.  # noqa: E501


        :return: The userboolean1 of this DailyOperationData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this DailyOperationData.


        :param userboolean1: The userboolean1 of this DailyOperationData.  # noqa: E501
        :type: bool
        """

        self._userboolean1 = userboolean1

    @property
    def userboolean2(self):
        """Gets the userboolean2 of this DailyOperationData.  # noqa: E501


        :return: The userboolean2 of this DailyOperationData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean2

    @userboolean2.setter
    def userboolean2(self, userboolean2):
        """Sets the userboolean2 of this DailyOperationData.


        :param userboolean2: The userboolean2 of this DailyOperationData.  # noqa: E501
        :type: bool
        """

        self._userboolean2 = userboolean2

    @property
    def usernum1(self):
        """Gets the usernum1 of this DailyOperationData.  # noqa: E501


        :return: The usernum1 of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this DailyOperationData.


        :param usernum1: The usernum1 of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this DailyOperationData.  # noqa: E501


        :return: The usernum2 of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this DailyOperationData.


        :param usernum2: The usernum2 of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this DailyOperationData.  # noqa: E501


        :return: The usernum3 of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this DailyOperationData.


        :param usernum3: The usernum3 of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def usernum4(self):
        """Gets the usernum4 of this DailyOperationData.  # noqa: E501


        :return: The usernum4 of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum4

    @usernum4.setter
    def usernum4(self, usernum4):
        """Sets the usernum4 of this DailyOperationData.


        :param usernum4: The usernum4 of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._usernum4 = usernum4

    @property
    def usernum5(self):
        """Gets the usernum5 of this DailyOperationData.  # noqa: E501


        :return: The usernum5 of this DailyOperationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum5

    @usernum5.setter
    def usernum5(self, usernum5):
        """Sets the usernum5 of this DailyOperationData.


        :param usernum5: The usernum5 of this DailyOperationData.  # noqa: E501
        :type: float
        """

        self._usernum5 = usernum5

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this DailyOperationData.  # noqa: E501


        :return: The usertxt1 of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this DailyOperationData.


        :param usertxt1: The usertxt1 of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this DailyOperationData.  # noqa: E501


        :return: The usertxt2 of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this DailyOperationData.


        :param usertxt2: The usertxt2 of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this DailyOperationData.  # noqa: E501


        :return: The usertxt3 of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this DailyOperationData.


        :param usertxt3: The usertxt3 of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this DailyOperationData.  # noqa: E501


        :return: The usertxt4 of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this DailyOperationData.


        :param usertxt4: The usertxt4 of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this DailyOperationData.  # noqa: E501


        :return: The usertxt5 of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this DailyOperationData.


        :param usertxt5: The usertxt5 of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def systag(self):
        """Gets the systag of this DailyOperationData.  # noqa: E501


        :return: The systag of this DailyOperationData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DailyOperationData.


        :param systag: The systag of this DailyOperationData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DailyOperationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DailyOperationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
