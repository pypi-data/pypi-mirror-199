# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chartofaccounts': 'str',
        'client': 'str',
        'complexityindex': 'str',
        'costfinalactual': 'float',
        'currencycode': 'str',
        'currencyexchangerate': 'float',
        'dttmend': 'datetime',
        'dttmspud': 'datetime',
        'dttmstart': 'datetime',
        'dttmstartplan': 'datetime',
        'idrec': 'str',
        'idrectub': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'jobida': 'str',
        'jobidb': 'str',
        'jobidc': 'str',
        'jobsubtyp': 'str',
        'jobtyp': 'str',
        'objective': 'str',
        'objectivegeo': 'str',
        'rateactualcond': 'float',
        'rateactualgas': 'float',
        'rateactualoil': 'float',
        'rateactualwater': 'float',
        'ratetargetcond': 'float',
        'ratetargetgas': 'float',
        'ratetargetoil': 'float',
        'ratetargetwater': 'float',
        'responsiblegrp1': 'str',
        'responsiblegrp2': 'str',
        'responsiblegrp3': 'str',
        'resulttechnical': 'str',
        'status1': 'str',
        'status2': 'str',
        'summary': 'str',
        'summarygeo': 'str',
        'targetdepth': 'float',
        'targetform': 'str',
        'userboolean1': 'bool',
        'userboolean2': 'bool',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'usernum4': 'float',
        'usernum5': 'float',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'wvtyp': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'chartofaccounts': 'chartofaccounts',
        'client': 'client',
        'complexityindex': 'complexityindex',
        'costfinalactual': 'costfinalactual',
        'currencycode': 'currencycode',
        'currencyexchangerate': 'currencyexchangerate',
        'dttmend': 'dttmend',
        'dttmspud': 'dttmspud',
        'dttmstart': 'dttmstart',
        'dttmstartplan': 'dttmstartplan',
        'idrec': 'idrec',
        'idrectub': 'idrectub',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'jobida': 'jobida',
        'jobidb': 'jobidb',
        'jobidc': 'jobidc',
        'jobsubtyp': 'jobsubtyp',
        'jobtyp': 'jobtyp',
        'objective': 'objective',
        'objectivegeo': 'objectivegeo',
        'rateactualcond': 'rateactualcond',
        'rateactualgas': 'rateactualgas',
        'rateactualoil': 'rateactualoil',
        'rateactualwater': 'rateactualwater',
        'ratetargetcond': 'ratetargetcond',
        'ratetargetgas': 'ratetargetgas',
        'ratetargetoil': 'ratetargetoil',
        'ratetargetwater': 'ratetargetwater',
        'responsiblegrp1': 'responsiblegrp1',
        'responsiblegrp2': 'responsiblegrp2',
        'responsiblegrp3': 'responsiblegrp3',
        'resulttechnical': 'resulttechnical',
        'status1': 'status1',
        'status2': 'status2',
        'summary': 'summary',
        'summarygeo': 'summarygeo',
        'targetdepth': 'targetdepth',
        'targetform': 'targetform',
        'userboolean1': 'userboolean1',
        'userboolean2': 'userboolean2',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usernum4': 'usernum4',
        'usernum5': 'usernum5',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'wvtyp': 'wvtyp',
        'systag': 'systag'
    }

    def __init__(self, chartofaccounts=None, client=None, complexityindex=None, costfinalactual=None, currencycode=None, currencyexchangerate=None, dttmend=None, dttmspud=None, dttmstart=None, dttmstartplan=None, idrec=None, idrectub=None, idrecwellbore=None, idwell=None, jobida=None, jobidb=None, jobidc=None, jobsubtyp=None, jobtyp=None, objective=None, objectivegeo=None, rateactualcond=None, rateactualgas=None, rateactualoil=None, rateactualwater=None, ratetargetcond=None, ratetargetgas=None, ratetargetoil=None, ratetargetwater=None, responsiblegrp1=None, responsiblegrp2=None, responsiblegrp3=None, resulttechnical=None, status1=None, status2=None, summary=None, summarygeo=None, targetdepth=None, targetform=None, userboolean1=None, userboolean2=None, usernum1=None, usernum2=None, usernum3=None, usernum4=None, usernum5=None, usertxt1=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, wvtyp=None, systag=None):  # noqa: E501
        """JobData - a model defined in Swagger"""  # noqa: E501
        self._chartofaccounts = None
        self._client = None
        self._complexityindex = None
        self._costfinalactual = None
        self._currencycode = None
        self._currencyexchangerate = None
        self._dttmend = None
        self._dttmspud = None
        self._dttmstart = None
        self._dttmstartplan = None
        self._idrec = None
        self._idrectub = None
        self._idrecwellbore = None
        self._idwell = None
        self._jobida = None
        self._jobidb = None
        self._jobidc = None
        self._jobsubtyp = None
        self._jobtyp = None
        self._objective = None
        self._objectivegeo = None
        self._rateactualcond = None
        self._rateactualgas = None
        self._rateactualoil = None
        self._rateactualwater = None
        self._ratetargetcond = None
        self._ratetargetgas = None
        self._ratetargetoil = None
        self._ratetargetwater = None
        self._responsiblegrp1 = None
        self._responsiblegrp2 = None
        self._responsiblegrp3 = None
        self._resulttechnical = None
        self._status1 = None
        self._status2 = None
        self._summary = None
        self._summarygeo = None
        self._targetdepth = None
        self._targetform = None
        self._userboolean1 = None
        self._userboolean2 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usernum4 = None
        self._usernum5 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._wvtyp = None
        self._systag = None
        self.discriminator = None
        if chartofaccounts is not None:
            self.chartofaccounts = chartofaccounts
        if client is not None:
            self.client = client
        if complexityindex is not None:
            self.complexityindex = complexityindex
        if costfinalactual is not None:
            self.costfinalactual = costfinalactual
        if currencycode is not None:
            self.currencycode = currencycode
        if currencyexchangerate is not None:
            self.currencyexchangerate = currencyexchangerate
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmspud is not None:
            self.dttmspud = dttmspud
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if dttmstartplan is not None:
            self.dttmstartplan = dttmstartplan
        if idrec is not None:
            self.idrec = idrec
        if idrectub is not None:
            self.idrectub = idrectub
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if jobida is not None:
            self.jobida = jobida
        if jobidb is not None:
            self.jobidb = jobidb
        if jobidc is not None:
            self.jobidc = jobidc
        if jobsubtyp is not None:
            self.jobsubtyp = jobsubtyp
        if jobtyp is not None:
            self.jobtyp = jobtyp
        if objective is not None:
            self.objective = objective
        if objectivegeo is not None:
            self.objectivegeo = objectivegeo
        if rateactualcond is not None:
            self.rateactualcond = rateactualcond
        if rateactualgas is not None:
            self.rateactualgas = rateactualgas
        if rateactualoil is not None:
            self.rateactualoil = rateactualoil
        if rateactualwater is not None:
            self.rateactualwater = rateactualwater
        if ratetargetcond is not None:
            self.ratetargetcond = ratetargetcond
        if ratetargetgas is not None:
            self.ratetargetgas = ratetargetgas
        if ratetargetoil is not None:
            self.ratetargetoil = ratetargetoil
        if ratetargetwater is not None:
            self.ratetargetwater = ratetargetwater
        if responsiblegrp1 is not None:
            self.responsiblegrp1 = responsiblegrp1
        if responsiblegrp2 is not None:
            self.responsiblegrp2 = responsiblegrp2
        if responsiblegrp3 is not None:
            self.responsiblegrp3 = responsiblegrp3
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if status1 is not None:
            self.status1 = status1
        if status2 is not None:
            self.status2 = status2
        if summary is not None:
            self.summary = summary
        if summarygeo is not None:
            self.summarygeo = summarygeo
        if targetdepth is not None:
            self.targetdepth = targetdepth
        if targetform is not None:
            self.targetform = targetform
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if userboolean2 is not None:
            self.userboolean2 = userboolean2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usernum4 is not None:
            self.usernum4 = usernum4
        if usernum5 is not None:
            self.usernum5 = usernum5
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if wvtyp is not None:
            self.wvtyp = wvtyp
        if systag is not None:
            self.systag = systag

    @property
    def chartofaccounts(self):
        """Gets the chartofaccounts of this JobData.  # noqa: E501


        :return: The chartofaccounts of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._chartofaccounts

    @chartofaccounts.setter
    def chartofaccounts(self, chartofaccounts):
        """Sets the chartofaccounts of this JobData.


        :param chartofaccounts: The chartofaccounts of this JobData.  # noqa: E501
        :type: str
        """

        self._chartofaccounts = chartofaccounts

    @property
    def client(self):
        """Gets the client of this JobData.  # noqa: E501


        :return: The client of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this JobData.


        :param client: The client of this JobData.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def complexityindex(self):
        """Gets the complexityindex of this JobData.  # noqa: E501


        :return: The complexityindex of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._complexityindex

    @complexityindex.setter
    def complexityindex(self, complexityindex):
        """Sets the complexityindex of this JobData.


        :param complexityindex: The complexityindex of this JobData.  # noqa: E501
        :type: str
        """

        self._complexityindex = complexityindex

    @property
    def costfinalactual(self):
        """Gets the costfinalactual of this JobData.  # noqa: E501


        :return: The costfinalactual of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._costfinalactual

    @costfinalactual.setter
    def costfinalactual(self, costfinalactual):
        """Sets the costfinalactual of this JobData.


        :param costfinalactual: The costfinalactual of this JobData.  # noqa: E501
        :type: float
        """

        self._costfinalactual = costfinalactual

    @property
    def currencycode(self):
        """Gets the currencycode of this JobData.  # noqa: E501


        :return: The currencycode of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._currencycode

    @currencycode.setter
    def currencycode(self, currencycode):
        """Sets the currencycode of this JobData.


        :param currencycode: The currencycode of this JobData.  # noqa: E501
        :type: str
        """

        self._currencycode = currencycode

    @property
    def currencyexchangerate(self):
        """Gets the currencyexchangerate of this JobData.  # noqa: E501


        :return: The currencyexchangerate of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._currencyexchangerate

    @currencyexchangerate.setter
    def currencyexchangerate(self, currencyexchangerate):
        """Sets the currencyexchangerate of this JobData.


        :param currencyexchangerate: The currencyexchangerate of this JobData.  # noqa: E501
        :type: float
        """

        self._currencyexchangerate = currencyexchangerate

    @property
    def dttmend(self):
        """Gets the dttmend of this JobData.  # noqa: E501


        :return: The dttmend of this JobData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this JobData.


        :param dttmend: The dttmend of this JobData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmspud(self):
        """Gets the dttmspud of this JobData.  # noqa: E501


        :return: The dttmspud of this JobData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmspud

    @dttmspud.setter
    def dttmspud(self, dttmspud):
        """Sets the dttmspud of this JobData.


        :param dttmspud: The dttmspud of this JobData.  # noqa: E501
        :type: datetime
        """

        self._dttmspud = dttmspud

    @property
    def dttmstart(self):
        """Gets the dttmstart of this JobData.  # noqa: E501


        :return: The dttmstart of this JobData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this JobData.


        :param dttmstart: The dttmstart of this JobData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def dttmstartplan(self):
        """Gets the dttmstartplan of this JobData.  # noqa: E501


        :return: The dttmstartplan of this JobData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartplan

    @dttmstartplan.setter
    def dttmstartplan(self, dttmstartplan):
        """Sets the dttmstartplan of this JobData.


        :param dttmstartplan: The dttmstartplan of this JobData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartplan = dttmstartplan

    @property
    def idrec(self):
        """Gets the idrec of this JobData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this JobData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrectub(self):
        """Gets the idrectub of this JobData.  # noqa: E501


        :return: The idrectub of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._idrectub

    @idrectub.setter
    def idrectub(self, idrectub):
        """Sets the idrectub of this JobData.


        :param idrectub: The idrectub of this JobData.  # noqa: E501
        :type: str
        """

        self._idrectub = idrectub

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this JobData.  # noqa: E501


        :return: The idrecwellbore of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this JobData.


        :param idrecwellbore: The idrecwellbore of this JobData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this JobData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobData.

        id of well  # noqa: E501

        :param idwell: The idwell of this JobData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def jobida(self):
        """Gets the jobida of this JobData.  # noqa: E501


        :return: The jobida of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._jobida

    @jobida.setter
    def jobida(self, jobida):
        """Sets the jobida of this JobData.


        :param jobida: The jobida of this JobData.  # noqa: E501
        :type: str
        """

        self._jobida = jobida

    @property
    def jobidb(self):
        """Gets the jobidb of this JobData.  # noqa: E501


        :return: The jobidb of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._jobidb

    @jobidb.setter
    def jobidb(self, jobidb):
        """Sets the jobidb of this JobData.


        :param jobidb: The jobidb of this JobData.  # noqa: E501
        :type: str
        """

        self._jobidb = jobidb

    @property
    def jobidc(self):
        """Gets the jobidc of this JobData.  # noqa: E501


        :return: The jobidc of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._jobidc

    @jobidc.setter
    def jobidc(self, jobidc):
        """Sets the jobidc of this JobData.


        :param jobidc: The jobidc of this JobData.  # noqa: E501
        :type: str
        """

        self._jobidc = jobidc

    @property
    def jobsubtyp(self):
        """Gets the jobsubtyp of this JobData.  # noqa: E501


        :return: The jobsubtyp of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._jobsubtyp

    @jobsubtyp.setter
    def jobsubtyp(self, jobsubtyp):
        """Sets the jobsubtyp of this JobData.


        :param jobsubtyp: The jobsubtyp of this JobData.  # noqa: E501
        :type: str
        """

        self._jobsubtyp = jobsubtyp

    @property
    def jobtyp(self):
        """Gets the jobtyp of this JobData.  # noqa: E501


        :return: The jobtyp of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._jobtyp

    @jobtyp.setter
    def jobtyp(self, jobtyp):
        """Sets the jobtyp of this JobData.


        :param jobtyp: The jobtyp of this JobData.  # noqa: E501
        :type: str
        """

        self._jobtyp = jobtyp

    @property
    def objective(self):
        """Gets the objective of this JobData.  # noqa: E501


        :return: The objective of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this JobData.


        :param objective: The objective of this JobData.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def objectivegeo(self):
        """Gets the objectivegeo of this JobData.  # noqa: E501


        :return: The objectivegeo of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._objectivegeo

    @objectivegeo.setter
    def objectivegeo(self, objectivegeo):
        """Sets the objectivegeo of this JobData.


        :param objectivegeo: The objectivegeo of this JobData.  # noqa: E501
        :type: str
        """

        self._objectivegeo = objectivegeo

    @property
    def rateactualcond(self):
        """Gets the rateactualcond of this JobData.  # noqa: E501


        :return: The rateactualcond of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._rateactualcond

    @rateactualcond.setter
    def rateactualcond(self, rateactualcond):
        """Sets the rateactualcond of this JobData.


        :param rateactualcond: The rateactualcond of this JobData.  # noqa: E501
        :type: float
        """

        self._rateactualcond = rateactualcond

    @property
    def rateactualgas(self):
        """Gets the rateactualgas of this JobData.  # noqa: E501


        :return: The rateactualgas of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._rateactualgas

    @rateactualgas.setter
    def rateactualgas(self, rateactualgas):
        """Sets the rateactualgas of this JobData.


        :param rateactualgas: The rateactualgas of this JobData.  # noqa: E501
        :type: float
        """

        self._rateactualgas = rateactualgas

    @property
    def rateactualoil(self):
        """Gets the rateactualoil of this JobData.  # noqa: E501


        :return: The rateactualoil of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._rateactualoil

    @rateactualoil.setter
    def rateactualoil(self, rateactualoil):
        """Sets the rateactualoil of this JobData.


        :param rateactualoil: The rateactualoil of this JobData.  # noqa: E501
        :type: float
        """

        self._rateactualoil = rateactualoil

    @property
    def rateactualwater(self):
        """Gets the rateactualwater of this JobData.  # noqa: E501


        :return: The rateactualwater of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._rateactualwater

    @rateactualwater.setter
    def rateactualwater(self, rateactualwater):
        """Sets the rateactualwater of this JobData.


        :param rateactualwater: The rateactualwater of this JobData.  # noqa: E501
        :type: float
        """

        self._rateactualwater = rateactualwater

    @property
    def ratetargetcond(self):
        """Gets the ratetargetcond of this JobData.  # noqa: E501


        :return: The ratetargetcond of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetcond

    @ratetargetcond.setter
    def ratetargetcond(self, ratetargetcond):
        """Sets the ratetargetcond of this JobData.


        :param ratetargetcond: The ratetargetcond of this JobData.  # noqa: E501
        :type: float
        """

        self._ratetargetcond = ratetargetcond

    @property
    def ratetargetgas(self):
        """Gets the ratetargetgas of this JobData.  # noqa: E501


        :return: The ratetargetgas of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetgas

    @ratetargetgas.setter
    def ratetargetgas(self, ratetargetgas):
        """Sets the ratetargetgas of this JobData.


        :param ratetargetgas: The ratetargetgas of this JobData.  # noqa: E501
        :type: float
        """

        self._ratetargetgas = ratetargetgas

    @property
    def ratetargetoil(self):
        """Gets the ratetargetoil of this JobData.  # noqa: E501


        :return: The ratetargetoil of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetoil

    @ratetargetoil.setter
    def ratetargetoil(self, ratetargetoil):
        """Sets the ratetargetoil of this JobData.


        :param ratetargetoil: The ratetargetoil of this JobData.  # noqa: E501
        :type: float
        """

        self._ratetargetoil = ratetargetoil

    @property
    def ratetargetwater(self):
        """Gets the ratetargetwater of this JobData.  # noqa: E501


        :return: The ratetargetwater of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetwater

    @ratetargetwater.setter
    def ratetargetwater(self, ratetargetwater):
        """Sets the ratetargetwater of this JobData.


        :param ratetargetwater: The ratetargetwater of this JobData.  # noqa: E501
        :type: float
        """

        self._ratetargetwater = ratetargetwater

    @property
    def responsiblegrp1(self):
        """Gets the responsiblegrp1 of this JobData.  # noqa: E501


        :return: The responsiblegrp1 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._responsiblegrp1

    @responsiblegrp1.setter
    def responsiblegrp1(self, responsiblegrp1):
        """Sets the responsiblegrp1 of this JobData.


        :param responsiblegrp1: The responsiblegrp1 of this JobData.  # noqa: E501
        :type: str
        """

        self._responsiblegrp1 = responsiblegrp1

    @property
    def responsiblegrp2(self):
        """Gets the responsiblegrp2 of this JobData.  # noqa: E501


        :return: The responsiblegrp2 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._responsiblegrp2

    @responsiblegrp2.setter
    def responsiblegrp2(self, responsiblegrp2):
        """Sets the responsiblegrp2 of this JobData.


        :param responsiblegrp2: The responsiblegrp2 of this JobData.  # noqa: E501
        :type: str
        """

        self._responsiblegrp2 = responsiblegrp2

    @property
    def responsiblegrp3(self):
        """Gets the responsiblegrp3 of this JobData.  # noqa: E501


        :return: The responsiblegrp3 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._responsiblegrp3

    @responsiblegrp3.setter
    def responsiblegrp3(self, responsiblegrp3):
        """Sets the responsiblegrp3 of this JobData.


        :param responsiblegrp3: The responsiblegrp3 of this JobData.  # noqa: E501
        :type: str
        """

        self._responsiblegrp3 = responsiblegrp3

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this JobData.  # noqa: E501


        :return: The resulttechnical of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this JobData.


        :param resulttechnical: The resulttechnical of this JobData.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def status1(self):
        """Gets the status1 of this JobData.  # noqa: E501


        :return: The status1 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._status1

    @status1.setter
    def status1(self, status1):
        """Sets the status1 of this JobData.


        :param status1: The status1 of this JobData.  # noqa: E501
        :type: str
        """

        self._status1 = status1

    @property
    def status2(self):
        """Gets the status2 of this JobData.  # noqa: E501


        :return: The status2 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._status2

    @status2.setter
    def status2(self, status2):
        """Sets the status2 of this JobData.


        :param status2: The status2 of this JobData.  # noqa: E501
        :type: str
        """

        self._status2 = status2

    @property
    def summary(self):
        """Gets the summary of this JobData.  # noqa: E501


        :return: The summary of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this JobData.


        :param summary: The summary of this JobData.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def summarygeo(self):
        """Gets the summarygeo of this JobData.  # noqa: E501


        :return: The summarygeo of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._summarygeo

    @summarygeo.setter
    def summarygeo(self, summarygeo):
        """Sets the summarygeo of this JobData.


        :param summarygeo: The summarygeo of this JobData.  # noqa: E501
        :type: str
        """

        self._summarygeo = summarygeo

    @property
    def targetdepth(self):
        """Gets the targetdepth of this JobData.  # noqa: E501


        :return: The targetdepth of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._targetdepth

    @targetdepth.setter
    def targetdepth(self, targetdepth):
        """Sets the targetdepth of this JobData.


        :param targetdepth: The targetdepth of this JobData.  # noqa: E501
        :type: float
        """

        self._targetdepth = targetdepth

    @property
    def targetform(self):
        """Gets the targetform of this JobData.  # noqa: E501


        :return: The targetform of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._targetform

    @targetform.setter
    def targetform(self, targetform):
        """Sets the targetform of this JobData.


        :param targetform: The targetform of this JobData.  # noqa: E501
        :type: str
        """

        self._targetform = targetform

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this JobData.  # noqa: E501


        :return: The userboolean1 of this JobData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this JobData.


        :param userboolean1: The userboolean1 of this JobData.  # noqa: E501
        :type: bool
        """

        self._userboolean1 = userboolean1

    @property
    def userboolean2(self):
        """Gets the userboolean2 of this JobData.  # noqa: E501


        :return: The userboolean2 of this JobData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean2

    @userboolean2.setter
    def userboolean2(self, userboolean2):
        """Sets the userboolean2 of this JobData.


        :param userboolean2: The userboolean2 of this JobData.  # noqa: E501
        :type: bool
        """

        self._userboolean2 = userboolean2

    @property
    def usernum1(self):
        """Gets the usernum1 of this JobData.  # noqa: E501


        :return: The usernum1 of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this JobData.


        :param usernum1: The usernum1 of this JobData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this JobData.  # noqa: E501


        :return: The usernum2 of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this JobData.


        :param usernum2: The usernum2 of this JobData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this JobData.  # noqa: E501


        :return: The usernum3 of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this JobData.


        :param usernum3: The usernum3 of this JobData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def usernum4(self):
        """Gets the usernum4 of this JobData.  # noqa: E501


        :return: The usernum4 of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._usernum4

    @usernum4.setter
    def usernum4(self, usernum4):
        """Sets the usernum4 of this JobData.


        :param usernum4: The usernum4 of this JobData.  # noqa: E501
        :type: float
        """

        self._usernum4 = usernum4

    @property
    def usernum5(self):
        """Gets the usernum5 of this JobData.  # noqa: E501


        :return: The usernum5 of this JobData.  # noqa: E501
        :rtype: float
        """
        return self._usernum5

    @usernum5.setter
    def usernum5(self, usernum5):
        """Sets the usernum5 of this JobData.


        :param usernum5: The usernum5 of this JobData.  # noqa: E501
        :type: float
        """

        self._usernum5 = usernum5

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this JobData.  # noqa: E501


        :return: The usertxt1 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this JobData.


        :param usertxt1: The usertxt1 of this JobData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this JobData.  # noqa: E501


        :return: The usertxt2 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this JobData.


        :param usertxt2: The usertxt2 of this JobData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this JobData.  # noqa: E501


        :return: The usertxt3 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this JobData.


        :param usertxt3: The usertxt3 of this JobData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this JobData.  # noqa: E501


        :return: The usertxt4 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this JobData.


        :param usertxt4: The usertxt4 of this JobData.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this JobData.  # noqa: E501


        :return: The usertxt5 of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this JobData.


        :param usertxt5: The usertxt5 of this JobData.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def wvtyp(self):
        """Gets the wvtyp of this JobData.  # noqa: E501


        :return: The wvtyp of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._wvtyp

    @wvtyp.setter
    def wvtyp(self, wvtyp):
        """Sets the wvtyp of this JobData.


        :param wvtyp: The wvtyp of this JobData.  # noqa: E501
        :type: str
        """

        self._wvtyp = wvtyp

    @property
    def systag(self):
        """Gets the systag of this JobData.  # noqa: E501


        :return: The systag of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobData.


        :param systag: The systag of this JobData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
