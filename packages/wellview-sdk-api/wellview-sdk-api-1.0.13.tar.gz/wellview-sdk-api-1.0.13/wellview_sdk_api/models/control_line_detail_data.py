# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ControlLineDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'controlfluidtyp': 'str',
        'encapsulated': 'bool',
        'encapsulatedtyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellheadcompsub': 'str',
        'idwell': 'str',
        'material': 'str',
        'presrating': 'float',
        'refno': 'str',
        'szid': 'float',
        'szod': 'float',
        'temprating': 'float',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'controlfluidtyp': 'controlfluidtyp',
        'encapsulated': 'encapsulated',
        'encapsulatedtyp': 'encapsulatedtyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellheadcompsub': 'idrecwellheadcompsub',
        'idwell': 'idwell',
        'material': 'material',
        'presrating': 'presrating',
        'refno': 'refno',
        'szid': 'szid',
        'szod': 'szod',
        'temprating': 'temprating',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, controlfluidtyp=None, encapsulated=None, encapsulatedtyp=None, idrec=None, idrecparent=None, idrecwellheadcompsub=None, idwell=None, material=None, presrating=None, refno=None, szid=None, szod=None, temprating=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """ControlLineDetailData - a model defined in Swagger"""  # noqa: E501
        self._controlfluidtyp = None
        self._encapsulated = None
        self._encapsulatedtyp = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellheadcompsub = None
        self._idwell = None
        self._material = None
        self._presrating = None
        self._refno = None
        self._szid = None
        self._szod = None
        self._temprating = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if controlfluidtyp is not None:
            self.controlfluidtyp = controlfluidtyp
        if encapsulated is not None:
            self.encapsulated = encapsulated
        if encapsulatedtyp is not None:
            self.encapsulatedtyp = encapsulatedtyp
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellheadcompsub is not None:
            self.idrecwellheadcompsub = idrecwellheadcompsub
        self.idwell = idwell
        if material is not None:
            self.material = material
        if presrating is not None:
            self.presrating = presrating
        if refno is not None:
            self.refno = refno
        if szid is not None:
            self.szid = szid
        if szod is not None:
            self.szod = szod
        if temprating is not None:
            self.temprating = temprating
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def controlfluidtyp(self):
        """Gets the controlfluidtyp of this ControlLineDetailData.  # noqa: E501


        :return: The controlfluidtyp of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._controlfluidtyp

    @controlfluidtyp.setter
    def controlfluidtyp(self, controlfluidtyp):
        """Sets the controlfluidtyp of this ControlLineDetailData.


        :param controlfluidtyp: The controlfluidtyp of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._controlfluidtyp = controlfluidtyp

    @property
    def encapsulated(self):
        """Gets the encapsulated of this ControlLineDetailData.  # noqa: E501


        :return: The encapsulated of this ControlLineDetailData.  # noqa: E501
        :rtype: bool
        """
        return self._encapsulated

    @encapsulated.setter
    def encapsulated(self, encapsulated):
        """Sets the encapsulated of this ControlLineDetailData.


        :param encapsulated: The encapsulated of this ControlLineDetailData.  # noqa: E501
        :type: bool
        """

        self._encapsulated = encapsulated

    @property
    def encapsulatedtyp(self):
        """Gets the encapsulatedtyp of this ControlLineDetailData.  # noqa: E501


        :return: The encapsulatedtyp of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._encapsulatedtyp

    @encapsulatedtyp.setter
    def encapsulatedtyp(self, encapsulatedtyp):
        """Sets the encapsulatedtyp of this ControlLineDetailData.


        :param encapsulatedtyp: The encapsulatedtyp of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._encapsulatedtyp = encapsulatedtyp

    @property
    def idrec(self):
        """Gets the idrec of this ControlLineDetailData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ControlLineDetailData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ControlLineDetailData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ControlLineDetailData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ControlLineDetailData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellheadcompsub(self):
        """Gets the idrecwellheadcompsub of this ControlLineDetailData.  # noqa: E501


        :return: The idrecwellheadcompsub of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellheadcompsub

    @idrecwellheadcompsub.setter
    def idrecwellheadcompsub(self, idrecwellheadcompsub):
        """Sets the idrecwellheadcompsub of this ControlLineDetailData.


        :param idrecwellheadcompsub: The idrecwellheadcompsub of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._idrecwellheadcompsub = idrecwellheadcompsub

    @property
    def idwell(self):
        """Gets the idwell of this ControlLineDetailData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ControlLineDetailData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ControlLineDetailData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def material(self):
        """Gets the material of this ControlLineDetailData.  # noqa: E501


        :return: The material of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this ControlLineDetailData.


        :param material: The material of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._material = material

    @property
    def presrating(self):
        """Gets the presrating of this ControlLineDetailData.  # noqa: E501


        :return: The presrating of this ControlLineDetailData.  # noqa: E501
        :rtype: float
        """
        return self._presrating

    @presrating.setter
    def presrating(self, presrating):
        """Sets the presrating of this ControlLineDetailData.


        :param presrating: The presrating of this ControlLineDetailData.  # noqa: E501
        :type: float
        """

        self._presrating = presrating

    @property
    def refno(self):
        """Gets the refno of this ControlLineDetailData.  # noqa: E501


        :return: The refno of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this ControlLineDetailData.


        :param refno: The refno of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def szid(self):
        """Gets the szid of this ControlLineDetailData.  # noqa: E501


        :return: The szid of this ControlLineDetailData.  # noqa: E501
        :rtype: float
        """
        return self._szid

    @szid.setter
    def szid(self, szid):
        """Sets the szid of this ControlLineDetailData.


        :param szid: The szid of this ControlLineDetailData.  # noqa: E501
        :type: float
        """

        self._szid = szid

    @property
    def szod(self):
        """Gets the szod of this ControlLineDetailData.  # noqa: E501


        :return: The szod of this ControlLineDetailData.  # noqa: E501
        :rtype: float
        """
        return self._szod

    @szod.setter
    def szod(self, szod):
        """Sets the szod of this ControlLineDetailData.


        :param szod: The szod of this ControlLineDetailData.  # noqa: E501
        :type: float
        """

        self._szod = szod

    @property
    def temprating(self):
        """Gets the temprating of this ControlLineDetailData.  # noqa: E501


        :return: The temprating of this ControlLineDetailData.  # noqa: E501
        :rtype: float
        """
        return self._temprating

    @temprating.setter
    def temprating(self, temprating):
        """Sets the temprating of this ControlLineDetailData.


        :param temprating: The temprating of this ControlLineDetailData.  # noqa: E501
        :type: float
        """

        self._temprating = temprating

    @property
    def typ1(self):
        """Gets the typ1 of this ControlLineDetailData.  # noqa: E501


        :return: The typ1 of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this ControlLineDetailData.


        :param typ1: The typ1 of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this ControlLineDetailData.  # noqa: E501


        :return: The typ2 of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this ControlLineDetailData.


        :param typ2: The typ2 of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this ControlLineDetailData.  # noqa: E501


        :return: The systag of this ControlLineDetailData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ControlLineDetailData.


        :param systag: The systag of this ControlLineDetailData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ControlLineDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControlLineDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
