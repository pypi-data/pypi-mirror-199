# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellReviewData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'compliancepriority': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecjob': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'prescas': 'float',
        'presline': 'float',
        'presnote': 'str',
        'prestargetline': 'float',
        'prestub': 'float',
        'productdestination': 'str',
        'proposedprojcost': 'float',
        'proposedprojdes': 'str',
        'proposedprojdur': 'float',
        'proposedprojpriority': 'str',
        'proposedprojstatus': 'str',
        'proposedprojtyp': 'str',
        'ratemaxdelivcond': 'float',
        'ratemaxdelivgas': 'float',
        'ratemaxdelivoil': 'float',
        'ratemaxdelivwater': 'float',
        'rateoptimumcond': 'float',
        'rateoptimumgas': 'float',
        'rateoptimumoil': 'float',
        'rateoptimumwater': 'float',
        'ratetargetcond': 'float',
        'ratetargetgas': 'float',
        'ratetargetoil': 'float',
        'ratetargetwater': 'float',
        'reviewedby': 'str',
        'typ': 'str',
        'usernum1': 'float',
        'usertxt1': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'compliancepriority': 'compliancepriority',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'presline': 'presline',
        'presnote': 'presnote',
        'prestargetline': 'prestargetline',
        'prestub': 'prestub',
        'productdestination': 'productdestination',
        'proposedprojcost': 'proposedprojcost',
        'proposedprojdes': 'proposedprojdes',
        'proposedprojdur': 'proposedprojdur',
        'proposedprojpriority': 'proposedprojpriority',
        'proposedprojstatus': 'proposedprojstatus',
        'proposedprojtyp': 'proposedprojtyp',
        'ratemaxdelivcond': 'ratemaxdelivcond',
        'ratemaxdelivgas': 'ratemaxdelivgas',
        'ratemaxdelivoil': 'ratemaxdelivoil',
        'ratemaxdelivwater': 'ratemaxdelivwater',
        'rateoptimumcond': 'rateoptimumcond',
        'rateoptimumgas': 'rateoptimumgas',
        'rateoptimumoil': 'rateoptimumoil',
        'rateoptimumwater': 'rateoptimumwater',
        'ratetargetcond': 'ratetargetcond',
        'ratetargetgas': 'ratetargetgas',
        'ratetargetoil': 'ratetargetoil',
        'ratetargetwater': 'ratetargetwater',
        'reviewedby': 'reviewedby',
        'typ': 'typ',
        'usernum1': 'usernum1',
        'usertxt1': 'usertxt1',
        'systag': 'systag'
    }

    def __init__(self, com=None, compliancepriority=None, dttm=None, idrec=None, idrecjob=None, idreczonecompletion=None, idwell=None, prescas=None, presline=None, presnote=None, prestargetline=None, prestub=None, productdestination=None, proposedprojcost=None, proposedprojdes=None, proposedprojdur=None, proposedprojpriority=None, proposedprojstatus=None, proposedprojtyp=None, ratemaxdelivcond=None, ratemaxdelivgas=None, ratemaxdelivoil=None, ratemaxdelivwater=None, rateoptimumcond=None, rateoptimumgas=None, rateoptimumoil=None, rateoptimumwater=None, ratetargetcond=None, ratetargetgas=None, ratetargetoil=None, ratetargetwater=None, reviewedby=None, typ=None, usernum1=None, usertxt1=None, systag=None):  # noqa: E501
        """WellReviewData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._compliancepriority = None
        self._dttm = None
        self._idrec = None
        self._idrecjob = None
        self._idreczonecompletion = None
        self._idwell = None
        self._prescas = None
        self._presline = None
        self._presnote = None
        self._prestargetline = None
        self._prestub = None
        self._productdestination = None
        self._proposedprojcost = None
        self._proposedprojdes = None
        self._proposedprojdur = None
        self._proposedprojpriority = None
        self._proposedprojstatus = None
        self._proposedprojtyp = None
        self._ratemaxdelivcond = None
        self._ratemaxdelivgas = None
        self._ratemaxdelivoil = None
        self._ratemaxdelivwater = None
        self._rateoptimumcond = None
        self._rateoptimumgas = None
        self._rateoptimumoil = None
        self._rateoptimumwater = None
        self._ratetargetcond = None
        self._ratetargetgas = None
        self._ratetargetoil = None
        self._ratetargetwater = None
        self._reviewedby = None
        self._typ = None
        self._usernum1 = None
        self._usertxt1 = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if compliancepriority is not None:
            self.compliancepriority = compliancepriority
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if presline is not None:
            self.presline = presline
        if presnote is not None:
            self.presnote = presnote
        if prestargetline is not None:
            self.prestargetline = prestargetline
        if prestub is not None:
            self.prestub = prestub
        if productdestination is not None:
            self.productdestination = productdestination
        if proposedprojcost is not None:
            self.proposedprojcost = proposedprojcost
        if proposedprojdes is not None:
            self.proposedprojdes = proposedprojdes
        if proposedprojdur is not None:
            self.proposedprojdur = proposedprojdur
        if proposedprojpriority is not None:
            self.proposedprojpriority = proposedprojpriority
        if proposedprojstatus is not None:
            self.proposedprojstatus = proposedprojstatus
        if proposedprojtyp is not None:
            self.proposedprojtyp = proposedprojtyp
        if ratemaxdelivcond is not None:
            self.ratemaxdelivcond = ratemaxdelivcond
        if ratemaxdelivgas is not None:
            self.ratemaxdelivgas = ratemaxdelivgas
        if ratemaxdelivoil is not None:
            self.ratemaxdelivoil = ratemaxdelivoil
        if ratemaxdelivwater is not None:
            self.ratemaxdelivwater = ratemaxdelivwater
        if rateoptimumcond is not None:
            self.rateoptimumcond = rateoptimumcond
        if rateoptimumgas is not None:
            self.rateoptimumgas = rateoptimumgas
        if rateoptimumoil is not None:
            self.rateoptimumoil = rateoptimumoil
        if rateoptimumwater is not None:
            self.rateoptimumwater = rateoptimumwater
        if ratetargetcond is not None:
            self.ratetargetcond = ratetargetcond
        if ratetargetgas is not None:
            self.ratetargetgas = ratetargetgas
        if ratetargetoil is not None:
            self.ratetargetoil = ratetargetoil
        if ratetargetwater is not None:
            self.ratetargetwater = ratetargetwater
        if reviewedby is not None:
            self.reviewedby = reviewedby
        if typ is not None:
            self.typ = typ
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this WellReviewData.  # noqa: E501


        :return: The com of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellReviewData.


        :param com: The com of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def compliancepriority(self):
        """Gets the compliancepriority of this WellReviewData.  # noqa: E501


        :return: The compliancepriority of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._compliancepriority

    @compliancepriority.setter
    def compliancepriority(self, compliancepriority):
        """Sets the compliancepriority of this WellReviewData.


        :param compliancepriority: The compliancepriority of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._compliancepriority = compliancepriority

    @property
    def dttm(self):
        """Gets the dttm of this WellReviewData.  # noqa: E501


        :return: The dttm of this WellReviewData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellReviewData.


        :param dttm: The dttm of this WellReviewData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this WellReviewData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellReviewData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellReviewData.  # noqa: E501


        :return: The idrecjob of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellReviewData.


        :param idrecjob: The idrecjob of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this WellReviewData.  # noqa: E501


        :return: The idreczonecompletion of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this WellReviewData.


        :param idreczonecompletion: The idreczonecompletion of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this WellReviewData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellReviewData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellReviewData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this WellReviewData.  # noqa: E501


        :return: The prescas of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this WellReviewData.


        :param prescas: The prescas of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def presline(self):
        """Gets the presline of this WellReviewData.  # noqa: E501


        :return: The presline of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._presline

    @presline.setter
    def presline(self, presline):
        """Sets the presline of this WellReviewData.


        :param presline: The presline of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._presline = presline

    @property
    def presnote(self):
        """Gets the presnote of this WellReviewData.  # noqa: E501


        :return: The presnote of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._presnote

    @presnote.setter
    def presnote(self, presnote):
        """Sets the presnote of this WellReviewData.


        :param presnote: The presnote of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._presnote = presnote

    @property
    def prestargetline(self):
        """Gets the prestargetline of this WellReviewData.  # noqa: E501


        :return: The prestargetline of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._prestargetline

    @prestargetline.setter
    def prestargetline(self, prestargetline):
        """Sets the prestargetline of this WellReviewData.


        :param prestargetline: The prestargetline of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._prestargetline = prestargetline

    @property
    def prestub(self):
        """Gets the prestub of this WellReviewData.  # noqa: E501


        :return: The prestub of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this WellReviewData.


        :param prestub: The prestub of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._prestub = prestub

    @property
    def productdestination(self):
        """Gets the productdestination of this WellReviewData.  # noqa: E501


        :return: The productdestination of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._productdestination

    @productdestination.setter
    def productdestination(self, productdestination):
        """Sets the productdestination of this WellReviewData.


        :param productdestination: The productdestination of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._productdestination = productdestination

    @property
    def proposedprojcost(self):
        """Gets the proposedprojcost of this WellReviewData.  # noqa: E501


        :return: The proposedprojcost of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._proposedprojcost

    @proposedprojcost.setter
    def proposedprojcost(self, proposedprojcost):
        """Sets the proposedprojcost of this WellReviewData.


        :param proposedprojcost: The proposedprojcost of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._proposedprojcost = proposedprojcost

    @property
    def proposedprojdes(self):
        """Gets the proposedprojdes of this WellReviewData.  # noqa: E501


        :return: The proposedprojdes of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._proposedprojdes

    @proposedprojdes.setter
    def proposedprojdes(self, proposedprojdes):
        """Sets the proposedprojdes of this WellReviewData.


        :param proposedprojdes: The proposedprojdes of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._proposedprojdes = proposedprojdes

    @property
    def proposedprojdur(self):
        """Gets the proposedprojdur of this WellReviewData.  # noqa: E501


        :return: The proposedprojdur of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._proposedprojdur

    @proposedprojdur.setter
    def proposedprojdur(self, proposedprojdur):
        """Sets the proposedprojdur of this WellReviewData.


        :param proposedprojdur: The proposedprojdur of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._proposedprojdur = proposedprojdur

    @property
    def proposedprojpriority(self):
        """Gets the proposedprojpriority of this WellReviewData.  # noqa: E501


        :return: The proposedprojpriority of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._proposedprojpriority

    @proposedprojpriority.setter
    def proposedprojpriority(self, proposedprojpriority):
        """Sets the proposedprojpriority of this WellReviewData.


        :param proposedprojpriority: The proposedprojpriority of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._proposedprojpriority = proposedprojpriority

    @property
    def proposedprojstatus(self):
        """Gets the proposedprojstatus of this WellReviewData.  # noqa: E501


        :return: The proposedprojstatus of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._proposedprojstatus

    @proposedprojstatus.setter
    def proposedprojstatus(self, proposedprojstatus):
        """Sets the proposedprojstatus of this WellReviewData.


        :param proposedprojstatus: The proposedprojstatus of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._proposedprojstatus = proposedprojstatus

    @property
    def proposedprojtyp(self):
        """Gets the proposedprojtyp of this WellReviewData.  # noqa: E501


        :return: The proposedprojtyp of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._proposedprojtyp

    @proposedprojtyp.setter
    def proposedprojtyp(self, proposedprojtyp):
        """Sets the proposedprojtyp of this WellReviewData.


        :param proposedprojtyp: The proposedprojtyp of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._proposedprojtyp = proposedprojtyp

    @property
    def ratemaxdelivcond(self):
        """Gets the ratemaxdelivcond of this WellReviewData.  # noqa: E501


        :return: The ratemaxdelivcond of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratemaxdelivcond

    @ratemaxdelivcond.setter
    def ratemaxdelivcond(self, ratemaxdelivcond):
        """Sets the ratemaxdelivcond of this WellReviewData.


        :param ratemaxdelivcond: The ratemaxdelivcond of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratemaxdelivcond = ratemaxdelivcond

    @property
    def ratemaxdelivgas(self):
        """Gets the ratemaxdelivgas of this WellReviewData.  # noqa: E501


        :return: The ratemaxdelivgas of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratemaxdelivgas

    @ratemaxdelivgas.setter
    def ratemaxdelivgas(self, ratemaxdelivgas):
        """Sets the ratemaxdelivgas of this WellReviewData.


        :param ratemaxdelivgas: The ratemaxdelivgas of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratemaxdelivgas = ratemaxdelivgas

    @property
    def ratemaxdelivoil(self):
        """Gets the ratemaxdelivoil of this WellReviewData.  # noqa: E501


        :return: The ratemaxdelivoil of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratemaxdelivoil

    @ratemaxdelivoil.setter
    def ratemaxdelivoil(self, ratemaxdelivoil):
        """Sets the ratemaxdelivoil of this WellReviewData.


        :param ratemaxdelivoil: The ratemaxdelivoil of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratemaxdelivoil = ratemaxdelivoil

    @property
    def ratemaxdelivwater(self):
        """Gets the ratemaxdelivwater of this WellReviewData.  # noqa: E501


        :return: The ratemaxdelivwater of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratemaxdelivwater

    @ratemaxdelivwater.setter
    def ratemaxdelivwater(self, ratemaxdelivwater):
        """Sets the ratemaxdelivwater of this WellReviewData.


        :param ratemaxdelivwater: The ratemaxdelivwater of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratemaxdelivwater = ratemaxdelivwater

    @property
    def rateoptimumcond(self):
        """Gets the rateoptimumcond of this WellReviewData.  # noqa: E501


        :return: The rateoptimumcond of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumcond

    @rateoptimumcond.setter
    def rateoptimumcond(self, rateoptimumcond):
        """Sets the rateoptimumcond of this WellReviewData.


        :param rateoptimumcond: The rateoptimumcond of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._rateoptimumcond = rateoptimumcond

    @property
    def rateoptimumgas(self):
        """Gets the rateoptimumgas of this WellReviewData.  # noqa: E501


        :return: The rateoptimumgas of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumgas

    @rateoptimumgas.setter
    def rateoptimumgas(self, rateoptimumgas):
        """Sets the rateoptimumgas of this WellReviewData.


        :param rateoptimumgas: The rateoptimumgas of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._rateoptimumgas = rateoptimumgas

    @property
    def rateoptimumoil(self):
        """Gets the rateoptimumoil of this WellReviewData.  # noqa: E501


        :return: The rateoptimumoil of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumoil

    @rateoptimumoil.setter
    def rateoptimumoil(self, rateoptimumoil):
        """Sets the rateoptimumoil of this WellReviewData.


        :param rateoptimumoil: The rateoptimumoil of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._rateoptimumoil = rateoptimumoil

    @property
    def rateoptimumwater(self):
        """Gets the rateoptimumwater of this WellReviewData.  # noqa: E501


        :return: The rateoptimumwater of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumwater

    @rateoptimumwater.setter
    def rateoptimumwater(self, rateoptimumwater):
        """Sets the rateoptimumwater of this WellReviewData.


        :param rateoptimumwater: The rateoptimumwater of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._rateoptimumwater = rateoptimumwater

    @property
    def ratetargetcond(self):
        """Gets the ratetargetcond of this WellReviewData.  # noqa: E501


        :return: The ratetargetcond of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetcond

    @ratetargetcond.setter
    def ratetargetcond(self, ratetargetcond):
        """Sets the ratetargetcond of this WellReviewData.


        :param ratetargetcond: The ratetargetcond of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratetargetcond = ratetargetcond

    @property
    def ratetargetgas(self):
        """Gets the ratetargetgas of this WellReviewData.  # noqa: E501


        :return: The ratetargetgas of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetgas

    @ratetargetgas.setter
    def ratetargetgas(self, ratetargetgas):
        """Sets the ratetargetgas of this WellReviewData.


        :param ratetargetgas: The ratetargetgas of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratetargetgas = ratetargetgas

    @property
    def ratetargetoil(self):
        """Gets the ratetargetoil of this WellReviewData.  # noqa: E501


        :return: The ratetargetoil of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetoil

    @ratetargetoil.setter
    def ratetargetoil(self, ratetargetoil):
        """Sets the ratetargetoil of this WellReviewData.


        :param ratetargetoil: The ratetargetoil of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratetargetoil = ratetargetoil

    @property
    def ratetargetwater(self):
        """Gets the ratetargetwater of this WellReviewData.  # noqa: E501


        :return: The ratetargetwater of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._ratetargetwater

    @ratetargetwater.setter
    def ratetargetwater(self, ratetargetwater):
        """Sets the ratetargetwater of this WellReviewData.


        :param ratetargetwater: The ratetargetwater of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._ratetargetwater = ratetargetwater

    @property
    def reviewedby(self):
        """Gets the reviewedby of this WellReviewData.  # noqa: E501


        :return: The reviewedby of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._reviewedby

    @reviewedby.setter
    def reviewedby(self, reviewedby):
        """Sets the reviewedby of this WellReviewData.


        :param reviewedby: The reviewedby of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._reviewedby = reviewedby

    @property
    def typ(self):
        """Gets the typ of this WellReviewData.  # noqa: E501


        :return: The typ of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this WellReviewData.


        :param typ: The typ of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def usernum1(self):
        """Gets the usernum1 of this WellReviewData.  # noqa: E501


        :return: The usernum1 of this WellReviewData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this WellReviewData.


        :param usernum1: The usernum1 of this WellReviewData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this WellReviewData.  # noqa: E501


        :return: The usertxt1 of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this WellReviewData.


        :param usertxt1: The usertxt1 of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def systag(self):
        """Gets the systag of this WellReviewData.  # noqa: E501


        :return: The systag of this WellReviewData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellReviewData.


        :param systag: The systag of this WellReviewData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellReviewData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellReviewData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
