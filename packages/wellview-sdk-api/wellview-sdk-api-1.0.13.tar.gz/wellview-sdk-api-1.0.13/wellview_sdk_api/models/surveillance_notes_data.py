# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurveillanceNotesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'des': 'str',
        'dttmendrecur': 'datetime',
        'dttmstartrecur': 'datetime',
        'idrec': 'str',
        'idrecitem': 'str',
        'idwell': 'str',
        'recurfrequency': 'float',
        'recurnote': 'str',
        'requiredby': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'des': 'des',
        'dttmendrecur': 'dttmendrecur',
        'dttmstartrecur': 'dttmstartrecur',
        'idrec': 'idrec',
        'idrecitem': 'idrecitem',
        'idwell': 'idwell',
        'recurfrequency': 'recurfrequency',
        'recurnote': 'recurnote',
        'requiredby': 'requiredby',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, com=None, des=None, dttmendrecur=None, dttmstartrecur=None, idrec=None, idrecitem=None, idwell=None, recurfrequency=None, recurnote=None, requiredby=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """SurveillanceNotesData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._des = None
        self._dttmendrecur = None
        self._dttmstartrecur = None
        self._idrec = None
        self._idrecitem = None
        self._idwell = None
        self._recurfrequency = None
        self._recurnote = None
        self._requiredby = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dttmendrecur is not None:
            self.dttmendrecur = dttmendrecur
        if dttmstartrecur is not None:
            self.dttmstartrecur = dttmstartrecur
        if idrec is not None:
            self.idrec = idrec
        if idrecitem is not None:
            self.idrecitem = idrecitem
        self.idwell = idwell
        if recurfrequency is not None:
            self.recurfrequency = recurfrequency
        if recurnote is not None:
            self.recurnote = recurnote
        if requiredby is not None:
            self.requiredby = requiredby
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this SurveillanceNotesData.  # noqa: E501


        :return: The com of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SurveillanceNotesData.


        :param com: The com of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this SurveillanceNotesData.  # noqa: E501


        :return: The des of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this SurveillanceNotesData.


        :param des: The des of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmendrecur(self):
        """Gets the dttmendrecur of this SurveillanceNotesData.  # noqa: E501


        :return: The dttmendrecur of this SurveillanceNotesData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendrecur

    @dttmendrecur.setter
    def dttmendrecur(self, dttmendrecur):
        """Sets the dttmendrecur of this SurveillanceNotesData.


        :param dttmendrecur: The dttmendrecur of this SurveillanceNotesData.  # noqa: E501
        :type: datetime
        """

        self._dttmendrecur = dttmendrecur

    @property
    def dttmstartrecur(self):
        """Gets the dttmstartrecur of this SurveillanceNotesData.  # noqa: E501


        :return: The dttmstartrecur of this SurveillanceNotesData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartrecur

    @dttmstartrecur.setter
    def dttmstartrecur(self, dttmstartrecur):
        """Sets the dttmstartrecur of this SurveillanceNotesData.


        :param dttmstartrecur: The dttmstartrecur of this SurveillanceNotesData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartrecur = dttmstartrecur

    @property
    def idrec(self):
        """Gets the idrec of this SurveillanceNotesData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SurveillanceNotesData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecitem(self):
        """Gets the idrecitem of this SurveillanceNotesData.  # noqa: E501


        :return: The idrecitem of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecitem

    @idrecitem.setter
    def idrecitem(self, idrecitem):
        """Sets the idrecitem of this SurveillanceNotesData.


        :param idrecitem: The idrecitem of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._idrecitem = idrecitem

    @property
    def idwell(self):
        """Gets the idwell of this SurveillanceNotesData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SurveillanceNotesData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def recurfrequency(self):
        """Gets the recurfrequency of this SurveillanceNotesData.  # noqa: E501


        :return: The recurfrequency of this SurveillanceNotesData.  # noqa: E501
        :rtype: float
        """
        return self._recurfrequency

    @recurfrequency.setter
    def recurfrequency(self, recurfrequency):
        """Sets the recurfrequency of this SurveillanceNotesData.


        :param recurfrequency: The recurfrequency of this SurveillanceNotesData.  # noqa: E501
        :type: float
        """

        self._recurfrequency = recurfrequency

    @property
    def recurnote(self):
        """Gets the recurnote of this SurveillanceNotesData.  # noqa: E501


        :return: The recurnote of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._recurnote

    @recurnote.setter
    def recurnote(self, recurnote):
        """Sets the recurnote of this SurveillanceNotesData.


        :param recurnote: The recurnote of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._recurnote = recurnote

    @property
    def requiredby(self):
        """Gets the requiredby of this SurveillanceNotesData.  # noqa: E501


        :return: The requiredby of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._requiredby

    @requiredby.setter
    def requiredby(self, requiredby):
        """Sets the requiredby of this SurveillanceNotesData.


        :param requiredby: The requiredby of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._requiredby = requiredby

    @property
    def typ1(self):
        """Gets the typ1 of this SurveillanceNotesData.  # noqa: E501


        :return: The typ1 of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this SurveillanceNotesData.


        :param typ1: The typ1 of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this SurveillanceNotesData.  # noqa: E501


        :return: The typ2 of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this SurveillanceNotesData.


        :param typ2: The typ2 of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this SurveillanceNotesData.  # noqa: E501


        :return: The systag of this SurveillanceNotesData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SurveillanceNotesData.


        :param systag: The systag of this SurveillanceNotesData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurveillanceNotesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveillanceNotesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
