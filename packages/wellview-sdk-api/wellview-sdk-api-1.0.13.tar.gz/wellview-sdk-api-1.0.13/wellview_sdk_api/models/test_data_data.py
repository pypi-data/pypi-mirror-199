# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestDataData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depth': 'float',
        'dttm': 'datetime',
        'durationstop': 'float',
        'idrec': 'str',
        'idrecgauge': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'note': 'str',
        'pres': 'float',
        'presgradientor': 'float',
        'temp': 'float',
        'tempgradientor': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'depth': 'depth',
        'dttm': 'dttm',
        'durationstop': 'durationstop',
        'idrec': 'idrec',
        'idrecgauge': 'idrecgauge',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'note': 'note',
        'pres': 'pres',
        'presgradientor': 'presgradientor',
        'temp': 'temp',
        'tempgradientor': 'tempgradientor',
        'systag': 'systag'
    }

    def __init__(self, depth=None, dttm=None, durationstop=None, idrec=None, idrecgauge=None, idrecparent=None, idwell=None, note=None, pres=None, presgradientor=None, temp=None, tempgradientor=None, systag=None):  # noqa: E501
        """TestDataData - a model defined in Swagger"""  # noqa: E501
        self._depth = None
        self._dttm = None
        self._durationstop = None
        self._idrec = None
        self._idrecgauge = None
        self._idrecparent = None
        self._idwell = None
        self._note = None
        self._pres = None
        self._presgradientor = None
        self._temp = None
        self._tempgradientor = None
        self._systag = None
        self.discriminator = None
        if depth is not None:
            self.depth = depth
        if dttm is not None:
            self.dttm = dttm
        if durationstop is not None:
            self.durationstop = durationstop
        if idrec is not None:
            self.idrec = idrec
        if idrecgauge is not None:
            self.idrecgauge = idrecgauge
        self.idrecparent = idrecparent
        self.idwell = idwell
        if note is not None:
            self.note = note
        if pres is not None:
            self.pres = pres
        if presgradientor is not None:
            self.presgradientor = presgradientor
        if temp is not None:
            self.temp = temp
        if tempgradientor is not None:
            self.tempgradientor = tempgradientor
        if systag is not None:
            self.systag = systag

    @property
    def depth(self):
        """Gets the depth of this TestDataData.  # noqa: E501


        :return: The depth of this TestDataData.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this TestDataData.


        :param depth: The depth of this TestDataData.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def dttm(self):
        """Gets the dttm of this TestDataData.  # noqa: E501


        :return: The dttm of this TestDataData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this TestDataData.


        :param dttm: The dttm of this TestDataData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durationstop(self):
        """Gets the durationstop of this TestDataData.  # noqa: E501


        :return: The durationstop of this TestDataData.  # noqa: E501
        :rtype: float
        """
        return self._durationstop

    @durationstop.setter
    def durationstop(self, durationstop):
        """Sets the durationstop of this TestDataData.


        :param durationstop: The durationstop of this TestDataData.  # noqa: E501
        :type: float
        """

        self._durationstop = durationstop

    @property
    def idrec(self):
        """Gets the idrec of this TestDataData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TestDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TestDataData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TestDataData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecgauge(self):
        """Gets the idrecgauge of this TestDataData.  # noqa: E501


        :return: The idrecgauge of this TestDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrecgauge

    @idrecgauge.setter
    def idrecgauge(self, idrecgauge):
        """Sets the idrecgauge of this TestDataData.


        :param idrecgauge: The idrecgauge of this TestDataData.  # noqa: E501
        :type: str
        """

        self._idrecgauge = idrecgauge

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TestDataData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this TestDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TestDataData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this TestDataData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TestDataData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TestDataData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TestDataData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TestDataData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this TestDataData.  # noqa: E501


        :return: The note of this TestDataData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TestDataData.


        :param note: The note of this TestDataData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def pres(self):
        """Gets the pres of this TestDataData.  # noqa: E501


        :return: The pres of this TestDataData.  # noqa: E501
        :rtype: float
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this TestDataData.


        :param pres: The pres of this TestDataData.  # noqa: E501
        :type: float
        """

        self._pres = pres

    @property
    def presgradientor(self):
        """Gets the presgradientor of this TestDataData.  # noqa: E501


        :return: The presgradientor of this TestDataData.  # noqa: E501
        :rtype: float
        """
        return self._presgradientor

    @presgradientor.setter
    def presgradientor(self, presgradientor):
        """Sets the presgradientor of this TestDataData.


        :param presgradientor: The presgradientor of this TestDataData.  # noqa: E501
        :type: float
        """

        self._presgradientor = presgradientor

    @property
    def temp(self):
        """Gets the temp of this TestDataData.  # noqa: E501


        :return: The temp of this TestDataData.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this TestDataData.


        :param temp: The temp of this TestDataData.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def tempgradientor(self):
        """Gets the tempgradientor of this TestDataData.  # noqa: E501


        :return: The tempgradientor of this TestDataData.  # noqa: E501
        :rtype: float
        """
        return self._tempgradientor

    @tempgradientor.setter
    def tempgradientor(self, tempgradientor):
        """Sets the tempgradientor of this TestDataData.


        :param tempgradientor: The tempgradientor of this TestDataData.  # noqa: E501
        :type: float
        """

        self._tempgradientor = tempgradientor

    @property
    def systag(self):
        """Gets the systag of this TestDataData.  # noqa: E501


        :return: The systag of this TestDataData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TestDataData.


        :param systag: The systag of this TestDataData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestDataData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestDataData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
