# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GasPropertiesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densityc7': 'float',
        'densityc7rel': 'float',
        'densitysample': 'float',
        'densitysamplerel': 'float',
        'h2s': 'float',
        'h2smethod': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'molecularmassc7': 'float',
        'molecularmasstotalsample': 'float',
        'presgrossheatref': 'float',
        'prespcacidgasfree': 'float',
        'prespcsample': 'float',
        'presrefc7': 'float',
        'presreftotalsample': 'float',
        'presvapourpentane': 'float',
        'temppcacidgasfree': 'float',
        'temppcsample': 'float',
        'temprefc7': 'float',
        'temprefgrossheat': 'float',
        'tempreftotalsample': 'float',
        'valmoistacidfreegrossheat': 'float',
        'valmoistfreegrossheat': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'densityc7': 'densityc7',
        'densityc7rel': 'densityc7rel',
        'densitysample': 'densitysample',
        'densitysamplerel': 'densitysamplerel',
        'h2s': 'h2s',
        'h2smethod': 'h2smethod',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'molecularmassc7': 'molecularmassc7',
        'molecularmasstotalsample': 'molecularmasstotalsample',
        'presgrossheatref': 'presgrossheatref',
        'prespcacidgasfree': 'prespcacidgasfree',
        'prespcsample': 'prespcsample',
        'presrefc7': 'presrefc7',
        'presreftotalsample': 'presreftotalsample',
        'presvapourpentane': 'presvapourpentane',
        'temppcacidgasfree': 'temppcacidgasfree',
        'temppcsample': 'temppcsample',
        'temprefc7': 'temprefc7',
        'temprefgrossheat': 'temprefgrossheat',
        'tempreftotalsample': 'tempreftotalsample',
        'valmoistacidfreegrossheat': 'valmoistacidfreegrossheat',
        'valmoistfreegrossheat': 'valmoistfreegrossheat',
        'systag': 'systag'
    }

    def __init__(self, com=None, densityc7=None, densityc7rel=None, densitysample=None, densitysamplerel=None, h2s=None, h2smethod=None, idrec=None, idrecparent=None, idwell=None, molecularmassc7=None, molecularmasstotalsample=None, presgrossheatref=None, prespcacidgasfree=None, prespcsample=None, presrefc7=None, presreftotalsample=None, presvapourpentane=None, temppcacidgasfree=None, temppcsample=None, temprefc7=None, temprefgrossheat=None, tempreftotalsample=None, valmoistacidfreegrossheat=None, valmoistfreegrossheat=None, systag=None):  # noqa: E501
        """GasPropertiesData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densityc7 = None
        self._densityc7rel = None
        self._densitysample = None
        self._densitysamplerel = None
        self._h2s = None
        self._h2smethod = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._molecularmassc7 = None
        self._molecularmasstotalsample = None
        self._presgrossheatref = None
        self._prespcacidgasfree = None
        self._prespcsample = None
        self._presrefc7 = None
        self._presreftotalsample = None
        self._presvapourpentane = None
        self._temppcacidgasfree = None
        self._temppcsample = None
        self._temprefc7 = None
        self._temprefgrossheat = None
        self._tempreftotalsample = None
        self._valmoistacidfreegrossheat = None
        self._valmoistfreegrossheat = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densityc7 is not None:
            self.densityc7 = densityc7
        if densityc7rel is not None:
            self.densityc7rel = densityc7rel
        if densitysample is not None:
            self.densitysample = densitysample
        if densitysamplerel is not None:
            self.densitysamplerel = densitysamplerel
        if h2s is not None:
            self.h2s = h2s
        if h2smethod is not None:
            self.h2smethod = h2smethod
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if molecularmassc7 is not None:
            self.molecularmassc7 = molecularmassc7
        if molecularmasstotalsample is not None:
            self.molecularmasstotalsample = molecularmasstotalsample
        if presgrossheatref is not None:
            self.presgrossheatref = presgrossheatref
        if prespcacidgasfree is not None:
            self.prespcacidgasfree = prespcacidgasfree
        if prespcsample is not None:
            self.prespcsample = prespcsample
        if presrefc7 is not None:
            self.presrefc7 = presrefc7
        if presreftotalsample is not None:
            self.presreftotalsample = presreftotalsample
        if presvapourpentane is not None:
            self.presvapourpentane = presvapourpentane
        if temppcacidgasfree is not None:
            self.temppcacidgasfree = temppcacidgasfree
        if temppcsample is not None:
            self.temppcsample = temppcsample
        if temprefc7 is not None:
            self.temprefc7 = temprefc7
        if temprefgrossheat is not None:
            self.temprefgrossheat = temprefgrossheat
        if tempreftotalsample is not None:
            self.tempreftotalsample = tempreftotalsample
        if valmoistacidfreegrossheat is not None:
            self.valmoistacidfreegrossheat = valmoistacidfreegrossheat
        if valmoistfreegrossheat is not None:
            self.valmoistfreegrossheat = valmoistfreegrossheat
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this GasPropertiesData.  # noqa: E501


        :return: The com of this GasPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this GasPropertiesData.


        :param com: The com of this GasPropertiesData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityc7(self):
        """Gets the densityc7 of this GasPropertiesData.  # noqa: E501


        :return: The densityc7 of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityc7

    @densityc7.setter
    def densityc7(self, densityc7):
        """Sets the densityc7 of this GasPropertiesData.


        :param densityc7: The densityc7 of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityc7 = densityc7

    @property
    def densityc7rel(self):
        """Gets the densityc7rel of this GasPropertiesData.  # noqa: E501


        :return: The densityc7rel of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityc7rel

    @densityc7rel.setter
    def densityc7rel(self, densityc7rel):
        """Sets the densityc7rel of this GasPropertiesData.


        :param densityc7rel: The densityc7rel of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityc7rel = densityc7rel

    @property
    def densitysample(self):
        """Gets the densitysample of this GasPropertiesData.  # noqa: E501


        :return: The densitysample of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densitysample

    @densitysample.setter
    def densitysample(self, densitysample):
        """Sets the densitysample of this GasPropertiesData.


        :param densitysample: The densitysample of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._densitysample = densitysample

    @property
    def densitysamplerel(self):
        """Gets the densitysamplerel of this GasPropertiesData.  # noqa: E501


        :return: The densitysamplerel of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densitysamplerel

    @densitysamplerel.setter
    def densitysamplerel(self, densitysamplerel):
        """Sets the densitysamplerel of this GasPropertiesData.


        :param densitysamplerel: The densitysamplerel of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._densitysamplerel = densitysamplerel

    @property
    def h2s(self):
        """Gets the h2s of this GasPropertiesData.  # noqa: E501


        :return: The h2s of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._h2s

    @h2s.setter
    def h2s(self, h2s):
        """Sets the h2s of this GasPropertiesData.


        :param h2s: The h2s of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._h2s = h2s

    @property
    def h2smethod(self):
        """Gets the h2smethod of this GasPropertiesData.  # noqa: E501


        :return: The h2smethod of this GasPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._h2smethod

    @h2smethod.setter
    def h2smethod(self, h2smethod):
        """Sets the h2smethod of this GasPropertiesData.


        :param h2smethod: The h2smethod of this GasPropertiesData.  # noqa: E501
        :type: str
        """

        self._h2smethod = h2smethod

    @property
    def idrec(self):
        """Gets the idrec of this GasPropertiesData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this GasPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this GasPropertiesData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this GasPropertiesData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this GasPropertiesData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this GasPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this GasPropertiesData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this GasPropertiesData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this GasPropertiesData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this GasPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this GasPropertiesData.

        id of well  # noqa: E501

        :param idwell: The idwell of this GasPropertiesData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def molecularmassc7(self):
        """Gets the molecularmassc7 of this GasPropertiesData.  # noqa: E501


        :return: The molecularmassc7 of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._molecularmassc7

    @molecularmassc7.setter
    def molecularmassc7(self, molecularmassc7):
        """Sets the molecularmassc7 of this GasPropertiesData.


        :param molecularmassc7: The molecularmassc7 of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._molecularmassc7 = molecularmassc7

    @property
    def molecularmasstotalsample(self):
        """Gets the molecularmasstotalsample of this GasPropertiesData.  # noqa: E501


        :return: The molecularmasstotalsample of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._molecularmasstotalsample

    @molecularmasstotalsample.setter
    def molecularmasstotalsample(self, molecularmasstotalsample):
        """Sets the molecularmasstotalsample of this GasPropertiesData.


        :param molecularmasstotalsample: The molecularmasstotalsample of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._molecularmasstotalsample = molecularmasstotalsample

    @property
    def presgrossheatref(self):
        """Gets the presgrossheatref of this GasPropertiesData.  # noqa: E501


        :return: The presgrossheatref of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._presgrossheatref

    @presgrossheatref.setter
    def presgrossheatref(self, presgrossheatref):
        """Sets the presgrossheatref of this GasPropertiesData.


        :param presgrossheatref: The presgrossheatref of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._presgrossheatref = presgrossheatref

    @property
    def prespcacidgasfree(self):
        """Gets the prespcacidgasfree of this GasPropertiesData.  # noqa: E501


        :return: The prespcacidgasfree of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._prespcacidgasfree

    @prespcacidgasfree.setter
    def prespcacidgasfree(self, prespcacidgasfree):
        """Sets the prespcacidgasfree of this GasPropertiesData.


        :param prespcacidgasfree: The prespcacidgasfree of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._prespcacidgasfree = prespcacidgasfree

    @property
    def prespcsample(self):
        """Gets the prespcsample of this GasPropertiesData.  # noqa: E501


        :return: The prespcsample of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._prespcsample

    @prespcsample.setter
    def prespcsample(self, prespcsample):
        """Sets the prespcsample of this GasPropertiesData.


        :param prespcsample: The prespcsample of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._prespcsample = prespcsample

    @property
    def presrefc7(self):
        """Gets the presrefc7 of this GasPropertiesData.  # noqa: E501


        :return: The presrefc7 of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._presrefc7

    @presrefc7.setter
    def presrefc7(self, presrefc7):
        """Sets the presrefc7 of this GasPropertiesData.


        :param presrefc7: The presrefc7 of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._presrefc7 = presrefc7

    @property
    def presreftotalsample(self):
        """Gets the presreftotalsample of this GasPropertiesData.  # noqa: E501


        :return: The presreftotalsample of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._presreftotalsample

    @presreftotalsample.setter
    def presreftotalsample(self, presreftotalsample):
        """Sets the presreftotalsample of this GasPropertiesData.


        :param presreftotalsample: The presreftotalsample of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._presreftotalsample = presreftotalsample

    @property
    def presvapourpentane(self):
        """Gets the presvapourpentane of this GasPropertiesData.  # noqa: E501


        :return: The presvapourpentane of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._presvapourpentane

    @presvapourpentane.setter
    def presvapourpentane(self, presvapourpentane):
        """Sets the presvapourpentane of this GasPropertiesData.


        :param presvapourpentane: The presvapourpentane of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._presvapourpentane = presvapourpentane

    @property
    def temppcacidgasfree(self):
        """Gets the temppcacidgasfree of this GasPropertiesData.  # noqa: E501


        :return: The temppcacidgasfree of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temppcacidgasfree

    @temppcacidgasfree.setter
    def temppcacidgasfree(self, temppcacidgasfree):
        """Sets the temppcacidgasfree of this GasPropertiesData.


        :param temppcacidgasfree: The temppcacidgasfree of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._temppcacidgasfree = temppcacidgasfree

    @property
    def temppcsample(self):
        """Gets the temppcsample of this GasPropertiesData.  # noqa: E501


        :return: The temppcsample of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temppcsample

    @temppcsample.setter
    def temppcsample(self, temppcsample):
        """Sets the temppcsample of this GasPropertiesData.


        :param temppcsample: The temppcsample of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._temppcsample = temppcsample

    @property
    def temprefc7(self):
        """Gets the temprefc7 of this GasPropertiesData.  # noqa: E501


        :return: The temprefc7 of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefc7

    @temprefc7.setter
    def temprefc7(self, temprefc7):
        """Sets the temprefc7 of this GasPropertiesData.


        :param temprefc7: The temprefc7 of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefc7 = temprefc7

    @property
    def temprefgrossheat(self):
        """Gets the temprefgrossheat of this GasPropertiesData.  # noqa: E501


        :return: The temprefgrossheat of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefgrossheat

    @temprefgrossheat.setter
    def temprefgrossheat(self, temprefgrossheat):
        """Sets the temprefgrossheat of this GasPropertiesData.


        :param temprefgrossheat: The temprefgrossheat of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefgrossheat = temprefgrossheat

    @property
    def tempreftotalsample(self):
        """Gets the tempreftotalsample of this GasPropertiesData.  # noqa: E501


        :return: The tempreftotalsample of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._tempreftotalsample

    @tempreftotalsample.setter
    def tempreftotalsample(self, tempreftotalsample):
        """Sets the tempreftotalsample of this GasPropertiesData.


        :param tempreftotalsample: The tempreftotalsample of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._tempreftotalsample = tempreftotalsample

    @property
    def valmoistacidfreegrossheat(self):
        """Gets the valmoistacidfreegrossheat of this GasPropertiesData.  # noqa: E501


        :return: The valmoistacidfreegrossheat of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._valmoistacidfreegrossheat

    @valmoistacidfreegrossheat.setter
    def valmoistacidfreegrossheat(self, valmoistacidfreegrossheat):
        """Sets the valmoistacidfreegrossheat of this GasPropertiesData.


        :param valmoistacidfreegrossheat: The valmoistacidfreegrossheat of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._valmoistacidfreegrossheat = valmoistacidfreegrossheat

    @property
    def valmoistfreegrossheat(self):
        """Gets the valmoistfreegrossheat of this GasPropertiesData.  # noqa: E501


        :return: The valmoistfreegrossheat of this GasPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._valmoistfreegrossheat

    @valmoistfreegrossheat.setter
    def valmoistfreegrossheat(self, valmoistfreegrossheat):
        """Sets the valmoistfreegrossheat of this GasPropertiesData.


        :param valmoistfreegrossheat: The valmoistfreegrossheat of this GasPropertiesData.  # noqa: E501
        :type: float
        """

        self._valmoistfreegrossheat = valmoistfreegrossheat

    @property
    def systag(self):
        """Gets the systag of this GasPropertiesData.  # noqa: E501


        :return: The systag of this GasPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this GasPropertiesData.


        :param systag: The systag of this GasPropertiesData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GasPropertiesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GasPropertiesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
