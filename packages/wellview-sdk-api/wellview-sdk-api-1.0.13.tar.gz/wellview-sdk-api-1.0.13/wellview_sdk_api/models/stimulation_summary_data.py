# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StimulationSummaryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'contractor': 'str',
        'contractsupt': 'str',
        'diversioncontractor': 'str',
        'diversionmethod': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'durpump': 'float',
        'fluidefficiency': 'float',
        'iconname': 'str',
        'idrec': 'str',
        'idrecjob': 'str',
        'idwell': 'str',
        'intervalno': 'int',
        'intervalnodesign': 'int',
        'massproptotal': 'float',
        'powertotal': 'float',
        'prestreatavg': 'float',
        'prestreatmax': 'float',
        'ratetreatavg': 'float',
        'ratetreatmax': 'float',
        'resulttechnical': 'str',
        'resulttechnicaldetail': 'str',
        'resulttechnicalnote': 'str',
        'temptreat': 'float',
        'typ1': 'str',
        'typ2': 'str',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'usertxt1': 'str',
        'volcleantotal': 'float',
        'volco2total': 'float',
        'voln2total': 'float',
        'volrecoveredtotal': 'float',
        'volslurrytotal': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'contractor': 'contractor',
        'contractsupt': 'contractsupt',
        'diversioncontractor': 'diversioncontractor',
        'diversionmethod': 'diversionmethod',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'durpump': 'durpump',
        'fluidefficiency': 'fluidefficiency',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idwell': 'idwell',
        'intervalno': 'intervalno',
        'intervalnodesign': 'intervalnodesign',
        'massproptotal': 'massproptotal',
        'powertotal': 'powertotal',
        'prestreatavg': 'prestreatavg',
        'prestreatmax': 'prestreatmax',
        'ratetreatavg': 'ratetreatavg',
        'ratetreatmax': 'ratetreatmax',
        'resulttechnical': 'resulttechnical',
        'resulttechnicaldetail': 'resulttechnicaldetail',
        'resulttechnicalnote': 'resulttechnicalnote',
        'temptreat': 'temptreat',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usertxt1': 'usertxt1',
        'volcleantotal': 'volcleantotal',
        'volco2total': 'volco2total',
        'voln2total': 'voln2total',
        'volrecoveredtotal': 'volrecoveredtotal',
        'volslurrytotal': 'volslurrytotal',
        'systag': 'systag'
    }

    def __init__(self, com=None, contractor=None, contractsupt=None, diversioncontractor=None, diversionmethod=None, dttmend=None, dttmstart=None, durpump=None, fluidefficiency=None, iconname=None, idrec=None, idrecjob=None, idwell=None, intervalno=None, intervalnodesign=None, massproptotal=None, powertotal=None, prestreatavg=None, prestreatmax=None, ratetreatavg=None, ratetreatmax=None, resulttechnical=None, resulttechnicaldetail=None, resulttechnicalnote=None, temptreat=None, typ1=None, typ2=None, usernum1=None, usernum2=None, usernum3=None, usertxt1=None, volcleantotal=None, volco2total=None, voln2total=None, volrecoveredtotal=None, volslurrytotal=None, systag=None):  # noqa: E501
        """StimulationSummaryData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._contractor = None
        self._contractsupt = None
        self._diversioncontractor = None
        self._diversionmethod = None
        self._dttmend = None
        self._dttmstart = None
        self._durpump = None
        self._fluidefficiency = None
        self._iconname = None
        self._idrec = None
        self._idrecjob = None
        self._idwell = None
        self._intervalno = None
        self._intervalnodesign = None
        self._massproptotal = None
        self._powertotal = None
        self._prestreatavg = None
        self._prestreatmax = None
        self._ratetreatavg = None
        self._ratetreatmax = None
        self._resulttechnical = None
        self._resulttechnicaldetail = None
        self._resulttechnicalnote = None
        self._temptreat = None
        self._typ1 = None
        self._typ2 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usertxt1 = None
        self._volcleantotal = None
        self._volco2total = None
        self._voln2total = None
        self._volrecoveredtotal = None
        self._volslurrytotal = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if contractsupt is not None:
            self.contractsupt = contractsupt
        if diversioncontractor is not None:
            self.diversioncontractor = diversioncontractor
        if diversionmethod is not None:
            self.diversionmethod = diversionmethod
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if durpump is not None:
            self.durpump = durpump
        if fluidefficiency is not None:
            self.fluidefficiency = fluidefficiency
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        self.idwell = idwell
        if intervalno is not None:
            self.intervalno = intervalno
        if intervalnodesign is not None:
            self.intervalnodesign = intervalnodesign
        if massproptotal is not None:
            self.massproptotal = massproptotal
        if powertotal is not None:
            self.powertotal = powertotal
        if prestreatavg is not None:
            self.prestreatavg = prestreatavg
        if prestreatmax is not None:
            self.prestreatmax = prestreatmax
        if ratetreatavg is not None:
            self.ratetreatavg = ratetreatavg
        if ratetreatmax is not None:
            self.ratetreatmax = ratetreatmax
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if resulttechnicaldetail is not None:
            self.resulttechnicaldetail = resulttechnicaldetail
        if resulttechnicalnote is not None:
            self.resulttechnicalnote = resulttechnicalnote
        if temptreat is not None:
            self.temptreat = temptreat
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if volcleantotal is not None:
            self.volcleantotal = volcleantotal
        if volco2total is not None:
            self.volco2total = volco2total
        if voln2total is not None:
            self.voln2total = voln2total
        if volrecoveredtotal is not None:
            self.volrecoveredtotal = volrecoveredtotal
        if volslurrytotal is not None:
            self.volslurrytotal = volslurrytotal
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this StimulationSummaryData.  # noqa: E501


        :return: The com of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this StimulationSummaryData.


        :param com: The com of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this StimulationSummaryData.  # noqa: E501


        :return: The contractor of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this StimulationSummaryData.


        :param contractor: The contractor of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def contractsupt(self):
        """Gets the contractsupt of this StimulationSummaryData.  # noqa: E501


        :return: The contractsupt of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._contractsupt

    @contractsupt.setter
    def contractsupt(self, contractsupt):
        """Sets the contractsupt of this StimulationSummaryData.


        :param contractsupt: The contractsupt of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._contractsupt = contractsupt

    @property
    def diversioncontractor(self):
        """Gets the diversioncontractor of this StimulationSummaryData.  # noqa: E501


        :return: The diversioncontractor of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._diversioncontractor

    @diversioncontractor.setter
    def diversioncontractor(self, diversioncontractor):
        """Sets the diversioncontractor of this StimulationSummaryData.


        :param diversioncontractor: The diversioncontractor of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._diversioncontractor = diversioncontractor

    @property
    def diversionmethod(self):
        """Gets the diversionmethod of this StimulationSummaryData.  # noqa: E501


        :return: The diversionmethod of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._diversionmethod

    @diversionmethod.setter
    def diversionmethod(self, diversionmethod):
        """Sets the diversionmethod of this StimulationSummaryData.


        :param diversionmethod: The diversionmethod of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._diversionmethod = diversionmethod

    @property
    def dttmend(self):
        """Gets the dttmend of this StimulationSummaryData.  # noqa: E501


        :return: The dttmend of this StimulationSummaryData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this StimulationSummaryData.


        :param dttmend: The dttmend of this StimulationSummaryData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this StimulationSummaryData.  # noqa: E501


        :return: The dttmstart of this StimulationSummaryData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this StimulationSummaryData.


        :param dttmstart: The dttmstart of this StimulationSummaryData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def durpump(self):
        """Gets the durpump of this StimulationSummaryData.  # noqa: E501


        :return: The durpump of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._durpump

    @durpump.setter
    def durpump(self, durpump):
        """Sets the durpump of this StimulationSummaryData.


        :param durpump: The durpump of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._durpump = durpump

    @property
    def fluidefficiency(self):
        """Gets the fluidefficiency of this StimulationSummaryData.  # noqa: E501


        :return: The fluidefficiency of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._fluidefficiency

    @fluidefficiency.setter
    def fluidefficiency(self, fluidefficiency):
        """Sets the fluidefficiency of this StimulationSummaryData.


        :param fluidefficiency: The fluidefficiency of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._fluidefficiency = fluidefficiency

    @property
    def iconname(self):
        """Gets the iconname of this StimulationSummaryData.  # noqa: E501


        :return: The iconname of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this StimulationSummaryData.


        :param iconname: The iconname of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this StimulationSummaryData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this StimulationSummaryData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this StimulationSummaryData.  # noqa: E501


        :return: The idrecjob of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this StimulationSummaryData.


        :param idrecjob: The idrecjob of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idwell(self):
        """Gets the idwell of this StimulationSummaryData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this StimulationSummaryData.

        id of well  # noqa: E501

        :param idwell: The idwell of this StimulationSummaryData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def intervalno(self):
        """Gets the intervalno of this StimulationSummaryData.  # noqa: E501


        :return: The intervalno of this StimulationSummaryData.  # noqa: E501
        :rtype: int
        """
        return self._intervalno

    @intervalno.setter
    def intervalno(self, intervalno):
        """Sets the intervalno of this StimulationSummaryData.


        :param intervalno: The intervalno of this StimulationSummaryData.  # noqa: E501
        :type: int
        """

        self._intervalno = intervalno

    @property
    def intervalnodesign(self):
        """Gets the intervalnodesign of this StimulationSummaryData.  # noqa: E501


        :return: The intervalnodesign of this StimulationSummaryData.  # noqa: E501
        :rtype: int
        """
        return self._intervalnodesign

    @intervalnodesign.setter
    def intervalnodesign(self, intervalnodesign):
        """Sets the intervalnodesign of this StimulationSummaryData.


        :param intervalnodesign: The intervalnodesign of this StimulationSummaryData.  # noqa: E501
        :type: int
        """

        self._intervalnodesign = intervalnodesign

    @property
    def massproptotal(self):
        """Gets the massproptotal of this StimulationSummaryData.  # noqa: E501


        :return: The massproptotal of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._massproptotal

    @massproptotal.setter
    def massproptotal(self, massproptotal):
        """Sets the massproptotal of this StimulationSummaryData.


        :param massproptotal: The massproptotal of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._massproptotal = massproptotal

    @property
    def powertotal(self):
        """Gets the powertotal of this StimulationSummaryData.  # noqa: E501


        :return: The powertotal of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._powertotal

    @powertotal.setter
    def powertotal(self, powertotal):
        """Sets the powertotal of this StimulationSummaryData.


        :param powertotal: The powertotal of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._powertotal = powertotal

    @property
    def prestreatavg(self):
        """Gets the prestreatavg of this StimulationSummaryData.  # noqa: E501


        :return: The prestreatavg of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._prestreatavg

    @prestreatavg.setter
    def prestreatavg(self, prestreatavg):
        """Sets the prestreatavg of this StimulationSummaryData.


        :param prestreatavg: The prestreatavg of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._prestreatavg = prestreatavg

    @property
    def prestreatmax(self):
        """Gets the prestreatmax of this StimulationSummaryData.  # noqa: E501


        :return: The prestreatmax of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._prestreatmax

    @prestreatmax.setter
    def prestreatmax(self, prestreatmax):
        """Sets the prestreatmax of this StimulationSummaryData.


        :param prestreatmax: The prestreatmax of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._prestreatmax = prestreatmax

    @property
    def ratetreatavg(self):
        """Gets the ratetreatavg of this StimulationSummaryData.  # noqa: E501


        :return: The ratetreatavg of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._ratetreatavg

    @ratetreatavg.setter
    def ratetreatavg(self, ratetreatavg):
        """Sets the ratetreatavg of this StimulationSummaryData.


        :param ratetreatavg: The ratetreatavg of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._ratetreatavg = ratetreatavg

    @property
    def ratetreatmax(self):
        """Gets the ratetreatmax of this StimulationSummaryData.  # noqa: E501


        :return: The ratetreatmax of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._ratetreatmax

    @ratetreatmax.setter
    def ratetreatmax(self, ratetreatmax):
        """Sets the ratetreatmax of this StimulationSummaryData.


        :param ratetreatmax: The ratetreatmax of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._ratetreatmax = ratetreatmax

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this StimulationSummaryData.  # noqa: E501


        :return: The resulttechnical of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this StimulationSummaryData.


        :param resulttechnical: The resulttechnical of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def resulttechnicaldetail(self):
        """Gets the resulttechnicaldetail of this StimulationSummaryData.  # noqa: E501


        :return: The resulttechnicaldetail of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicaldetail

    @resulttechnicaldetail.setter
    def resulttechnicaldetail(self, resulttechnicaldetail):
        """Sets the resulttechnicaldetail of this StimulationSummaryData.


        :param resulttechnicaldetail: The resulttechnicaldetail of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._resulttechnicaldetail = resulttechnicaldetail

    @property
    def resulttechnicalnote(self):
        """Gets the resulttechnicalnote of this StimulationSummaryData.  # noqa: E501


        :return: The resulttechnicalnote of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicalnote

    @resulttechnicalnote.setter
    def resulttechnicalnote(self, resulttechnicalnote):
        """Sets the resulttechnicalnote of this StimulationSummaryData.


        :param resulttechnicalnote: The resulttechnicalnote of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._resulttechnicalnote = resulttechnicalnote

    @property
    def temptreat(self):
        """Gets the temptreat of this StimulationSummaryData.  # noqa: E501


        :return: The temptreat of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._temptreat

    @temptreat.setter
    def temptreat(self, temptreat):
        """Sets the temptreat of this StimulationSummaryData.


        :param temptreat: The temptreat of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._temptreat = temptreat

    @property
    def typ1(self):
        """Gets the typ1 of this StimulationSummaryData.  # noqa: E501


        :return: The typ1 of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this StimulationSummaryData.


        :param typ1: The typ1 of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this StimulationSummaryData.  # noqa: E501


        :return: The typ2 of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this StimulationSummaryData.


        :param typ2: The typ2 of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usernum1(self):
        """Gets the usernum1 of this StimulationSummaryData.  # noqa: E501


        :return: The usernum1 of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this StimulationSummaryData.


        :param usernum1: The usernum1 of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this StimulationSummaryData.  # noqa: E501


        :return: The usernum2 of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this StimulationSummaryData.


        :param usernum2: The usernum2 of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this StimulationSummaryData.  # noqa: E501


        :return: The usernum3 of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this StimulationSummaryData.


        :param usernum3: The usernum3 of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this StimulationSummaryData.  # noqa: E501


        :return: The usertxt1 of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this StimulationSummaryData.


        :param usertxt1: The usertxt1 of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def volcleantotal(self):
        """Gets the volcleantotal of this StimulationSummaryData.  # noqa: E501


        :return: The volcleantotal of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._volcleantotal

    @volcleantotal.setter
    def volcleantotal(self, volcleantotal):
        """Sets the volcleantotal of this StimulationSummaryData.


        :param volcleantotal: The volcleantotal of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._volcleantotal = volcleantotal

    @property
    def volco2total(self):
        """Gets the volco2total of this StimulationSummaryData.  # noqa: E501


        :return: The volco2total of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._volco2total

    @volco2total.setter
    def volco2total(self, volco2total):
        """Sets the volco2total of this StimulationSummaryData.


        :param volco2total: The volco2total of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._volco2total = volco2total

    @property
    def voln2total(self):
        """Gets the voln2total of this StimulationSummaryData.  # noqa: E501


        :return: The voln2total of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._voln2total

    @voln2total.setter
    def voln2total(self, voln2total):
        """Sets the voln2total of this StimulationSummaryData.


        :param voln2total: The voln2total of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._voln2total = voln2total

    @property
    def volrecoveredtotal(self):
        """Gets the volrecoveredtotal of this StimulationSummaryData.  # noqa: E501


        :return: The volrecoveredtotal of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._volrecoveredtotal

    @volrecoveredtotal.setter
    def volrecoveredtotal(self, volrecoveredtotal):
        """Sets the volrecoveredtotal of this StimulationSummaryData.


        :param volrecoveredtotal: The volrecoveredtotal of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._volrecoveredtotal = volrecoveredtotal

    @property
    def volslurrytotal(self):
        """Gets the volslurrytotal of this StimulationSummaryData.  # noqa: E501


        :return: The volslurrytotal of this StimulationSummaryData.  # noqa: E501
        :rtype: float
        """
        return self._volslurrytotal

    @volslurrytotal.setter
    def volslurrytotal(self, volslurrytotal):
        """Sets the volslurrytotal of this StimulationSummaryData.


        :param volslurrytotal: The volslurrytotal of this StimulationSummaryData.  # noqa: E501
        :type: float
        """

        self._volslurrytotal = volslurrytotal

    @property
    def systag(self):
        """Gets the systag of this StimulationSummaryData.  # noqa: E501


        :return: The systag of this StimulationSummaryData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this StimulationSummaryData.


        :param systag: The systag of this StimulationSummaryData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StimulationSummaryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StimulationSummaryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
