# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApproveData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approved': 'bool',
        'approverqd': 'bool',
        'com': 'str',
        'company': 'str',
        'dttm': 'datetime',
        'email': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'name': 'str',
        'role': 'str',
        'title': 'str',
        'typ': 'str',
        'userid': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'approved': 'approved',
        'approverqd': 'approverqd',
        'com': 'com',
        'company': 'company',
        'dttm': 'dttm',
        'email': 'email',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'name': 'name',
        'role': 'role',
        'title': 'title',
        'typ': 'typ',
        'userid': 'userid',
        'systag': 'systag'
    }

    def __init__(self, approved=None, approverqd=None, com=None, company=None, dttm=None, email=None, idrec=None, idrecparent=None, idwell=None, name=None, role=None, title=None, typ=None, userid=None, systag=None):  # noqa: E501
        """ApproveData - a model defined in Swagger"""  # noqa: E501
        self._approved = None
        self._approverqd = None
        self._com = None
        self._company = None
        self._dttm = None
        self._email = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._name = None
        self._role = None
        self._title = None
        self._typ = None
        self._userid = None
        self._systag = None
        self.discriminator = None
        if approved is not None:
            self.approved = approved
        if approverqd is not None:
            self.approverqd = approverqd
        if com is not None:
            self.com = com
        if company is not None:
            self.company = company
        if dttm is not None:
            self.dttm = dttm
        if email is not None:
            self.email = email
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if name is not None:
            self.name = name
        if role is not None:
            self.role = role
        if title is not None:
            self.title = title
        if typ is not None:
            self.typ = typ
        if userid is not None:
            self.userid = userid
        if systag is not None:
            self.systag = systag

    @property
    def approved(self):
        """Gets the approved of this ApproveData.  # noqa: E501


        :return: The approved of this ApproveData.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this ApproveData.


        :param approved: The approved of this ApproveData.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def approverqd(self):
        """Gets the approverqd of this ApproveData.  # noqa: E501


        :return: The approverqd of this ApproveData.  # noqa: E501
        :rtype: bool
        """
        return self._approverqd

    @approverqd.setter
    def approverqd(self, approverqd):
        """Sets the approverqd of this ApproveData.


        :param approverqd: The approverqd of this ApproveData.  # noqa: E501
        :type: bool
        """

        self._approverqd = approverqd

    @property
    def com(self):
        """Gets the com of this ApproveData.  # noqa: E501


        :return: The com of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ApproveData.


        :param com: The com of this ApproveData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def company(self):
        """Gets the company of this ApproveData.  # noqa: E501


        :return: The company of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this ApproveData.


        :param company: The company of this ApproveData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def dttm(self):
        """Gets the dttm of this ApproveData.  # noqa: E501


        :return: The dttm of this ApproveData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this ApproveData.


        :param dttm: The dttm of this ApproveData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def email(self):
        """Gets the email of this ApproveData.  # noqa: E501


        :return: The email of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ApproveData.


        :param email: The email of this ApproveData.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def idrec(self):
        """Gets the idrec of this ApproveData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ApproveData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ApproveData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ApproveData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ApproveData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ApproveData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ApproveData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ApproveData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ApproveData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def name(self):
        """Gets the name of this ApproveData.  # noqa: E501


        :return: The name of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApproveData.


        :param name: The name of this ApproveData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this ApproveData.  # noqa: E501


        :return: The role of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ApproveData.


        :param role: The role of this ApproveData.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def title(self):
        """Gets the title of this ApproveData.  # noqa: E501


        :return: The title of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ApproveData.


        :param title: The title of this ApproveData.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def typ(self):
        """Gets the typ of this ApproveData.  # noqa: E501


        :return: The typ of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this ApproveData.


        :param typ: The typ of this ApproveData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def userid(self):
        """Gets the userid of this ApproveData.  # noqa: E501


        :return: The userid of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this ApproveData.


        :param userid: The userid of this ApproveData.  # noqa: E501
        :type: str
        """

        self._userid = userid

    @property
    def systag(self):
        """Gets the systag of this ApproveData.  # noqa: E501


        :return: The systag of this ApproveData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ApproveData.


        :param systag: The systag of this ApproveData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApproveData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApproveData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
