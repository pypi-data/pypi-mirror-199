# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellViewWriteTableResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_success': 'bool',
        'message': 'str',
        'message_details': 'str',
        'payload_entity': 'WVTable',
        'records_affected': 'int',
        'tables_affected': 'str',
        'well_ids_affected': 'str'
    }

    attribute_map = {
        'is_success': 'IsSuccess',
        'message': 'Message',
        'message_details': 'MessageDetails',
        'payload_entity': 'PayloadEntity',
        'records_affected': 'RecordsAffected',
        'tables_affected': 'TablesAffected',
        'well_ids_affected': 'WellIdsAffected'
    }

    def __init__(self, is_success=None, message=None, message_details=None, payload_entity=None, records_affected=None, tables_affected=None, well_ids_affected=None):  # noqa: E501
        """WellViewWriteTableResponse - a model defined in Swagger"""  # noqa: E501
        self._is_success = None
        self._message = None
        self._message_details = None
        self._payload_entity = None
        self._records_affected = None
        self._tables_affected = None
        self._well_ids_affected = None
        self.discriminator = None
        if is_success is not None:
            self.is_success = is_success
        if message is not None:
            self.message = message
        if message_details is not None:
            self.message_details = message_details
        if payload_entity is not None:
            self.payload_entity = payload_entity
        if records_affected is not None:
            self.records_affected = records_affected
        if tables_affected is not None:
            self.tables_affected = tables_affected
        if well_ids_affected is not None:
            self.well_ids_affected = well_ids_affected

    @property
    def is_success(self):
        """Gets the is_success of this WellViewWriteTableResponse.  # noqa: E501


        :return: The is_success of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this WellViewWriteTableResponse.


        :param is_success: The is_success of this WellViewWriteTableResponse.  # noqa: E501
        :type: bool
        """

        self._is_success = is_success

    @property
    def message(self):
        """Gets the message of this WellViewWriteTableResponse.  # noqa: E501


        :return: The message of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this WellViewWriteTableResponse.


        :param message: The message of this WellViewWriteTableResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_details(self):
        """Gets the message_details of this WellViewWriteTableResponse.  # noqa: E501


        :return: The message_details of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_details

    @message_details.setter
    def message_details(self, message_details):
        """Sets the message_details of this WellViewWriteTableResponse.


        :param message_details: The message_details of this WellViewWriteTableResponse.  # noqa: E501
        :type: str
        """

        self._message_details = message_details

    @property
    def payload_entity(self):
        """Gets the payload_entity of this WellViewWriteTableResponse.  # noqa: E501


        :return: The payload_entity of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: WVTable
        """
        return self._payload_entity

    @payload_entity.setter
    def payload_entity(self, payload_entity):
        """Sets the payload_entity of this WellViewWriteTableResponse.


        :param payload_entity: The payload_entity of this WellViewWriteTableResponse.  # noqa: E501
        :type: WVTable
        """

        self._payload_entity = payload_entity

    @property
    def records_affected(self):
        """Gets the records_affected of this WellViewWriteTableResponse.  # noqa: E501


        :return: The records_affected of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: int
        """
        return self._records_affected

    @records_affected.setter
    def records_affected(self, records_affected):
        """Sets the records_affected of this WellViewWriteTableResponse.


        :param records_affected: The records_affected of this WellViewWriteTableResponse.  # noqa: E501
        :type: int
        """

        self._records_affected = records_affected

    @property
    def tables_affected(self):
        """Gets the tables_affected of this WellViewWriteTableResponse.  # noqa: E501


        :return: The tables_affected of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: str
        """
        return self._tables_affected

    @tables_affected.setter
    def tables_affected(self, tables_affected):
        """Sets the tables_affected of this WellViewWriteTableResponse.


        :param tables_affected: The tables_affected of this WellViewWriteTableResponse.  # noqa: E501
        :type: str
        """

        self._tables_affected = tables_affected

    @property
    def well_ids_affected(self):
        """Gets the well_ids_affected of this WellViewWriteTableResponse.  # noqa: E501


        :return: The well_ids_affected of this WellViewWriteTableResponse.  # noqa: E501
        :rtype: str
        """
        return self._well_ids_affected

    @well_ids_affected.setter
    def well_ids_affected(self, well_ids_affected):
        """Sets the well_ids_affected of this WellViewWriteTableResponse.


        :param well_ids_affected: The well_ids_affected of this WellViewWriteTableResponse.  # noqa: E501
        :type: str
        """

        self._well_ids_affected = well_ids_affected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellViewWriteTableResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellViewWriteTableResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
