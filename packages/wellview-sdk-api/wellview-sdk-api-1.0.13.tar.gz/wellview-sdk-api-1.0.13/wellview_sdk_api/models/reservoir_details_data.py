# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReservoirDetailsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depth': 'float',
        'fracpresmax': 'float',
        'fracpresmin': 'float',
        'fracpresml': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'note': 'str',
        'porepresmax': 'float',
        'porepresmin': 'float',
        'porepresml': 'float',
        'temp': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'depth': 'depth',
        'fracpresmax': 'fracpresmax',
        'fracpresmin': 'fracpresmin',
        'fracpresml': 'fracpresml',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'note': 'note',
        'porepresmax': 'porepresmax',
        'porepresmin': 'porepresmin',
        'porepresml': 'porepresml',
        'temp': 'temp',
        'systag': 'systag'
    }

    def __init__(self, depth=None, fracpresmax=None, fracpresmin=None, fracpresml=None, idrec=None, idrecparent=None, idrecwellbore=None, idwell=None, note=None, porepresmax=None, porepresmin=None, porepresml=None, temp=None, systag=None):  # noqa: E501
        """ReservoirDetailsData - a model defined in Swagger"""  # noqa: E501
        self._depth = None
        self._fracpresmax = None
        self._fracpresmin = None
        self._fracpresml = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._note = None
        self._porepresmax = None
        self._porepresmin = None
        self._porepresml = None
        self._temp = None
        self._systag = None
        self.discriminator = None
        if depth is not None:
            self.depth = depth
        if fracpresmax is not None:
            self.fracpresmax = fracpresmax
        if fracpresmin is not None:
            self.fracpresmin = fracpresmin
        if fracpresml is not None:
            self.fracpresml = fracpresml
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if note is not None:
            self.note = note
        if porepresmax is not None:
            self.porepresmax = porepresmax
        if porepresmin is not None:
            self.porepresmin = porepresmin
        if porepresml is not None:
            self.porepresml = porepresml
        if temp is not None:
            self.temp = temp
        if systag is not None:
            self.systag = systag

    @property
    def depth(self):
        """Gets the depth of this ReservoirDetailsData.  # noqa: E501


        :return: The depth of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this ReservoirDetailsData.


        :param depth: The depth of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def fracpresmax(self):
        """Gets the fracpresmax of this ReservoirDetailsData.  # noqa: E501


        :return: The fracpresmax of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._fracpresmax

    @fracpresmax.setter
    def fracpresmax(self, fracpresmax):
        """Sets the fracpresmax of this ReservoirDetailsData.


        :param fracpresmax: The fracpresmax of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._fracpresmax = fracpresmax

    @property
    def fracpresmin(self):
        """Gets the fracpresmin of this ReservoirDetailsData.  # noqa: E501


        :return: The fracpresmin of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._fracpresmin

    @fracpresmin.setter
    def fracpresmin(self, fracpresmin):
        """Sets the fracpresmin of this ReservoirDetailsData.


        :param fracpresmin: The fracpresmin of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._fracpresmin = fracpresmin

    @property
    def fracpresml(self):
        """Gets the fracpresml of this ReservoirDetailsData.  # noqa: E501


        :return: The fracpresml of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._fracpresml

    @fracpresml.setter
    def fracpresml(self, fracpresml):
        """Sets the fracpresml of this ReservoirDetailsData.


        :param fracpresml: The fracpresml of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._fracpresml = fracpresml

    @property
    def idrec(self):
        """Gets the idrec of this ReservoirDetailsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ReservoirDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ReservoirDetailsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ReservoirDetailsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ReservoirDetailsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ReservoirDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ReservoirDetailsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ReservoirDetailsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this ReservoirDetailsData.  # noqa: E501


        :return: The idrecwellbore of this ReservoirDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this ReservoirDetailsData.


        :param idrecwellbore: The idrecwellbore of this ReservoirDetailsData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this ReservoirDetailsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ReservoirDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ReservoirDetailsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ReservoirDetailsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this ReservoirDetailsData.  # noqa: E501


        :return: The note of this ReservoirDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ReservoirDetailsData.


        :param note: The note of this ReservoirDetailsData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def porepresmax(self):
        """Gets the porepresmax of this ReservoirDetailsData.  # noqa: E501


        :return: The porepresmax of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._porepresmax

    @porepresmax.setter
    def porepresmax(self, porepresmax):
        """Sets the porepresmax of this ReservoirDetailsData.


        :param porepresmax: The porepresmax of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._porepresmax = porepresmax

    @property
    def porepresmin(self):
        """Gets the porepresmin of this ReservoirDetailsData.  # noqa: E501


        :return: The porepresmin of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._porepresmin

    @porepresmin.setter
    def porepresmin(self, porepresmin):
        """Sets the porepresmin of this ReservoirDetailsData.


        :param porepresmin: The porepresmin of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._porepresmin = porepresmin

    @property
    def porepresml(self):
        """Gets the porepresml of this ReservoirDetailsData.  # noqa: E501


        :return: The porepresml of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._porepresml

    @porepresml.setter
    def porepresml(self, porepresml):
        """Sets the porepresml of this ReservoirDetailsData.


        :param porepresml: The porepresml of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._porepresml = porepresml

    @property
    def temp(self):
        """Gets the temp of this ReservoirDetailsData.  # noqa: E501


        :return: The temp of this ReservoirDetailsData.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this ReservoirDetailsData.


        :param temp: The temp of this ReservoirDetailsData.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def systag(self):
        """Gets the systag of this ReservoirDetailsData.  # noqa: E501


        :return: The systag of this ReservoirDetailsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ReservoirDetailsData.


        :param systag: The systag of this ReservoirDetailsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReservoirDetailsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReservoirDetailsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
