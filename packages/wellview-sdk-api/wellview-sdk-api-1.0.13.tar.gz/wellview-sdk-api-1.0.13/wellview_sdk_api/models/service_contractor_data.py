# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceContractorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approvedby': 'str',
        'contractref': 'str',
        'des': 'str',
        'dttmapproved': 'datetime',
        'dttmendcontract': 'datetime',
        'dttmeval': 'datetime',
        'dttmstartcontract': 'datetime',
        'evalperformedby': 'str',
        'evalstatus': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'operatorcom': 'str',
        'opscondition': 'str',
        'servicecompany': 'str',
        'servicecompanycom': 'str',
        'servicecompanyparent': 'str',
        'servicecontracttyp': 'str',
        'servicetyp': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'approvedby': 'approvedby',
        'contractref': 'contractref',
        'des': 'des',
        'dttmapproved': 'dttmapproved',
        'dttmendcontract': 'dttmendcontract',
        'dttmeval': 'dttmeval',
        'dttmstartcontract': 'dttmstartcontract',
        'evalperformedby': 'evalperformedby',
        'evalstatus': 'evalstatus',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'operatorcom': 'operatorcom',
        'opscondition': 'opscondition',
        'servicecompany': 'servicecompany',
        'servicecompanycom': 'servicecompanycom',
        'servicecompanyparent': 'servicecompanyparent',
        'servicecontracttyp': 'servicecontracttyp',
        'servicetyp': 'servicetyp',
        'systag': 'systag'
    }

    def __init__(self, approvedby=None, contractref=None, des=None, dttmapproved=None, dttmendcontract=None, dttmeval=None, dttmstartcontract=None, evalperformedby=None, evalstatus=None, idrec=None, idrecparent=None, idwell=None, operatorcom=None, opscondition=None, servicecompany=None, servicecompanycom=None, servicecompanyparent=None, servicecontracttyp=None, servicetyp=None, systag=None):  # noqa: E501
        """ServiceContractorData - a model defined in Swagger"""  # noqa: E501
        self._approvedby = None
        self._contractref = None
        self._des = None
        self._dttmapproved = None
        self._dttmendcontract = None
        self._dttmeval = None
        self._dttmstartcontract = None
        self._evalperformedby = None
        self._evalstatus = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._operatorcom = None
        self._opscondition = None
        self._servicecompany = None
        self._servicecompanycom = None
        self._servicecompanyparent = None
        self._servicecontracttyp = None
        self._servicetyp = None
        self._systag = None
        self.discriminator = None
        if approvedby is not None:
            self.approvedby = approvedby
        if contractref is not None:
            self.contractref = contractref
        if des is not None:
            self.des = des
        if dttmapproved is not None:
            self.dttmapproved = dttmapproved
        if dttmendcontract is not None:
            self.dttmendcontract = dttmendcontract
        if dttmeval is not None:
            self.dttmeval = dttmeval
        if dttmstartcontract is not None:
            self.dttmstartcontract = dttmstartcontract
        if evalperformedby is not None:
            self.evalperformedby = evalperformedby
        if evalstatus is not None:
            self.evalstatus = evalstatus
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if operatorcom is not None:
            self.operatorcom = operatorcom
        if opscondition is not None:
            self.opscondition = opscondition
        if servicecompany is not None:
            self.servicecompany = servicecompany
        if servicecompanycom is not None:
            self.servicecompanycom = servicecompanycom
        if servicecompanyparent is not None:
            self.servicecompanyparent = servicecompanyparent
        if servicecontracttyp is not None:
            self.servicecontracttyp = servicecontracttyp
        if servicetyp is not None:
            self.servicetyp = servicetyp
        if systag is not None:
            self.systag = systag

    @property
    def approvedby(self):
        """Gets the approvedby of this ServiceContractorData.  # noqa: E501


        :return: The approvedby of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._approvedby

    @approvedby.setter
    def approvedby(self, approvedby):
        """Sets the approvedby of this ServiceContractorData.


        :param approvedby: The approvedby of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._approvedby = approvedby

    @property
    def contractref(self):
        """Gets the contractref of this ServiceContractorData.  # noqa: E501


        :return: The contractref of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._contractref

    @contractref.setter
    def contractref(self, contractref):
        """Sets the contractref of this ServiceContractorData.


        :param contractref: The contractref of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._contractref = contractref

    @property
    def des(self):
        """Gets the des of this ServiceContractorData.  # noqa: E501


        :return: The des of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this ServiceContractorData.


        :param des: The des of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmapproved(self):
        """Gets the dttmapproved of this ServiceContractorData.  # noqa: E501


        :return: The dttmapproved of this ServiceContractorData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmapproved

    @dttmapproved.setter
    def dttmapproved(self, dttmapproved):
        """Sets the dttmapproved of this ServiceContractorData.


        :param dttmapproved: The dttmapproved of this ServiceContractorData.  # noqa: E501
        :type: datetime
        """

        self._dttmapproved = dttmapproved

    @property
    def dttmendcontract(self):
        """Gets the dttmendcontract of this ServiceContractorData.  # noqa: E501


        :return: The dttmendcontract of this ServiceContractorData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendcontract

    @dttmendcontract.setter
    def dttmendcontract(self, dttmendcontract):
        """Sets the dttmendcontract of this ServiceContractorData.


        :param dttmendcontract: The dttmendcontract of this ServiceContractorData.  # noqa: E501
        :type: datetime
        """

        self._dttmendcontract = dttmendcontract

    @property
    def dttmeval(self):
        """Gets the dttmeval of this ServiceContractorData.  # noqa: E501


        :return: The dttmeval of this ServiceContractorData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmeval

    @dttmeval.setter
    def dttmeval(self, dttmeval):
        """Sets the dttmeval of this ServiceContractorData.


        :param dttmeval: The dttmeval of this ServiceContractorData.  # noqa: E501
        :type: datetime
        """

        self._dttmeval = dttmeval

    @property
    def dttmstartcontract(self):
        """Gets the dttmstartcontract of this ServiceContractorData.  # noqa: E501


        :return: The dttmstartcontract of this ServiceContractorData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartcontract

    @dttmstartcontract.setter
    def dttmstartcontract(self, dttmstartcontract):
        """Sets the dttmstartcontract of this ServiceContractorData.


        :param dttmstartcontract: The dttmstartcontract of this ServiceContractorData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartcontract = dttmstartcontract

    @property
    def evalperformedby(self):
        """Gets the evalperformedby of this ServiceContractorData.  # noqa: E501


        :return: The evalperformedby of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._evalperformedby

    @evalperformedby.setter
    def evalperformedby(self, evalperformedby):
        """Sets the evalperformedby of this ServiceContractorData.


        :param evalperformedby: The evalperformedby of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._evalperformedby = evalperformedby

    @property
    def evalstatus(self):
        """Gets the evalstatus of this ServiceContractorData.  # noqa: E501


        :return: The evalstatus of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._evalstatus

    @evalstatus.setter
    def evalstatus(self, evalstatus):
        """Sets the evalstatus of this ServiceContractorData.


        :param evalstatus: The evalstatus of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._evalstatus = evalstatus

    @property
    def idrec(self):
        """Gets the idrec of this ServiceContractorData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ServiceContractorData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ServiceContractorData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ServiceContractorData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ServiceContractorData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ServiceContractorData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ServiceContractorData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ServiceContractorData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def operatorcom(self):
        """Gets the operatorcom of this ServiceContractorData.  # noqa: E501


        :return: The operatorcom of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._operatorcom

    @operatorcom.setter
    def operatorcom(self, operatorcom):
        """Sets the operatorcom of this ServiceContractorData.


        :param operatorcom: The operatorcom of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._operatorcom = operatorcom

    @property
    def opscondition(self):
        """Gets the opscondition of this ServiceContractorData.  # noqa: E501


        :return: The opscondition of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._opscondition

    @opscondition.setter
    def opscondition(self, opscondition):
        """Sets the opscondition of this ServiceContractorData.


        :param opscondition: The opscondition of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._opscondition = opscondition

    @property
    def servicecompany(self):
        """Gets the servicecompany of this ServiceContractorData.  # noqa: E501


        :return: The servicecompany of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._servicecompany

    @servicecompany.setter
    def servicecompany(self, servicecompany):
        """Sets the servicecompany of this ServiceContractorData.


        :param servicecompany: The servicecompany of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._servicecompany = servicecompany

    @property
    def servicecompanycom(self):
        """Gets the servicecompanycom of this ServiceContractorData.  # noqa: E501


        :return: The servicecompanycom of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._servicecompanycom

    @servicecompanycom.setter
    def servicecompanycom(self, servicecompanycom):
        """Sets the servicecompanycom of this ServiceContractorData.


        :param servicecompanycom: The servicecompanycom of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._servicecompanycom = servicecompanycom

    @property
    def servicecompanyparent(self):
        """Gets the servicecompanyparent of this ServiceContractorData.  # noqa: E501


        :return: The servicecompanyparent of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._servicecompanyparent

    @servicecompanyparent.setter
    def servicecompanyparent(self, servicecompanyparent):
        """Sets the servicecompanyparent of this ServiceContractorData.


        :param servicecompanyparent: The servicecompanyparent of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._servicecompanyparent = servicecompanyparent

    @property
    def servicecontracttyp(self):
        """Gets the servicecontracttyp of this ServiceContractorData.  # noqa: E501


        :return: The servicecontracttyp of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._servicecontracttyp

    @servicecontracttyp.setter
    def servicecontracttyp(self, servicecontracttyp):
        """Sets the servicecontracttyp of this ServiceContractorData.


        :param servicecontracttyp: The servicecontracttyp of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._servicecontracttyp = servicecontracttyp

    @property
    def servicetyp(self):
        """Gets the servicetyp of this ServiceContractorData.  # noqa: E501


        :return: The servicetyp of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._servicetyp

    @servicetyp.setter
    def servicetyp(self, servicetyp):
        """Sets the servicetyp of this ServiceContractorData.


        :param servicetyp: The servicetyp of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._servicetyp = servicetyp

    @property
    def systag(self):
        """Gets the systag of this ServiceContractorData.  # noqa: E501


        :return: The systag of this ServiceContractorData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ServiceContractorData.


        :param systag: The systag of this ServiceContractorData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceContractorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceContractorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
