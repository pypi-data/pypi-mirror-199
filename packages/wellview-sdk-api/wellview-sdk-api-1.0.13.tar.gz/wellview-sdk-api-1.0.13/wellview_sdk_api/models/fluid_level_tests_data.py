# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluidLevelTestsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bsw': 'float',
        'com': 'str',
        'density': 'float',
        'depthfluidabovepump': 'float',
        'depthfluidlevel': 'float',
        'depthfluidlevelcorr': 'float',
        'displayflag': 'bool',
        'dttm': 'datetime',
        'durationshutin': 'float',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecstring': 'str',
        'idwell': 'str',
        'joints': 'int',
        'lengthavgjoint': 'float',
        'notecorrection': 'str',
        'presbh': 'float',
        'prescas': 'float',
        'prescasstart': 'float',
        'presgradient': 'float',
        'preshyd': 'float',
        'prestub': 'float',
        'prestubstart': 'float',
        'rategas': 'float',
        'rateliquid': 'float',
        'sandcut': 'float',
        'status': 'str',
        'testedby': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'bsw': 'bsw',
        'com': 'com',
        'density': 'density',
        'depthfluidabovepump': 'depthfluidabovepump',
        'depthfluidlevel': 'depthfluidlevel',
        'depthfluidlevelcorr': 'depthfluidlevelcorr',
        'displayflag': 'displayflag',
        'dttm': 'dttm',
        'durationshutin': 'durationshutin',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecstring': 'idrecstring',
        'idwell': 'idwell',
        'joints': 'joints',
        'lengthavgjoint': 'lengthavgjoint',
        'notecorrection': 'notecorrection',
        'presbh': 'presbh',
        'prescas': 'prescas',
        'prescasstart': 'prescasstart',
        'presgradient': 'presgradient',
        'preshyd': 'preshyd',
        'prestub': 'prestub',
        'prestubstart': 'prestubstart',
        'rategas': 'rategas',
        'rateliquid': 'rateliquid',
        'sandcut': 'sandcut',
        'status': 'status',
        'testedby': 'testedby',
        'systag': 'systag'
    }

    def __init__(self, bsw=None, com=None, density=None, depthfluidabovepump=None, depthfluidlevel=None, depthfluidlevelcorr=None, displayflag=None, dttm=None, durationshutin=None, fluidtyp=None, idrec=None, idrecjob=None, idrecstring=None, idwell=None, joints=None, lengthavgjoint=None, notecorrection=None, presbh=None, prescas=None, prescasstart=None, presgradient=None, preshyd=None, prestub=None, prestubstart=None, rategas=None, rateliquid=None, sandcut=None, status=None, testedby=None, systag=None):  # noqa: E501
        """FluidLevelTestsData - a model defined in Swagger"""  # noqa: E501
        self._bsw = None
        self._com = None
        self._density = None
        self._depthfluidabovepump = None
        self._depthfluidlevel = None
        self._depthfluidlevelcorr = None
        self._displayflag = None
        self._dttm = None
        self._durationshutin = None
        self._fluidtyp = None
        self._idrec = None
        self._idrecjob = None
        self._idrecstring = None
        self._idwell = None
        self._joints = None
        self._lengthavgjoint = None
        self._notecorrection = None
        self._presbh = None
        self._prescas = None
        self._prescasstart = None
        self._presgradient = None
        self._preshyd = None
        self._prestub = None
        self._prestubstart = None
        self._rategas = None
        self._rateliquid = None
        self._sandcut = None
        self._status = None
        self._testedby = None
        self._systag = None
        self.discriminator = None
        if bsw is not None:
            self.bsw = bsw
        if com is not None:
            self.com = com
        if density is not None:
            self.density = density
        if depthfluidabovepump is not None:
            self.depthfluidabovepump = depthfluidabovepump
        if depthfluidlevel is not None:
            self.depthfluidlevel = depthfluidlevel
        if depthfluidlevelcorr is not None:
            self.depthfluidlevelcorr = depthfluidlevelcorr
        if displayflag is not None:
            self.displayflag = displayflag
        if dttm is not None:
            self.dttm = dttm
        if durationshutin is not None:
            self.durationshutin = durationshutin
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecstring is not None:
            self.idrecstring = idrecstring
        self.idwell = idwell
        if joints is not None:
            self.joints = joints
        if lengthavgjoint is not None:
            self.lengthavgjoint = lengthavgjoint
        if notecorrection is not None:
            self.notecorrection = notecorrection
        if presbh is not None:
            self.presbh = presbh
        if prescas is not None:
            self.prescas = prescas
        if prescasstart is not None:
            self.prescasstart = prescasstart
        if presgradient is not None:
            self.presgradient = presgradient
        if preshyd is not None:
            self.preshyd = preshyd
        if prestub is not None:
            self.prestub = prestub
        if prestubstart is not None:
            self.prestubstart = prestubstart
        if rategas is not None:
            self.rategas = rategas
        if rateliquid is not None:
            self.rateliquid = rateliquid
        if sandcut is not None:
            self.sandcut = sandcut
        if status is not None:
            self.status = status
        if testedby is not None:
            self.testedby = testedby
        if systag is not None:
            self.systag = systag

    @property
    def bsw(self):
        """Gets the bsw of this FluidLevelTestsData.  # noqa: E501


        :return: The bsw of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this FluidLevelTestsData.


        :param bsw: The bsw of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def com(self):
        """Gets the com of this FluidLevelTestsData.  # noqa: E501


        :return: The com of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FluidLevelTestsData.


        :param com: The com of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def density(self):
        """Gets the density of this FluidLevelTestsData.  # noqa: E501


        :return: The density of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this FluidLevelTestsData.


        :param density: The density of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def depthfluidabovepump(self):
        """Gets the depthfluidabovepump of this FluidLevelTestsData.  # noqa: E501


        :return: The depthfluidabovepump of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._depthfluidabovepump

    @depthfluidabovepump.setter
    def depthfluidabovepump(self, depthfluidabovepump):
        """Sets the depthfluidabovepump of this FluidLevelTestsData.


        :param depthfluidabovepump: The depthfluidabovepump of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._depthfluidabovepump = depthfluidabovepump

    @property
    def depthfluidlevel(self):
        """Gets the depthfluidlevel of this FluidLevelTestsData.  # noqa: E501


        :return: The depthfluidlevel of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._depthfluidlevel

    @depthfluidlevel.setter
    def depthfluidlevel(self, depthfluidlevel):
        """Sets the depthfluidlevel of this FluidLevelTestsData.


        :param depthfluidlevel: The depthfluidlevel of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._depthfluidlevel = depthfluidlevel

    @property
    def depthfluidlevelcorr(self):
        """Gets the depthfluidlevelcorr of this FluidLevelTestsData.  # noqa: E501


        :return: The depthfluidlevelcorr of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._depthfluidlevelcorr

    @depthfluidlevelcorr.setter
    def depthfluidlevelcorr(self, depthfluidlevelcorr):
        """Sets the depthfluidlevelcorr of this FluidLevelTestsData.


        :param depthfluidlevelcorr: The depthfluidlevelcorr of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._depthfluidlevelcorr = depthfluidlevelcorr

    @property
    def displayflag(self):
        """Gets the displayflag of this FluidLevelTestsData.  # noqa: E501


        :return: The displayflag of this FluidLevelTestsData.  # noqa: E501
        :rtype: bool
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this FluidLevelTestsData.


        :param displayflag: The displayflag of this FluidLevelTestsData.  # noqa: E501
        :type: bool
        """

        self._displayflag = displayflag

    @property
    def dttm(self):
        """Gets the dttm of this FluidLevelTestsData.  # noqa: E501


        :return: The dttm of this FluidLevelTestsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this FluidLevelTestsData.


        :param dttm: The dttm of this FluidLevelTestsData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durationshutin(self):
        """Gets the durationshutin of this FluidLevelTestsData.  # noqa: E501


        :return: The durationshutin of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._durationshutin

    @durationshutin.setter
    def durationshutin(self, durationshutin):
        """Sets the durationshutin of this FluidLevelTestsData.


        :param durationshutin: The durationshutin of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._durationshutin = durationshutin

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this FluidLevelTestsData.  # noqa: E501


        :return: The fluidtyp of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this FluidLevelTestsData.


        :param fluidtyp: The fluidtyp of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this FluidLevelTestsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FluidLevelTestsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this FluidLevelTestsData.  # noqa: E501


        :return: The idrecjob of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this FluidLevelTestsData.


        :param idrecjob: The idrecjob of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecstring(self):
        """Gets the idrecstring of this FluidLevelTestsData.  # noqa: E501


        :return: The idrecstring of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this FluidLevelTestsData.


        :param idrecstring: The idrecstring of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idwell(self):
        """Gets the idwell of this FluidLevelTestsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FluidLevelTestsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def joints(self):
        """Gets the joints of this FluidLevelTestsData.  # noqa: E501


        :return: The joints of this FluidLevelTestsData.  # noqa: E501
        :rtype: int
        """
        return self._joints

    @joints.setter
    def joints(self, joints):
        """Sets the joints of this FluidLevelTestsData.


        :param joints: The joints of this FluidLevelTestsData.  # noqa: E501
        :type: int
        """

        self._joints = joints

    @property
    def lengthavgjoint(self):
        """Gets the lengthavgjoint of this FluidLevelTestsData.  # noqa: E501


        :return: The lengthavgjoint of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._lengthavgjoint

    @lengthavgjoint.setter
    def lengthavgjoint(self, lengthavgjoint):
        """Sets the lengthavgjoint of this FluidLevelTestsData.


        :param lengthavgjoint: The lengthavgjoint of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._lengthavgjoint = lengthavgjoint

    @property
    def notecorrection(self):
        """Gets the notecorrection of this FluidLevelTestsData.  # noqa: E501


        :return: The notecorrection of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._notecorrection

    @notecorrection.setter
    def notecorrection(self, notecorrection):
        """Sets the notecorrection of this FluidLevelTestsData.


        :param notecorrection: The notecorrection of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._notecorrection = notecorrection

    @property
    def presbh(self):
        """Gets the presbh of this FluidLevelTestsData.  # noqa: E501


        :return: The presbh of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._presbh

    @presbh.setter
    def presbh(self, presbh):
        """Sets the presbh of this FluidLevelTestsData.


        :param presbh: The presbh of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._presbh = presbh

    @property
    def prescas(self):
        """Gets the prescas of this FluidLevelTestsData.  # noqa: E501


        :return: The prescas of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this FluidLevelTestsData.


        :param prescas: The prescas of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def prescasstart(self):
        """Gets the prescasstart of this FluidLevelTestsData.  # noqa: E501


        :return: The prescasstart of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._prescasstart

    @prescasstart.setter
    def prescasstart(self, prescasstart):
        """Sets the prescasstart of this FluidLevelTestsData.


        :param prescasstart: The prescasstart of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._prescasstart = prescasstart

    @property
    def presgradient(self):
        """Gets the presgradient of this FluidLevelTestsData.  # noqa: E501


        :return: The presgradient of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._presgradient

    @presgradient.setter
    def presgradient(self, presgradient):
        """Sets the presgradient of this FluidLevelTestsData.


        :param presgradient: The presgradient of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._presgradient = presgradient

    @property
    def preshyd(self):
        """Gets the preshyd of this FluidLevelTestsData.  # noqa: E501


        :return: The preshyd of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._preshyd

    @preshyd.setter
    def preshyd(self, preshyd):
        """Sets the preshyd of this FluidLevelTestsData.


        :param preshyd: The preshyd of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._preshyd = preshyd

    @property
    def prestub(self):
        """Gets the prestub of this FluidLevelTestsData.  # noqa: E501


        :return: The prestub of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this FluidLevelTestsData.


        :param prestub: The prestub of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._prestub = prestub

    @property
    def prestubstart(self):
        """Gets the prestubstart of this FluidLevelTestsData.  # noqa: E501


        :return: The prestubstart of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._prestubstart

    @prestubstart.setter
    def prestubstart(self, prestubstart):
        """Sets the prestubstart of this FluidLevelTestsData.


        :param prestubstart: The prestubstart of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._prestubstart = prestubstart

    @property
    def rategas(self):
        """Gets the rategas of this FluidLevelTestsData.  # noqa: E501


        :return: The rategas of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._rategas

    @rategas.setter
    def rategas(self, rategas):
        """Sets the rategas of this FluidLevelTestsData.


        :param rategas: The rategas of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._rategas = rategas

    @property
    def rateliquid(self):
        """Gets the rateliquid of this FluidLevelTestsData.  # noqa: E501


        :return: The rateliquid of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._rateliquid

    @rateliquid.setter
    def rateliquid(self, rateliquid):
        """Sets the rateliquid of this FluidLevelTestsData.


        :param rateliquid: The rateliquid of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._rateliquid = rateliquid

    @property
    def sandcut(self):
        """Gets the sandcut of this FluidLevelTestsData.  # noqa: E501


        :return: The sandcut of this FluidLevelTestsData.  # noqa: E501
        :rtype: float
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this FluidLevelTestsData.


        :param sandcut: The sandcut of this FluidLevelTestsData.  # noqa: E501
        :type: float
        """

        self._sandcut = sandcut

    @property
    def status(self):
        """Gets the status of this FluidLevelTestsData.  # noqa: E501


        :return: The status of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FluidLevelTestsData.


        :param status: The status of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def testedby(self):
        """Gets the testedby of this FluidLevelTestsData.  # noqa: E501


        :return: The testedby of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this FluidLevelTestsData.


        :param testedby: The testedby of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def systag(self):
        """Gets the systag of this FluidLevelTestsData.  # noqa: E501


        :return: The systag of this FluidLevelTestsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FluidLevelTestsData.


        :param systag: The systag of this FluidLevelTestsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluidLevelTestsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidLevelTestsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
