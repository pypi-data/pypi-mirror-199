# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellboreReservoirData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'depthbtm': 'float',
        'depthresdatum': 'float',
        'depthssresdatum': 'float',
        'depthtop': 'float',
        'des': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'rescode': 'str',
        'resida': 'str',
        'residb': 'str',
        'residc': 'str',
        'resname': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthresdatum': 'depthresdatum',
        'depthssresdatum': 'depthssresdatum',
        'depthtop': 'depthtop',
        'des': 'des',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'rescode': 'rescode',
        'resida': 'resida',
        'residb': 'residb',
        'residc': 'residc',
        'resname': 'resname',
        'systag': 'systag'
    }

    def __init__(self, com=None, depthbtm=None, depthresdatum=None, depthssresdatum=None, depthtop=None, des=None, idrec=None, idrecparent=None, idwell=None, rescode=None, resida=None, residb=None, residc=None, resname=None, systag=None):  # noqa: E501
        """WellboreReservoirData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._depthbtm = None
        self._depthresdatum = None
        self._depthssresdatum = None
        self._depthtop = None
        self._des = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._rescode = None
        self._resida = None
        self._residb = None
        self._residc = None
        self._resname = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthresdatum is not None:
            self.depthresdatum = depthresdatum
        if depthssresdatum is not None:
            self.depthssresdatum = depthssresdatum
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if rescode is not None:
            self.rescode = rescode
        if resida is not None:
            self.resida = resida
        if residb is not None:
            self.residb = residb
        if residc is not None:
            self.residc = residc
        if resname is not None:
            self.resname = resname
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this WellboreReservoirData.  # noqa: E501


        :return: The com of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellboreReservoirData.


        :param com: The com of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this WellboreReservoirData.  # noqa: E501


        :return: The depthbtm of this WellboreReservoirData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this WellboreReservoirData.


        :param depthbtm: The depthbtm of this WellboreReservoirData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthresdatum(self):
        """Gets the depthresdatum of this WellboreReservoirData.  # noqa: E501


        :return: The depthresdatum of this WellboreReservoirData.  # noqa: E501
        :rtype: float
        """
        return self._depthresdatum

    @depthresdatum.setter
    def depthresdatum(self, depthresdatum):
        """Sets the depthresdatum of this WellboreReservoirData.


        :param depthresdatum: The depthresdatum of this WellboreReservoirData.  # noqa: E501
        :type: float
        """

        self._depthresdatum = depthresdatum

    @property
    def depthssresdatum(self):
        """Gets the depthssresdatum of this WellboreReservoirData.  # noqa: E501


        :return: The depthssresdatum of this WellboreReservoirData.  # noqa: E501
        :rtype: float
        """
        return self._depthssresdatum

    @depthssresdatum.setter
    def depthssresdatum(self, depthssresdatum):
        """Sets the depthssresdatum of this WellboreReservoirData.


        :param depthssresdatum: The depthssresdatum of this WellboreReservoirData.  # noqa: E501
        :type: float
        """

        self._depthssresdatum = depthssresdatum

    @property
    def depthtop(self):
        """Gets the depthtop of this WellboreReservoirData.  # noqa: E501


        :return: The depthtop of this WellboreReservoirData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this WellboreReservoirData.


        :param depthtop: The depthtop of this WellboreReservoirData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this WellboreReservoirData.  # noqa: E501


        :return: The des of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellboreReservoirData.


        :param des: The des of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def idrec(self):
        """Gets the idrec of this WellboreReservoirData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellboreReservoirData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellboreReservoirData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellboreReservoirData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this WellboreReservoirData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WellboreReservoirData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellboreReservoirData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellboreReservoirData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def rescode(self):
        """Gets the rescode of this WellboreReservoirData.  # noqa: E501


        :return: The rescode of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._rescode

    @rescode.setter
    def rescode(self, rescode):
        """Sets the rescode of this WellboreReservoirData.


        :param rescode: The rescode of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._rescode = rescode

    @property
    def resida(self):
        """Gets the resida of this WellboreReservoirData.  # noqa: E501


        :return: The resida of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._resida

    @resida.setter
    def resida(self, resida):
        """Sets the resida of this WellboreReservoirData.


        :param resida: The resida of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._resida = resida

    @property
    def residb(self):
        """Gets the residb of this WellboreReservoirData.  # noqa: E501


        :return: The residb of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._residb

    @residb.setter
    def residb(self, residb):
        """Sets the residb of this WellboreReservoirData.


        :param residb: The residb of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._residb = residb

    @property
    def residc(self):
        """Gets the residc of this WellboreReservoirData.  # noqa: E501


        :return: The residc of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._residc

    @residc.setter
    def residc(self, residc):
        """Sets the residc of this WellboreReservoirData.


        :param residc: The residc of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._residc = residc

    @property
    def resname(self):
        """Gets the resname of this WellboreReservoirData.  # noqa: E501


        :return: The resname of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._resname

    @resname.setter
    def resname(self, resname):
        """Sets the resname of this WellboreReservoirData.


        :param resname: The resname of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._resname = resname

    @property
    def systag(self):
        """Gets the systag of this WellboreReservoirData.  # noqa: E501


        :return: The systag of this WellboreReservoirData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellboreReservoirData.


        :param systag: The systag of this WellboreReservoirData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellboreReservoirData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellboreReservoirData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
