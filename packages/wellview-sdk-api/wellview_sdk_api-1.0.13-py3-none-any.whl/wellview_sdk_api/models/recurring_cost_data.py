# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecurringCostData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'costonetime': 'float',
        'idrec': 'str',
        'idrecafecustom': 'str',
        'idrecintervalproblemcustom': 'str',
        'idrecjobrentalitem': 'str',
        'idrecparent': 'str',
        'idrecphasecustom': 'str',
        'idwell': 'str',
        'intervalproblempct': 'float',
        'note': 'str',
        'opscategory': 'str',
        'qty': 'float',
        'sn': 'str',
        'syscarryfwdp': 'bool',
        'ticketno': 'str',
        'unschedtyp': 'str',
        'useday': 'bool',
        'usedepth': 'float',
        'usehour': 'float',
        'useother': 'float',
        'usertxt1': 'str',
        'usestandby': 'bool',
        'workorderno': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'costonetime': 'costonetime',
        'idrec': 'idrec',
        'idrecafecustom': 'idrecafecustom',
        'idrecintervalproblemcustom': 'idrecintervalproblemcustom',
        'idrecjobrentalitem': 'idrecjobrentalitem',
        'idrecparent': 'idrecparent',
        'idrecphasecustom': 'idrecphasecustom',
        'idwell': 'idwell',
        'intervalproblempct': 'intervalproblempct',
        'note': 'note',
        'opscategory': 'opscategory',
        'qty': 'qty',
        'sn': 'sn',
        'syscarryfwdp': 'syscarryfwdp',
        'ticketno': 'ticketno',
        'unschedtyp': 'unschedtyp',
        'useday': 'useday',
        'usedepth': 'usedepth',
        'usehour': 'usehour',
        'useother': 'useother',
        'usertxt1': 'usertxt1',
        'usestandby': 'usestandby',
        'workorderno': 'workorderno',
        'systag': 'systag'
    }

    def __init__(self, costonetime=None, idrec=None, idrecafecustom=None, idrecintervalproblemcustom=None, idrecjobrentalitem=None, idrecparent=None, idrecphasecustom=None, idwell=None, intervalproblempct=None, note=None, opscategory=None, qty=None, sn=None, syscarryfwdp=None, ticketno=None, unschedtyp=None, useday=None, usedepth=None, usehour=None, useother=None, usertxt1=None, usestandby=None, workorderno=None, systag=None):  # noqa: E501
        """RecurringCostData - a model defined in Swagger"""  # noqa: E501
        self._costonetime = None
        self._idrec = None
        self._idrecafecustom = None
        self._idrecintervalproblemcustom = None
        self._idrecjobrentalitem = None
        self._idrecparent = None
        self._idrecphasecustom = None
        self._idwell = None
        self._intervalproblempct = None
        self._note = None
        self._opscategory = None
        self._qty = None
        self._sn = None
        self._syscarryfwdp = None
        self._ticketno = None
        self._unschedtyp = None
        self._useday = None
        self._usedepth = None
        self._usehour = None
        self._useother = None
        self._usertxt1 = None
        self._usestandby = None
        self._workorderno = None
        self._systag = None
        self.discriminator = None
        if costonetime is not None:
            self.costonetime = costonetime
        if idrec is not None:
            self.idrec = idrec
        if idrecafecustom is not None:
            self.idrecafecustom = idrecafecustom
        if idrecintervalproblemcustom is not None:
            self.idrecintervalproblemcustom = idrecintervalproblemcustom
        if idrecjobrentalitem is not None:
            self.idrecjobrentalitem = idrecjobrentalitem
        self.idrecparent = idrecparent
        if idrecphasecustom is not None:
            self.idrecphasecustom = idrecphasecustom
        self.idwell = idwell
        if intervalproblempct is not None:
            self.intervalproblempct = intervalproblempct
        if note is not None:
            self.note = note
        if opscategory is not None:
            self.opscategory = opscategory
        if qty is not None:
            self.qty = qty
        if sn is not None:
            self.sn = sn
        if syscarryfwdp is not None:
            self.syscarryfwdp = syscarryfwdp
        if ticketno is not None:
            self.ticketno = ticketno
        if unschedtyp is not None:
            self.unschedtyp = unschedtyp
        if useday is not None:
            self.useday = useday
        if usedepth is not None:
            self.usedepth = usedepth
        if usehour is not None:
            self.usehour = usehour
        if useother is not None:
            self.useother = useother
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usestandby is not None:
            self.usestandby = usestandby
        if workorderno is not None:
            self.workorderno = workorderno
        if systag is not None:
            self.systag = systag

    @property
    def costonetime(self):
        """Gets the costonetime of this RecurringCostData.  # noqa: E501


        :return: The costonetime of this RecurringCostData.  # noqa: E501
        :rtype: float
        """
        return self._costonetime

    @costonetime.setter
    def costonetime(self, costonetime):
        """Sets the costonetime of this RecurringCostData.


        :param costonetime: The costonetime of this RecurringCostData.  # noqa: E501
        :type: float
        """

        self._costonetime = costonetime

    @property
    def idrec(self):
        """Gets the idrec of this RecurringCostData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RecurringCostData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecafecustom(self):
        """Gets the idrecafecustom of this RecurringCostData.  # noqa: E501


        :return: The idrecafecustom of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecafecustom

    @idrecafecustom.setter
    def idrecafecustom(self, idrecafecustom):
        """Sets the idrecafecustom of this RecurringCostData.


        :param idrecafecustom: The idrecafecustom of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._idrecafecustom = idrecafecustom

    @property
    def idrecintervalproblemcustom(self):
        """Gets the idrecintervalproblemcustom of this RecurringCostData.  # noqa: E501


        :return: The idrecintervalproblemcustom of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecintervalproblemcustom

    @idrecintervalproblemcustom.setter
    def idrecintervalproblemcustom(self, idrecintervalproblemcustom):
        """Sets the idrecintervalproblemcustom of this RecurringCostData.


        :param idrecintervalproblemcustom: The idrecintervalproblemcustom of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._idrecintervalproblemcustom = idrecintervalproblemcustom

    @property
    def idrecjobrentalitem(self):
        """Gets the idrecjobrentalitem of this RecurringCostData.  # noqa: E501


        :return: The idrecjobrentalitem of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobrentalitem

    @idrecjobrentalitem.setter
    def idrecjobrentalitem(self, idrecjobrentalitem):
        """Sets the idrecjobrentalitem of this RecurringCostData.


        :param idrecjobrentalitem: The idrecjobrentalitem of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._idrecjobrentalitem = idrecjobrentalitem

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RecurringCostData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RecurringCostData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this RecurringCostData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecphasecustom(self):
        """Gets the idrecphasecustom of this RecurringCostData.  # noqa: E501


        :return: The idrecphasecustom of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecphasecustom

    @idrecphasecustom.setter
    def idrecphasecustom(self, idrecphasecustom):
        """Sets the idrecphasecustom of this RecurringCostData.


        :param idrecphasecustom: The idrecphasecustom of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._idrecphasecustom = idrecphasecustom

    @property
    def idwell(self):
        """Gets the idwell of this RecurringCostData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RecurringCostData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RecurringCostData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def intervalproblempct(self):
        """Gets the intervalproblempct of this RecurringCostData.  # noqa: E501


        :return: The intervalproblempct of this RecurringCostData.  # noqa: E501
        :rtype: float
        """
        return self._intervalproblempct

    @intervalproblempct.setter
    def intervalproblempct(self, intervalproblempct):
        """Sets the intervalproblempct of this RecurringCostData.


        :param intervalproblempct: The intervalproblempct of this RecurringCostData.  # noqa: E501
        :type: float
        """

        self._intervalproblempct = intervalproblempct

    @property
    def note(self):
        """Gets the note of this RecurringCostData.  # noqa: E501


        :return: The note of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this RecurringCostData.


        :param note: The note of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def opscategory(self):
        """Gets the opscategory of this RecurringCostData.  # noqa: E501


        :return: The opscategory of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._opscategory

    @opscategory.setter
    def opscategory(self, opscategory):
        """Sets the opscategory of this RecurringCostData.


        :param opscategory: The opscategory of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._opscategory = opscategory

    @property
    def qty(self):
        """Gets the qty of this RecurringCostData.  # noqa: E501


        :return: The qty of this RecurringCostData.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this RecurringCostData.


        :param qty: The qty of this RecurringCostData.  # noqa: E501
        :type: float
        """

        self._qty = qty

    @property
    def sn(self):
        """Gets the sn of this RecurringCostData.  # noqa: E501


        :return: The sn of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this RecurringCostData.


        :param sn: The sn of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscarryfwdp(self):
        """Gets the syscarryfwdp of this RecurringCostData.  # noqa: E501


        :return: The syscarryfwdp of this RecurringCostData.  # noqa: E501
        :rtype: bool
        """
        return self._syscarryfwdp

    @syscarryfwdp.setter
    def syscarryfwdp(self, syscarryfwdp):
        """Sets the syscarryfwdp of this RecurringCostData.


        :param syscarryfwdp: The syscarryfwdp of this RecurringCostData.  # noqa: E501
        :type: bool
        """

        self._syscarryfwdp = syscarryfwdp

    @property
    def ticketno(self):
        """Gets the ticketno of this RecurringCostData.  # noqa: E501


        :return: The ticketno of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._ticketno

    @ticketno.setter
    def ticketno(self, ticketno):
        """Sets the ticketno of this RecurringCostData.


        :param ticketno: The ticketno of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._ticketno = ticketno

    @property
    def unschedtyp(self):
        """Gets the unschedtyp of this RecurringCostData.  # noqa: E501


        :return: The unschedtyp of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._unschedtyp

    @unschedtyp.setter
    def unschedtyp(self, unschedtyp):
        """Sets the unschedtyp of this RecurringCostData.


        :param unschedtyp: The unschedtyp of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._unschedtyp = unschedtyp

    @property
    def useday(self):
        """Gets the useday of this RecurringCostData.  # noqa: E501


        :return: The useday of this RecurringCostData.  # noqa: E501
        :rtype: bool
        """
        return self._useday

    @useday.setter
    def useday(self, useday):
        """Sets the useday of this RecurringCostData.


        :param useday: The useday of this RecurringCostData.  # noqa: E501
        :type: bool
        """

        self._useday = useday

    @property
    def usedepth(self):
        """Gets the usedepth of this RecurringCostData.  # noqa: E501


        :return: The usedepth of this RecurringCostData.  # noqa: E501
        :rtype: float
        """
        return self._usedepth

    @usedepth.setter
    def usedepth(self, usedepth):
        """Sets the usedepth of this RecurringCostData.


        :param usedepth: The usedepth of this RecurringCostData.  # noqa: E501
        :type: float
        """

        self._usedepth = usedepth

    @property
    def usehour(self):
        """Gets the usehour of this RecurringCostData.  # noqa: E501


        :return: The usehour of this RecurringCostData.  # noqa: E501
        :rtype: float
        """
        return self._usehour

    @usehour.setter
    def usehour(self, usehour):
        """Sets the usehour of this RecurringCostData.


        :param usehour: The usehour of this RecurringCostData.  # noqa: E501
        :type: float
        """

        self._usehour = usehour

    @property
    def useother(self):
        """Gets the useother of this RecurringCostData.  # noqa: E501


        :return: The useother of this RecurringCostData.  # noqa: E501
        :rtype: float
        """
        return self._useother

    @useother.setter
    def useother(self, useother):
        """Sets the useother of this RecurringCostData.


        :param useother: The useother of this RecurringCostData.  # noqa: E501
        :type: float
        """

        self._useother = useother

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this RecurringCostData.  # noqa: E501


        :return: The usertxt1 of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this RecurringCostData.


        :param usertxt1: The usertxt1 of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usestandby(self):
        """Gets the usestandby of this RecurringCostData.  # noqa: E501


        :return: The usestandby of this RecurringCostData.  # noqa: E501
        :rtype: bool
        """
        return self._usestandby

    @usestandby.setter
    def usestandby(self, usestandby):
        """Sets the usestandby of this RecurringCostData.


        :param usestandby: The usestandby of this RecurringCostData.  # noqa: E501
        :type: bool
        """

        self._usestandby = usestandby

    @property
    def workorderno(self):
        """Gets the workorderno of this RecurringCostData.  # noqa: E501


        :return: The workorderno of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._workorderno

    @workorderno.setter
    def workorderno(self, workorderno):
        """Sets the workorderno of this RecurringCostData.


        :param workorderno: The workorderno of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._workorderno = workorderno

    @property
    def systag(self):
        """Gets the systag of this RecurringCostData.  # noqa: E501


        :return: The systag of this RecurringCostData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RecurringCostData.


        :param systag: The systag of this RecurringCostData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecurringCostData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurringCostData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
