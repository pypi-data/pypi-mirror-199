# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PumpCheckData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depth': 'float',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'pres': 'float',
        'presclf': 'float',
        'presklf': 'float',
        'pumpingmode': 'str',
        'slowspeed': 'bool',
        'spm': 'int',
        'volefficiency': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'depth': 'depth',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'pres': 'pres',
        'presclf': 'presclf',
        'presklf': 'presklf',
        'pumpingmode': 'pumpingmode',
        'slowspeed': 'slowspeed',
        'spm': 'spm',
        'volefficiency': 'volefficiency',
        'systag': 'systag'
    }

    def __init__(self, depth=None, dttm=None, idrec=None, idrecparent=None, idwell=None, pres=None, presclf=None, presklf=None, pumpingmode=None, slowspeed=None, spm=None, volefficiency=None, systag=None):  # noqa: E501
        """PumpCheckData - a model defined in Swagger"""  # noqa: E501
        self._depth = None
        self._dttm = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._pres = None
        self._presclf = None
        self._presklf = None
        self._pumpingmode = None
        self._slowspeed = None
        self._spm = None
        self._volefficiency = None
        self._systag = None
        self.discriminator = None
        if depth is not None:
            self.depth = depth
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if pres is not None:
            self.pres = pres
        if presclf is not None:
            self.presclf = presclf
        if presklf is not None:
            self.presklf = presklf
        if pumpingmode is not None:
            self.pumpingmode = pumpingmode
        if slowspeed is not None:
            self.slowspeed = slowspeed
        if spm is not None:
            self.spm = spm
        if volefficiency is not None:
            self.volefficiency = volefficiency
        if systag is not None:
            self.systag = systag

    @property
    def depth(self):
        """Gets the depth of this PumpCheckData.  # noqa: E501


        :return: The depth of this PumpCheckData.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this PumpCheckData.


        :param depth: The depth of this PumpCheckData.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def dttm(self):
        """Gets the dttm of this PumpCheckData.  # noqa: E501


        :return: The dttm of this PumpCheckData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this PumpCheckData.


        :param dttm: The dttm of this PumpCheckData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this PumpCheckData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this PumpCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PumpCheckData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this PumpCheckData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this PumpCheckData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this PumpCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this PumpCheckData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this PumpCheckData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this PumpCheckData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this PumpCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PumpCheckData.

        id of well  # noqa: E501

        :param idwell: The idwell of this PumpCheckData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def pres(self):
        """Gets the pres of this PumpCheckData.  # noqa: E501


        :return: The pres of this PumpCheckData.  # noqa: E501
        :rtype: float
        """
        return self._pres

    @pres.setter
    def pres(self, pres):
        """Sets the pres of this PumpCheckData.


        :param pres: The pres of this PumpCheckData.  # noqa: E501
        :type: float
        """

        self._pres = pres

    @property
    def presclf(self):
        """Gets the presclf of this PumpCheckData.  # noqa: E501


        :return: The presclf of this PumpCheckData.  # noqa: E501
        :rtype: float
        """
        return self._presclf

    @presclf.setter
    def presclf(self, presclf):
        """Sets the presclf of this PumpCheckData.


        :param presclf: The presclf of this PumpCheckData.  # noqa: E501
        :type: float
        """

        self._presclf = presclf

    @property
    def presklf(self):
        """Gets the presklf of this PumpCheckData.  # noqa: E501


        :return: The presklf of this PumpCheckData.  # noqa: E501
        :rtype: float
        """
        return self._presklf

    @presklf.setter
    def presklf(self, presklf):
        """Sets the presklf of this PumpCheckData.


        :param presklf: The presklf of this PumpCheckData.  # noqa: E501
        :type: float
        """

        self._presklf = presklf

    @property
    def pumpingmode(self):
        """Gets the pumpingmode of this PumpCheckData.  # noqa: E501


        :return: The pumpingmode of this PumpCheckData.  # noqa: E501
        :rtype: str
        """
        return self._pumpingmode

    @pumpingmode.setter
    def pumpingmode(self, pumpingmode):
        """Sets the pumpingmode of this PumpCheckData.


        :param pumpingmode: The pumpingmode of this PumpCheckData.  # noqa: E501
        :type: str
        """

        self._pumpingmode = pumpingmode

    @property
    def slowspeed(self):
        """Gets the slowspeed of this PumpCheckData.  # noqa: E501


        :return: The slowspeed of this PumpCheckData.  # noqa: E501
        :rtype: bool
        """
        return self._slowspeed

    @slowspeed.setter
    def slowspeed(self, slowspeed):
        """Sets the slowspeed of this PumpCheckData.


        :param slowspeed: The slowspeed of this PumpCheckData.  # noqa: E501
        :type: bool
        """

        self._slowspeed = slowspeed

    @property
    def spm(self):
        """Gets the spm of this PumpCheckData.  # noqa: E501


        :return: The spm of this PumpCheckData.  # noqa: E501
        :rtype: int
        """
        return self._spm

    @spm.setter
    def spm(self, spm):
        """Sets the spm of this PumpCheckData.


        :param spm: The spm of this PumpCheckData.  # noqa: E501
        :type: int
        """

        self._spm = spm

    @property
    def volefficiency(self):
        """Gets the volefficiency of this PumpCheckData.  # noqa: E501


        :return: The volefficiency of this PumpCheckData.  # noqa: E501
        :rtype: float
        """
        return self._volefficiency

    @volefficiency.setter
    def volefficiency(self, volefficiency):
        """Sets the volefficiency of this PumpCheckData.


        :param volefficiency: The volefficiency of this PumpCheckData.  # noqa: E501
        :type: float
        """

        self._volefficiency = volefficiency

    @property
    def systag(self):
        """Gets the systag of this PumpCheckData.  # noqa: E501


        :return: The systag of this PumpCheckData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PumpCheckData.


        :param systag: The systag of this PumpCheckData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PumpCheckData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PumpCheckData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
