# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinerHangerData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elastomertyp': 'str',
        'elemcenter': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lenpolishbore': 'float',
        'retrievable': 'bool',
        'setmech': 'str',
        'settingprocedure': 'str',
        'slips': 'str',
        'szpolishbore': 'float',
        'unsettingprocedure': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'elastomertyp': 'elastomertyp',
        'elemcenter': 'elemcenter',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lenpolishbore': 'lenpolishbore',
        'retrievable': 'retrievable',
        'setmech': 'setmech',
        'settingprocedure': 'settingprocedure',
        'slips': 'slips',
        'szpolishbore': 'szpolishbore',
        'unsettingprocedure': 'unsettingprocedure',
        'systag': 'systag'
    }

    def __init__(self, elastomertyp=None, elemcenter=None, idrec=None, idrecparent=None, idwell=None, lenpolishbore=None, retrievable=None, setmech=None, settingprocedure=None, slips=None, szpolishbore=None, unsettingprocedure=None, systag=None):  # noqa: E501
        """LinerHangerData - a model defined in Swagger"""  # noqa: E501
        self._elastomertyp = None
        self._elemcenter = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lenpolishbore = None
        self._retrievable = None
        self._setmech = None
        self._settingprocedure = None
        self._slips = None
        self._szpolishbore = None
        self._unsettingprocedure = None
        self._systag = None
        self.discriminator = None
        if elastomertyp is not None:
            self.elastomertyp = elastomertyp
        if elemcenter is not None:
            self.elemcenter = elemcenter
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if lenpolishbore is not None:
            self.lenpolishbore = lenpolishbore
        if retrievable is not None:
            self.retrievable = retrievable
        if setmech is not None:
            self.setmech = setmech
        if settingprocedure is not None:
            self.settingprocedure = settingprocedure
        if slips is not None:
            self.slips = slips
        if szpolishbore is not None:
            self.szpolishbore = szpolishbore
        if unsettingprocedure is not None:
            self.unsettingprocedure = unsettingprocedure
        if systag is not None:
            self.systag = systag

    @property
    def elastomertyp(self):
        """Gets the elastomertyp of this LinerHangerData.  # noqa: E501


        :return: The elastomertyp of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._elastomertyp

    @elastomertyp.setter
    def elastomertyp(self, elastomertyp):
        """Sets the elastomertyp of this LinerHangerData.


        :param elastomertyp: The elastomertyp of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._elastomertyp = elastomertyp

    @property
    def elemcenter(self):
        """Gets the elemcenter of this LinerHangerData.  # noqa: E501


        :return: The elemcenter of this LinerHangerData.  # noqa: E501
        :rtype: float
        """
        return self._elemcenter

    @elemcenter.setter
    def elemcenter(self, elemcenter):
        """Sets the elemcenter of this LinerHangerData.


        :param elemcenter: The elemcenter of this LinerHangerData.  # noqa: E501
        :type: float
        """

        self._elemcenter = elemcenter

    @property
    def idrec(self):
        """Gets the idrec of this LinerHangerData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this LinerHangerData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this LinerHangerData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this LinerHangerData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this LinerHangerData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this LinerHangerData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this LinerHangerData.

        id of well  # noqa: E501

        :param idwell: The idwell of this LinerHangerData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lenpolishbore(self):
        """Gets the lenpolishbore of this LinerHangerData.  # noqa: E501


        :return: The lenpolishbore of this LinerHangerData.  # noqa: E501
        :rtype: float
        """
        return self._lenpolishbore

    @lenpolishbore.setter
    def lenpolishbore(self, lenpolishbore):
        """Sets the lenpolishbore of this LinerHangerData.


        :param lenpolishbore: The lenpolishbore of this LinerHangerData.  # noqa: E501
        :type: float
        """

        self._lenpolishbore = lenpolishbore

    @property
    def retrievable(self):
        """Gets the retrievable of this LinerHangerData.  # noqa: E501


        :return: The retrievable of this LinerHangerData.  # noqa: E501
        :rtype: bool
        """
        return self._retrievable

    @retrievable.setter
    def retrievable(self, retrievable):
        """Sets the retrievable of this LinerHangerData.


        :param retrievable: The retrievable of this LinerHangerData.  # noqa: E501
        :type: bool
        """

        self._retrievable = retrievable

    @property
    def setmech(self):
        """Gets the setmech of this LinerHangerData.  # noqa: E501


        :return: The setmech of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._setmech

    @setmech.setter
    def setmech(self, setmech):
        """Sets the setmech of this LinerHangerData.


        :param setmech: The setmech of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._setmech = setmech

    @property
    def settingprocedure(self):
        """Gets the settingprocedure of this LinerHangerData.  # noqa: E501


        :return: The settingprocedure of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._settingprocedure

    @settingprocedure.setter
    def settingprocedure(self, settingprocedure):
        """Sets the settingprocedure of this LinerHangerData.


        :param settingprocedure: The settingprocedure of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._settingprocedure = settingprocedure

    @property
    def slips(self):
        """Gets the slips of this LinerHangerData.  # noqa: E501


        :return: The slips of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._slips

    @slips.setter
    def slips(self, slips):
        """Sets the slips of this LinerHangerData.


        :param slips: The slips of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._slips = slips

    @property
    def szpolishbore(self):
        """Gets the szpolishbore of this LinerHangerData.  # noqa: E501


        :return: The szpolishbore of this LinerHangerData.  # noqa: E501
        :rtype: float
        """
        return self._szpolishbore

    @szpolishbore.setter
    def szpolishbore(self, szpolishbore):
        """Sets the szpolishbore of this LinerHangerData.


        :param szpolishbore: The szpolishbore of this LinerHangerData.  # noqa: E501
        :type: float
        """

        self._szpolishbore = szpolishbore

    @property
    def unsettingprocedure(self):
        """Gets the unsettingprocedure of this LinerHangerData.  # noqa: E501


        :return: The unsettingprocedure of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._unsettingprocedure

    @unsettingprocedure.setter
    def unsettingprocedure(self, unsettingprocedure):
        """Sets the unsettingprocedure of this LinerHangerData.


        :param unsettingprocedure: The unsettingprocedure of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._unsettingprocedure = unsettingprocedure

    @property
    def systag(self):
        """Gets the systag of this LinerHangerData.  # noqa: E501


        :return: The systag of this LinerHangerData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this LinerHangerData.


        :param systag: The systag of this LinerHangerData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinerHangerData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinerHangerData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
