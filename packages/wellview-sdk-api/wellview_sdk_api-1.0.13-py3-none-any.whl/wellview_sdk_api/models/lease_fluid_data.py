# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeaseFluidData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actiontyp': 'str',
        'bsw': 'float',
        'carrier': 'str',
        'density': 'float',
        'dest': 'str',
        'environmenttyp': 'str',
        'fluidtyp': 'str',
        'fromlease': 'float',
        'idrec': 'str',
        'idrecdest': 'str',
        'idrecparent': 'str',
        'idrecsource': 'str',
        'idwell': 'str',
        'note': 'str',
        'purpose': 'str',
        'ratediversionref': 'float',
        'refnocarrier': 'str',
        'sandcut': 'float',
        'source': 'str',
        'tolease': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'actiontyp': 'actiontyp',
        'bsw': 'bsw',
        'carrier': 'carrier',
        'density': 'density',
        'dest': 'dest',
        'environmenttyp': 'environmenttyp',
        'fluidtyp': 'fluidtyp',
        'fromlease': 'fromlease',
        'idrec': 'idrec',
        'idrecdest': 'idrecdest',
        'idrecparent': 'idrecparent',
        'idrecsource': 'idrecsource',
        'idwell': 'idwell',
        'note': 'note',
        'purpose': 'purpose',
        'ratediversionref': 'ratediversionref',
        'refnocarrier': 'refnocarrier',
        'sandcut': 'sandcut',
        'source': 'source',
        'tolease': 'tolease',
        'systag': 'systag'
    }

    def __init__(self, actiontyp=None, bsw=None, carrier=None, density=None, dest=None, environmenttyp=None, fluidtyp=None, fromlease=None, idrec=None, idrecdest=None, idrecparent=None, idrecsource=None, idwell=None, note=None, purpose=None, ratediversionref=None, refnocarrier=None, sandcut=None, source=None, tolease=None, systag=None):  # noqa: E501
        """LeaseFluidData - a model defined in Swagger"""  # noqa: E501
        self._actiontyp = None
        self._bsw = None
        self._carrier = None
        self._density = None
        self._dest = None
        self._environmenttyp = None
        self._fluidtyp = None
        self._fromlease = None
        self._idrec = None
        self._idrecdest = None
        self._idrecparent = None
        self._idrecsource = None
        self._idwell = None
        self._note = None
        self._purpose = None
        self._ratediversionref = None
        self._refnocarrier = None
        self._sandcut = None
        self._source = None
        self._tolease = None
        self._systag = None
        self.discriminator = None
        if actiontyp is not None:
            self.actiontyp = actiontyp
        if bsw is not None:
            self.bsw = bsw
        if carrier is not None:
            self.carrier = carrier
        if density is not None:
            self.density = density
        if dest is not None:
            self.dest = dest
        if environmenttyp is not None:
            self.environmenttyp = environmenttyp
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if fromlease is not None:
            self.fromlease = fromlease
        if idrec is not None:
            self.idrec = idrec
        if idrecdest is not None:
            self.idrecdest = idrecdest
        self.idrecparent = idrecparent
        if idrecsource is not None:
            self.idrecsource = idrecsource
        self.idwell = idwell
        if note is not None:
            self.note = note
        if purpose is not None:
            self.purpose = purpose
        if ratediversionref is not None:
            self.ratediversionref = ratediversionref
        if refnocarrier is not None:
            self.refnocarrier = refnocarrier
        if sandcut is not None:
            self.sandcut = sandcut
        if source is not None:
            self.source = source
        if tolease is not None:
            self.tolease = tolease
        if systag is not None:
            self.systag = systag

    @property
    def actiontyp(self):
        """Gets the actiontyp of this LeaseFluidData.  # noqa: E501


        :return: The actiontyp of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._actiontyp

    @actiontyp.setter
    def actiontyp(self, actiontyp):
        """Sets the actiontyp of this LeaseFluidData.


        :param actiontyp: The actiontyp of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._actiontyp = actiontyp

    @property
    def bsw(self):
        """Gets the bsw of this LeaseFluidData.  # noqa: E501


        :return: The bsw of this LeaseFluidData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this LeaseFluidData.


        :param bsw: The bsw of this LeaseFluidData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def carrier(self):
        """Gets the carrier of this LeaseFluidData.  # noqa: E501


        :return: The carrier of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this LeaseFluidData.


        :param carrier: The carrier of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def density(self):
        """Gets the density of this LeaseFluidData.  # noqa: E501


        :return: The density of this LeaseFluidData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this LeaseFluidData.


        :param density: The density of this LeaseFluidData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def dest(self):
        """Gets the dest of this LeaseFluidData.  # noqa: E501


        :return: The dest of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._dest

    @dest.setter
    def dest(self, dest):
        """Sets the dest of this LeaseFluidData.


        :param dest: The dest of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._dest = dest

    @property
    def environmenttyp(self):
        """Gets the environmenttyp of this LeaseFluidData.  # noqa: E501


        :return: The environmenttyp of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._environmenttyp

    @environmenttyp.setter
    def environmenttyp(self, environmenttyp):
        """Sets the environmenttyp of this LeaseFluidData.


        :param environmenttyp: The environmenttyp of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._environmenttyp = environmenttyp

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this LeaseFluidData.  # noqa: E501


        :return: The fluidtyp of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this LeaseFluidData.


        :param fluidtyp: The fluidtyp of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def fromlease(self):
        """Gets the fromlease of this LeaseFluidData.  # noqa: E501


        :return: The fromlease of this LeaseFluidData.  # noqa: E501
        :rtype: float
        """
        return self._fromlease

    @fromlease.setter
    def fromlease(self, fromlease):
        """Sets the fromlease of this LeaseFluidData.


        :param fromlease: The fromlease of this LeaseFluidData.  # noqa: E501
        :type: float
        """

        self._fromlease = fromlease

    @property
    def idrec(self):
        """Gets the idrec of this LeaseFluidData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this LeaseFluidData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdest(self):
        """Gets the idrecdest of this LeaseFluidData.  # noqa: E501


        :return: The idrecdest of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrecdest

    @idrecdest.setter
    def idrecdest(self, idrecdest):
        """Sets the idrecdest of this LeaseFluidData.


        :param idrecdest: The idrecdest of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._idrecdest = idrecdest

    @property
    def idrecparent(self):
        """Gets the idrecparent of this LeaseFluidData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this LeaseFluidData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this LeaseFluidData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecsource(self):
        """Gets the idrecsource of this LeaseFluidData.  # noqa: E501


        :return: The idrecsource of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrecsource

    @idrecsource.setter
    def idrecsource(self, idrecsource):
        """Sets the idrecsource of this LeaseFluidData.


        :param idrecsource: The idrecsource of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._idrecsource = idrecsource

    @property
    def idwell(self):
        """Gets the idwell of this LeaseFluidData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this LeaseFluidData.

        id of well  # noqa: E501

        :param idwell: The idwell of this LeaseFluidData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this LeaseFluidData.  # noqa: E501


        :return: The note of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this LeaseFluidData.


        :param note: The note of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def purpose(self):
        """Gets the purpose of this LeaseFluidData.  # noqa: E501


        :return: The purpose of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this LeaseFluidData.


        :param purpose: The purpose of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def ratediversionref(self):
        """Gets the ratediversionref of this LeaseFluidData.  # noqa: E501


        :return: The ratediversionref of this LeaseFluidData.  # noqa: E501
        :rtype: float
        """
        return self._ratediversionref

    @ratediversionref.setter
    def ratediversionref(self, ratediversionref):
        """Sets the ratediversionref of this LeaseFluidData.


        :param ratediversionref: The ratediversionref of this LeaseFluidData.  # noqa: E501
        :type: float
        """

        self._ratediversionref = ratediversionref

    @property
    def refnocarrier(self):
        """Gets the refnocarrier of this LeaseFluidData.  # noqa: E501


        :return: The refnocarrier of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._refnocarrier

    @refnocarrier.setter
    def refnocarrier(self, refnocarrier):
        """Sets the refnocarrier of this LeaseFluidData.


        :param refnocarrier: The refnocarrier of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._refnocarrier = refnocarrier

    @property
    def sandcut(self):
        """Gets the sandcut of this LeaseFluidData.  # noqa: E501


        :return: The sandcut of this LeaseFluidData.  # noqa: E501
        :rtype: float
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this LeaseFluidData.


        :param sandcut: The sandcut of this LeaseFluidData.  # noqa: E501
        :type: float
        """

        self._sandcut = sandcut

    @property
    def source(self):
        """Gets the source of this LeaseFluidData.  # noqa: E501


        :return: The source of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LeaseFluidData.


        :param source: The source of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def tolease(self):
        """Gets the tolease of this LeaseFluidData.  # noqa: E501


        :return: The tolease of this LeaseFluidData.  # noqa: E501
        :rtype: float
        """
        return self._tolease

    @tolease.setter
    def tolease(self, tolease):
        """Sets the tolease of this LeaseFluidData.


        :param tolease: The tolease of this LeaseFluidData.  # noqa: E501
        :type: float
        """

        self._tolease = tolease

    @property
    def systag(self):
        """Gets the systag of this LeaseFluidData.  # noqa: E501


        :return: The systag of this LeaseFluidData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this LeaseFluidData.


        :param systag: The systag of this LeaseFluidData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeaseFluidData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeaseFluidData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
