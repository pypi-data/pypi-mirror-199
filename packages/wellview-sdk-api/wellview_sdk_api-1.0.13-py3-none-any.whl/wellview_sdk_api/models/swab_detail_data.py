# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SwabDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bsw': 'float',
        'com': 'str',
        'density': 'float',
        'depthfluidlevel': 'float',
        'depthpull': 'float',
        'dttm': 'datetime',
        'h2s': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'ph': 'float',
        'prescas': 'float',
        'prestub': 'float',
        'rategas': 'float',
        'salinity': 'float',
        'sandcut': 'float',
        'swabno': 'int',
        'tankgauge': 'float',
        'tempwh': 'float',
        'tmswab': 'float',
        'volfluidrec': 'float',
        'volgas': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'bsw': 'bsw',
        'com': 'com',
        'density': 'density',
        'depthfluidlevel': 'depthfluidlevel',
        'depthpull': 'depthpull',
        'dttm': 'dttm',
        'h2s': 'h2s',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'ph': 'ph',
        'prescas': 'prescas',
        'prestub': 'prestub',
        'rategas': 'rategas',
        'salinity': 'salinity',
        'sandcut': 'sandcut',
        'swabno': 'swabno',
        'tankgauge': 'tankgauge',
        'tempwh': 'tempwh',
        'tmswab': 'tmswab',
        'volfluidrec': 'volfluidrec',
        'volgas': 'volgas',
        'systag': 'systag'
    }

    def __init__(self, bsw=None, com=None, density=None, depthfluidlevel=None, depthpull=None, dttm=None, h2s=None, idrec=None, idrecparent=None, idwell=None, ph=None, prescas=None, prestub=None, rategas=None, salinity=None, sandcut=None, swabno=None, tankgauge=None, tempwh=None, tmswab=None, volfluidrec=None, volgas=None, systag=None):  # noqa: E501
        """SwabDetailData - a model defined in Swagger"""  # noqa: E501
        self._bsw = None
        self._com = None
        self._density = None
        self._depthfluidlevel = None
        self._depthpull = None
        self._dttm = None
        self._h2s = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._ph = None
        self._prescas = None
        self._prestub = None
        self._rategas = None
        self._salinity = None
        self._sandcut = None
        self._swabno = None
        self._tankgauge = None
        self._tempwh = None
        self._tmswab = None
        self._volfluidrec = None
        self._volgas = None
        self._systag = None
        self.discriminator = None
        if bsw is not None:
            self.bsw = bsw
        if com is not None:
            self.com = com
        if density is not None:
            self.density = density
        if depthfluidlevel is not None:
            self.depthfluidlevel = depthfluidlevel
        if depthpull is not None:
            self.depthpull = depthpull
        if dttm is not None:
            self.dttm = dttm
        if h2s is not None:
            self.h2s = h2s
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if ph is not None:
            self.ph = ph
        if prescas is not None:
            self.prescas = prescas
        if prestub is not None:
            self.prestub = prestub
        if rategas is not None:
            self.rategas = rategas
        if salinity is not None:
            self.salinity = salinity
        if sandcut is not None:
            self.sandcut = sandcut
        if swabno is not None:
            self.swabno = swabno
        if tankgauge is not None:
            self.tankgauge = tankgauge
        if tempwh is not None:
            self.tempwh = tempwh
        if tmswab is not None:
            self.tmswab = tmswab
        if volfluidrec is not None:
            self.volfluidrec = volfluidrec
        if volgas is not None:
            self.volgas = volgas
        if systag is not None:
            self.systag = systag

    @property
    def bsw(self):
        """Gets the bsw of this SwabDetailData.  # noqa: E501


        :return: The bsw of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this SwabDetailData.


        :param bsw: The bsw of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def com(self):
        """Gets the com of this SwabDetailData.  # noqa: E501


        :return: The com of this SwabDetailData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SwabDetailData.


        :param com: The com of this SwabDetailData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def density(self):
        """Gets the density of this SwabDetailData.  # noqa: E501


        :return: The density of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this SwabDetailData.


        :param density: The density of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def depthfluidlevel(self):
        """Gets the depthfluidlevel of this SwabDetailData.  # noqa: E501


        :return: The depthfluidlevel of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._depthfluidlevel

    @depthfluidlevel.setter
    def depthfluidlevel(self, depthfluidlevel):
        """Sets the depthfluidlevel of this SwabDetailData.


        :param depthfluidlevel: The depthfluidlevel of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._depthfluidlevel = depthfluidlevel

    @property
    def depthpull(self):
        """Gets the depthpull of this SwabDetailData.  # noqa: E501


        :return: The depthpull of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._depthpull

    @depthpull.setter
    def depthpull(self, depthpull):
        """Sets the depthpull of this SwabDetailData.


        :param depthpull: The depthpull of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._depthpull = depthpull

    @property
    def dttm(self):
        """Gets the dttm of this SwabDetailData.  # noqa: E501


        :return: The dttm of this SwabDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this SwabDetailData.


        :param dttm: The dttm of this SwabDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def h2s(self):
        """Gets the h2s of this SwabDetailData.  # noqa: E501


        :return: The h2s of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._h2s

    @h2s.setter
    def h2s(self, h2s):
        """Sets the h2s of this SwabDetailData.


        :param h2s: The h2s of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._h2s = h2s

    @property
    def idrec(self):
        """Gets the idrec of this SwabDetailData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SwabDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SwabDetailData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SwabDetailData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this SwabDetailData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this SwabDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this SwabDetailData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this SwabDetailData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this SwabDetailData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SwabDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SwabDetailData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SwabDetailData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def ph(self):
        """Gets the ph of this SwabDetailData.  # noqa: E501


        :return: The ph of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._ph

    @ph.setter
    def ph(self, ph):
        """Sets the ph of this SwabDetailData.


        :param ph: The ph of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._ph = ph

    @property
    def prescas(self):
        """Gets the prescas of this SwabDetailData.  # noqa: E501


        :return: The prescas of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this SwabDetailData.


        :param prescas: The prescas of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def prestub(self):
        """Gets the prestub of this SwabDetailData.  # noqa: E501


        :return: The prestub of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this SwabDetailData.


        :param prestub: The prestub of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._prestub = prestub

    @property
    def rategas(self):
        """Gets the rategas of this SwabDetailData.  # noqa: E501


        :return: The rategas of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._rategas

    @rategas.setter
    def rategas(self, rategas):
        """Sets the rategas of this SwabDetailData.


        :param rategas: The rategas of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._rategas = rategas

    @property
    def salinity(self):
        """Gets the salinity of this SwabDetailData.  # noqa: E501


        :return: The salinity of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._salinity

    @salinity.setter
    def salinity(self, salinity):
        """Sets the salinity of this SwabDetailData.


        :param salinity: The salinity of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._salinity = salinity

    @property
    def sandcut(self):
        """Gets the sandcut of this SwabDetailData.  # noqa: E501


        :return: The sandcut of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this SwabDetailData.


        :param sandcut: The sandcut of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._sandcut = sandcut

    @property
    def swabno(self):
        """Gets the swabno of this SwabDetailData.  # noqa: E501


        :return: The swabno of this SwabDetailData.  # noqa: E501
        :rtype: int
        """
        return self._swabno

    @swabno.setter
    def swabno(self, swabno):
        """Sets the swabno of this SwabDetailData.


        :param swabno: The swabno of this SwabDetailData.  # noqa: E501
        :type: int
        """

        self._swabno = swabno

    @property
    def tankgauge(self):
        """Gets the tankgauge of this SwabDetailData.  # noqa: E501


        :return: The tankgauge of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._tankgauge

    @tankgauge.setter
    def tankgauge(self, tankgauge):
        """Sets the tankgauge of this SwabDetailData.


        :param tankgauge: The tankgauge of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._tankgauge = tankgauge

    @property
    def tempwh(self):
        """Gets the tempwh of this SwabDetailData.  # noqa: E501


        :return: The tempwh of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._tempwh

    @tempwh.setter
    def tempwh(self, tempwh):
        """Sets the tempwh of this SwabDetailData.


        :param tempwh: The tempwh of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._tempwh = tempwh

    @property
    def tmswab(self):
        """Gets the tmswab of this SwabDetailData.  # noqa: E501


        :return: The tmswab of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._tmswab

    @tmswab.setter
    def tmswab(self, tmswab):
        """Sets the tmswab of this SwabDetailData.


        :param tmswab: The tmswab of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._tmswab = tmswab

    @property
    def volfluidrec(self):
        """Gets the volfluidrec of this SwabDetailData.  # noqa: E501


        :return: The volfluidrec of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._volfluidrec

    @volfluidrec.setter
    def volfluidrec(self, volfluidrec):
        """Sets the volfluidrec of this SwabDetailData.


        :param volfluidrec: The volfluidrec of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._volfluidrec = volfluidrec

    @property
    def volgas(self):
        """Gets the volgas of this SwabDetailData.  # noqa: E501


        :return: The volgas of this SwabDetailData.  # noqa: E501
        :rtype: float
        """
        return self._volgas

    @volgas.setter
    def volgas(self, volgas):
        """Sets the volgas of this SwabDetailData.


        :param volgas: The volgas of this SwabDetailData.  # noqa: E501
        :type: float
        """

        self._volgas = volgas

    @property
    def systag(self):
        """Gets the systag of this SwabDetailData.  # noqa: E501


        :return: The systag of this SwabDetailData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SwabDetailData.


        :param systag: The systag of this SwabDetailData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwabDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwabDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
