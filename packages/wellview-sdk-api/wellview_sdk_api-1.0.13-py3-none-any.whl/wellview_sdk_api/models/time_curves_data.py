# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeCurvesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analyst': 'str',
        'com': 'str',
        'contractor': 'str',
        'curvedata': 'str',
        'des': 'str',
        'displayflag': 'bool',
        'dttmendref': 'datetime',
        'dttmstartref': 'datetime',
        'excludefromexport': 'bool',
        'idrec': 'str',
        'idrecitem': 'str',
        'idrecjob': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'source': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'unitlabel': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'analyst': 'analyst',
        'com': 'com',
        'contractor': 'contractor',
        'curvedata': 'curvedata',
        'des': 'des',
        'displayflag': 'displayflag',
        'dttmendref': 'dttmendref',
        'dttmstartref': 'dttmstartref',
        'excludefromexport': 'excludefromexport',
        'idrec': 'idrec',
        'idrecitem': 'idrecitem',
        'idrecjob': 'idrecjob',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'source': 'source',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'unitlabel': 'unitlabel',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'systag': 'systag'
    }

    def __init__(self, analyst=None, com=None, contractor=None, curvedata=None, des=None, displayflag=None, dttmendref=None, dttmstartref=None, excludefromexport=None, idrec=None, idrecitem=None, idrecjob=None, idrecwellbore=None, idwell=None, source=None, typ1=None, typ2=None, unitlabel=None, usertxt1=None, usertxt2=None, usertxt3=None, systag=None):  # noqa: E501
        """TimeCurvesData - a model defined in Swagger"""  # noqa: E501
        self._analyst = None
        self._com = None
        self._contractor = None
        self._curvedata = None
        self._des = None
        self._displayflag = None
        self._dttmendref = None
        self._dttmstartref = None
        self._excludefromexport = None
        self._idrec = None
        self._idrecitem = None
        self._idrecjob = None
        self._idrecwellbore = None
        self._idwell = None
        self._source = None
        self._typ1 = None
        self._typ2 = None
        self._unitlabel = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._systag = None
        self.discriminator = None
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if curvedata is not None:
            self.curvedata = curvedata
        if des is not None:
            self.des = des
        if displayflag is not None:
            self.displayflag = displayflag
        if dttmendref is not None:
            self.dttmendref = dttmendref
        if dttmstartref is not None:
            self.dttmstartref = dttmstartref
        if excludefromexport is not None:
            self.excludefromexport = excludefromexport
        if idrec is not None:
            self.idrec = idrec
        if idrecitem is not None:
            self.idrecitem = idrecitem
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if source is not None:
            self.source = source
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if unitlabel is not None:
            self.unitlabel = unitlabel
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if systag is not None:
            self.systag = systag

    @property
    def analyst(self):
        """Gets the analyst of this TimeCurvesData.  # noqa: E501


        :return: The analyst of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this TimeCurvesData.


        :param analyst: The analyst of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this TimeCurvesData.  # noqa: E501


        :return: The com of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this TimeCurvesData.


        :param com: The com of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this TimeCurvesData.  # noqa: E501


        :return: The contractor of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this TimeCurvesData.


        :param contractor: The contractor of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def curvedata(self):
        """Gets the curvedata of this TimeCurvesData.  # noqa: E501


        :return: The curvedata of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._curvedata

    @curvedata.setter
    def curvedata(self, curvedata):
        """Sets the curvedata of this TimeCurvesData.


        :param curvedata: The curvedata of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._curvedata = curvedata

    @property
    def des(self):
        """Gets the des of this TimeCurvesData.  # noqa: E501


        :return: The des of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this TimeCurvesData.


        :param des: The des of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def displayflag(self):
        """Gets the displayflag of this TimeCurvesData.  # noqa: E501


        :return: The displayflag of this TimeCurvesData.  # noqa: E501
        :rtype: bool
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this TimeCurvesData.


        :param displayflag: The displayflag of this TimeCurvesData.  # noqa: E501
        :type: bool
        """

        self._displayflag = displayflag

    @property
    def dttmendref(self):
        """Gets the dttmendref of this TimeCurvesData.  # noqa: E501


        :return: The dttmendref of this TimeCurvesData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendref

    @dttmendref.setter
    def dttmendref(self, dttmendref):
        """Sets the dttmendref of this TimeCurvesData.


        :param dttmendref: The dttmendref of this TimeCurvesData.  # noqa: E501
        :type: datetime
        """

        self._dttmendref = dttmendref

    @property
    def dttmstartref(self):
        """Gets the dttmstartref of this TimeCurvesData.  # noqa: E501


        :return: The dttmstartref of this TimeCurvesData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartref

    @dttmstartref.setter
    def dttmstartref(self, dttmstartref):
        """Sets the dttmstartref of this TimeCurvesData.


        :param dttmstartref: The dttmstartref of this TimeCurvesData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartref = dttmstartref

    @property
    def excludefromexport(self):
        """Gets the excludefromexport of this TimeCurvesData.  # noqa: E501


        :return: The excludefromexport of this TimeCurvesData.  # noqa: E501
        :rtype: bool
        """
        return self._excludefromexport

    @excludefromexport.setter
    def excludefromexport(self, excludefromexport):
        """Sets the excludefromexport of this TimeCurvesData.


        :param excludefromexport: The excludefromexport of this TimeCurvesData.  # noqa: E501
        :type: bool
        """

        self._excludefromexport = excludefromexport

    @property
    def idrec(self):
        """Gets the idrec of this TimeCurvesData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TimeCurvesData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecitem(self):
        """Gets the idrecitem of this TimeCurvesData.  # noqa: E501


        :return: The idrecitem of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecitem

    @idrecitem.setter
    def idrecitem(self, idrecitem):
        """Sets the idrecitem of this TimeCurvesData.


        :param idrecitem: The idrecitem of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._idrecitem = idrecitem

    @property
    def idrecjob(self):
        """Gets the idrecjob of this TimeCurvesData.  # noqa: E501


        :return: The idrecjob of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this TimeCurvesData.


        :param idrecjob: The idrecjob of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this TimeCurvesData.  # noqa: E501


        :return: The idrecwellbore of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this TimeCurvesData.


        :param idrecwellbore: The idrecwellbore of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this TimeCurvesData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TimeCurvesData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TimeCurvesData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def source(self):
        """Gets the source of this TimeCurvesData.  # noqa: E501


        :return: The source of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TimeCurvesData.


        :param source: The source of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def typ1(self):
        """Gets the typ1 of this TimeCurvesData.  # noqa: E501


        :return: The typ1 of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this TimeCurvesData.


        :param typ1: The typ1 of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this TimeCurvesData.  # noqa: E501


        :return: The typ2 of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this TimeCurvesData.


        :param typ2: The typ2 of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def unitlabel(self):
        """Gets the unitlabel of this TimeCurvesData.  # noqa: E501


        :return: The unitlabel of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._unitlabel

    @unitlabel.setter
    def unitlabel(self, unitlabel):
        """Sets the unitlabel of this TimeCurvesData.


        :param unitlabel: The unitlabel of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._unitlabel = unitlabel

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this TimeCurvesData.  # noqa: E501


        :return: The usertxt1 of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this TimeCurvesData.


        :param usertxt1: The usertxt1 of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this TimeCurvesData.  # noqa: E501


        :return: The usertxt2 of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this TimeCurvesData.


        :param usertxt2: The usertxt2 of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this TimeCurvesData.  # noqa: E501


        :return: The usertxt3 of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this TimeCurvesData.


        :param usertxt3: The usertxt3 of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def systag(self):
        """Gets the systag of this TimeCurvesData.  # noqa: E501


        :return: The systag of this TimeCurvesData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TimeCurvesData.


        :param systag: The systag of this TimeCurvesData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeCurvesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeCurvesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
