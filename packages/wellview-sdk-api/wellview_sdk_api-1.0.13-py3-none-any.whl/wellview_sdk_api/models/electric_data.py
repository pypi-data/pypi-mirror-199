# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ElectricData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currentrating': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'motorpoles': 'int',
        'nemarating': 'str',
        'typ': 'str',
        'utilityco': 'str',
        'varspddrv': 'bool',
        'varspddrvlowerfreq': 'float',
        'varspddrvmake': 'str',
        'varspddrvmodel': 'str',
        'varspddrvupperfreq': 'float',
        'voltagerating': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'currentrating': 'currentrating',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'motorpoles': 'motorpoles',
        'nemarating': 'nemarating',
        'typ': 'typ',
        'utilityco': 'utilityco',
        'varspddrv': 'varspddrv',
        'varspddrvlowerfreq': 'varspddrvlowerfreq',
        'varspddrvmake': 'varspddrvmake',
        'varspddrvmodel': 'varspddrvmodel',
        'varspddrvupperfreq': 'varspddrvupperfreq',
        'voltagerating': 'voltagerating',
        'systag': 'systag'
    }

    def __init__(self, currentrating=None, idrec=None, idrecparent=None, idwell=None, motorpoles=None, nemarating=None, typ=None, utilityco=None, varspddrv=None, varspddrvlowerfreq=None, varspddrvmake=None, varspddrvmodel=None, varspddrvupperfreq=None, voltagerating=None, systag=None):  # noqa: E501
        """ElectricData - a model defined in Swagger"""  # noqa: E501
        self._currentrating = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._motorpoles = None
        self._nemarating = None
        self._typ = None
        self._utilityco = None
        self._varspddrv = None
        self._varspddrvlowerfreq = None
        self._varspddrvmake = None
        self._varspddrvmodel = None
        self._varspddrvupperfreq = None
        self._voltagerating = None
        self._systag = None
        self.discriminator = None
        if currentrating is not None:
            self.currentrating = currentrating
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if motorpoles is not None:
            self.motorpoles = motorpoles
        if nemarating is not None:
            self.nemarating = nemarating
        if typ is not None:
            self.typ = typ
        if utilityco is not None:
            self.utilityco = utilityco
        if varspddrv is not None:
            self.varspddrv = varspddrv
        if varspddrvlowerfreq is not None:
            self.varspddrvlowerfreq = varspddrvlowerfreq
        if varspddrvmake is not None:
            self.varspddrvmake = varspddrvmake
        if varspddrvmodel is not None:
            self.varspddrvmodel = varspddrvmodel
        if varspddrvupperfreq is not None:
            self.varspddrvupperfreq = varspddrvupperfreq
        if voltagerating is not None:
            self.voltagerating = voltagerating
        if systag is not None:
            self.systag = systag

    @property
    def currentrating(self):
        """Gets the currentrating of this ElectricData.  # noqa: E501


        :return: The currentrating of this ElectricData.  # noqa: E501
        :rtype: float
        """
        return self._currentrating

    @currentrating.setter
    def currentrating(self, currentrating):
        """Sets the currentrating of this ElectricData.


        :param currentrating: The currentrating of this ElectricData.  # noqa: E501
        :type: float
        """

        self._currentrating = currentrating

    @property
    def idrec(self):
        """Gets the idrec of this ElectricData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ElectricData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ElectricData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ElectricData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ElectricData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ElectricData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ElectricData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ElectricData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ElectricData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def motorpoles(self):
        """Gets the motorpoles of this ElectricData.  # noqa: E501


        :return: The motorpoles of this ElectricData.  # noqa: E501
        :rtype: int
        """
        return self._motorpoles

    @motorpoles.setter
    def motorpoles(self, motorpoles):
        """Sets the motorpoles of this ElectricData.


        :param motorpoles: The motorpoles of this ElectricData.  # noqa: E501
        :type: int
        """

        self._motorpoles = motorpoles

    @property
    def nemarating(self):
        """Gets the nemarating of this ElectricData.  # noqa: E501


        :return: The nemarating of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._nemarating

    @nemarating.setter
    def nemarating(self, nemarating):
        """Sets the nemarating of this ElectricData.


        :param nemarating: The nemarating of this ElectricData.  # noqa: E501
        :type: str
        """

        self._nemarating = nemarating

    @property
    def typ(self):
        """Gets the typ of this ElectricData.  # noqa: E501


        :return: The typ of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this ElectricData.


        :param typ: The typ of this ElectricData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def utilityco(self):
        """Gets the utilityco of this ElectricData.  # noqa: E501


        :return: The utilityco of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._utilityco

    @utilityco.setter
    def utilityco(self, utilityco):
        """Sets the utilityco of this ElectricData.


        :param utilityco: The utilityco of this ElectricData.  # noqa: E501
        :type: str
        """

        self._utilityco = utilityco

    @property
    def varspddrv(self):
        """Gets the varspddrv of this ElectricData.  # noqa: E501


        :return: The varspddrv of this ElectricData.  # noqa: E501
        :rtype: bool
        """
        return self._varspddrv

    @varspddrv.setter
    def varspddrv(self, varspddrv):
        """Sets the varspddrv of this ElectricData.


        :param varspddrv: The varspddrv of this ElectricData.  # noqa: E501
        :type: bool
        """

        self._varspddrv = varspddrv

    @property
    def varspddrvlowerfreq(self):
        """Gets the varspddrvlowerfreq of this ElectricData.  # noqa: E501


        :return: The varspddrvlowerfreq of this ElectricData.  # noqa: E501
        :rtype: float
        """
        return self._varspddrvlowerfreq

    @varspddrvlowerfreq.setter
    def varspddrvlowerfreq(self, varspddrvlowerfreq):
        """Sets the varspddrvlowerfreq of this ElectricData.


        :param varspddrvlowerfreq: The varspddrvlowerfreq of this ElectricData.  # noqa: E501
        :type: float
        """

        self._varspddrvlowerfreq = varspddrvlowerfreq

    @property
    def varspddrvmake(self):
        """Gets the varspddrvmake of this ElectricData.  # noqa: E501


        :return: The varspddrvmake of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._varspddrvmake

    @varspddrvmake.setter
    def varspddrvmake(self, varspddrvmake):
        """Sets the varspddrvmake of this ElectricData.


        :param varspddrvmake: The varspddrvmake of this ElectricData.  # noqa: E501
        :type: str
        """

        self._varspddrvmake = varspddrvmake

    @property
    def varspddrvmodel(self):
        """Gets the varspddrvmodel of this ElectricData.  # noqa: E501


        :return: The varspddrvmodel of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._varspddrvmodel

    @varspddrvmodel.setter
    def varspddrvmodel(self, varspddrvmodel):
        """Sets the varspddrvmodel of this ElectricData.


        :param varspddrvmodel: The varspddrvmodel of this ElectricData.  # noqa: E501
        :type: str
        """

        self._varspddrvmodel = varspddrvmodel

    @property
    def varspddrvupperfreq(self):
        """Gets the varspddrvupperfreq of this ElectricData.  # noqa: E501


        :return: The varspddrvupperfreq of this ElectricData.  # noqa: E501
        :rtype: float
        """
        return self._varspddrvupperfreq

    @varspddrvupperfreq.setter
    def varspddrvupperfreq(self, varspddrvupperfreq):
        """Sets the varspddrvupperfreq of this ElectricData.


        :param varspddrvupperfreq: The varspddrvupperfreq of this ElectricData.  # noqa: E501
        :type: float
        """

        self._varspddrvupperfreq = varspddrvupperfreq

    @property
    def voltagerating(self):
        """Gets the voltagerating of this ElectricData.  # noqa: E501


        :return: The voltagerating of this ElectricData.  # noqa: E501
        :rtype: float
        """
        return self._voltagerating

    @voltagerating.setter
    def voltagerating(self, voltagerating):
        """Sets the voltagerating of this ElectricData.


        :param voltagerating: The voltagerating of this ElectricData.  # noqa: E501
        :type: float
        """

        self._voltagerating = voltagerating

    @property
    def systag(self):
        """Gets the systag of this ElectricData.  # noqa: E501


        :return: The systag of this ElectricData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ElectricData.


        :param systag: The systag of this ElectricData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ElectricData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElectricData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
