# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PressureTraverseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysiscom': 'str',
        'analyst': 'str',
        'bsw': 'float',
        'com': 'str',
        'depthgasoil': 'float',
        'depthgaswater': 'float',
        'depthoilwater': 'float',
        'depthresdatum': 'float',
        'depthresmpp': 'float',
        'depthssresdatum': 'float',
        'des': 'str',
        'displayflag': 'bool',
        'dttm': 'datetime',
        'durationshutin': 'float',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecwellbore': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'prescas': 'float',
        'presgradientdatumor': 'float',
        'presresdatum': 'float',
        'presresmpp': 'float',
        'prestub': 'float',
        'rategas': 'float',
        'rateliquid': 'float',
        'sandcut': 'float',
        'subtyp': 'str',
        'tempgradientor': 'float',
        'tempres': 'float',
        'testedby': 'str',
        'typ': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'analysiscom': 'analysiscom',
        'analyst': 'analyst',
        'bsw': 'bsw',
        'com': 'com',
        'depthgasoil': 'depthgasoil',
        'depthgaswater': 'depthgaswater',
        'depthoilwater': 'depthoilwater',
        'depthresdatum': 'depthresdatum',
        'depthresmpp': 'depthresmpp',
        'depthssresdatum': 'depthssresdatum',
        'des': 'des',
        'displayflag': 'displayflag',
        'dttm': 'dttm',
        'durationshutin': 'durationshutin',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecwellbore': 'idrecwellbore',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'presgradientdatumor': 'presgradientdatumor',
        'presresdatum': 'presresdatum',
        'presresmpp': 'presresmpp',
        'prestub': 'prestub',
        'rategas': 'rategas',
        'rateliquid': 'rateliquid',
        'sandcut': 'sandcut',
        'subtyp': 'subtyp',
        'tempgradientor': 'tempgradientor',
        'tempres': 'tempres',
        'testedby': 'testedby',
        'typ': 'typ',
        'systag': 'systag'
    }

    def __init__(self, analysiscom=None, analyst=None, bsw=None, com=None, depthgasoil=None, depthgaswater=None, depthoilwater=None, depthresdatum=None, depthresmpp=None, depthssresdatum=None, des=None, displayflag=None, dttm=None, durationshutin=None, idrec=None, idrecjob=None, idrecwellbore=None, idreczonecompletion=None, idwell=None, prescas=None, presgradientdatumor=None, presresdatum=None, presresmpp=None, prestub=None, rategas=None, rateliquid=None, sandcut=None, subtyp=None, tempgradientor=None, tempres=None, testedby=None, typ=None, systag=None):  # noqa: E501
        """PressureTraverseData - a model defined in Swagger"""  # noqa: E501
        self._analysiscom = None
        self._analyst = None
        self._bsw = None
        self._com = None
        self._depthgasoil = None
        self._depthgaswater = None
        self._depthoilwater = None
        self._depthresdatum = None
        self._depthresmpp = None
        self._depthssresdatum = None
        self._des = None
        self._displayflag = None
        self._dttm = None
        self._durationshutin = None
        self._idrec = None
        self._idrecjob = None
        self._idrecwellbore = None
        self._idreczonecompletion = None
        self._idwell = None
        self._prescas = None
        self._presgradientdatumor = None
        self._presresdatum = None
        self._presresmpp = None
        self._prestub = None
        self._rategas = None
        self._rateliquid = None
        self._sandcut = None
        self._subtyp = None
        self._tempgradientor = None
        self._tempres = None
        self._testedby = None
        self._typ = None
        self._systag = None
        self.discriminator = None
        if analysiscom is not None:
            self.analysiscom = analysiscom
        if analyst is not None:
            self.analyst = analyst
        if bsw is not None:
            self.bsw = bsw
        if com is not None:
            self.com = com
        if depthgasoil is not None:
            self.depthgasoil = depthgasoil
        if depthgaswater is not None:
            self.depthgaswater = depthgaswater
        if depthoilwater is not None:
            self.depthoilwater = depthoilwater
        if depthresdatum is not None:
            self.depthresdatum = depthresdatum
        if depthresmpp is not None:
            self.depthresmpp = depthresmpp
        if depthssresdatum is not None:
            self.depthssresdatum = depthssresdatum
        if des is not None:
            self.des = des
        if displayflag is not None:
            self.displayflag = displayflag
        if dttm is not None:
            self.dttm = dttm
        if durationshutin is not None:
            self.durationshutin = durationshutin
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if presgradientdatumor is not None:
            self.presgradientdatumor = presgradientdatumor
        if presresdatum is not None:
            self.presresdatum = presresdatum
        if presresmpp is not None:
            self.presresmpp = presresmpp
        if prestub is not None:
            self.prestub = prestub
        if rategas is not None:
            self.rategas = rategas
        if rateliquid is not None:
            self.rateliquid = rateliquid
        if sandcut is not None:
            self.sandcut = sandcut
        if subtyp is not None:
            self.subtyp = subtyp
        if tempgradientor is not None:
            self.tempgradientor = tempgradientor
        if tempres is not None:
            self.tempres = tempres
        if testedby is not None:
            self.testedby = testedby
        if typ is not None:
            self.typ = typ
        if systag is not None:
            self.systag = systag

    @property
    def analysiscom(self):
        """Gets the analysiscom of this PressureTraverseData.  # noqa: E501


        :return: The analysiscom of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._analysiscom

    @analysiscom.setter
    def analysiscom(self, analysiscom):
        """Sets the analysiscom of this PressureTraverseData.


        :param analysiscom: The analysiscom of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._analysiscom = analysiscom

    @property
    def analyst(self):
        """Gets the analyst of this PressureTraverseData.  # noqa: E501


        :return: The analyst of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this PressureTraverseData.


        :param analyst: The analyst of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def bsw(self):
        """Gets the bsw of this PressureTraverseData.  # noqa: E501


        :return: The bsw of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this PressureTraverseData.


        :param bsw: The bsw of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def com(self):
        """Gets the com of this PressureTraverseData.  # noqa: E501


        :return: The com of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this PressureTraverseData.


        :param com: The com of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthgasoil(self):
        """Gets the depthgasoil of this PressureTraverseData.  # noqa: E501


        :return: The depthgasoil of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._depthgasoil

    @depthgasoil.setter
    def depthgasoil(self, depthgasoil):
        """Sets the depthgasoil of this PressureTraverseData.


        :param depthgasoil: The depthgasoil of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._depthgasoil = depthgasoil

    @property
    def depthgaswater(self):
        """Gets the depthgaswater of this PressureTraverseData.  # noqa: E501


        :return: The depthgaswater of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._depthgaswater

    @depthgaswater.setter
    def depthgaswater(self, depthgaswater):
        """Sets the depthgaswater of this PressureTraverseData.


        :param depthgaswater: The depthgaswater of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._depthgaswater = depthgaswater

    @property
    def depthoilwater(self):
        """Gets the depthoilwater of this PressureTraverseData.  # noqa: E501


        :return: The depthoilwater of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._depthoilwater

    @depthoilwater.setter
    def depthoilwater(self, depthoilwater):
        """Sets the depthoilwater of this PressureTraverseData.


        :param depthoilwater: The depthoilwater of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._depthoilwater = depthoilwater

    @property
    def depthresdatum(self):
        """Gets the depthresdatum of this PressureTraverseData.  # noqa: E501


        :return: The depthresdatum of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._depthresdatum

    @depthresdatum.setter
    def depthresdatum(self, depthresdatum):
        """Sets the depthresdatum of this PressureTraverseData.


        :param depthresdatum: The depthresdatum of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._depthresdatum = depthresdatum

    @property
    def depthresmpp(self):
        """Gets the depthresmpp of this PressureTraverseData.  # noqa: E501


        :return: The depthresmpp of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._depthresmpp

    @depthresmpp.setter
    def depthresmpp(self, depthresmpp):
        """Sets the depthresmpp of this PressureTraverseData.


        :param depthresmpp: The depthresmpp of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._depthresmpp = depthresmpp

    @property
    def depthssresdatum(self):
        """Gets the depthssresdatum of this PressureTraverseData.  # noqa: E501


        :return: The depthssresdatum of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._depthssresdatum

    @depthssresdatum.setter
    def depthssresdatum(self, depthssresdatum):
        """Sets the depthssresdatum of this PressureTraverseData.


        :param depthssresdatum: The depthssresdatum of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._depthssresdatum = depthssresdatum

    @property
    def des(self):
        """Gets the des of this PressureTraverseData.  # noqa: E501


        :return: The des of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this PressureTraverseData.


        :param des: The des of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def displayflag(self):
        """Gets the displayflag of this PressureTraverseData.  # noqa: E501


        :return: The displayflag of this PressureTraverseData.  # noqa: E501
        :rtype: bool
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this PressureTraverseData.


        :param displayflag: The displayflag of this PressureTraverseData.  # noqa: E501
        :type: bool
        """

        self._displayflag = displayflag

    @property
    def dttm(self):
        """Gets the dttm of this PressureTraverseData.  # noqa: E501


        :return: The dttm of this PressureTraverseData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this PressureTraverseData.


        :param dttm: The dttm of this PressureTraverseData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durationshutin(self):
        """Gets the durationshutin of this PressureTraverseData.  # noqa: E501


        :return: The durationshutin of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._durationshutin

    @durationshutin.setter
    def durationshutin(self, durationshutin):
        """Sets the durationshutin of this PressureTraverseData.


        :param durationshutin: The durationshutin of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._durationshutin = durationshutin

    @property
    def idrec(self):
        """Gets the idrec of this PressureTraverseData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PressureTraverseData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this PressureTraverseData.  # noqa: E501


        :return: The idrecjob of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this PressureTraverseData.


        :param idrecjob: The idrecjob of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this PressureTraverseData.  # noqa: E501


        :return: The idrecwellbore of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this PressureTraverseData.


        :param idrecwellbore: The idrecwellbore of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this PressureTraverseData.  # noqa: E501


        :return: The idreczonecompletion of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this PressureTraverseData.


        :param idreczonecompletion: The idreczonecompletion of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this PressureTraverseData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PressureTraverseData.

        id of well  # noqa: E501

        :param idwell: The idwell of this PressureTraverseData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this PressureTraverseData.  # noqa: E501


        :return: The prescas of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this PressureTraverseData.


        :param prescas: The prescas of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def presgradientdatumor(self):
        """Gets the presgradientdatumor of this PressureTraverseData.  # noqa: E501


        :return: The presgradientdatumor of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._presgradientdatumor

    @presgradientdatumor.setter
    def presgradientdatumor(self, presgradientdatumor):
        """Sets the presgradientdatumor of this PressureTraverseData.


        :param presgradientdatumor: The presgradientdatumor of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._presgradientdatumor = presgradientdatumor

    @property
    def presresdatum(self):
        """Gets the presresdatum of this PressureTraverseData.  # noqa: E501


        :return: The presresdatum of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._presresdatum

    @presresdatum.setter
    def presresdatum(self, presresdatum):
        """Sets the presresdatum of this PressureTraverseData.


        :param presresdatum: The presresdatum of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._presresdatum = presresdatum

    @property
    def presresmpp(self):
        """Gets the presresmpp of this PressureTraverseData.  # noqa: E501


        :return: The presresmpp of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._presresmpp

    @presresmpp.setter
    def presresmpp(self, presresmpp):
        """Sets the presresmpp of this PressureTraverseData.


        :param presresmpp: The presresmpp of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._presresmpp = presresmpp

    @property
    def prestub(self):
        """Gets the prestub of this PressureTraverseData.  # noqa: E501


        :return: The prestub of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this PressureTraverseData.


        :param prestub: The prestub of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._prestub = prestub

    @property
    def rategas(self):
        """Gets the rategas of this PressureTraverseData.  # noqa: E501


        :return: The rategas of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._rategas

    @rategas.setter
    def rategas(self, rategas):
        """Sets the rategas of this PressureTraverseData.


        :param rategas: The rategas of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._rategas = rategas

    @property
    def rateliquid(self):
        """Gets the rateliquid of this PressureTraverseData.  # noqa: E501


        :return: The rateliquid of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._rateliquid

    @rateliquid.setter
    def rateliquid(self, rateliquid):
        """Sets the rateliquid of this PressureTraverseData.


        :param rateliquid: The rateliquid of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._rateliquid = rateliquid

    @property
    def sandcut(self):
        """Gets the sandcut of this PressureTraverseData.  # noqa: E501


        :return: The sandcut of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this PressureTraverseData.


        :param sandcut: The sandcut of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._sandcut = sandcut

    @property
    def subtyp(self):
        """Gets the subtyp of this PressureTraverseData.  # noqa: E501


        :return: The subtyp of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._subtyp

    @subtyp.setter
    def subtyp(self, subtyp):
        """Sets the subtyp of this PressureTraverseData.


        :param subtyp: The subtyp of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._subtyp = subtyp

    @property
    def tempgradientor(self):
        """Gets the tempgradientor of this PressureTraverseData.  # noqa: E501


        :return: The tempgradientor of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._tempgradientor

    @tempgradientor.setter
    def tempgradientor(self, tempgradientor):
        """Sets the tempgradientor of this PressureTraverseData.


        :param tempgradientor: The tempgradientor of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._tempgradientor = tempgradientor

    @property
    def tempres(self):
        """Gets the tempres of this PressureTraverseData.  # noqa: E501


        :return: The tempres of this PressureTraverseData.  # noqa: E501
        :rtype: float
        """
        return self._tempres

    @tempres.setter
    def tempres(self, tempres):
        """Sets the tempres of this PressureTraverseData.


        :param tempres: The tempres of this PressureTraverseData.  # noqa: E501
        :type: float
        """

        self._tempres = tempres

    @property
    def testedby(self):
        """Gets the testedby of this PressureTraverseData.  # noqa: E501


        :return: The testedby of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this PressureTraverseData.


        :param testedby: The testedby of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typ(self):
        """Gets the typ of this PressureTraverseData.  # noqa: E501


        :return: The typ of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this PressureTraverseData.


        :param typ: The typ of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def systag(self):
        """Gets the systag of this PressureTraverseData.  # noqa: E501


        :return: The systag of this PressureTraverseData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PressureTraverseData.


        :param systag: The systag of this PressureTraverseData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PressureTraverseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PressureTraverseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
