# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RisersDiverterData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'depthbtm': 'float',
        'des': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idwell': 'str',
        'proposedpull': 'bool',
        'proposedrun': 'bool',
        'tension': 'float',
        'wthangprelatch': 'float',
        'wthangunlatch': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'depthbtm': 'depthbtm',
        'des': 'des',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'proposedpull': 'proposedpull',
        'proposedrun': 'proposedrun',
        'tension': 'tension',
        'wthangprelatch': 'wthangprelatch',
        'wthangunlatch': 'wthangunlatch',
        'systag': 'systag'
    }

    def __init__(self, com=None, depthbtm=None, des=None, dttmpull=None, dttmrun=None, idrec=None, idwell=None, proposedpull=None, proposedrun=None, tension=None, wthangprelatch=None, wthangunlatch=None, systag=None):  # noqa: E501
        """RisersDiverterData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._depthbtm = None
        self._des = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idwell = None
        self._proposedpull = None
        self._proposedrun = None
        self._tension = None
        self._wthangprelatch = None
        self._wthangunlatch = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if des is not None:
            self.des = des
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        self.idwell = idwell
        if proposedpull is not None:
            self.proposedpull = proposedpull
        if proposedrun is not None:
            self.proposedrun = proposedrun
        if tension is not None:
            self.tension = tension
        if wthangprelatch is not None:
            self.wthangprelatch = wthangprelatch
        if wthangunlatch is not None:
            self.wthangunlatch = wthangunlatch
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this RisersDiverterData.  # noqa: E501


        :return: The com of this RisersDiverterData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this RisersDiverterData.


        :param com: The com of this RisersDiverterData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this RisersDiverterData.  # noqa: E501


        :return: The depthbtm of this RisersDiverterData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this RisersDiverterData.


        :param depthbtm: The depthbtm of this RisersDiverterData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def des(self):
        """Gets the des of this RisersDiverterData.  # noqa: E501


        :return: The des of this RisersDiverterData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this RisersDiverterData.


        :param des: The des of this RisersDiverterData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmpull(self):
        """Gets the dttmpull of this RisersDiverterData.  # noqa: E501


        :return: The dttmpull of this RisersDiverterData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this RisersDiverterData.


        :param dttmpull: The dttmpull of this RisersDiverterData.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this RisersDiverterData.  # noqa: E501


        :return: The dttmrun of this RisersDiverterData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this RisersDiverterData.


        :param dttmrun: The dttmrun of this RisersDiverterData.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this RisersDiverterData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RisersDiverterData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RisersDiverterData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RisersDiverterData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this RisersDiverterData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RisersDiverterData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RisersDiverterData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RisersDiverterData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def proposedpull(self):
        """Gets the proposedpull of this RisersDiverterData.  # noqa: E501


        :return: The proposedpull of this RisersDiverterData.  # noqa: E501
        :rtype: bool
        """
        return self._proposedpull

    @proposedpull.setter
    def proposedpull(self, proposedpull):
        """Sets the proposedpull of this RisersDiverterData.


        :param proposedpull: The proposedpull of this RisersDiverterData.  # noqa: E501
        :type: bool
        """

        self._proposedpull = proposedpull

    @property
    def proposedrun(self):
        """Gets the proposedrun of this RisersDiverterData.  # noqa: E501


        :return: The proposedrun of this RisersDiverterData.  # noqa: E501
        :rtype: bool
        """
        return self._proposedrun

    @proposedrun.setter
    def proposedrun(self, proposedrun):
        """Sets the proposedrun of this RisersDiverterData.


        :param proposedrun: The proposedrun of this RisersDiverterData.  # noqa: E501
        :type: bool
        """

        self._proposedrun = proposedrun

    @property
    def tension(self):
        """Gets the tension of this RisersDiverterData.  # noqa: E501


        :return: The tension of this RisersDiverterData.  # noqa: E501
        :rtype: float
        """
        return self._tension

    @tension.setter
    def tension(self, tension):
        """Sets the tension of this RisersDiverterData.


        :param tension: The tension of this RisersDiverterData.  # noqa: E501
        :type: float
        """

        self._tension = tension

    @property
    def wthangprelatch(self):
        """Gets the wthangprelatch of this RisersDiverterData.  # noqa: E501


        :return: The wthangprelatch of this RisersDiverterData.  # noqa: E501
        :rtype: float
        """
        return self._wthangprelatch

    @wthangprelatch.setter
    def wthangprelatch(self, wthangprelatch):
        """Sets the wthangprelatch of this RisersDiverterData.


        :param wthangprelatch: The wthangprelatch of this RisersDiverterData.  # noqa: E501
        :type: float
        """

        self._wthangprelatch = wthangprelatch

    @property
    def wthangunlatch(self):
        """Gets the wthangunlatch of this RisersDiverterData.  # noqa: E501


        :return: The wthangunlatch of this RisersDiverterData.  # noqa: E501
        :rtype: float
        """
        return self._wthangunlatch

    @wthangunlatch.setter
    def wthangunlatch(self, wthangunlatch):
        """Sets the wthangunlatch of this RisersDiverterData.


        :param wthangunlatch: The wthangunlatch of this RisersDiverterData.  # noqa: E501
        :type: float
        """

        self._wthangunlatch = wthangunlatch

    @property
    def systag(self):
        """Gets the systag of this RisersDiverterData.  # noqa: E501


        :return: The systag of this RisersDiverterData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RisersDiverterData.


        :param systag: The systag of this RisersDiverterData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RisersDiverterData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RisersDiverterData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
