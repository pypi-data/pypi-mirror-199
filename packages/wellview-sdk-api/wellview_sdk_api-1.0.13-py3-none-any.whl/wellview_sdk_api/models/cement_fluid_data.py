# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CementFluidData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amtcement': 'float',
        'cmtclass': 'str',
        'com': 'str',
        'comprstr1': 'float',
        'comprstr2': 'float',
        'comprstrtemp': 'float',
        'comprstrtm1': 'float',
        'comprstrtm2': 'float',
        'density': 'float',
        'depthbtmest': 'float',
        'depthtopest': 'float',
        'desfluid': 'str',
        'dttmendpump': 'datetime',
        'dttmmix': 'datetime',
        'dttmstartpump': 'datetime',
        'excesspumped': 'float',
        'filtrate': 'float',
        'freewater': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'mixwaterratio': 'float',
        'objective': 'str',
        'plasticvis': 'float',
        'presfinal': 'float',
        'presfrictionloss': 'float',
        'rateavg': 'float',
        'tempvisc': 'float',
        'thickentemp': 'float',
        'thickentm': 'float',
        'typ': 'str',
        'volpumped': 'float',
        'watersource': 'str',
        '_yield': 'float',
        'yieldpt': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'amtcement': 'amtcement',
        'cmtclass': 'cmtclass',
        'com': 'com',
        'comprstr1': 'comprstr1',
        'comprstr2': 'comprstr2',
        'comprstrtemp': 'comprstrtemp',
        'comprstrtm1': 'comprstrtm1',
        'comprstrtm2': 'comprstrtm2',
        'density': 'density',
        'depthbtmest': 'depthbtmest',
        'depthtopest': 'depthtopest',
        'desfluid': 'desfluid',
        'dttmendpump': 'dttmendpump',
        'dttmmix': 'dttmmix',
        'dttmstartpump': 'dttmstartpump',
        'excesspumped': 'excesspumped',
        'filtrate': 'filtrate',
        'freewater': 'freewater',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'mixwaterratio': 'mixwaterratio',
        'objective': 'objective',
        'plasticvis': 'plasticvis',
        'presfinal': 'presfinal',
        'presfrictionloss': 'presfrictionloss',
        'rateavg': 'rateavg',
        'tempvisc': 'tempvisc',
        'thickentemp': 'thickentemp',
        'thickentm': 'thickentm',
        'typ': 'typ',
        'volpumped': 'volpumped',
        'watersource': 'watersource',
        '_yield': 'yield',
        'yieldpt': 'yieldpt',
        'systag': 'systag'
    }

    def __init__(self, amtcement=None, cmtclass=None, com=None, comprstr1=None, comprstr2=None, comprstrtemp=None, comprstrtm1=None, comprstrtm2=None, density=None, depthbtmest=None, depthtopest=None, desfluid=None, dttmendpump=None, dttmmix=None, dttmstartpump=None, excesspumped=None, filtrate=None, freewater=None, idrec=None, idrecparent=None, idwell=None, mixwaterratio=None, objective=None, plasticvis=None, presfinal=None, presfrictionloss=None, rateavg=None, tempvisc=None, thickentemp=None, thickentm=None, typ=None, volpumped=None, watersource=None, _yield=None, yieldpt=None, systag=None):  # noqa: E501
        """CementFluidData - a model defined in Swagger"""  # noqa: E501
        self._amtcement = None
        self._cmtclass = None
        self._com = None
        self._comprstr1 = None
        self._comprstr2 = None
        self._comprstrtemp = None
        self._comprstrtm1 = None
        self._comprstrtm2 = None
        self._density = None
        self._depthbtmest = None
        self._depthtopest = None
        self._desfluid = None
        self._dttmendpump = None
        self._dttmmix = None
        self._dttmstartpump = None
        self._excesspumped = None
        self._filtrate = None
        self._freewater = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._mixwaterratio = None
        self._objective = None
        self._plasticvis = None
        self._presfinal = None
        self._presfrictionloss = None
        self._rateavg = None
        self._tempvisc = None
        self._thickentemp = None
        self._thickentm = None
        self._typ = None
        self._volpumped = None
        self._watersource = None
        self.__yield = None
        self._yieldpt = None
        self._systag = None
        self.discriminator = None
        if amtcement is not None:
            self.amtcement = amtcement
        if cmtclass is not None:
            self.cmtclass = cmtclass
        if com is not None:
            self.com = com
        if comprstr1 is not None:
            self.comprstr1 = comprstr1
        if comprstr2 is not None:
            self.comprstr2 = comprstr2
        if comprstrtemp is not None:
            self.comprstrtemp = comprstrtemp
        if comprstrtm1 is not None:
            self.comprstrtm1 = comprstrtm1
        if comprstrtm2 is not None:
            self.comprstrtm2 = comprstrtm2
        if density is not None:
            self.density = density
        if depthbtmest is not None:
            self.depthbtmest = depthbtmest
        if depthtopest is not None:
            self.depthtopest = depthtopest
        if desfluid is not None:
            self.desfluid = desfluid
        if dttmendpump is not None:
            self.dttmendpump = dttmendpump
        if dttmmix is not None:
            self.dttmmix = dttmmix
        if dttmstartpump is not None:
            self.dttmstartpump = dttmstartpump
        if excesspumped is not None:
            self.excesspumped = excesspumped
        if filtrate is not None:
            self.filtrate = filtrate
        if freewater is not None:
            self.freewater = freewater
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if mixwaterratio is not None:
            self.mixwaterratio = mixwaterratio
        if objective is not None:
            self.objective = objective
        if plasticvis is not None:
            self.plasticvis = plasticvis
        if presfinal is not None:
            self.presfinal = presfinal
        if presfrictionloss is not None:
            self.presfrictionloss = presfrictionloss
        if rateavg is not None:
            self.rateavg = rateavg
        if tempvisc is not None:
            self.tempvisc = tempvisc
        if thickentemp is not None:
            self.thickentemp = thickentemp
        if thickentm is not None:
            self.thickentm = thickentm
        if typ is not None:
            self.typ = typ
        if volpumped is not None:
            self.volpumped = volpumped
        if watersource is not None:
            self.watersource = watersource
        if _yield is not None:
            self._yield = _yield
        if yieldpt is not None:
            self.yieldpt = yieldpt
        if systag is not None:
            self.systag = systag

    @property
    def amtcement(self):
        """Gets the amtcement of this CementFluidData.  # noqa: E501


        :return: The amtcement of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._amtcement

    @amtcement.setter
    def amtcement(self, amtcement):
        """Sets the amtcement of this CementFluidData.


        :param amtcement: The amtcement of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._amtcement = amtcement

    @property
    def cmtclass(self):
        """Gets the cmtclass of this CementFluidData.  # noqa: E501


        :return: The cmtclass of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._cmtclass

    @cmtclass.setter
    def cmtclass(self, cmtclass):
        """Sets the cmtclass of this CementFluidData.


        :param cmtclass: The cmtclass of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._cmtclass = cmtclass

    @property
    def com(self):
        """Gets the com of this CementFluidData.  # noqa: E501


        :return: The com of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CementFluidData.


        :param com: The com of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def comprstr1(self):
        """Gets the comprstr1 of this CementFluidData.  # noqa: E501


        :return: The comprstr1 of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._comprstr1

    @comprstr1.setter
    def comprstr1(self, comprstr1):
        """Sets the comprstr1 of this CementFluidData.


        :param comprstr1: The comprstr1 of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._comprstr1 = comprstr1

    @property
    def comprstr2(self):
        """Gets the comprstr2 of this CementFluidData.  # noqa: E501


        :return: The comprstr2 of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._comprstr2

    @comprstr2.setter
    def comprstr2(self, comprstr2):
        """Sets the comprstr2 of this CementFluidData.


        :param comprstr2: The comprstr2 of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._comprstr2 = comprstr2

    @property
    def comprstrtemp(self):
        """Gets the comprstrtemp of this CementFluidData.  # noqa: E501


        :return: The comprstrtemp of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._comprstrtemp

    @comprstrtemp.setter
    def comprstrtemp(self, comprstrtemp):
        """Sets the comprstrtemp of this CementFluidData.


        :param comprstrtemp: The comprstrtemp of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._comprstrtemp = comprstrtemp

    @property
    def comprstrtm1(self):
        """Gets the comprstrtm1 of this CementFluidData.  # noqa: E501


        :return: The comprstrtm1 of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._comprstrtm1

    @comprstrtm1.setter
    def comprstrtm1(self, comprstrtm1):
        """Sets the comprstrtm1 of this CementFluidData.


        :param comprstrtm1: The comprstrtm1 of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._comprstrtm1 = comprstrtm1

    @property
    def comprstrtm2(self):
        """Gets the comprstrtm2 of this CementFluidData.  # noqa: E501


        :return: The comprstrtm2 of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._comprstrtm2

    @comprstrtm2.setter
    def comprstrtm2(self, comprstrtm2):
        """Sets the comprstrtm2 of this CementFluidData.


        :param comprstrtm2: The comprstrtm2 of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._comprstrtm2 = comprstrtm2

    @property
    def density(self):
        """Gets the density of this CementFluidData.  # noqa: E501


        :return: The density of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this CementFluidData.


        :param density: The density of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def depthbtmest(self):
        """Gets the depthbtmest of this CementFluidData.  # noqa: E501


        :return: The depthbtmest of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtmest

    @depthbtmest.setter
    def depthbtmest(self, depthbtmest):
        """Sets the depthbtmest of this CementFluidData.


        :param depthbtmest: The depthbtmest of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._depthbtmest = depthbtmest

    @property
    def depthtopest(self):
        """Gets the depthtopest of this CementFluidData.  # noqa: E501


        :return: The depthtopest of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._depthtopest

    @depthtopest.setter
    def depthtopest(self, depthtopest):
        """Sets the depthtopest of this CementFluidData.


        :param depthtopest: The depthtopest of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._depthtopest = depthtopest

    @property
    def desfluid(self):
        """Gets the desfluid of this CementFluidData.  # noqa: E501


        :return: The desfluid of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._desfluid

    @desfluid.setter
    def desfluid(self, desfluid):
        """Sets the desfluid of this CementFluidData.


        :param desfluid: The desfluid of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._desfluid = desfluid

    @property
    def dttmendpump(self):
        """Gets the dttmendpump of this CementFluidData.  # noqa: E501


        :return: The dttmendpump of this CementFluidData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendpump

    @dttmendpump.setter
    def dttmendpump(self, dttmendpump):
        """Sets the dttmendpump of this CementFluidData.


        :param dttmendpump: The dttmendpump of this CementFluidData.  # noqa: E501
        :type: datetime
        """

        self._dttmendpump = dttmendpump

    @property
    def dttmmix(self):
        """Gets the dttmmix of this CementFluidData.  # noqa: E501


        :return: The dttmmix of this CementFluidData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmix

    @dttmmix.setter
    def dttmmix(self, dttmmix):
        """Sets the dttmmix of this CementFluidData.


        :param dttmmix: The dttmmix of this CementFluidData.  # noqa: E501
        :type: datetime
        """

        self._dttmmix = dttmmix

    @property
    def dttmstartpump(self):
        """Gets the dttmstartpump of this CementFluidData.  # noqa: E501


        :return: The dttmstartpump of this CementFluidData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartpump

    @dttmstartpump.setter
    def dttmstartpump(self, dttmstartpump):
        """Sets the dttmstartpump of this CementFluidData.


        :param dttmstartpump: The dttmstartpump of this CementFluidData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartpump = dttmstartpump

    @property
    def excesspumped(self):
        """Gets the excesspumped of this CementFluidData.  # noqa: E501


        :return: The excesspumped of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._excesspumped

    @excesspumped.setter
    def excesspumped(self, excesspumped):
        """Sets the excesspumped of this CementFluidData.


        :param excesspumped: The excesspumped of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._excesspumped = excesspumped

    @property
    def filtrate(self):
        """Gets the filtrate of this CementFluidData.  # noqa: E501


        :return: The filtrate of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._filtrate

    @filtrate.setter
    def filtrate(self, filtrate):
        """Sets the filtrate of this CementFluidData.


        :param filtrate: The filtrate of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._filtrate = filtrate

    @property
    def freewater(self):
        """Gets the freewater of this CementFluidData.  # noqa: E501


        :return: The freewater of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._freewater

    @freewater.setter
    def freewater(self, freewater):
        """Sets the freewater of this CementFluidData.


        :param freewater: The freewater of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._freewater = freewater

    @property
    def idrec(self):
        """Gets the idrec of this CementFluidData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CementFluidData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CementFluidData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CementFluidData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this CementFluidData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CementFluidData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CementFluidData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CementFluidData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def mixwaterratio(self):
        """Gets the mixwaterratio of this CementFluidData.  # noqa: E501


        :return: The mixwaterratio of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._mixwaterratio

    @mixwaterratio.setter
    def mixwaterratio(self, mixwaterratio):
        """Sets the mixwaterratio of this CementFluidData.


        :param mixwaterratio: The mixwaterratio of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._mixwaterratio = mixwaterratio

    @property
    def objective(self):
        """Gets the objective of this CementFluidData.  # noqa: E501


        :return: The objective of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this CementFluidData.


        :param objective: The objective of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def plasticvis(self):
        """Gets the plasticvis of this CementFluidData.  # noqa: E501


        :return: The plasticvis of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._plasticvis

    @plasticvis.setter
    def plasticvis(self, plasticvis):
        """Sets the plasticvis of this CementFluidData.


        :param plasticvis: The plasticvis of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._plasticvis = plasticvis

    @property
    def presfinal(self):
        """Gets the presfinal of this CementFluidData.  # noqa: E501


        :return: The presfinal of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._presfinal

    @presfinal.setter
    def presfinal(self, presfinal):
        """Sets the presfinal of this CementFluidData.


        :param presfinal: The presfinal of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._presfinal = presfinal

    @property
    def presfrictionloss(self):
        """Gets the presfrictionloss of this CementFluidData.  # noqa: E501


        :return: The presfrictionloss of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._presfrictionloss

    @presfrictionloss.setter
    def presfrictionloss(self, presfrictionloss):
        """Sets the presfrictionloss of this CementFluidData.


        :param presfrictionloss: The presfrictionloss of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._presfrictionloss = presfrictionloss

    @property
    def rateavg(self):
        """Gets the rateavg of this CementFluidData.  # noqa: E501


        :return: The rateavg of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._rateavg

    @rateavg.setter
    def rateavg(self, rateavg):
        """Sets the rateavg of this CementFluidData.


        :param rateavg: The rateavg of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._rateavg = rateavg

    @property
    def tempvisc(self):
        """Gets the tempvisc of this CementFluidData.  # noqa: E501


        :return: The tempvisc of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._tempvisc

    @tempvisc.setter
    def tempvisc(self, tempvisc):
        """Sets the tempvisc of this CementFluidData.


        :param tempvisc: The tempvisc of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._tempvisc = tempvisc

    @property
    def thickentemp(self):
        """Gets the thickentemp of this CementFluidData.  # noqa: E501


        :return: The thickentemp of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._thickentemp

    @thickentemp.setter
    def thickentemp(self, thickentemp):
        """Sets the thickentemp of this CementFluidData.


        :param thickentemp: The thickentemp of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._thickentemp = thickentemp

    @property
    def thickentm(self):
        """Gets the thickentm of this CementFluidData.  # noqa: E501


        :return: The thickentm of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._thickentm

    @thickentm.setter
    def thickentm(self, thickentm):
        """Sets the thickentm of this CementFluidData.


        :param thickentm: The thickentm of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._thickentm = thickentm

    @property
    def typ(self):
        """Gets the typ of this CementFluidData.  # noqa: E501


        :return: The typ of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this CementFluidData.


        :param typ: The typ of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def volpumped(self):
        """Gets the volpumped of this CementFluidData.  # noqa: E501


        :return: The volpumped of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._volpumped

    @volpumped.setter
    def volpumped(self, volpumped):
        """Sets the volpumped of this CementFluidData.


        :param volpumped: The volpumped of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._volpumped = volpumped

    @property
    def watersource(self):
        """Gets the watersource of this CementFluidData.  # noqa: E501


        :return: The watersource of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._watersource

    @watersource.setter
    def watersource(self, watersource):
        """Sets the watersource of this CementFluidData.


        :param watersource: The watersource of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._watersource = watersource

    @property
    def _yield(self):
        """Gets the _yield of this CementFluidData.  # noqa: E501


        :return: The _yield of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self.__yield

    @_yield.setter
    def _yield(self, _yield):
        """Sets the _yield of this CementFluidData.


        :param _yield: The _yield of this CementFluidData.  # noqa: E501
        :type: float
        """

        self.__yield = _yield

    @property
    def yieldpt(self):
        """Gets the yieldpt of this CementFluidData.  # noqa: E501


        :return: The yieldpt of this CementFluidData.  # noqa: E501
        :rtype: float
        """
        return self._yieldpt

    @yieldpt.setter
    def yieldpt(self, yieldpt):
        """Sets the yieldpt of this CementFluidData.


        :param yieldpt: The yieldpt of this CementFluidData.  # noqa: E501
        :type: float
        """

        self._yieldpt = yieldpt

    @property
    def systag(self):
        """Gets the systag of this CementFluidData.  # noqa: E501


        :return: The systag of this CementFluidData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CementFluidData.


        :param systag: The systag of this CementFluidData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CementFluidData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CementFluidData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
