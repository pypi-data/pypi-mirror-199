# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GasCompositionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'molefracacidgasfree': 'float',
        'molefracairfree': 'float',
        'note': 'str',
        'petroleumliquid': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'component': 'component',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'molefracacidgasfree': 'molefracacidgasfree',
        'molefracairfree': 'molefracairfree',
        'note': 'note',
        'petroleumliquid': 'petroleumliquid',
        'systag': 'systag'
    }

    def __init__(self, component=None, idrec=None, idrecparent=None, idwell=None, molefracacidgasfree=None, molefracairfree=None, note=None, petroleumliquid=None, systag=None):  # noqa: E501
        """GasCompositionData - a model defined in Swagger"""  # noqa: E501
        self._component = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._molefracacidgasfree = None
        self._molefracairfree = None
        self._note = None
        self._petroleumliquid = None
        self._systag = None
        self.discriminator = None
        if component is not None:
            self.component = component
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if molefracacidgasfree is not None:
            self.molefracacidgasfree = molefracacidgasfree
        if molefracairfree is not None:
            self.molefracairfree = molefracairfree
        if note is not None:
            self.note = note
        if petroleumliquid is not None:
            self.petroleumliquid = petroleumliquid
        if systag is not None:
            self.systag = systag

    @property
    def component(self):
        """Gets the component of this GasCompositionData.  # noqa: E501


        :return: The component of this GasCompositionData.  # noqa: E501
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this GasCompositionData.


        :param component: The component of this GasCompositionData.  # noqa: E501
        :type: str
        """

        self._component = component

    @property
    def idrec(self):
        """Gets the idrec of this GasCompositionData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this GasCompositionData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this GasCompositionData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this GasCompositionData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this GasCompositionData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this GasCompositionData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this GasCompositionData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this GasCompositionData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this GasCompositionData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this GasCompositionData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this GasCompositionData.

        id of well  # noqa: E501

        :param idwell: The idwell of this GasCompositionData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def molefracacidgasfree(self):
        """Gets the molefracacidgasfree of this GasCompositionData.  # noqa: E501


        :return: The molefracacidgasfree of this GasCompositionData.  # noqa: E501
        :rtype: float
        """
        return self._molefracacidgasfree

    @molefracacidgasfree.setter
    def molefracacidgasfree(self, molefracacidgasfree):
        """Sets the molefracacidgasfree of this GasCompositionData.


        :param molefracacidgasfree: The molefracacidgasfree of this GasCompositionData.  # noqa: E501
        :type: float
        """

        self._molefracacidgasfree = molefracacidgasfree

    @property
    def molefracairfree(self):
        """Gets the molefracairfree of this GasCompositionData.  # noqa: E501


        :return: The molefracairfree of this GasCompositionData.  # noqa: E501
        :rtype: float
        """
        return self._molefracairfree

    @molefracairfree.setter
    def molefracairfree(self, molefracairfree):
        """Sets the molefracairfree of this GasCompositionData.


        :param molefracairfree: The molefracairfree of this GasCompositionData.  # noqa: E501
        :type: float
        """

        self._molefracairfree = molefracairfree

    @property
    def note(self):
        """Gets the note of this GasCompositionData.  # noqa: E501


        :return: The note of this GasCompositionData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this GasCompositionData.


        :param note: The note of this GasCompositionData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def petroleumliquid(self):
        """Gets the petroleumliquid of this GasCompositionData.  # noqa: E501


        :return: The petroleumliquid of this GasCompositionData.  # noqa: E501
        :rtype: float
        """
        return self._petroleumliquid

    @petroleumliquid.setter
    def petroleumliquid(self, petroleumliquid):
        """Sets the petroleumliquid of this GasCompositionData.


        :param petroleumliquid: The petroleumliquid of this GasCompositionData.  # noqa: E501
        :type: float
        """

        self._petroleumliquid = petroleumliquid

    @property
    def systag(self):
        """Gets the systag of this GasCompositionData.  # noqa: E501


        :return: The systag of this GasCompositionData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this GasCompositionData.


        :param systag: The systag of this GasCompositionData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GasCompositionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GasCompositionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
