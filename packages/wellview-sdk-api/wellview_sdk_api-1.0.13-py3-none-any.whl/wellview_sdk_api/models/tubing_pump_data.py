# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TubingPumpData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barrellength': 'float',
        'barrelmaterial': 'str',
        'barreltyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'pumptyp': 'str',
        'seatassydes': 'str',
        'seatassysz': 'float',
        'seatassytyp': 'str',
        'szidbore': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'barrellength': 'barrellength',
        'barrelmaterial': 'barrelmaterial',
        'barreltyp': 'barreltyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'pumptyp': 'pumptyp',
        'seatassydes': 'seatassydes',
        'seatassysz': 'seatassysz',
        'seatassytyp': 'seatassytyp',
        'szidbore': 'szidbore',
        'systag': 'systag'
    }

    def __init__(self, barrellength=None, barrelmaterial=None, barreltyp=None, idrec=None, idrecparent=None, idwell=None, pumptyp=None, seatassydes=None, seatassysz=None, seatassytyp=None, szidbore=None, systag=None):  # noqa: E501
        """TubingPumpData - a model defined in Swagger"""  # noqa: E501
        self._barrellength = None
        self._barrelmaterial = None
        self._barreltyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._pumptyp = None
        self._seatassydes = None
        self._seatassysz = None
        self._seatassytyp = None
        self._szidbore = None
        self._systag = None
        self.discriminator = None
        if barrellength is not None:
            self.barrellength = barrellength
        if barrelmaterial is not None:
            self.barrelmaterial = barrelmaterial
        if barreltyp is not None:
            self.barreltyp = barreltyp
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if pumptyp is not None:
            self.pumptyp = pumptyp
        if seatassydes is not None:
            self.seatassydes = seatassydes
        if seatassysz is not None:
            self.seatassysz = seatassysz
        if seatassytyp is not None:
            self.seatassytyp = seatassytyp
        if szidbore is not None:
            self.szidbore = szidbore
        if systag is not None:
            self.systag = systag

    @property
    def barrellength(self):
        """Gets the barrellength of this TubingPumpData.  # noqa: E501


        :return: The barrellength of this TubingPumpData.  # noqa: E501
        :rtype: float
        """
        return self._barrellength

    @barrellength.setter
    def barrellength(self, barrellength):
        """Sets the barrellength of this TubingPumpData.


        :param barrellength: The barrellength of this TubingPumpData.  # noqa: E501
        :type: float
        """

        self._barrellength = barrellength

    @property
    def barrelmaterial(self):
        """Gets the barrelmaterial of this TubingPumpData.  # noqa: E501


        :return: The barrelmaterial of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._barrelmaterial

    @barrelmaterial.setter
    def barrelmaterial(self, barrelmaterial):
        """Sets the barrelmaterial of this TubingPumpData.


        :param barrelmaterial: The barrelmaterial of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._barrelmaterial = barrelmaterial

    @property
    def barreltyp(self):
        """Gets the barreltyp of this TubingPumpData.  # noqa: E501


        :return: The barreltyp of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._barreltyp

    @barreltyp.setter
    def barreltyp(self, barreltyp):
        """Sets the barreltyp of this TubingPumpData.


        :param barreltyp: The barreltyp of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._barreltyp = barreltyp

    @property
    def idrec(self):
        """Gets the idrec of this TubingPumpData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TubingPumpData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TubingPumpData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TubingPumpData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this TubingPumpData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TubingPumpData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TubingPumpData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TubingPumpData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def pumptyp(self):
        """Gets the pumptyp of this TubingPumpData.  # noqa: E501


        :return: The pumptyp of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._pumptyp

    @pumptyp.setter
    def pumptyp(self, pumptyp):
        """Sets the pumptyp of this TubingPumpData.


        :param pumptyp: The pumptyp of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._pumptyp = pumptyp

    @property
    def seatassydes(self):
        """Gets the seatassydes of this TubingPumpData.  # noqa: E501


        :return: The seatassydes of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._seatassydes

    @seatassydes.setter
    def seatassydes(self, seatassydes):
        """Sets the seatassydes of this TubingPumpData.


        :param seatassydes: The seatassydes of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._seatassydes = seatassydes

    @property
    def seatassysz(self):
        """Gets the seatassysz of this TubingPumpData.  # noqa: E501


        :return: The seatassysz of this TubingPumpData.  # noqa: E501
        :rtype: float
        """
        return self._seatassysz

    @seatassysz.setter
    def seatassysz(self, seatassysz):
        """Sets the seatassysz of this TubingPumpData.


        :param seatassysz: The seatassysz of this TubingPumpData.  # noqa: E501
        :type: float
        """

        self._seatassysz = seatassysz

    @property
    def seatassytyp(self):
        """Gets the seatassytyp of this TubingPumpData.  # noqa: E501


        :return: The seatassytyp of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._seatassytyp

    @seatassytyp.setter
    def seatassytyp(self, seatassytyp):
        """Sets the seatassytyp of this TubingPumpData.


        :param seatassytyp: The seatassytyp of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._seatassytyp = seatassytyp

    @property
    def szidbore(self):
        """Gets the szidbore of this TubingPumpData.  # noqa: E501


        :return: The szidbore of this TubingPumpData.  # noqa: E501
        :rtype: float
        """
        return self._szidbore

    @szidbore.setter
    def szidbore(self, szidbore):
        """Sets the szidbore of this TubingPumpData.


        :param szidbore: The szidbore of this TubingPumpData.  # noqa: E501
        :type: float
        """

        self._szidbore = szidbore

    @property
    def systag(self):
        """Gets the systag of this TubingPumpData.  # noqa: E501


        :return: The systag of this TubingPumpData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TubingPumpData.


        :param systag: The systag of this TubingPumpData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TubingPumpData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TubingPumpData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
