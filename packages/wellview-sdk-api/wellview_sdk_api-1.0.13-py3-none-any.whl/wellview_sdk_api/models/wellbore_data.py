# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellboreData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'county': 'str',
        'depthdraw': 'float',
        'depthstart': 'float',
        'des': 'str',
        'ewdist': 'float',
        'ewflag': 'str',
        'exclude': 'bool',
        'fieldcode': 'str',
        'fieldname': 'str',
        'idrec': 'str',
        'idrecdirsrvyactual': 'str',
        'idrecdirsrvyprop': 'str',
        'idrecjob': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'latitude': 'float',
        'latlongdatum': 'str',
        'latlongsource': 'str',
        'legalsurveyloc': 'str',
        'legalsurveysubtyp': 'str',
        'legalsurveytyp': 'str',
        'locationnote': 'str',
        'locationref': 'str',
        'longitude': 'float',
        'nsdist': 'float',
        'nsflag': 'str',
        'profiletyp': 'str',
        'purpose': 'str',
        'stateprov': 'str',
        'towndist': 'float',
        'townflag': 'str',
        'townname': 'str',
        'townstateprov': 'str',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'utmgridzone': 'int',
        'utmsource': 'str',
        'utmx': 'float',
        'utmy': 'float',
        'vsdir': 'float',
        'vsoriginew': 'float',
        'vsoriginns': 'float',
        'wellboreida': 'str',
        'wellboreidb': 'str',
        'wellboreidc': 'str',
        'wellboreidd': 'str',
        'wellboreide': 'str',
        'systag': 'str',
        'sysseq': 'int'
    }

    attribute_map = {
        'com': 'com',
        'county': 'county',
        'depthdraw': 'depthdraw',
        'depthstart': 'depthstart',
        'des': 'des',
        'ewdist': 'ewdist',
        'ewflag': 'ewflag',
        'exclude': 'exclude',
        'fieldcode': 'fieldcode',
        'fieldname': 'fieldname',
        'idrec': 'idrec',
        'idrecdirsrvyactual': 'idrecdirsrvyactual',
        'idrecdirsrvyprop': 'idrecdirsrvyprop',
        'idrecjob': 'idrecjob',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'latitude': 'latitude',
        'latlongdatum': 'latlongdatum',
        'latlongsource': 'latlongsource',
        'legalsurveyloc': 'legalsurveyloc',
        'legalsurveysubtyp': 'legalsurveysubtyp',
        'legalsurveytyp': 'legalsurveytyp',
        'locationnote': 'locationnote',
        'locationref': 'locationref',
        'longitude': 'longitude',
        'nsdist': 'nsdist',
        'nsflag': 'nsflag',
        'profiletyp': 'profiletyp',
        'purpose': 'purpose',
        'stateprov': 'stateprov',
        'towndist': 'towndist',
        'townflag': 'townflag',
        'townname': 'townname',
        'townstateprov': 'townstateprov',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'utmgridzone': 'utmgridzone',
        'utmsource': 'utmsource',
        'utmx': 'utmx',
        'utmy': 'utmy',
        'vsdir': 'vsdir',
        'vsoriginew': 'vsoriginew',
        'vsoriginns': 'vsoriginns',
        'wellboreida': 'wellboreida',
        'wellboreidb': 'wellboreidb',
        'wellboreidc': 'wellboreidc',
        'wellboreidd': 'wellboreidd',
        'wellboreide': 'wellboreide',
        'systag': 'systag',
        'sysseq': 'sysseq'
    }

    def __init__(self, com=None, county=None, depthdraw=None, depthstart=None, des=None, ewdist=None, ewflag=None, exclude=None, fieldcode=None, fieldname=None, idrec=None, idrecdirsrvyactual=None, idrecdirsrvyprop=None, idrecjob=None, idrecparent=None, idwell=None, latitude=None, latlongdatum=None, latlongsource=None, legalsurveyloc=None, legalsurveysubtyp=None, legalsurveytyp=None, locationnote=None, locationref=None, longitude=None, nsdist=None, nsflag=None, profiletyp=None, purpose=None, stateprov=None, towndist=None, townflag=None, townname=None, townstateprov=None, usernum1=None, usernum2=None, usernum3=None, usertxt1=None, usertxt2=None, usertxt3=None, utmgridzone=None, utmsource=None, utmx=None, utmy=None, vsdir=None, vsoriginew=None, vsoriginns=None, wellboreida=None, wellboreidb=None, wellboreidc=None, wellboreidd=None, wellboreide=None, systag=None, sysseq=None):  # noqa: E501
        """WellboreData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._county = None
        self._depthdraw = None
        self._depthstart = None
        self._des = None
        self._ewdist = None
        self._ewflag = None
        self._exclude = None
        self._fieldcode = None
        self._fieldname = None
        self._idrec = None
        self._idrecdirsrvyactual = None
        self._idrecdirsrvyprop = None
        self._idrecjob = None
        self._idrecparent = None
        self._idwell = None
        self._latitude = None
        self._latlongdatum = None
        self._latlongsource = None
        self._legalsurveyloc = None
        self._legalsurveysubtyp = None
        self._legalsurveytyp = None
        self._locationnote = None
        self._locationref = None
        self._longitude = None
        self._nsdist = None
        self._nsflag = None
        self._profiletyp = None
        self._purpose = None
        self._stateprov = None
        self._towndist = None
        self._townflag = None
        self._townname = None
        self._townstateprov = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._utmgridzone = None
        self._utmsource = None
        self._utmx = None
        self._utmy = None
        self._vsdir = None
        self._vsoriginew = None
        self._vsoriginns = None
        self._wellboreida = None
        self._wellboreidb = None
        self._wellboreidc = None
        self._wellboreidd = None
        self._wellboreide = None
        self._systag = None
        self._sysseq = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if county is not None:
            self.county = county
        if depthdraw is not None:
            self.depthdraw = depthdraw
        if depthstart is not None:
            self.depthstart = depthstart
        if des is not None:
            self.des = des
        if ewdist is not None:
            self.ewdist = ewdist
        if ewflag is not None:
            self.ewflag = ewflag
        if exclude is not None:
            self.exclude = exclude
        if fieldcode is not None:
            self.fieldcode = fieldcode
        if fieldname is not None:
            self.fieldname = fieldname
        if idrec is not None:
            self.idrec = idrec
        if idrecdirsrvyactual is not None:
            self.idrecdirsrvyactual = idrecdirsrvyactual
        if idrecdirsrvyprop is not None:
            self.idrecdirsrvyprop = idrecdirsrvyprop
        if idrecjob is not None:
            self.idrecjob = idrecjob
        self.idrecparent = idrecparent
        self.idwell = idwell
        if latitude is not None:
            self.latitude = latitude
        if latlongdatum is not None:
            self.latlongdatum = latlongdatum
        if latlongsource is not None:
            self.latlongsource = latlongsource
        if legalsurveyloc is not None:
            self.legalsurveyloc = legalsurveyloc
        if legalsurveysubtyp is not None:
            self.legalsurveysubtyp = legalsurveysubtyp
        if legalsurveytyp is not None:
            self.legalsurveytyp = legalsurveytyp
        if locationnote is not None:
            self.locationnote = locationnote
        if locationref is not None:
            self.locationref = locationref
        if longitude is not None:
            self.longitude = longitude
        if nsdist is not None:
            self.nsdist = nsdist
        if nsflag is not None:
            self.nsflag = nsflag
        if profiletyp is not None:
            self.profiletyp = profiletyp
        if purpose is not None:
            self.purpose = purpose
        if stateprov is not None:
            self.stateprov = stateprov
        if towndist is not None:
            self.towndist = towndist
        if townflag is not None:
            self.townflag = townflag
        if townname is not None:
            self.townname = townname
        if townstateprov is not None:
            self.townstateprov = townstateprov
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if utmgridzone is not None:
            self.utmgridzone = utmgridzone
        if utmsource is not None:
            self.utmsource = utmsource
        if utmx is not None:
            self.utmx = utmx
        if utmy is not None:
            self.utmy = utmy
        if vsdir is not None:
            self.vsdir = vsdir
        if vsoriginew is not None:
            self.vsoriginew = vsoriginew
        if vsoriginns is not None:
            self.vsoriginns = vsoriginns
        if wellboreida is not None:
            self.wellboreida = wellboreida
        if wellboreidb is not None:
            self.wellboreidb = wellboreidb
        if wellboreidc is not None:
            self.wellboreidc = wellboreidc
        if wellboreidd is not None:
            self.wellboreidd = wellboreidd
        if wellboreide is not None:
            self.wellboreide = wellboreide
        if systag is not None:
            self.systag = systag
        if sysseq is not None:
            self.sysseq = sysseq

    @property
    def com(self):
        """Gets the com of this WellboreData.  # noqa: E501


        :return: The com of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellboreData.


        :param com: The com of this WellboreData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def county(self):
        """Gets the county of this WellboreData.  # noqa: E501


        :return: The county of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this WellboreData.


        :param county: The county of this WellboreData.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def depthdraw(self):
        """Gets the depthdraw of this WellboreData.  # noqa: E501


        :return: The depthdraw of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._depthdraw

    @depthdraw.setter
    def depthdraw(self, depthdraw):
        """Sets the depthdraw of this WellboreData.


        :param depthdraw: The depthdraw of this WellboreData.  # noqa: E501
        :type: float
        """

        self._depthdraw = depthdraw

    @property
    def depthstart(self):
        """Gets the depthstart of this WellboreData.  # noqa: E501


        :return: The depthstart of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this WellboreData.


        :param depthstart: The depthstart of this WellboreData.  # noqa: E501
        :type: float
        """

        self._depthstart = depthstart

    @property
    def des(self):
        """Gets the des of this WellboreData.  # noqa: E501


        :return: The des of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellboreData.


        :param des: The des of this WellboreData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def ewdist(self):
        """Gets the ewdist of this WellboreData.  # noqa: E501


        :return: The ewdist of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._ewdist

    @ewdist.setter
    def ewdist(self, ewdist):
        """Sets the ewdist of this WellboreData.


        :param ewdist: The ewdist of this WellboreData.  # noqa: E501
        :type: float
        """

        self._ewdist = ewdist

    @property
    def ewflag(self):
        """Gets the ewflag of this WellboreData.  # noqa: E501


        :return: The ewflag of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._ewflag

    @ewflag.setter
    def ewflag(self, ewflag):
        """Sets the ewflag of this WellboreData.


        :param ewflag: The ewflag of this WellboreData.  # noqa: E501
        :type: str
        """

        self._ewflag = ewflag

    @property
    def exclude(self):
        """Gets the exclude of this WellboreData.  # noqa: E501


        :return: The exclude of this WellboreData.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this WellboreData.


        :param exclude: The exclude of this WellboreData.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def fieldcode(self):
        """Gets the fieldcode of this WellboreData.  # noqa: E501


        :return: The fieldcode of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._fieldcode

    @fieldcode.setter
    def fieldcode(self, fieldcode):
        """Sets the fieldcode of this WellboreData.


        :param fieldcode: The fieldcode of this WellboreData.  # noqa: E501
        :type: str
        """

        self._fieldcode = fieldcode

    @property
    def fieldname(self):
        """Gets the fieldname of this WellboreData.  # noqa: E501


        :return: The fieldname of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this WellboreData.


        :param fieldname: The fieldname of this WellboreData.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def idrec(self):
        """Gets the idrec of this WellboreData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellboreData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WellboreData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdirsrvyactual(self):
        """Gets the idrecdirsrvyactual of this WellboreData.  # noqa: E501


        :return: The idrecdirsrvyactual of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecdirsrvyactual

    @idrecdirsrvyactual.setter
    def idrecdirsrvyactual(self, idrecdirsrvyactual):
        """Sets the idrecdirsrvyactual of this WellboreData.


        :param idrecdirsrvyactual: The idrecdirsrvyactual of this WellboreData.  # noqa: E501
        :type: str
        """

        self._idrecdirsrvyactual = idrecdirsrvyactual

    @property
    def idrecdirsrvyprop(self):
        """Gets the idrecdirsrvyprop of this WellboreData.  # noqa: E501


        :return: The idrecdirsrvyprop of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecdirsrvyprop

    @idrecdirsrvyprop.setter
    def idrecdirsrvyprop(self, idrecdirsrvyprop):
        """Sets the idrecdirsrvyprop of this WellboreData.


        :param idrecdirsrvyprop: The idrecdirsrvyprop of this WellboreData.  # noqa: E501
        :type: str
        """

        self._idrecdirsrvyprop = idrecdirsrvyprop

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellboreData.  # noqa: E501


        :return: The idrecjob of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellboreData.


        :param idrecjob: The idrecjob of this WellboreData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellboreData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellboreData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this WellboreData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this WellboreData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellboreData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellboreData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def latitude(self):
        """Gets the latitude of this WellboreData.  # noqa: E501


        :return: The latitude of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this WellboreData.


        :param latitude: The latitude of this WellboreData.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def latlongdatum(self):
        """Gets the latlongdatum of this WellboreData.  # noqa: E501


        :return: The latlongdatum of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._latlongdatum

    @latlongdatum.setter
    def latlongdatum(self, latlongdatum):
        """Sets the latlongdatum of this WellboreData.


        :param latlongdatum: The latlongdatum of this WellboreData.  # noqa: E501
        :type: str
        """

        self._latlongdatum = latlongdatum

    @property
    def latlongsource(self):
        """Gets the latlongsource of this WellboreData.  # noqa: E501


        :return: The latlongsource of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._latlongsource

    @latlongsource.setter
    def latlongsource(self, latlongsource):
        """Sets the latlongsource of this WellboreData.


        :param latlongsource: The latlongsource of this WellboreData.  # noqa: E501
        :type: str
        """

        self._latlongsource = latlongsource

    @property
    def legalsurveyloc(self):
        """Gets the legalsurveyloc of this WellboreData.  # noqa: E501


        :return: The legalsurveyloc of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveyloc

    @legalsurveyloc.setter
    def legalsurveyloc(self, legalsurveyloc):
        """Sets the legalsurveyloc of this WellboreData.


        :param legalsurveyloc: The legalsurveyloc of this WellboreData.  # noqa: E501
        :type: str
        """

        self._legalsurveyloc = legalsurveyloc

    @property
    def legalsurveysubtyp(self):
        """Gets the legalsurveysubtyp of this WellboreData.  # noqa: E501


        :return: The legalsurveysubtyp of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveysubtyp

    @legalsurveysubtyp.setter
    def legalsurveysubtyp(self, legalsurveysubtyp):
        """Sets the legalsurveysubtyp of this WellboreData.


        :param legalsurveysubtyp: The legalsurveysubtyp of this WellboreData.  # noqa: E501
        :type: str
        """

        self._legalsurveysubtyp = legalsurveysubtyp

    @property
    def legalsurveytyp(self):
        """Gets the legalsurveytyp of this WellboreData.  # noqa: E501


        :return: The legalsurveytyp of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveytyp

    @legalsurveytyp.setter
    def legalsurveytyp(self, legalsurveytyp):
        """Sets the legalsurveytyp of this WellboreData.


        :param legalsurveytyp: The legalsurveytyp of this WellboreData.  # noqa: E501
        :type: str
        """

        self._legalsurveytyp = legalsurveytyp

    @property
    def locationnote(self):
        """Gets the locationnote of this WellboreData.  # noqa: E501


        :return: The locationnote of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._locationnote

    @locationnote.setter
    def locationnote(self, locationnote):
        """Sets the locationnote of this WellboreData.


        :param locationnote: The locationnote of this WellboreData.  # noqa: E501
        :type: str
        """

        self._locationnote = locationnote

    @property
    def locationref(self):
        """Gets the locationref of this WellboreData.  # noqa: E501


        :return: The locationref of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._locationref

    @locationref.setter
    def locationref(self, locationref):
        """Sets the locationref of this WellboreData.


        :param locationref: The locationref of this WellboreData.  # noqa: E501
        :type: str
        """

        self._locationref = locationref

    @property
    def longitude(self):
        """Gets the longitude of this WellboreData.  # noqa: E501


        :return: The longitude of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this WellboreData.


        :param longitude: The longitude of this WellboreData.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def nsdist(self):
        """Gets the nsdist of this WellboreData.  # noqa: E501


        :return: The nsdist of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._nsdist

    @nsdist.setter
    def nsdist(self, nsdist):
        """Sets the nsdist of this WellboreData.


        :param nsdist: The nsdist of this WellboreData.  # noqa: E501
        :type: float
        """

        self._nsdist = nsdist

    @property
    def nsflag(self):
        """Gets the nsflag of this WellboreData.  # noqa: E501


        :return: The nsflag of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._nsflag

    @nsflag.setter
    def nsflag(self, nsflag):
        """Sets the nsflag of this WellboreData.


        :param nsflag: The nsflag of this WellboreData.  # noqa: E501
        :type: str
        """

        self._nsflag = nsflag

    @property
    def profiletyp(self):
        """Gets the profiletyp of this WellboreData.  # noqa: E501


        :return: The profiletyp of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._profiletyp

    @profiletyp.setter
    def profiletyp(self, profiletyp):
        """Sets the profiletyp of this WellboreData.


        :param profiletyp: The profiletyp of this WellboreData.  # noqa: E501
        :type: str
        """

        self._profiletyp = profiletyp

    @property
    def purpose(self):
        """Gets the purpose of this WellboreData.  # noqa: E501


        :return: The purpose of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this WellboreData.


        :param purpose: The purpose of this WellboreData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def stateprov(self):
        """Gets the stateprov of this WellboreData.  # noqa: E501


        :return: The stateprov of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._stateprov

    @stateprov.setter
    def stateprov(self, stateprov):
        """Sets the stateprov of this WellboreData.


        :param stateprov: The stateprov of this WellboreData.  # noqa: E501
        :type: str
        """

        self._stateprov = stateprov

    @property
    def towndist(self):
        """Gets the towndist of this WellboreData.  # noqa: E501


        :return: The towndist of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._towndist

    @towndist.setter
    def towndist(self, towndist):
        """Sets the towndist of this WellboreData.


        :param towndist: The towndist of this WellboreData.  # noqa: E501
        :type: float
        """

        self._towndist = towndist

    @property
    def townflag(self):
        """Gets the townflag of this WellboreData.  # noqa: E501


        :return: The townflag of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._townflag

    @townflag.setter
    def townflag(self, townflag):
        """Sets the townflag of this WellboreData.


        :param townflag: The townflag of this WellboreData.  # noqa: E501
        :type: str
        """

        self._townflag = townflag

    @property
    def townname(self):
        """Gets the townname of this WellboreData.  # noqa: E501


        :return: The townname of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._townname

    @townname.setter
    def townname(self, townname):
        """Sets the townname of this WellboreData.


        :param townname: The townname of this WellboreData.  # noqa: E501
        :type: str
        """

        self._townname = townname

    @property
    def townstateprov(self):
        """Gets the townstateprov of this WellboreData.  # noqa: E501


        :return: The townstateprov of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._townstateprov

    @townstateprov.setter
    def townstateprov(self, townstateprov):
        """Sets the townstateprov of this WellboreData.


        :param townstateprov: The townstateprov of this WellboreData.  # noqa: E501
        :type: str
        """

        self._townstateprov = townstateprov

    @property
    def usernum1(self):
        """Gets the usernum1 of this WellboreData.  # noqa: E501


        :return: The usernum1 of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this WellboreData.


        :param usernum1: The usernum1 of this WellboreData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this WellboreData.  # noqa: E501


        :return: The usernum2 of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this WellboreData.


        :param usernum2: The usernum2 of this WellboreData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this WellboreData.  # noqa: E501


        :return: The usernum3 of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this WellboreData.


        :param usernum3: The usernum3 of this WellboreData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this WellboreData.  # noqa: E501


        :return: The usertxt1 of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this WellboreData.


        :param usertxt1: The usertxt1 of this WellboreData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this WellboreData.  # noqa: E501


        :return: The usertxt2 of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this WellboreData.


        :param usertxt2: The usertxt2 of this WellboreData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this WellboreData.  # noqa: E501


        :return: The usertxt3 of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this WellboreData.


        :param usertxt3: The usertxt3 of this WellboreData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def utmgridzone(self):
        """Gets the utmgridzone of this WellboreData.  # noqa: E501


        :return: The utmgridzone of this WellboreData.  # noqa: E501
        :rtype: int
        """
        return self._utmgridzone

    @utmgridzone.setter
    def utmgridzone(self, utmgridzone):
        """Sets the utmgridzone of this WellboreData.


        :param utmgridzone: The utmgridzone of this WellboreData.  # noqa: E501
        :type: int
        """

        self._utmgridzone = utmgridzone

    @property
    def utmsource(self):
        """Gets the utmsource of this WellboreData.  # noqa: E501


        :return: The utmsource of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._utmsource

    @utmsource.setter
    def utmsource(self, utmsource):
        """Sets the utmsource of this WellboreData.


        :param utmsource: The utmsource of this WellboreData.  # noqa: E501
        :type: str
        """

        self._utmsource = utmsource

    @property
    def utmx(self):
        """Gets the utmx of this WellboreData.  # noqa: E501


        :return: The utmx of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._utmx

    @utmx.setter
    def utmx(self, utmx):
        """Sets the utmx of this WellboreData.


        :param utmx: The utmx of this WellboreData.  # noqa: E501
        :type: float
        """

        self._utmx = utmx

    @property
    def utmy(self):
        """Gets the utmy of this WellboreData.  # noqa: E501


        :return: The utmy of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._utmy

    @utmy.setter
    def utmy(self, utmy):
        """Sets the utmy of this WellboreData.


        :param utmy: The utmy of this WellboreData.  # noqa: E501
        :type: float
        """

        self._utmy = utmy

    @property
    def vsdir(self):
        """Gets the vsdir of this WellboreData.  # noqa: E501


        :return: The vsdir of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._vsdir

    @vsdir.setter
    def vsdir(self, vsdir):
        """Sets the vsdir of this WellboreData.


        :param vsdir: The vsdir of this WellboreData.  # noqa: E501
        :type: float
        """

        self._vsdir = vsdir

    @property
    def vsoriginew(self):
        """Gets the vsoriginew of this WellboreData.  # noqa: E501


        :return: The vsoriginew of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._vsoriginew

    @vsoriginew.setter
    def vsoriginew(self, vsoriginew):
        """Sets the vsoriginew of this WellboreData.


        :param vsoriginew: The vsoriginew of this WellboreData.  # noqa: E501
        :type: float
        """

        self._vsoriginew = vsoriginew

    @property
    def vsoriginns(self):
        """Gets the vsoriginns of this WellboreData.  # noqa: E501


        :return: The vsoriginns of this WellboreData.  # noqa: E501
        :rtype: float
        """
        return self._vsoriginns

    @vsoriginns.setter
    def vsoriginns(self, vsoriginns):
        """Sets the vsoriginns of this WellboreData.


        :param vsoriginns: The vsoriginns of this WellboreData.  # noqa: E501
        :type: float
        """

        self._vsoriginns = vsoriginns

    @property
    def wellboreida(self):
        """Gets the wellboreida of this WellboreData.  # noqa: E501


        :return: The wellboreida of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._wellboreida

    @wellboreida.setter
    def wellboreida(self, wellboreida):
        """Sets the wellboreida of this WellboreData.


        :param wellboreida: The wellboreida of this WellboreData.  # noqa: E501
        :type: str
        """

        self._wellboreida = wellboreida

    @property
    def wellboreidb(self):
        """Gets the wellboreidb of this WellboreData.  # noqa: E501


        :return: The wellboreidb of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._wellboreidb

    @wellboreidb.setter
    def wellboreidb(self, wellboreidb):
        """Sets the wellboreidb of this WellboreData.


        :param wellboreidb: The wellboreidb of this WellboreData.  # noqa: E501
        :type: str
        """

        self._wellboreidb = wellboreidb

    @property
    def wellboreidc(self):
        """Gets the wellboreidc of this WellboreData.  # noqa: E501


        :return: The wellboreidc of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._wellboreidc

    @wellboreidc.setter
    def wellboreidc(self, wellboreidc):
        """Sets the wellboreidc of this WellboreData.


        :param wellboreidc: The wellboreidc of this WellboreData.  # noqa: E501
        :type: str
        """

        self._wellboreidc = wellboreidc

    @property
    def wellboreidd(self):
        """Gets the wellboreidd of this WellboreData.  # noqa: E501


        :return: The wellboreidd of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._wellboreidd

    @wellboreidd.setter
    def wellboreidd(self, wellboreidd):
        """Sets the wellboreidd of this WellboreData.


        :param wellboreidd: The wellboreidd of this WellboreData.  # noqa: E501
        :type: str
        """

        self._wellboreidd = wellboreidd

    @property
    def wellboreide(self):
        """Gets the wellboreide of this WellboreData.  # noqa: E501


        :return: The wellboreide of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._wellboreide

    @wellboreide.setter
    def wellboreide(self, wellboreide):
        """Sets the wellboreide of this WellboreData.


        :param wellboreide: The wellboreide of this WellboreData.  # noqa: E501
        :type: str
        """

        self._wellboreide = wellboreide

    @property
    def systag(self):
        """Gets the systag of this WellboreData.  # noqa: E501


        :return: The systag of this WellboreData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellboreData.


        :param systag: The systag of this WellboreData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def sysseq(self):
        """Gets the sysseq of this WellboreData.  # noqa: E501


        :return: The sysseq of this WellboreData.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this WellboreData.


        :param sysseq: The sysseq of this WellboreData.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellboreData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellboreData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
