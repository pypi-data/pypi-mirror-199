# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestResultData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysiscom': 'str',
        'analysismethod': 'str',
        'analysissoftware': 'str',
        'analyst': 'str',
        'aof': 'float',
        'definitive': 'bool',
        'depthmpp': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'investradius': 'float',
        'mobilityratio': 'float',
        'presresdatum': 'float',
        'presresmpp': 'float',
        'productivitycoef': 'float',
        'productivityexp': 'float',
        'productivityindex': 'float',
        'resboundnote': 'str',
        'resboundtyp': 'str',
        'respermhor': 'float',
        'respermratio': 'float',
        'skin': 'float',
        'tempres': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'analysiscom': 'analysiscom',
        'analysismethod': 'analysismethod',
        'analysissoftware': 'analysissoftware',
        'analyst': 'analyst',
        'aof': 'aof',
        'definitive': 'definitive',
        'depthmpp': 'depthmpp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'investradius': 'investradius',
        'mobilityratio': 'mobilityratio',
        'presresdatum': 'presresdatum',
        'presresmpp': 'presresmpp',
        'productivitycoef': 'productivitycoef',
        'productivityexp': 'productivityexp',
        'productivityindex': 'productivityindex',
        'resboundnote': 'resboundnote',
        'resboundtyp': 'resboundtyp',
        'respermhor': 'respermhor',
        'respermratio': 'respermratio',
        'skin': 'skin',
        'tempres': 'tempres',
        'systag': 'systag'
    }

    def __init__(self, analysiscom=None, analysismethod=None, analysissoftware=None, analyst=None, aof=None, definitive=None, depthmpp=None, idrec=None, idrecparent=None, idwell=None, investradius=None, mobilityratio=None, presresdatum=None, presresmpp=None, productivitycoef=None, productivityexp=None, productivityindex=None, resboundnote=None, resboundtyp=None, respermhor=None, respermratio=None, skin=None, tempres=None, systag=None):  # noqa: E501
        """TestResultData - a model defined in Swagger"""  # noqa: E501
        self._analysiscom = None
        self._analysismethod = None
        self._analysissoftware = None
        self._analyst = None
        self._aof = None
        self._definitive = None
        self._depthmpp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._investradius = None
        self._mobilityratio = None
        self._presresdatum = None
        self._presresmpp = None
        self._productivitycoef = None
        self._productivityexp = None
        self._productivityindex = None
        self._resboundnote = None
        self._resboundtyp = None
        self._respermhor = None
        self._respermratio = None
        self._skin = None
        self._tempres = None
        self._systag = None
        self.discriminator = None
        if analysiscom is not None:
            self.analysiscom = analysiscom
        if analysismethod is not None:
            self.analysismethod = analysismethod
        if analysissoftware is not None:
            self.analysissoftware = analysissoftware
        if analyst is not None:
            self.analyst = analyst
        if aof is not None:
            self.aof = aof
        if definitive is not None:
            self.definitive = definitive
        if depthmpp is not None:
            self.depthmpp = depthmpp
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if investradius is not None:
            self.investradius = investradius
        if mobilityratio is not None:
            self.mobilityratio = mobilityratio
        if presresdatum is not None:
            self.presresdatum = presresdatum
        if presresmpp is not None:
            self.presresmpp = presresmpp
        if productivitycoef is not None:
            self.productivitycoef = productivitycoef
        if productivityexp is not None:
            self.productivityexp = productivityexp
        if productivityindex is not None:
            self.productivityindex = productivityindex
        if resboundnote is not None:
            self.resboundnote = resboundnote
        if resboundtyp is not None:
            self.resboundtyp = resboundtyp
        if respermhor is not None:
            self.respermhor = respermhor
        if respermratio is not None:
            self.respermratio = respermratio
        if skin is not None:
            self.skin = skin
        if tempres is not None:
            self.tempres = tempres
        if systag is not None:
            self.systag = systag

    @property
    def analysiscom(self):
        """Gets the analysiscom of this TestResultData.  # noqa: E501


        :return: The analysiscom of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._analysiscom

    @analysiscom.setter
    def analysiscom(self, analysiscom):
        """Sets the analysiscom of this TestResultData.


        :param analysiscom: The analysiscom of this TestResultData.  # noqa: E501
        :type: str
        """

        self._analysiscom = analysiscom

    @property
    def analysismethod(self):
        """Gets the analysismethod of this TestResultData.  # noqa: E501


        :return: The analysismethod of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._analysismethod

    @analysismethod.setter
    def analysismethod(self, analysismethod):
        """Sets the analysismethod of this TestResultData.


        :param analysismethod: The analysismethod of this TestResultData.  # noqa: E501
        :type: str
        """

        self._analysismethod = analysismethod

    @property
    def analysissoftware(self):
        """Gets the analysissoftware of this TestResultData.  # noqa: E501


        :return: The analysissoftware of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._analysissoftware

    @analysissoftware.setter
    def analysissoftware(self, analysissoftware):
        """Sets the analysissoftware of this TestResultData.


        :param analysissoftware: The analysissoftware of this TestResultData.  # noqa: E501
        :type: str
        """

        self._analysissoftware = analysissoftware

    @property
    def analyst(self):
        """Gets the analyst of this TestResultData.  # noqa: E501


        :return: The analyst of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this TestResultData.


        :param analyst: The analyst of this TestResultData.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def aof(self):
        """Gets the aof of this TestResultData.  # noqa: E501


        :return: The aof of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._aof

    @aof.setter
    def aof(self, aof):
        """Sets the aof of this TestResultData.


        :param aof: The aof of this TestResultData.  # noqa: E501
        :type: float
        """

        self._aof = aof

    @property
    def definitive(self):
        """Gets the definitive of this TestResultData.  # noqa: E501


        :return: The definitive of this TestResultData.  # noqa: E501
        :rtype: bool
        """
        return self._definitive

    @definitive.setter
    def definitive(self, definitive):
        """Sets the definitive of this TestResultData.


        :param definitive: The definitive of this TestResultData.  # noqa: E501
        :type: bool
        """

        self._definitive = definitive

    @property
    def depthmpp(self):
        """Gets the depthmpp of this TestResultData.  # noqa: E501


        :return: The depthmpp of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._depthmpp

    @depthmpp.setter
    def depthmpp(self, depthmpp):
        """Sets the depthmpp of this TestResultData.


        :param depthmpp: The depthmpp of this TestResultData.  # noqa: E501
        :type: float
        """

        self._depthmpp = depthmpp

    @property
    def idrec(self):
        """Gets the idrec of this TestResultData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TestResultData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TestResultData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TestResultData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TestResultData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this TestResultData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TestResultData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TestResultData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TestResultData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def investradius(self):
        """Gets the investradius of this TestResultData.  # noqa: E501


        :return: The investradius of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._investradius

    @investradius.setter
    def investradius(self, investradius):
        """Sets the investradius of this TestResultData.


        :param investradius: The investradius of this TestResultData.  # noqa: E501
        :type: float
        """

        self._investradius = investradius

    @property
    def mobilityratio(self):
        """Gets the mobilityratio of this TestResultData.  # noqa: E501


        :return: The mobilityratio of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._mobilityratio

    @mobilityratio.setter
    def mobilityratio(self, mobilityratio):
        """Sets the mobilityratio of this TestResultData.


        :param mobilityratio: The mobilityratio of this TestResultData.  # noqa: E501
        :type: float
        """

        self._mobilityratio = mobilityratio

    @property
    def presresdatum(self):
        """Gets the presresdatum of this TestResultData.  # noqa: E501


        :return: The presresdatum of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._presresdatum

    @presresdatum.setter
    def presresdatum(self, presresdatum):
        """Sets the presresdatum of this TestResultData.


        :param presresdatum: The presresdatum of this TestResultData.  # noqa: E501
        :type: float
        """

        self._presresdatum = presresdatum

    @property
    def presresmpp(self):
        """Gets the presresmpp of this TestResultData.  # noqa: E501


        :return: The presresmpp of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._presresmpp

    @presresmpp.setter
    def presresmpp(self, presresmpp):
        """Sets the presresmpp of this TestResultData.


        :param presresmpp: The presresmpp of this TestResultData.  # noqa: E501
        :type: float
        """

        self._presresmpp = presresmpp

    @property
    def productivitycoef(self):
        """Gets the productivitycoef of this TestResultData.  # noqa: E501


        :return: The productivitycoef of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._productivitycoef

    @productivitycoef.setter
    def productivitycoef(self, productivitycoef):
        """Sets the productivitycoef of this TestResultData.


        :param productivitycoef: The productivitycoef of this TestResultData.  # noqa: E501
        :type: float
        """

        self._productivitycoef = productivitycoef

    @property
    def productivityexp(self):
        """Gets the productivityexp of this TestResultData.  # noqa: E501


        :return: The productivityexp of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._productivityexp

    @productivityexp.setter
    def productivityexp(self, productivityexp):
        """Sets the productivityexp of this TestResultData.


        :param productivityexp: The productivityexp of this TestResultData.  # noqa: E501
        :type: float
        """

        self._productivityexp = productivityexp

    @property
    def productivityindex(self):
        """Gets the productivityindex of this TestResultData.  # noqa: E501


        :return: The productivityindex of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._productivityindex

    @productivityindex.setter
    def productivityindex(self, productivityindex):
        """Sets the productivityindex of this TestResultData.


        :param productivityindex: The productivityindex of this TestResultData.  # noqa: E501
        :type: float
        """

        self._productivityindex = productivityindex

    @property
    def resboundnote(self):
        """Gets the resboundnote of this TestResultData.  # noqa: E501


        :return: The resboundnote of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._resboundnote

    @resboundnote.setter
    def resboundnote(self, resboundnote):
        """Sets the resboundnote of this TestResultData.


        :param resboundnote: The resboundnote of this TestResultData.  # noqa: E501
        :type: str
        """

        self._resboundnote = resboundnote

    @property
    def resboundtyp(self):
        """Gets the resboundtyp of this TestResultData.  # noqa: E501


        :return: The resboundtyp of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._resboundtyp

    @resboundtyp.setter
    def resboundtyp(self, resboundtyp):
        """Sets the resboundtyp of this TestResultData.


        :param resboundtyp: The resboundtyp of this TestResultData.  # noqa: E501
        :type: str
        """

        self._resboundtyp = resboundtyp

    @property
    def respermhor(self):
        """Gets the respermhor of this TestResultData.  # noqa: E501


        :return: The respermhor of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._respermhor

    @respermhor.setter
    def respermhor(self, respermhor):
        """Sets the respermhor of this TestResultData.


        :param respermhor: The respermhor of this TestResultData.  # noqa: E501
        :type: float
        """

        self._respermhor = respermhor

    @property
    def respermratio(self):
        """Gets the respermratio of this TestResultData.  # noqa: E501


        :return: The respermratio of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._respermratio

    @respermratio.setter
    def respermratio(self, respermratio):
        """Sets the respermratio of this TestResultData.


        :param respermratio: The respermratio of this TestResultData.  # noqa: E501
        :type: float
        """

        self._respermratio = respermratio

    @property
    def skin(self):
        """Gets the skin of this TestResultData.  # noqa: E501


        :return: The skin of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._skin

    @skin.setter
    def skin(self, skin):
        """Sets the skin of this TestResultData.


        :param skin: The skin of this TestResultData.  # noqa: E501
        :type: float
        """

        self._skin = skin

    @property
    def tempres(self):
        """Gets the tempres of this TestResultData.  # noqa: E501


        :return: The tempres of this TestResultData.  # noqa: E501
        :rtype: float
        """
        return self._tempres

    @tempres.setter
    def tempres(self, tempres):
        """Sets the tempres of this TestResultData.


        :param tempres: The tempres of this TestResultData.  # noqa: E501
        :type: float
        """

        self._tempres = tempres

    @property
    def systag(self):
        """Gets the systag of this TestResultData.  # noqa: E501


        :return: The systag of this TestResultData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TestResultData.


        :param systag: The systag of this TestResultData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestResultData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestResultData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
