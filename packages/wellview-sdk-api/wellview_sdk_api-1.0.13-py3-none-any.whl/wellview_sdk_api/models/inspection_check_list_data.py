# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InspectionCheckListData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actionrqd': 'bool',
        'com': 'str',
        'des': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'refno': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'value': 'str',
        'valueunit': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actionrqd': 'actionrqd',
        'com': 'com',
        'des': 'des',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'refno': 'refno',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'value': 'value',
        'valueunit': 'valueunit',
        'systag': 'systag'
    }

    def __init__(self, actionrqd=None, com=None, des=None, idrec=None, idrecparent=None, idwell=None, refno=None, typ1=None, typ2=None, value=None, valueunit=None, systag=None):  # noqa: E501
        """InspectionCheckListData - a model defined in Swagger"""  # noqa: E501
        self._actionrqd = None
        self._com = None
        self._des = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._refno = None
        self._typ1 = None
        self._typ2 = None
        self._value = None
        self._valueunit = None
        self._systag = None
        self.discriminator = None
        if actionrqd is not None:
            self.actionrqd = actionrqd
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if refno is not None:
            self.refno = refno
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if value is not None:
            self.value = value
        if valueunit is not None:
            self.valueunit = valueunit
        if systag is not None:
            self.systag = systag

    @property
    def actionrqd(self):
        """Gets the actionrqd of this InspectionCheckListData.  # noqa: E501


        :return: The actionrqd of this InspectionCheckListData.  # noqa: E501
        :rtype: bool
        """
        return self._actionrqd

    @actionrqd.setter
    def actionrqd(self, actionrqd):
        """Sets the actionrqd of this InspectionCheckListData.


        :param actionrqd: The actionrqd of this InspectionCheckListData.  # noqa: E501
        :type: bool
        """

        self._actionrqd = actionrqd

    @property
    def com(self):
        """Gets the com of this InspectionCheckListData.  # noqa: E501


        :return: The com of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this InspectionCheckListData.


        :param com: The com of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this InspectionCheckListData.  # noqa: E501


        :return: The des of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this InspectionCheckListData.


        :param des: The des of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def idrec(self):
        """Gets the idrec of this InspectionCheckListData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this InspectionCheckListData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this InspectionCheckListData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this InspectionCheckListData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this InspectionCheckListData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this InspectionCheckListData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this InspectionCheckListData.

        id of well  # noqa: E501

        :param idwell: The idwell of this InspectionCheckListData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def refno(self):
        """Gets the refno of this InspectionCheckListData.  # noqa: E501


        :return: The refno of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this InspectionCheckListData.


        :param refno: The refno of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def typ1(self):
        """Gets the typ1 of this InspectionCheckListData.  # noqa: E501


        :return: The typ1 of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this InspectionCheckListData.


        :param typ1: The typ1 of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this InspectionCheckListData.  # noqa: E501


        :return: The typ2 of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this InspectionCheckListData.


        :param typ2: The typ2 of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def value(self):
        """Gets the value of this InspectionCheckListData.  # noqa: E501


        :return: The value of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InspectionCheckListData.


        :param value: The value of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def valueunit(self):
        """Gets the valueunit of this InspectionCheckListData.  # noqa: E501


        :return: The valueunit of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._valueunit

    @valueunit.setter
    def valueunit(self, valueunit):
        """Sets the valueunit of this InspectionCheckListData.


        :param valueunit: The valueunit of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._valueunit = valueunit

    @property
    def systag(self):
        """Gets the systag of this InspectionCheckListData.  # noqa: E501


        :return: The systag of this InspectionCheckListData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this InspectionCheckListData.


        :param systag: The systag of this InspectionCheckListData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InspectionCheckListData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionCheckListData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
