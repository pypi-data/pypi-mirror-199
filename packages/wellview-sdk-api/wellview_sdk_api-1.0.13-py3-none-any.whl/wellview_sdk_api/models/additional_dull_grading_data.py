# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdditionalDullGradingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idrec': 'str',
        'idrecdrillstringcomp': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'note': 'str',
        'typ': 'str',
        'wearbearing': 'str',
        'weardull': 'str',
        'weargauge': 'str',
        'wearinner': 'int',
        'wearloc': 'str',
        'wearother': 'str',
        'wearouter': 'int',
        'wearpulled': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'idrec': 'idrec',
        'idrecdrillstringcomp': 'idrecdrillstringcomp',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'note': 'note',
        'typ': 'typ',
        'wearbearing': 'wearbearing',
        'weardull': 'weardull',
        'weargauge': 'weargauge',
        'wearinner': 'wearinner',
        'wearloc': 'wearloc',
        'wearother': 'wearother',
        'wearouter': 'wearouter',
        'wearpulled': 'wearpulled',
        'systag': 'systag'
    }

    def __init__(self, idrec=None, idrecdrillstringcomp=None, idrecparent=None, idwell=None, note=None, typ=None, wearbearing=None, weardull=None, weargauge=None, wearinner=None, wearloc=None, wearother=None, wearouter=None, wearpulled=None, systag=None):  # noqa: E501
        """AdditionalDullGradingData - a model defined in Swagger"""  # noqa: E501
        self._idrec = None
        self._idrecdrillstringcomp = None
        self._idrecparent = None
        self._idwell = None
        self._note = None
        self._typ = None
        self._wearbearing = None
        self._weardull = None
        self._weargauge = None
        self._wearinner = None
        self._wearloc = None
        self._wearother = None
        self._wearouter = None
        self._wearpulled = None
        self._systag = None
        self.discriminator = None
        if idrec is not None:
            self.idrec = idrec
        if idrecdrillstringcomp is not None:
            self.idrecdrillstringcomp = idrecdrillstringcomp
        self.idrecparent = idrecparent
        self.idwell = idwell
        if note is not None:
            self.note = note
        if typ is not None:
            self.typ = typ
        if wearbearing is not None:
            self.wearbearing = wearbearing
        if weardull is not None:
            self.weardull = weardull
        if weargauge is not None:
            self.weargauge = weargauge
        if wearinner is not None:
            self.wearinner = wearinner
        if wearloc is not None:
            self.wearloc = wearloc
        if wearother is not None:
            self.wearother = wearother
        if wearouter is not None:
            self.wearouter = wearouter
        if wearpulled is not None:
            self.wearpulled = wearpulled
        if systag is not None:
            self.systag = systag

    @property
    def idrec(self):
        """Gets the idrec of this AdditionalDullGradingData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this AdditionalDullGradingData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdrillstringcomp(self):
        """Gets the idrecdrillstringcomp of this AdditionalDullGradingData.  # noqa: E501


        :return: The idrecdrillstringcomp of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomp

    @idrecdrillstringcomp.setter
    def idrecdrillstringcomp(self, idrecdrillstringcomp):
        """Sets the idrecdrillstringcomp of this AdditionalDullGradingData.


        :param idrecdrillstringcomp: The idrecdrillstringcomp of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomp = idrecdrillstringcomp

    @property
    def idrecparent(self):
        """Gets the idrecparent of this AdditionalDullGradingData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this AdditionalDullGradingData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this AdditionalDullGradingData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this AdditionalDullGradingData.

        id of well  # noqa: E501

        :param idwell: The idwell of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this AdditionalDullGradingData.  # noqa: E501


        :return: The note of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AdditionalDullGradingData.


        :param note: The note of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def typ(self):
        """Gets the typ of this AdditionalDullGradingData.  # noqa: E501


        :return: The typ of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this AdditionalDullGradingData.


        :param typ: The typ of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def wearbearing(self):
        """Gets the wearbearing of this AdditionalDullGradingData.  # noqa: E501


        :return: The wearbearing of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._wearbearing

    @wearbearing.setter
    def wearbearing(self, wearbearing):
        """Sets the wearbearing of this AdditionalDullGradingData.


        :param wearbearing: The wearbearing of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._wearbearing = wearbearing

    @property
    def weardull(self):
        """Gets the weardull of this AdditionalDullGradingData.  # noqa: E501


        :return: The weardull of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._weardull

    @weardull.setter
    def weardull(self, weardull):
        """Sets the weardull of this AdditionalDullGradingData.


        :param weardull: The weardull of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._weardull = weardull

    @property
    def weargauge(self):
        """Gets the weargauge of this AdditionalDullGradingData.  # noqa: E501


        :return: The weargauge of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._weargauge

    @weargauge.setter
    def weargauge(self, weargauge):
        """Sets the weargauge of this AdditionalDullGradingData.


        :param weargauge: The weargauge of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._weargauge = weargauge

    @property
    def wearinner(self):
        """Gets the wearinner of this AdditionalDullGradingData.  # noqa: E501


        :return: The wearinner of this AdditionalDullGradingData.  # noqa: E501
        :rtype: int
        """
        return self._wearinner

    @wearinner.setter
    def wearinner(self, wearinner):
        """Sets the wearinner of this AdditionalDullGradingData.


        :param wearinner: The wearinner of this AdditionalDullGradingData.  # noqa: E501
        :type: int
        """

        self._wearinner = wearinner

    @property
    def wearloc(self):
        """Gets the wearloc of this AdditionalDullGradingData.  # noqa: E501


        :return: The wearloc of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._wearloc

    @wearloc.setter
    def wearloc(self, wearloc):
        """Sets the wearloc of this AdditionalDullGradingData.


        :param wearloc: The wearloc of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._wearloc = wearloc

    @property
    def wearother(self):
        """Gets the wearother of this AdditionalDullGradingData.  # noqa: E501


        :return: The wearother of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._wearother

    @wearother.setter
    def wearother(self, wearother):
        """Sets the wearother of this AdditionalDullGradingData.


        :param wearother: The wearother of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._wearother = wearother

    @property
    def wearouter(self):
        """Gets the wearouter of this AdditionalDullGradingData.  # noqa: E501


        :return: The wearouter of this AdditionalDullGradingData.  # noqa: E501
        :rtype: int
        """
        return self._wearouter

    @wearouter.setter
    def wearouter(self, wearouter):
        """Sets the wearouter of this AdditionalDullGradingData.


        :param wearouter: The wearouter of this AdditionalDullGradingData.  # noqa: E501
        :type: int
        """

        self._wearouter = wearouter

    @property
    def wearpulled(self):
        """Gets the wearpulled of this AdditionalDullGradingData.  # noqa: E501


        :return: The wearpulled of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._wearpulled

    @wearpulled.setter
    def wearpulled(self, wearpulled):
        """Sets the wearpulled of this AdditionalDullGradingData.


        :param wearpulled: The wearpulled of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._wearpulled = wearpulled

    @property
    def systag(self):
        """Gets the systag of this AdditionalDullGradingData.  # noqa: E501


        :return: The systag of this AdditionalDullGradingData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this AdditionalDullGradingData.


        :param systag: The systag of this AdditionalDullGradingData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdditionalDullGradingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdditionalDullGradingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
