# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductionLogTestIntervalsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depthbtm': 'float',
        'depthdatum': 'float',
        'depthssdatum': 'float',
        'depthtop': 'float',
        'flowcontribution': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'note': 'str',
        'presdatumgradient': 'float',
        'presdatumgradientdes': 'str',
        'presgradient': 'float',
        'presmpp': 'float',
        'prestyp': 'str',
        'ratecond': 'float',
        'rategas': 'float',
        'rateoil': 'float',
        'ratewater': 'float',
        'rps': 'float',
        'rpscontribution': 'float',
        'rpsdelta': 'float',
        'runno': 'int',
        'temp': 'float',
        'tripdir': 'str',
        'tripspeed': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'depthbtm': 'depthbtm',
        'depthdatum': 'depthdatum',
        'depthssdatum': 'depthssdatum',
        'depthtop': 'depthtop',
        'flowcontribution': 'flowcontribution',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'note': 'note',
        'presdatumgradient': 'presdatumgradient',
        'presdatumgradientdes': 'presdatumgradientdes',
        'presgradient': 'presgradient',
        'presmpp': 'presmpp',
        'prestyp': 'prestyp',
        'ratecond': 'ratecond',
        'rategas': 'rategas',
        'rateoil': 'rateoil',
        'ratewater': 'ratewater',
        'rps': 'rps',
        'rpscontribution': 'rpscontribution',
        'rpsdelta': 'rpsdelta',
        'runno': 'runno',
        'temp': 'temp',
        'tripdir': 'tripdir',
        'tripspeed': 'tripspeed',
        'systag': 'systag'
    }

    def __init__(self, depthbtm=None, depthdatum=None, depthssdatum=None, depthtop=None, flowcontribution=None, idrec=None, idrecparent=None, idrecwellbore=None, idreczonecompletion=None, idwell=None, note=None, presdatumgradient=None, presdatumgradientdes=None, presgradient=None, presmpp=None, prestyp=None, ratecond=None, rategas=None, rateoil=None, ratewater=None, rps=None, rpscontribution=None, rpsdelta=None, runno=None, temp=None, tripdir=None, tripspeed=None, systag=None):  # noqa: E501
        """ProductionLogTestIntervalsData - a model defined in Swagger"""  # noqa: E501
        self._depthbtm = None
        self._depthdatum = None
        self._depthssdatum = None
        self._depthtop = None
        self._flowcontribution = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idreczonecompletion = None
        self._idwell = None
        self._note = None
        self._presdatumgradient = None
        self._presdatumgradientdes = None
        self._presgradient = None
        self._presmpp = None
        self._prestyp = None
        self._ratecond = None
        self._rategas = None
        self._rateoil = None
        self._ratewater = None
        self._rps = None
        self._rpscontribution = None
        self._rpsdelta = None
        self._runno = None
        self._temp = None
        self._tripdir = None
        self._tripspeed = None
        self._systag = None
        self.discriminator = None
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthdatum is not None:
            self.depthdatum = depthdatum
        if depthssdatum is not None:
            self.depthssdatum = depthssdatum
        if depthtop is not None:
            self.depthtop = depthtop
        if flowcontribution is not None:
            self.flowcontribution = flowcontribution
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if note is not None:
            self.note = note
        if presdatumgradient is not None:
            self.presdatumgradient = presdatumgradient
        if presdatumgradientdes is not None:
            self.presdatumgradientdes = presdatumgradientdes
        if presgradient is not None:
            self.presgradient = presgradient
        if presmpp is not None:
            self.presmpp = presmpp
        if prestyp is not None:
            self.prestyp = prestyp
        if ratecond is not None:
            self.ratecond = ratecond
        if rategas is not None:
            self.rategas = rategas
        if rateoil is not None:
            self.rateoil = rateoil
        if ratewater is not None:
            self.ratewater = ratewater
        if rps is not None:
            self.rps = rps
        if rpscontribution is not None:
            self.rpscontribution = rpscontribution
        if rpsdelta is not None:
            self.rpsdelta = rpsdelta
        if runno is not None:
            self.runno = runno
        if temp is not None:
            self.temp = temp
        if tripdir is not None:
            self.tripdir = tripdir
        if tripspeed is not None:
            self.tripspeed = tripspeed
        if systag is not None:
            self.systag = systag

    @property
    def depthbtm(self):
        """Gets the depthbtm of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The depthbtm of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this ProductionLogTestIntervalsData.


        :param depthbtm: The depthbtm of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthdatum(self):
        """Gets the depthdatum of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The depthdatum of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._depthdatum

    @depthdatum.setter
    def depthdatum(self, depthdatum):
        """Sets the depthdatum of this ProductionLogTestIntervalsData.


        :param depthdatum: The depthdatum of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._depthdatum = depthdatum

    @property
    def depthssdatum(self):
        """Gets the depthssdatum of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The depthssdatum of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._depthssdatum

    @depthssdatum.setter
    def depthssdatum(self, depthssdatum):
        """Sets the depthssdatum of this ProductionLogTestIntervalsData.


        :param depthssdatum: The depthssdatum of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._depthssdatum = depthssdatum

    @property
    def depthtop(self):
        """Gets the depthtop of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The depthtop of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this ProductionLogTestIntervalsData.


        :param depthtop: The depthtop of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def flowcontribution(self):
        """Gets the flowcontribution of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The flowcontribution of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._flowcontribution

    @flowcontribution.setter
    def flowcontribution(self, flowcontribution):
        """Sets the flowcontribution of this ProductionLogTestIntervalsData.


        :param flowcontribution: The flowcontribution of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._flowcontribution = flowcontribution

    @property
    def idrec(self):
        """Gets the idrec of this ProductionLogTestIntervalsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProductionLogTestIntervalsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ProductionLogTestIntervalsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ProductionLogTestIntervalsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The idrecwellbore of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this ProductionLogTestIntervalsData.


        :param idrecwellbore: The idrecwellbore of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The idreczonecompletion of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this ProductionLogTestIntervalsData.


        :param idreczonecompletion: The idreczonecompletion of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this ProductionLogTestIntervalsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProductionLogTestIntervalsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The note of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ProductionLogTestIntervalsData.


        :param note: The note of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def presdatumgradient(self):
        """Gets the presdatumgradient of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The presdatumgradient of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._presdatumgradient

    @presdatumgradient.setter
    def presdatumgradient(self, presdatumgradient):
        """Sets the presdatumgradient of this ProductionLogTestIntervalsData.


        :param presdatumgradient: The presdatumgradient of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._presdatumgradient = presdatumgradient

    @property
    def presdatumgradientdes(self):
        """Gets the presdatumgradientdes of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The presdatumgradientdes of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._presdatumgradientdes

    @presdatumgradientdes.setter
    def presdatumgradientdes(self, presdatumgradientdes):
        """Sets the presdatumgradientdes of this ProductionLogTestIntervalsData.


        :param presdatumgradientdes: The presdatumgradientdes of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._presdatumgradientdes = presdatumgradientdes

    @property
    def presgradient(self):
        """Gets the presgradient of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The presgradient of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._presgradient

    @presgradient.setter
    def presgradient(self, presgradient):
        """Sets the presgradient of this ProductionLogTestIntervalsData.


        :param presgradient: The presgradient of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._presgradient = presgradient

    @property
    def presmpp(self):
        """Gets the presmpp of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The presmpp of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._presmpp

    @presmpp.setter
    def presmpp(self, presmpp):
        """Sets the presmpp of this ProductionLogTestIntervalsData.


        :param presmpp: The presmpp of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._presmpp = presmpp

    @property
    def prestyp(self):
        """Gets the prestyp of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The prestyp of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._prestyp

    @prestyp.setter
    def prestyp(self, prestyp):
        """Sets the prestyp of this ProductionLogTestIntervalsData.


        :param prestyp: The prestyp of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._prestyp = prestyp

    @property
    def ratecond(self):
        """Gets the ratecond of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The ratecond of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._ratecond

    @ratecond.setter
    def ratecond(self, ratecond):
        """Sets the ratecond of this ProductionLogTestIntervalsData.


        :param ratecond: The ratecond of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._ratecond = ratecond

    @property
    def rategas(self):
        """Gets the rategas of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The rategas of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._rategas

    @rategas.setter
    def rategas(self, rategas):
        """Sets the rategas of this ProductionLogTestIntervalsData.


        :param rategas: The rategas of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._rategas = rategas

    @property
    def rateoil(self):
        """Gets the rateoil of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The rateoil of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._rateoil

    @rateoil.setter
    def rateoil(self, rateoil):
        """Sets the rateoil of this ProductionLogTestIntervalsData.


        :param rateoil: The rateoil of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._rateoil = rateoil

    @property
    def ratewater(self):
        """Gets the ratewater of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The ratewater of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._ratewater

    @ratewater.setter
    def ratewater(self, ratewater):
        """Sets the ratewater of this ProductionLogTestIntervalsData.


        :param ratewater: The ratewater of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._ratewater = ratewater

    @property
    def rps(self):
        """Gets the rps of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The rps of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._rps

    @rps.setter
    def rps(self, rps):
        """Sets the rps of this ProductionLogTestIntervalsData.


        :param rps: The rps of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._rps = rps

    @property
    def rpscontribution(self):
        """Gets the rpscontribution of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The rpscontribution of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._rpscontribution

    @rpscontribution.setter
    def rpscontribution(self, rpscontribution):
        """Sets the rpscontribution of this ProductionLogTestIntervalsData.


        :param rpscontribution: The rpscontribution of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._rpscontribution = rpscontribution

    @property
    def rpsdelta(self):
        """Gets the rpsdelta of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The rpsdelta of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._rpsdelta

    @rpsdelta.setter
    def rpsdelta(self, rpsdelta):
        """Sets the rpsdelta of this ProductionLogTestIntervalsData.


        :param rpsdelta: The rpsdelta of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._rpsdelta = rpsdelta

    @property
    def runno(self):
        """Gets the runno of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The runno of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: int
        """
        return self._runno

    @runno.setter
    def runno(self, runno):
        """Sets the runno of this ProductionLogTestIntervalsData.


        :param runno: The runno of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: int
        """

        self._runno = runno

    @property
    def temp(self):
        """Gets the temp of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The temp of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this ProductionLogTestIntervalsData.


        :param temp: The temp of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def tripdir(self):
        """Gets the tripdir of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The tripdir of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._tripdir

    @tripdir.setter
    def tripdir(self, tripdir):
        """Sets the tripdir of this ProductionLogTestIntervalsData.


        :param tripdir: The tripdir of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._tripdir = tripdir

    @property
    def tripspeed(self):
        """Gets the tripspeed of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The tripspeed of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: float
        """
        return self._tripspeed

    @tripspeed.setter
    def tripspeed(self, tripspeed):
        """Sets the tripspeed of this ProductionLogTestIntervalsData.


        :param tripspeed: The tripspeed of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: float
        """

        self._tripspeed = tripspeed

    @property
    def systag(self):
        """Gets the systag of this ProductionLogTestIntervalsData.  # noqa: E501


        :return: The systag of this ProductionLogTestIntervalsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProductionLogTestIntervalsData.


        :param systag: The systag of this ProductionLogTestIntervalsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductionLogTestIntervalsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionLogTestIntervalsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
