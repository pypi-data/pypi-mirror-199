# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OneTimeCostData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code1': 'str',
        'code2': 'str',
        'code3': 'str',
        'code4': 'str',
        'code5': 'str',
        'code6': 'str',
        'cost': 'float',
        'des': 'str',
        'idrec': 'str',
        'idrecafecustom': 'str',
        'idrecintervalproblemcustom': 'str',
        'idrecparent': 'str',
        'idrecphasecustom': 'str',
        'idwell': 'str',
        'intervalproblempct': 'float',
        'note': 'str',
        'opscategory': 'str',
        'polineno': 'str',
        'pono': 'str',
        'sn': 'str',
        'syscarryfwdp': 'bool',
        'ticketno': 'str',
        'unschedtyp': 'str',
        'userboolean1': 'bool',
        'usertxt1': 'str',
        'vendor': 'str',
        'vendorcode': 'str',
        'vendorsubcode': 'str',
        'workorderno': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'code1': 'code1',
        'code2': 'code2',
        'code3': 'code3',
        'code4': 'code4',
        'code5': 'code5',
        'code6': 'code6',
        'cost': 'cost',
        'des': 'des',
        'idrec': 'idrec',
        'idrecafecustom': 'idrecafecustom',
        'idrecintervalproblemcustom': 'idrecintervalproblemcustom',
        'idrecparent': 'idrecparent',
        'idrecphasecustom': 'idrecphasecustom',
        'idwell': 'idwell',
        'intervalproblempct': 'intervalproblempct',
        'note': 'note',
        'opscategory': 'opscategory',
        'polineno': 'polineno',
        'pono': 'pono',
        'sn': 'sn',
        'syscarryfwdp': 'syscarryfwdp',
        'ticketno': 'ticketno',
        'unschedtyp': 'unschedtyp',
        'userboolean1': 'userboolean1',
        'usertxt1': 'usertxt1',
        'vendor': 'vendor',
        'vendorcode': 'vendorcode',
        'vendorsubcode': 'vendorsubcode',
        'workorderno': 'workorderno',
        'systag': 'systag'
    }

    def __init__(self, code1=None, code2=None, code3=None, code4=None, code5=None, code6=None, cost=None, des=None, idrec=None, idrecafecustom=None, idrecintervalproblemcustom=None, idrecparent=None, idrecphasecustom=None, idwell=None, intervalproblempct=None, note=None, opscategory=None, polineno=None, pono=None, sn=None, syscarryfwdp=None, ticketno=None, unschedtyp=None, userboolean1=None, usertxt1=None, vendor=None, vendorcode=None, vendorsubcode=None, workorderno=None, systag=None):  # noqa: E501
        """OneTimeCostData - a model defined in Swagger"""  # noqa: E501
        self._code1 = None
        self._code2 = None
        self._code3 = None
        self._code4 = None
        self._code5 = None
        self._code6 = None
        self._cost = None
        self._des = None
        self._idrec = None
        self._idrecafecustom = None
        self._idrecintervalproblemcustom = None
        self._idrecparent = None
        self._idrecphasecustom = None
        self._idwell = None
        self._intervalproblempct = None
        self._note = None
        self._opscategory = None
        self._polineno = None
        self._pono = None
        self._sn = None
        self._syscarryfwdp = None
        self._ticketno = None
        self._unschedtyp = None
        self._userboolean1 = None
        self._usertxt1 = None
        self._vendor = None
        self._vendorcode = None
        self._vendorsubcode = None
        self._workorderno = None
        self._systag = None
        self.discriminator = None
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if code3 is not None:
            self.code3 = code3
        if code4 is not None:
            self.code4 = code4
        if code5 is not None:
            self.code5 = code5
        if code6 is not None:
            self.code6 = code6
        if cost is not None:
            self.cost = cost
        if des is not None:
            self.des = des
        if idrec is not None:
            self.idrec = idrec
        if idrecafecustom is not None:
            self.idrecafecustom = idrecafecustom
        if idrecintervalproblemcustom is not None:
            self.idrecintervalproblemcustom = idrecintervalproblemcustom
        self.idrecparent = idrecparent
        if idrecphasecustom is not None:
            self.idrecphasecustom = idrecphasecustom
        self.idwell = idwell
        if intervalproblempct is not None:
            self.intervalproblempct = intervalproblempct
        if note is not None:
            self.note = note
        if opscategory is not None:
            self.opscategory = opscategory
        if polineno is not None:
            self.polineno = polineno
        if pono is not None:
            self.pono = pono
        if sn is not None:
            self.sn = sn
        if syscarryfwdp is not None:
            self.syscarryfwdp = syscarryfwdp
        if ticketno is not None:
            self.ticketno = ticketno
        if unschedtyp is not None:
            self.unschedtyp = unschedtyp
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if vendor is not None:
            self.vendor = vendor
        if vendorcode is not None:
            self.vendorcode = vendorcode
        if vendorsubcode is not None:
            self.vendorsubcode = vendorsubcode
        if workorderno is not None:
            self.workorderno = workorderno
        if systag is not None:
            self.systag = systag

    @property
    def code1(self):
        """Gets the code1 of this OneTimeCostData.  # noqa: E501


        :return: The code1 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this OneTimeCostData.


        :param code1: The code1 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this OneTimeCostData.  # noqa: E501


        :return: The code2 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this OneTimeCostData.


        :param code2: The code2 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this OneTimeCostData.  # noqa: E501


        :return: The code3 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this OneTimeCostData.


        :param code3: The code3 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._code3 = code3

    @property
    def code4(self):
        """Gets the code4 of this OneTimeCostData.  # noqa: E501


        :return: The code4 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._code4

    @code4.setter
    def code4(self, code4):
        """Sets the code4 of this OneTimeCostData.


        :param code4: The code4 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._code4 = code4

    @property
    def code5(self):
        """Gets the code5 of this OneTimeCostData.  # noqa: E501


        :return: The code5 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._code5

    @code5.setter
    def code5(self, code5):
        """Sets the code5 of this OneTimeCostData.


        :param code5: The code5 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._code5 = code5

    @property
    def code6(self):
        """Gets the code6 of this OneTimeCostData.  # noqa: E501


        :return: The code6 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._code6

    @code6.setter
    def code6(self, code6):
        """Sets the code6 of this OneTimeCostData.


        :param code6: The code6 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._code6 = code6

    @property
    def cost(self):
        """Gets the cost of this OneTimeCostData.  # noqa: E501


        :return: The cost of this OneTimeCostData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this OneTimeCostData.


        :param cost: The cost of this OneTimeCostData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def des(self):
        """Gets the des of this OneTimeCostData.  # noqa: E501


        :return: The des of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this OneTimeCostData.


        :param des: The des of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def idrec(self):
        """Gets the idrec of this OneTimeCostData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OneTimeCostData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecafecustom(self):
        """Gets the idrecafecustom of this OneTimeCostData.  # noqa: E501


        :return: The idrecafecustom of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecafecustom

    @idrecafecustom.setter
    def idrecafecustom(self, idrecafecustom):
        """Sets the idrecafecustom of this OneTimeCostData.


        :param idrecafecustom: The idrecafecustom of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._idrecafecustom = idrecafecustom

    @property
    def idrecintervalproblemcustom(self):
        """Gets the idrecintervalproblemcustom of this OneTimeCostData.  # noqa: E501


        :return: The idrecintervalproblemcustom of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecintervalproblemcustom

    @idrecintervalproblemcustom.setter
    def idrecintervalproblemcustom(self, idrecintervalproblemcustom):
        """Sets the idrecintervalproblemcustom of this OneTimeCostData.


        :param idrecintervalproblemcustom: The idrecintervalproblemcustom of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._idrecintervalproblemcustom = idrecintervalproblemcustom

    @property
    def idrecparent(self):
        """Gets the idrecparent of this OneTimeCostData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this OneTimeCostData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this OneTimeCostData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecphasecustom(self):
        """Gets the idrecphasecustom of this OneTimeCostData.  # noqa: E501


        :return: The idrecphasecustom of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecphasecustom

    @idrecphasecustom.setter
    def idrecphasecustom(self, idrecphasecustom):
        """Sets the idrecphasecustom of this OneTimeCostData.


        :param idrecphasecustom: The idrecphasecustom of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._idrecphasecustom = idrecphasecustom

    @property
    def idwell(self):
        """Gets the idwell of this OneTimeCostData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OneTimeCostData.

        id of well  # noqa: E501

        :param idwell: The idwell of this OneTimeCostData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def intervalproblempct(self):
        """Gets the intervalproblempct of this OneTimeCostData.  # noqa: E501


        :return: The intervalproblempct of this OneTimeCostData.  # noqa: E501
        :rtype: float
        """
        return self._intervalproblempct

    @intervalproblempct.setter
    def intervalproblempct(self, intervalproblempct):
        """Sets the intervalproblempct of this OneTimeCostData.


        :param intervalproblempct: The intervalproblempct of this OneTimeCostData.  # noqa: E501
        :type: float
        """

        self._intervalproblempct = intervalproblempct

    @property
    def note(self):
        """Gets the note of this OneTimeCostData.  # noqa: E501


        :return: The note of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this OneTimeCostData.


        :param note: The note of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def opscategory(self):
        """Gets the opscategory of this OneTimeCostData.  # noqa: E501


        :return: The opscategory of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._opscategory

    @opscategory.setter
    def opscategory(self, opscategory):
        """Sets the opscategory of this OneTimeCostData.


        :param opscategory: The opscategory of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._opscategory = opscategory

    @property
    def polineno(self):
        """Gets the polineno of this OneTimeCostData.  # noqa: E501


        :return: The polineno of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._polineno

    @polineno.setter
    def polineno(self, polineno):
        """Sets the polineno of this OneTimeCostData.


        :param polineno: The polineno of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._polineno = polineno

    @property
    def pono(self):
        """Gets the pono of this OneTimeCostData.  # noqa: E501


        :return: The pono of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._pono

    @pono.setter
    def pono(self, pono):
        """Sets the pono of this OneTimeCostData.


        :param pono: The pono of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._pono = pono

    @property
    def sn(self):
        """Gets the sn of this OneTimeCostData.  # noqa: E501


        :return: The sn of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this OneTimeCostData.


        :param sn: The sn of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def syscarryfwdp(self):
        """Gets the syscarryfwdp of this OneTimeCostData.  # noqa: E501


        :return: The syscarryfwdp of this OneTimeCostData.  # noqa: E501
        :rtype: bool
        """
        return self._syscarryfwdp

    @syscarryfwdp.setter
    def syscarryfwdp(self, syscarryfwdp):
        """Sets the syscarryfwdp of this OneTimeCostData.


        :param syscarryfwdp: The syscarryfwdp of this OneTimeCostData.  # noqa: E501
        :type: bool
        """

        self._syscarryfwdp = syscarryfwdp

    @property
    def ticketno(self):
        """Gets the ticketno of this OneTimeCostData.  # noqa: E501


        :return: The ticketno of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._ticketno

    @ticketno.setter
    def ticketno(self, ticketno):
        """Sets the ticketno of this OneTimeCostData.


        :param ticketno: The ticketno of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._ticketno = ticketno

    @property
    def unschedtyp(self):
        """Gets the unschedtyp of this OneTimeCostData.  # noqa: E501


        :return: The unschedtyp of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._unschedtyp

    @unschedtyp.setter
    def unschedtyp(self, unschedtyp):
        """Sets the unschedtyp of this OneTimeCostData.


        :param unschedtyp: The unschedtyp of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._unschedtyp = unschedtyp

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this OneTimeCostData.  # noqa: E501


        :return: The userboolean1 of this OneTimeCostData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this OneTimeCostData.


        :param userboolean1: The userboolean1 of this OneTimeCostData.  # noqa: E501
        :type: bool
        """

        self._userboolean1 = userboolean1

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this OneTimeCostData.  # noqa: E501


        :return: The usertxt1 of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this OneTimeCostData.


        :param usertxt1: The usertxt1 of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def vendor(self):
        """Gets the vendor of this OneTimeCostData.  # noqa: E501


        :return: The vendor of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this OneTimeCostData.


        :param vendor: The vendor of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendorcode(self):
        """Gets the vendorcode of this OneTimeCostData.  # noqa: E501


        :return: The vendorcode of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._vendorcode

    @vendorcode.setter
    def vendorcode(self, vendorcode):
        """Sets the vendorcode of this OneTimeCostData.


        :param vendorcode: The vendorcode of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._vendorcode = vendorcode

    @property
    def vendorsubcode(self):
        """Gets the vendorsubcode of this OneTimeCostData.  # noqa: E501


        :return: The vendorsubcode of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._vendorsubcode

    @vendorsubcode.setter
    def vendorsubcode(self, vendorsubcode):
        """Sets the vendorsubcode of this OneTimeCostData.


        :param vendorsubcode: The vendorsubcode of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._vendorsubcode = vendorsubcode

    @property
    def workorderno(self):
        """Gets the workorderno of this OneTimeCostData.  # noqa: E501


        :return: The workorderno of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._workorderno

    @workorderno.setter
    def workorderno(self, workorderno):
        """Sets the workorderno of this OneTimeCostData.


        :param workorderno: The workorderno of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._workorderno = workorderno

    @property
    def systag(self):
        """Gets the systag of this OneTimeCostData.  # noqa: E501


        :return: The systag of this OneTimeCostData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OneTimeCostData.


        :param systag: The systag of this OneTimeCostData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OneTimeCostData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OneTimeCostData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
