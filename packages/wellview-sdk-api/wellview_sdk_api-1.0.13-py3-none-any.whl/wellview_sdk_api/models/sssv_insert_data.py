# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SSSVInsertData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditionpull': 'str',
        'conditionrun': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lengthspacer': 'float',
        'make': 'str',
        'model': 'str',
        'presctrl': 'float',
        'presrating': 'float',
        'pullreason': 'str',
        'refid': 'str',
        'seattyp': 'str',
        'sn': 'str',
        'springrt': 'float',
        'szidbore': 'float',
        'szodbean': 'float',
        'temprating': 'float',
        'valvetyp': 'str',
        'wlretrievable': 'bool',
        'systag': 'str'
    }

    attribute_map = {
        'conditionpull': 'conditionpull',
        'conditionrun': 'conditionrun',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lengthspacer': 'lengthspacer',
        'make': 'make',
        'model': 'model',
        'presctrl': 'presctrl',
        'presrating': 'presrating',
        'pullreason': 'pullreason',
        'refid': 'refid',
        'seattyp': 'seattyp',
        'sn': 'sn',
        'springrt': 'springrt',
        'szidbore': 'szidbore',
        'szodbean': 'szodbean',
        'temprating': 'temprating',
        'valvetyp': 'valvetyp',
        'wlretrievable': 'wlretrievable',
        'systag': 'systag'
    }

    def __init__(self, conditionpull=None, conditionrun=None, dttmpull=None, dttmrun=None, idrec=None, idrecparent=None, idwell=None, lengthspacer=None, make=None, model=None, presctrl=None, presrating=None, pullreason=None, refid=None, seattyp=None, sn=None, springrt=None, szidbore=None, szodbean=None, temprating=None, valvetyp=None, wlretrievable=None, systag=None):  # noqa: E501
        """SSSVInsertData - a model defined in Swagger"""  # noqa: E501
        self._conditionpull = None
        self._conditionrun = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lengthspacer = None
        self._make = None
        self._model = None
        self._presctrl = None
        self._presrating = None
        self._pullreason = None
        self._refid = None
        self._seattyp = None
        self._sn = None
        self._springrt = None
        self._szidbore = None
        self._szodbean = None
        self._temprating = None
        self._valvetyp = None
        self._wlretrievable = None
        self._systag = None
        self.discriminator = None
        if conditionpull is not None:
            self.conditionpull = conditionpull
        if conditionrun is not None:
            self.conditionrun = conditionrun
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if lengthspacer is not None:
            self.lengthspacer = lengthspacer
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if presctrl is not None:
            self.presctrl = presctrl
        if presrating is not None:
            self.presrating = presrating
        if pullreason is not None:
            self.pullreason = pullreason
        if refid is not None:
            self.refid = refid
        if seattyp is not None:
            self.seattyp = seattyp
        if sn is not None:
            self.sn = sn
        if springrt is not None:
            self.springrt = springrt
        if szidbore is not None:
            self.szidbore = szidbore
        if szodbean is not None:
            self.szodbean = szodbean
        if temprating is not None:
            self.temprating = temprating
        if valvetyp is not None:
            self.valvetyp = valvetyp
        if wlretrievable is not None:
            self.wlretrievable = wlretrievable
        if systag is not None:
            self.systag = systag

    @property
    def conditionpull(self):
        """Gets the conditionpull of this SSSVInsertData.  # noqa: E501


        :return: The conditionpull of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._conditionpull

    @conditionpull.setter
    def conditionpull(self, conditionpull):
        """Sets the conditionpull of this SSSVInsertData.


        :param conditionpull: The conditionpull of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._conditionpull = conditionpull

    @property
    def conditionrun(self):
        """Gets the conditionrun of this SSSVInsertData.  # noqa: E501


        :return: The conditionrun of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._conditionrun

    @conditionrun.setter
    def conditionrun(self, conditionrun):
        """Sets the conditionrun of this SSSVInsertData.


        :param conditionrun: The conditionrun of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._conditionrun = conditionrun

    @property
    def dttmpull(self):
        """Gets the dttmpull of this SSSVInsertData.  # noqa: E501


        :return: The dttmpull of this SSSVInsertData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this SSSVInsertData.


        :param dttmpull: The dttmpull of this SSSVInsertData.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this SSSVInsertData.  # noqa: E501


        :return: The dttmrun of this SSSVInsertData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this SSSVInsertData.


        :param dttmrun: The dttmrun of this SSSVInsertData.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this SSSVInsertData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SSSVInsertData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this SSSVInsertData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this SSSVInsertData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this SSSVInsertData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this SSSVInsertData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SSSVInsertData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SSSVInsertData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lengthspacer(self):
        """Gets the lengthspacer of this SSSVInsertData.  # noqa: E501


        :return: The lengthspacer of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._lengthspacer

    @lengthspacer.setter
    def lengthspacer(self, lengthspacer):
        """Sets the lengthspacer of this SSSVInsertData.


        :param lengthspacer: The lengthspacer of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._lengthspacer = lengthspacer

    @property
    def make(self):
        """Gets the make of this SSSVInsertData.  # noqa: E501


        :return: The make of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this SSSVInsertData.


        :param make: The make of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this SSSVInsertData.  # noqa: E501


        :return: The model of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SSSVInsertData.


        :param model: The model of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def presctrl(self):
        """Gets the presctrl of this SSSVInsertData.  # noqa: E501


        :return: The presctrl of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._presctrl

    @presctrl.setter
    def presctrl(self, presctrl):
        """Sets the presctrl of this SSSVInsertData.


        :param presctrl: The presctrl of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._presctrl = presctrl

    @property
    def presrating(self):
        """Gets the presrating of this SSSVInsertData.  # noqa: E501


        :return: The presrating of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._presrating

    @presrating.setter
    def presrating(self, presrating):
        """Sets the presrating of this SSSVInsertData.


        :param presrating: The presrating of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._presrating = presrating

    @property
    def pullreason(self):
        """Gets the pullreason of this SSSVInsertData.  # noqa: E501


        :return: The pullreason of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this SSSVInsertData.


        :param pullreason: The pullreason of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def refid(self):
        """Gets the refid of this SSSVInsertData.  # noqa: E501


        :return: The refid of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this SSSVInsertData.


        :param refid: The refid of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def seattyp(self):
        """Gets the seattyp of this SSSVInsertData.  # noqa: E501


        :return: The seattyp of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._seattyp

    @seattyp.setter
    def seattyp(self, seattyp):
        """Sets the seattyp of this SSSVInsertData.


        :param seattyp: The seattyp of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._seattyp = seattyp

    @property
    def sn(self):
        """Gets the sn of this SSSVInsertData.  # noqa: E501


        :return: The sn of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this SSSVInsertData.


        :param sn: The sn of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def springrt(self):
        """Gets the springrt of this SSSVInsertData.  # noqa: E501


        :return: The springrt of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._springrt

    @springrt.setter
    def springrt(self, springrt):
        """Sets the springrt of this SSSVInsertData.


        :param springrt: The springrt of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._springrt = springrt

    @property
    def szidbore(self):
        """Gets the szidbore of this SSSVInsertData.  # noqa: E501


        :return: The szidbore of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._szidbore

    @szidbore.setter
    def szidbore(self, szidbore):
        """Sets the szidbore of this SSSVInsertData.


        :param szidbore: The szidbore of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._szidbore = szidbore

    @property
    def szodbean(self):
        """Gets the szodbean of this SSSVInsertData.  # noqa: E501


        :return: The szodbean of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._szodbean

    @szodbean.setter
    def szodbean(self, szodbean):
        """Sets the szodbean of this SSSVInsertData.


        :param szodbean: The szodbean of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._szodbean = szodbean

    @property
    def temprating(self):
        """Gets the temprating of this SSSVInsertData.  # noqa: E501


        :return: The temprating of this SSSVInsertData.  # noqa: E501
        :rtype: float
        """
        return self._temprating

    @temprating.setter
    def temprating(self, temprating):
        """Sets the temprating of this SSSVInsertData.


        :param temprating: The temprating of this SSSVInsertData.  # noqa: E501
        :type: float
        """

        self._temprating = temprating

    @property
    def valvetyp(self):
        """Gets the valvetyp of this SSSVInsertData.  # noqa: E501


        :return: The valvetyp of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._valvetyp

    @valvetyp.setter
    def valvetyp(self, valvetyp):
        """Sets the valvetyp of this SSSVInsertData.


        :param valvetyp: The valvetyp of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._valvetyp = valvetyp

    @property
    def wlretrievable(self):
        """Gets the wlretrievable of this SSSVInsertData.  # noqa: E501


        :return: The wlretrievable of this SSSVInsertData.  # noqa: E501
        :rtype: bool
        """
        return self._wlretrievable

    @wlretrievable.setter
    def wlretrievable(self, wlretrievable):
        """Sets the wlretrievable of this SSSVInsertData.


        :param wlretrievable: The wlretrievable of this SSSVInsertData.  # noqa: E501
        :type: bool
        """

        self._wlretrievable = wlretrievable

    @property
    def systag(self):
        """Gets the systag of this SSSVInsertData.  # noqa: E501


        :return: The systag of this SSSVInsertData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SSSVInsertData.


        :param systag: The systag of this SSSVInsertData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSSVInsertData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSSVInsertData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
