# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class KickPressureData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'added': 'float',
        'densityin': 'float',
        'densityout': 'float',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'prescas': 'float',
        'presdp': 'float',
        'volpumped': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'added': 'added',
        'densityin': 'densityin',
        'densityout': 'densityout',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'presdp': 'presdp',
        'volpumped': 'volpumped',
        'systag': 'systag'
    }

    def __init__(self, added=None, densityin=None, densityout=None, dttm=None, idrec=None, idrecparent=None, idwell=None, prescas=None, presdp=None, volpumped=None, systag=None):  # noqa: E501
        """KickPressureData - a model defined in Swagger"""  # noqa: E501
        self._added = None
        self._densityin = None
        self._densityout = None
        self._dttm = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._prescas = None
        self._presdp = None
        self._volpumped = None
        self._systag = None
        self.discriminator = None
        if added is not None:
            self.added = added
        if densityin is not None:
            self.densityin = densityin
        if densityout is not None:
            self.densityout = densityout
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if presdp is not None:
            self.presdp = presdp
        if volpumped is not None:
            self.volpumped = volpumped
        if systag is not None:
            self.systag = systag

    @property
    def added(self):
        """Gets the added of this KickPressureData.  # noqa: E501


        :return: The added of this KickPressureData.  # noqa: E501
        :rtype: float
        """
        return self._added

    @added.setter
    def added(self, added):
        """Sets the added of this KickPressureData.


        :param added: The added of this KickPressureData.  # noqa: E501
        :type: float
        """

        self._added = added

    @property
    def densityin(self):
        """Gets the densityin of this KickPressureData.  # noqa: E501


        :return: The densityin of this KickPressureData.  # noqa: E501
        :rtype: float
        """
        return self._densityin

    @densityin.setter
    def densityin(self, densityin):
        """Sets the densityin of this KickPressureData.


        :param densityin: The densityin of this KickPressureData.  # noqa: E501
        :type: float
        """

        self._densityin = densityin

    @property
    def densityout(self):
        """Gets the densityout of this KickPressureData.  # noqa: E501


        :return: The densityout of this KickPressureData.  # noqa: E501
        :rtype: float
        """
        return self._densityout

    @densityout.setter
    def densityout(self, densityout):
        """Sets the densityout of this KickPressureData.


        :param densityout: The densityout of this KickPressureData.  # noqa: E501
        :type: float
        """

        self._densityout = densityout

    @property
    def dttm(self):
        """Gets the dttm of this KickPressureData.  # noqa: E501


        :return: The dttm of this KickPressureData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this KickPressureData.


        :param dttm: The dttm of this KickPressureData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this KickPressureData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this KickPressureData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this KickPressureData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this KickPressureData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this KickPressureData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this KickPressureData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this KickPressureData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this KickPressureData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this KickPressureData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this KickPressureData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this KickPressureData.

        id of well  # noqa: E501

        :param idwell: The idwell of this KickPressureData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this KickPressureData.  # noqa: E501


        :return: The prescas of this KickPressureData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this KickPressureData.


        :param prescas: The prescas of this KickPressureData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def presdp(self):
        """Gets the presdp of this KickPressureData.  # noqa: E501


        :return: The presdp of this KickPressureData.  # noqa: E501
        :rtype: float
        """
        return self._presdp

    @presdp.setter
    def presdp(self, presdp):
        """Sets the presdp of this KickPressureData.


        :param presdp: The presdp of this KickPressureData.  # noqa: E501
        :type: float
        """

        self._presdp = presdp

    @property
    def volpumped(self):
        """Gets the volpumped of this KickPressureData.  # noqa: E501


        :return: The volpumped of this KickPressureData.  # noqa: E501
        :rtype: float
        """
        return self._volpumped

    @volpumped.setter
    def volpumped(self, volpumped):
        """Sets the volpumped of this KickPressureData.


        :param volpumped: The volpumped of this KickPressureData.  # noqa: E501
        :type: float
        """

        self._volpumped = volpumped

    @property
    def systag(self):
        """Gets the systag of this KickPressureData.  # noqa: E501


        :return: The systag of this KickPressureData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this KickPressureData.


        :param systag: The systag of this KickPressureData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KickPressureData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KickPressureData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
