# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CementStageData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'btmplug': 'bool',
        'com': 'str',
        'depthbtm': 'float',
        'depthdrillout': 'float',
        'depthtagged': 'float',
        'depthtop': 'float',
        'des': 'str',
        'dttmdrillout': 'datetime',
        'dttmendpump': 'datetime',
        'dttmreleasedpres': 'datetime',
        'dttmstartpump': 'datetime',
        'dttmtagged': 'datetime',
        'floatfailed': 'bool',
        'fullreturn': 'bool',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'measmethod': 'str',
        'objective': 'str',
        'oddrillout': 'float',
        'pipemovenote': 'str',
        'plugfailed': 'bool',
        'presheld': 'float',
        'presplugbump': 'float',
        'prespumpend': 'float',
        'proposeddrillout': 'bool',
        'ratepumpavg': 'float',
        'ratepumpend': 'float',
        'ratepumpstart': 'float',
        'reciprate': 'float',
        'reciprocated': 'bool',
        'recipstroke': 'float',
        'rotated': 'bool',
        'rotaterpm': 'float',
        'stagenum': 'int',
        'tagmethod': 'str',
        'topplug': 'bool',
        'volinfrm': 'float',
        'vollost': 'float',
        'volreturncmnt': 'float',
        'weighttagged': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'btmplug': 'btmplug',
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthdrillout': 'depthdrillout',
        'depthtagged': 'depthtagged',
        'depthtop': 'depthtop',
        'des': 'des',
        'dttmdrillout': 'dttmdrillout',
        'dttmendpump': 'dttmendpump',
        'dttmreleasedpres': 'dttmreleasedpres',
        'dttmstartpump': 'dttmstartpump',
        'dttmtagged': 'dttmtagged',
        'floatfailed': 'floatfailed',
        'fullreturn': 'fullreturn',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'measmethod': 'measmethod',
        'objective': 'objective',
        'oddrillout': 'oddrillout',
        'pipemovenote': 'pipemovenote',
        'plugfailed': 'plugfailed',
        'presheld': 'presheld',
        'presplugbump': 'presplugbump',
        'prespumpend': 'prespumpend',
        'proposeddrillout': 'proposeddrillout',
        'ratepumpavg': 'ratepumpavg',
        'ratepumpend': 'ratepumpend',
        'ratepumpstart': 'ratepumpstart',
        'reciprate': 'reciprate',
        'reciprocated': 'reciprocated',
        'recipstroke': 'recipstroke',
        'rotated': 'rotated',
        'rotaterpm': 'rotaterpm',
        'stagenum': 'stagenum',
        'tagmethod': 'tagmethod',
        'topplug': 'topplug',
        'volinfrm': 'volinfrm',
        'vollost': 'vollost',
        'volreturncmnt': 'volreturncmnt',
        'weighttagged': 'weighttagged',
        'systag': 'systag'
    }

    def __init__(self, btmplug=None, com=None, depthbtm=None, depthdrillout=None, depthtagged=None, depthtop=None, des=None, dttmdrillout=None, dttmendpump=None, dttmreleasedpres=None, dttmstartpump=None, dttmtagged=None, floatfailed=None, fullreturn=None, idrec=None, idrecparent=None, idwell=None, measmethod=None, objective=None, oddrillout=None, pipemovenote=None, plugfailed=None, presheld=None, presplugbump=None, prespumpend=None, proposeddrillout=None, ratepumpavg=None, ratepumpend=None, ratepumpstart=None, reciprate=None, reciprocated=None, recipstroke=None, rotated=None, rotaterpm=None, stagenum=None, tagmethod=None, topplug=None, volinfrm=None, vollost=None, volreturncmnt=None, weighttagged=None, systag=None):  # noqa: E501
        """CementStageData - a model defined in Swagger"""  # noqa: E501
        self._btmplug = None
        self._com = None
        self._depthbtm = None
        self._depthdrillout = None
        self._depthtagged = None
        self._depthtop = None
        self._des = None
        self._dttmdrillout = None
        self._dttmendpump = None
        self._dttmreleasedpres = None
        self._dttmstartpump = None
        self._dttmtagged = None
        self._floatfailed = None
        self._fullreturn = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._measmethod = None
        self._objective = None
        self._oddrillout = None
        self._pipemovenote = None
        self._plugfailed = None
        self._presheld = None
        self._presplugbump = None
        self._prespumpend = None
        self._proposeddrillout = None
        self._ratepumpavg = None
        self._ratepumpend = None
        self._ratepumpstart = None
        self._reciprate = None
        self._reciprocated = None
        self._recipstroke = None
        self._rotated = None
        self._rotaterpm = None
        self._stagenum = None
        self._tagmethod = None
        self._topplug = None
        self._volinfrm = None
        self._vollost = None
        self._volreturncmnt = None
        self._weighttagged = None
        self._systag = None
        self.discriminator = None
        if btmplug is not None:
            self.btmplug = btmplug
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthdrillout is not None:
            self.depthdrillout = depthdrillout
        if depthtagged is not None:
            self.depthtagged = depthtagged
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if dttmdrillout is not None:
            self.dttmdrillout = dttmdrillout
        if dttmendpump is not None:
            self.dttmendpump = dttmendpump
        if dttmreleasedpres is not None:
            self.dttmreleasedpres = dttmreleasedpres
        if dttmstartpump is not None:
            self.dttmstartpump = dttmstartpump
        if dttmtagged is not None:
            self.dttmtagged = dttmtagged
        if floatfailed is not None:
            self.floatfailed = floatfailed
        if fullreturn is not None:
            self.fullreturn = fullreturn
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if measmethod is not None:
            self.measmethod = measmethod
        if objective is not None:
            self.objective = objective
        if oddrillout is not None:
            self.oddrillout = oddrillout
        if pipemovenote is not None:
            self.pipemovenote = pipemovenote
        if plugfailed is not None:
            self.plugfailed = plugfailed
        if presheld is not None:
            self.presheld = presheld
        if presplugbump is not None:
            self.presplugbump = presplugbump
        if prespumpend is not None:
            self.prespumpend = prespumpend
        if proposeddrillout is not None:
            self.proposeddrillout = proposeddrillout
        if ratepumpavg is not None:
            self.ratepumpavg = ratepumpavg
        if ratepumpend is not None:
            self.ratepumpend = ratepumpend
        if ratepumpstart is not None:
            self.ratepumpstart = ratepumpstart
        if reciprate is not None:
            self.reciprate = reciprate
        if reciprocated is not None:
            self.reciprocated = reciprocated
        if recipstroke is not None:
            self.recipstroke = recipstroke
        if rotated is not None:
            self.rotated = rotated
        if rotaterpm is not None:
            self.rotaterpm = rotaterpm
        if stagenum is not None:
            self.stagenum = stagenum
        if tagmethod is not None:
            self.tagmethod = tagmethod
        if topplug is not None:
            self.topplug = topplug
        if volinfrm is not None:
            self.volinfrm = volinfrm
        if vollost is not None:
            self.vollost = vollost
        if volreturncmnt is not None:
            self.volreturncmnt = volreturncmnt
        if weighttagged is not None:
            self.weighttagged = weighttagged
        if systag is not None:
            self.systag = systag

    @property
    def btmplug(self):
        """Gets the btmplug of this CementStageData.  # noqa: E501


        :return: The btmplug of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._btmplug

    @btmplug.setter
    def btmplug(self, btmplug):
        """Sets the btmplug of this CementStageData.


        :param btmplug: The btmplug of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._btmplug = btmplug

    @property
    def com(self):
        """Gets the com of this CementStageData.  # noqa: E501


        :return: The com of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CementStageData.


        :param com: The com of this CementStageData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this CementStageData.  # noqa: E501


        :return: The depthbtm of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this CementStageData.


        :param depthbtm: The depthbtm of this CementStageData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthdrillout(self):
        """Gets the depthdrillout of this CementStageData.  # noqa: E501


        :return: The depthdrillout of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._depthdrillout

    @depthdrillout.setter
    def depthdrillout(self, depthdrillout):
        """Sets the depthdrillout of this CementStageData.


        :param depthdrillout: The depthdrillout of this CementStageData.  # noqa: E501
        :type: float
        """

        self._depthdrillout = depthdrillout

    @property
    def depthtagged(self):
        """Gets the depthtagged of this CementStageData.  # noqa: E501


        :return: The depthtagged of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._depthtagged

    @depthtagged.setter
    def depthtagged(self, depthtagged):
        """Sets the depthtagged of this CementStageData.


        :param depthtagged: The depthtagged of this CementStageData.  # noqa: E501
        :type: float
        """

        self._depthtagged = depthtagged

    @property
    def depthtop(self):
        """Gets the depthtop of this CementStageData.  # noqa: E501


        :return: The depthtop of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this CementStageData.


        :param depthtop: The depthtop of this CementStageData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this CementStageData.  # noqa: E501


        :return: The des of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this CementStageData.


        :param des: The des of this CementStageData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmdrillout(self):
        """Gets the dttmdrillout of this CementStageData.  # noqa: E501


        :return: The dttmdrillout of this CementStageData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmdrillout

    @dttmdrillout.setter
    def dttmdrillout(self, dttmdrillout):
        """Sets the dttmdrillout of this CementStageData.


        :param dttmdrillout: The dttmdrillout of this CementStageData.  # noqa: E501
        :type: datetime
        """

        self._dttmdrillout = dttmdrillout

    @property
    def dttmendpump(self):
        """Gets the dttmendpump of this CementStageData.  # noqa: E501


        :return: The dttmendpump of this CementStageData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendpump

    @dttmendpump.setter
    def dttmendpump(self, dttmendpump):
        """Sets the dttmendpump of this CementStageData.


        :param dttmendpump: The dttmendpump of this CementStageData.  # noqa: E501
        :type: datetime
        """

        self._dttmendpump = dttmendpump

    @property
    def dttmreleasedpres(self):
        """Gets the dttmreleasedpres of this CementStageData.  # noqa: E501


        :return: The dttmreleasedpres of this CementStageData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmreleasedpres

    @dttmreleasedpres.setter
    def dttmreleasedpres(self, dttmreleasedpres):
        """Sets the dttmreleasedpres of this CementStageData.


        :param dttmreleasedpres: The dttmreleasedpres of this CementStageData.  # noqa: E501
        :type: datetime
        """

        self._dttmreleasedpres = dttmreleasedpres

    @property
    def dttmstartpump(self):
        """Gets the dttmstartpump of this CementStageData.  # noqa: E501


        :return: The dttmstartpump of this CementStageData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartpump

    @dttmstartpump.setter
    def dttmstartpump(self, dttmstartpump):
        """Sets the dttmstartpump of this CementStageData.


        :param dttmstartpump: The dttmstartpump of this CementStageData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartpump = dttmstartpump

    @property
    def dttmtagged(self):
        """Gets the dttmtagged of this CementStageData.  # noqa: E501


        :return: The dttmtagged of this CementStageData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmtagged

    @dttmtagged.setter
    def dttmtagged(self, dttmtagged):
        """Sets the dttmtagged of this CementStageData.


        :param dttmtagged: The dttmtagged of this CementStageData.  # noqa: E501
        :type: datetime
        """

        self._dttmtagged = dttmtagged

    @property
    def floatfailed(self):
        """Gets the floatfailed of this CementStageData.  # noqa: E501


        :return: The floatfailed of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._floatfailed

    @floatfailed.setter
    def floatfailed(self, floatfailed):
        """Sets the floatfailed of this CementStageData.


        :param floatfailed: The floatfailed of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._floatfailed = floatfailed

    @property
    def fullreturn(self):
        """Gets the fullreturn of this CementStageData.  # noqa: E501


        :return: The fullreturn of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._fullreturn

    @fullreturn.setter
    def fullreturn(self, fullreturn):
        """Sets the fullreturn of this CementStageData.


        :param fullreturn: The fullreturn of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._fullreturn = fullreturn

    @property
    def idrec(self):
        """Gets the idrec of this CementStageData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CementStageData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CementStageData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CementStageData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CementStageData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this CementStageData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CementStageData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CementStageData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CementStageData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def measmethod(self):
        """Gets the measmethod of this CementStageData.  # noqa: E501


        :return: The measmethod of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._measmethod

    @measmethod.setter
    def measmethod(self, measmethod):
        """Sets the measmethod of this CementStageData.


        :param measmethod: The measmethod of this CementStageData.  # noqa: E501
        :type: str
        """

        self._measmethod = measmethod

    @property
    def objective(self):
        """Gets the objective of this CementStageData.  # noqa: E501


        :return: The objective of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this CementStageData.


        :param objective: The objective of this CementStageData.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def oddrillout(self):
        """Gets the oddrillout of this CementStageData.  # noqa: E501


        :return: The oddrillout of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._oddrillout

    @oddrillout.setter
    def oddrillout(self, oddrillout):
        """Sets the oddrillout of this CementStageData.


        :param oddrillout: The oddrillout of this CementStageData.  # noqa: E501
        :type: float
        """

        self._oddrillout = oddrillout

    @property
    def pipemovenote(self):
        """Gets the pipemovenote of this CementStageData.  # noqa: E501


        :return: The pipemovenote of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._pipemovenote

    @pipemovenote.setter
    def pipemovenote(self, pipemovenote):
        """Sets the pipemovenote of this CementStageData.


        :param pipemovenote: The pipemovenote of this CementStageData.  # noqa: E501
        :type: str
        """

        self._pipemovenote = pipemovenote

    @property
    def plugfailed(self):
        """Gets the plugfailed of this CementStageData.  # noqa: E501


        :return: The plugfailed of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._plugfailed

    @plugfailed.setter
    def plugfailed(self, plugfailed):
        """Sets the plugfailed of this CementStageData.


        :param plugfailed: The plugfailed of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._plugfailed = plugfailed

    @property
    def presheld(self):
        """Gets the presheld of this CementStageData.  # noqa: E501


        :return: The presheld of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._presheld

    @presheld.setter
    def presheld(self, presheld):
        """Sets the presheld of this CementStageData.


        :param presheld: The presheld of this CementStageData.  # noqa: E501
        :type: float
        """

        self._presheld = presheld

    @property
    def presplugbump(self):
        """Gets the presplugbump of this CementStageData.  # noqa: E501


        :return: The presplugbump of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._presplugbump

    @presplugbump.setter
    def presplugbump(self, presplugbump):
        """Sets the presplugbump of this CementStageData.


        :param presplugbump: The presplugbump of this CementStageData.  # noqa: E501
        :type: float
        """

        self._presplugbump = presplugbump

    @property
    def prespumpend(self):
        """Gets the prespumpend of this CementStageData.  # noqa: E501


        :return: The prespumpend of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._prespumpend

    @prespumpend.setter
    def prespumpend(self, prespumpend):
        """Sets the prespumpend of this CementStageData.


        :param prespumpend: The prespumpend of this CementStageData.  # noqa: E501
        :type: float
        """

        self._prespumpend = prespumpend

    @property
    def proposeddrillout(self):
        """Gets the proposeddrillout of this CementStageData.  # noqa: E501


        :return: The proposeddrillout of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._proposeddrillout

    @proposeddrillout.setter
    def proposeddrillout(self, proposeddrillout):
        """Sets the proposeddrillout of this CementStageData.


        :param proposeddrillout: The proposeddrillout of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._proposeddrillout = proposeddrillout

    @property
    def ratepumpavg(self):
        """Gets the ratepumpavg of this CementStageData.  # noqa: E501


        :return: The ratepumpavg of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._ratepumpavg

    @ratepumpavg.setter
    def ratepumpavg(self, ratepumpavg):
        """Sets the ratepumpavg of this CementStageData.


        :param ratepumpavg: The ratepumpavg of this CementStageData.  # noqa: E501
        :type: float
        """

        self._ratepumpavg = ratepumpavg

    @property
    def ratepumpend(self):
        """Gets the ratepumpend of this CementStageData.  # noqa: E501


        :return: The ratepumpend of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._ratepumpend

    @ratepumpend.setter
    def ratepumpend(self, ratepumpend):
        """Sets the ratepumpend of this CementStageData.


        :param ratepumpend: The ratepumpend of this CementStageData.  # noqa: E501
        :type: float
        """

        self._ratepumpend = ratepumpend

    @property
    def ratepumpstart(self):
        """Gets the ratepumpstart of this CementStageData.  # noqa: E501


        :return: The ratepumpstart of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._ratepumpstart

    @ratepumpstart.setter
    def ratepumpstart(self, ratepumpstart):
        """Sets the ratepumpstart of this CementStageData.


        :param ratepumpstart: The ratepumpstart of this CementStageData.  # noqa: E501
        :type: float
        """

        self._ratepumpstart = ratepumpstart

    @property
    def reciprate(self):
        """Gets the reciprate of this CementStageData.  # noqa: E501


        :return: The reciprate of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._reciprate

    @reciprate.setter
    def reciprate(self, reciprate):
        """Sets the reciprate of this CementStageData.


        :param reciprate: The reciprate of this CementStageData.  # noqa: E501
        :type: float
        """

        self._reciprate = reciprate

    @property
    def reciprocated(self):
        """Gets the reciprocated of this CementStageData.  # noqa: E501


        :return: The reciprocated of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._reciprocated

    @reciprocated.setter
    def reciprocated(self, reciprocated):
        """Sets the reciprocated of this CementStageData.


        :param reciprocated: The reciprocated of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._reciprocated = reciprocated

    @property
    def recipstroke(self):
        """Gets the recipstroke of this CementStageData.  # noqa: E501


        :return: The recipstroke of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._recipstroke

    @recipstroke.setter
    def recipstroke(self, recipstroke):
        """Sets the recipstroke of this CementStageData.


        :param recipstroke: The recipstroke of this CementStageData.  # noqa: E501
        :type: float
        """

        self._recipstroke = recipstroke

    @property
    def rotated(self):
        """Gets the rotated of this CementStageData.  # noqa: E501


        :return: The rotated of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._rotated

    @rotated.setter
    def rotated(self, rotated):
        """Sets the rotated of this CementStageData.


        :param rotated: The rotated of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._rotated = rotated

    @property
    def rotaterpm(self):
        """Gets the rotaterpm of this CementStageData.  # noqa: E501


        :return: The rotaterpm of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._rotaterpm

    @rotaterpm.setter
    def rotaterpm(self, rotaterpm):
        """Sets the rotaterpm of this CementStageData.


        :param rotaterpm: The rotaterpm of this CementStageData.  # noqa: E501
        :type: float
        """

        self._rotaterpm = rotaterpm

    @property
    def stagenum(self):
        """Gets the stagenum of this CementStageData.  # noqa: E501


        :return: The stagenum of this CementStageData.  # noqa: E501
        :rtype: int
        """
        return self._stagenum

    @stagenum.setter
    def stagenum(self, stagenum):
        """Sets the stagenum of this CementStageData.


        :param stagenum: The stagenum of this CementStageData.  # noqa: E501
        :type: int
        """

        self._stagenum = stagenum

    @property
    def tagmethod(self):
        """Gets the tagmethod of this CementStageData.  # noqa: E501


        :return: The tagmethod of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._tagmethod

    @tagmethod.setter
    def tagmethod(self, tagmethod):
        """Sets the tagmethod of this CementStageData.


        :param tagmethod: The tagmethod of this CementStageData.  # noqa: E501
        :type: str
        """

        self._tagmethod = tagmethod

    @property
    def topplug(self):
        """Gets the topplug of this CementStageData.  # noqa: E501


        :return: The topplug of this CementStageData.  # noqa: E501
        :rtype: bool
        """
        return self._topplug

    @topplug.setter
    def topplug(self, topplug):
        """Sets the topplug of this CementStageData.


        :param topplug: The topplug of this CementStageData.  # noqa: E501
        :type: bool
        """

        self._topplug = topplug

    @property
    def volinfrm(self):
        """Gets the volinfrm of this CementStageData.  # noqa: E501


        :return: The volinfrm of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._volinfrm

    @volinfrm.setter
    def volinfrm(self, volinfrm):
        """Sets the volinfrm of this CementStageData.


        :param volinfrm: The volinfrm of this CementStageData.  # noqa: E501
        :type: float
        """

        self._volinfrm = volinfrm

    @property
    def vollost(self):
        """Gets the vollost of this CementStageData.  # noqa: E501


        :return: The vollost of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._vollost

    @vollost.setter
    def vollost(self, vollost):
        """Sets the vollost of this CementStageData.


        :param vollost: The vollost of this CementStageData.  # noqa: E501
        :type: float
        """

        self._vollost = vollost

    @property
    def volreturncmnt(self):
        """Gets the volreturncmnt of this CementStageData.  # noqa: E501


        :return: The volreturncmnt of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._volreturncmnt

    @volreturncmnt.setter
    def volreturncmnt(self, volreturncmnt):
        """Sets the volreturncmnt of this CementStageData.


        :param volreturncmnt: The volreturncmnt of this CementStageData.  # noqa: E501
        :type: float
        """

        self._volreturncmnt = volreturncmnt

    @property
    def weighttagged(self):
        """Gets the weighttagged of this CementStageData.  # noqa: E501


        :return: The weighttagged of this CementStageData.  # noqa: E501
        :rtype: float
        """
        return self._weighttagged

    @weighttagged.setter
    def weighttagged(self, weighttagged):
        """Sets the weighttagged of this CementStageData.


        :param weighttagged: The weighttagged of this CementStageData.  # noqa: E501
        :type: float
        """

        self._weighttagged = weighttagged

    @property
    def systag(self):
        """Gets the systag of this CementStageData.  # noqa: E501


        :return: The systag of this CementStageData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CementStageData.


        :param systag: The systag of this CementStageData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CementStageData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CementStageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
