# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliverableData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigntodept': 'str',
        'assigntoemail': 'str',
        'assigntoname': 'str',
        'com': 'str',
        'completed': 'bool',
        'completedby': 'str',
        'des': 'str',
        'dttmcomplete': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'assigntodept': 'assigntodept',
        'assigntoemail': 'assigntoemail',
        'assigntoname': 'assigntoname',
        'com': 'com',
        'completed': 'completed',
        'completedby': 'completedby',
        'des': 'des',
        'dttmcomplete': 'dttmcomplete',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, assigntodept=None, assigntoemail=None, assigntoname=None, com=None, completed=None, completedby=None, des=None, dttmcomplete=None, idrec=None, idrecparent=None, idwell=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """DeliverableData - a model defined in Swagger"""  # noqa: E501
        self._assigntodept = None
        self._assigntoemail = None
        self._assigntoname = None
        self._com = None
        self._completed = None
        self._completedby = None
        self._des = None
        self._dttmcomplete = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if assigntodept is not None:
            self.assigntodept = assigntodept
        if assigntoemail is not None:
            self.assigntoemail = assigntoemail
        if assigntoname is not None:
            self.assigntoname = assigntoname
        if com is not None:
            self.com = com
        if completed is not None:
            self.completed = completed
        if completedby is not None:
            self.completedby = completedby
        if des is not None:
            self.des = des
        if dttmcomplete is not None:
            self.dttmcomplete = dttmcomplete
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def assigntodept(self):
        """Gets the assigntodept of this DeliverableData.  # noqa: E501


        :return: The assigntodept of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._assigntodept

    @assigntodept.setter
    def assigntodept(self, assigntodept):
        """Sets the assigntodept of this DeliverableData.


        :param assigntodept: The assigntodept of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._assigntodept = assigntodept

    @property
    def assigntoemail(self):
        """Gets the assigntoemail of this DeliverableData.  # noqa: E501


        :return: The assigntoemail of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._assigntoemail

    @assigntoemail.setter
    def assigntoemail(self, assigntoemail):
        """Sets the assigntoemail of this DeliverableData.


        :param assigntoemail: The assigntoemail of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._assigntoemail = assigntoemail

    @property
    def assigntoname(self):
        """Gets the assigntoname of this DeliverableData.  # noqa: E501


        :return: The assigntoname of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._assigntoname

    @assigntoname.setter
    def assigntoname(self, assigntoname):
        """Sets the assigntoname of this DeliverableData.


        :param assigntoname: The assigntoname of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._assigntoname = assigntoname

    @property
    def com(self):
        """Gets the com of this DeliverableData.  # noqa: E501


        :return: The com of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this DeliverableData.


        :param com: The com of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def completed(self):
        """Gets the completed of this DeliverableData.  # noqa: E501


        :return: The completed of this DeliverableData.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this DeliverableData.


        :param completed: The completed of this DeliverableData.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    @property
    def completedby(self):
        """Gets the completedby of this DeliverableData.  # noqa: E501


        :return: The completedby of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._completedby

    @completedby.setter
    def completedby(self, completedby):
        """Sets the completedby of this DeliverableData.


        :param completedby: The completedby of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._completedby = completedby

    @property
    def des(self):
        """Gets the des of this DeliverableData.  # noqa: E501


        :return: The des of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this DeliverableData.


        :param des: The des of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmcomplete(self):
        """Gets the dttmcomplete of this DeliverableData.  # noqa: E501


        :return: The dttmcomplete of this DeliverableData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmcomplete

    @dttmcomplete.setter
    def dttmcomplete(self, dttmcomplete):
        """Sets the dttmcomplete of this DeliverableData.


        :param dttmcomplete: The dttmcomplete of this DeliverableData.  # noqa: E501
        :type: datetime
        """

        self._dttmcomplete = dttmcomplete

    @property
    def idrec(self):
        """Gets the idrec of this DeliverableData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DeliverableData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this DeliverableData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this DeliverableData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this DeliverableData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this DeliverableData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DeliverableData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DeliverableData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def typ1(self):
        """Gets the typ1 of this DeliverableData.  # noqa: E501


        :return: The typ1 of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this DeliverableData.


        :param typ1: The typ1 of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this DeliverableData.  # noqa: E501


        :return: The typ2 of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this DeliverableData.


        :param typ2: The typ2 of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this DeliverableData.  # noqa: E501


        :return: The systag of this DeliverableData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DeliverableData.


        :param systag: The systag of this DeliverableData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliverableData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliverableData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
