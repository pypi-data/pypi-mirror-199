# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RFTData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analysiscom': 'str',
        'analyst': 'str',
        'com': 'str',
        'dttm': 'datetime',
        'durpretestmax': 'float',
        'durrun': 'float',
        'idrec': 'str',
        'idrecgaugeused': 'str',
        'idreclog': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'lengthprobe': 'float',
        'probetyp': 'str',
        'qtytestexecute': 'int',
        'qtytestplan': 'int',
        'qtytestreliable': 'int',
        'ratepretestsample': 'float',
        'runmethod': 'str',
        'runno': 'str',
        'surfacetestunitname': 'str',
        'testedby': 'str',
        'toolconfig': 'str',
        'tooltyp': 'str',
        'volpretestsample': 'float',
        'wellsituation': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'analysiscom': 'analysiscom',
        'analyst': 'analyst',
        'com': 'com',
        'dttm': 'dttm',
        'durpretestmax': 'durpretestmax',
        'durrun': 'durrun',
        'idrec': 'idrec',
        'idrecgaugeused': 'idrecgaugeused',
        'idreclog': 'idreclog',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'lengthprobe': 'lengthprobe',
        'probetyp': 'probetyp',
        'qtytestexecute': 'qtytestexecute',
        'qtytestplan': 'qtytestplan',
        'qtytestreliable': 'qtytestreliable',
        'ratepretestsample': 'ratepretestsample',
        'runmethod': 'runmethod',
        'runno': 'runno',
        'surfacetestunitname': 'surfacetestunitname',
        'testedby': 'testedby',
        'toolconfig': 'toolconfig',
        'tooltyp': 'tooltyp',
        'volpretestsample': 'volpretestsample',
        'wellsituation': 'wellsituation',
        'systag': 'systag'
    }

    def __init__(self, analysiscom=None, analyst=None, com=None, dttm=None, durpretestmax=None, durrun=None, idrec=None, idrecgaugeused=None, idreclog=None, idrecwellbore=None, idwell=None, lengthprobe=None, probetyp=None, qtytestexecute=None, qtytestplan=None, qtytestreliable=None, ratepretestsample=None, runmethod=None, runno=None, surfacetestunitname=None, testedby=None, toolconfig=None, tooltyp=None, volpretestsample=None, wellsituation=None, systag=None):  # noqa: E501
        """RFTData - a model defined in Swagger"""  # noqa: E501
        self._analysiscom = None
        self._analyst = None
        self._com = None
        self._dttm = None
        self._durpretestmax = None
        self._durrun = None
        self._idrec = None
        self._idrecgaugeused = None
        self._idreclog = None
        self._idrecwellbore = None
        self._idwell = None
        self._lengthprobe = None
        self._probetyp = None
        self._qtytestexecute = None
        self._qtytestplan = None
        self._qtytestreliable = None
        self._ratepretestsample = None
        self._runmethod = None
        self._runno = None
        self._surfacetestunitname = None
        self._testedby = None
        self._toolconfig = None
        self._tooltyp = None
        self._volpretestsample = None
        self._wellsituation = None
        self._systag = None
        self.discriminator = None
        if analysiscom is not None:
            self.analysiscom = analysiscom
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if dttm is not None:
            self.dttm = dttm
        if durpretestmax is not None:
            self.durpretestmax = durpretestmax
        if durrun is not None:
            self.durrun = durrun
        if idrec is not None:
            self.idrec = idrec
        if idrecgaugeused is not None:
            self.idrecgaugeused = idrecgaugeused
        if idreclog is not None:
            self.idreclog = idreclog
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if lengthprobe is not None:
            self.lengthprobe = lengthprobe
        if probetyp is not None:
            self.probetyp = probetyp
        if qtytestexecute is not None:
            self.qtytestexecute = qtytestexecute
        if qtytestplan is not None:
            self.qtytestplan = qtytestplan
        if qtytestreliable is not None:
            self.qtytestreliable = qtytestreliable
        if ratepretestsample is not None:
            self.ratepretestsample = ratepretestsample
        if runmethod is not None:
            self.runmethod = runmethod
        if runno is not None:
            self.runno = runno
        if surfacetestunitname is not None:
            self.surfacetestunitname = surfacetestunitname
        if testedby is not None:
            self.testedby = testedby
        if toolconfig is not None:
            self.toolconfig = toolconfig
        if tooltyp is not None:
            self.tooltyp = tooltyp
        if volpretestsample is not None:
            self.volpretestsample = volpretestsample
        if wellsituation is not None:
            self.wellsituation = wellsituation
        if systag is not None:
            self.systag = systag

    @property
    def analysiscom(self):
        """Gets the analysiscom of this RFTData.  # noqa: E501


        :return: The analysiscom of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._analysiscom

    @analysiscom.setter
    def analysiscom(self, analysiscom):
        """Sets the analysiscom of this RFTData.


        :param analysiscom: The analysiscom of this RFTData.  # noqa: E501
        :type: str
        """

        self._analysiscom = analysiscom

    @property
    def analyst(self):
        """Gets the analyst of this RFTData.  # noqa: E501


        :return: The analyst of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this RFTData.


        :param analyst: The analyst of this RFTData.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this RFTData.  # noqa: E501


        :return: The com of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this RFTData.


        :param com: The com of this RFTData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttm(self):
        """Gets the dttm of this RFTData.  # noqa: E501


        :return: The dttm of this RFTData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this RFTData.


        :param dttm: The dttm of this RFTData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durpretestmax(self):
        """Gets the durpretestmax of this RFTData.  # noqa: E501


        :return: The durpretestmax of this RFTData.  # noqa: E501
        :rtype: float
        """
        return self._durpretestmax

    @durpretestmax.setter
    def durpretestmax(self, durpretestmax):
        """Sets the durpretestmax of this RFTData.


        :param durpretestmax: The durpretestmax of this RFTData.  # noqa: E501
        :type: float
        """

        self._durpretestmax = durpretestmax

    @property
    def durrun(self):
        """Gets the durrun of this RFTData.  # noqa: E501


        :return: The durrun of this RFTData.  # noqa: E501
        :rtype: float
        """
        return self._durrun

    @durrun.setter
    def durrun(self, durrun):
        """Sets the durrun of this RFTData.


        :param durrun: The durrun of this RFTData.  # noqa: E501
        :type: float
        """

        self._durrun = durrun

    @property
    def idrec(self):
        """Gets the idrec of this RFTData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RFTData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RFTData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecgaugeused(self):
        """Gets the idrecgaugeused of this RFTData.  # noqa: E501


        :return: The idrecgaugeused of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._idrecgaugeused

    @idrecgaugeused.setter
    def idrecgaugeused(self, idrecgaugeused):
        """Sets the idrecgaugeused of this RFTData.


        :param idrecgaugeused: The idrecgaugeused of this RFTData.  # noqa: E501
        :type: str
        """

        self._idrecgaugeused = idrecgaugeused

    @property
    def idreclog(self):
        """Gets the idreclog of this RFTData.  # noqa: E501


        :return: The idreclog of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._idreclog

    @idreclog.setter
    def idreclog(self, idreclog):
        """Sets the idreclog of this RFTData.


        :param idreclog: The idreclog of this RFTData.  # noqa: E501
        :type: str
        """

        self._idreclog = idreclog

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this RFTData.  # noqa: E501


        :return: The idrecwellbore of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this RFTData.


        :param idrecwellbore: The idrecwellbore of this RFTData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this RFTData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RFTData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RFTData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lengthprobe(self):
        """Gets the lengthprobe of this RFTData.  # noqa: E501


        :return: The lengthprobe of this RFTData.  # noqa: E501
        :rtype: float
        """
        return self._lengthprobe

    @lengthprobe.setter
    def lengthprobe(self, lengthprobe):
        """Sets the lengthprobe of this RFTData.


        :param lengthprobe: The lengthprobe of this RFTData.  # noqa: E501
        :type: float
        """

        self._lengthprobe = lengthprobe

    @property
    def probetyp(self):
        """Gets the probetyp of this RFTData.  # noqa: E501


        :return: The probetyp of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._probetyp

    @probetyp.setter
    def probetyp(self, probetyp):
        """Sets the probetyp of this RFTData.


        :param probetyp: The probetyp of this RFTData.  # noqa: E501
        :type: str
        """

        self._probetyp = probetyp

    @property
    def qtytestexecute(self):
        """Gets the qtytestexecute of this RFTData.  # noqa: E501


        :return: The qtytestexecute of this RFTData.  # noqa: E501
        :rtype: int
        """
        return self._qtytestexecute

    @qtytestexecute.setter
    def qtytestexecute(self, qtytestexecute):
        """Sets the qtytestexecute of this RFTData.


        :param qtytestexecute: The qtytestexecute of this RFTData.  # noqa: E501
        :type: int
        """

        self._qtytestexecute = qtytestexecute

    @property
    def qtytestplan(self):
        """Gets the qtytestplan of this RFTData.  # noqa: E501


        :return: The qtytestplan of this RFTData.  # noqa: E501
        :rtype: int
        """
        return self._qtytestplan

    @qtytestplan.setter
    def qtytestplan(self, qtytestplan):
        """Sets the qtytestplan of this RFTData.


        :param qtytestplan: The qtytestplan of this RFTData.  # noqa: E501
        :type: int
        """

        self._qtytestplan = qtytestplan

    @property
    def qtytestreliable(self):
        """Gets the qtytestreliable of this RFTData.  # noqa: E501


        :return: The qtytestreliable of this RFTData.  # noqa: E501
        :rtype: int
        """
        return self._qtytestreliable

    @qtytestreliable.setter
    def qtytestreliable(self, qtytestreliable):
        """Sets the qtytestreliable of this RFTData.


        :param qtytestreliable: The qtytestreliable of this RFTData.  # noqa: E501
        :type: int
        """

        self._qtytestreliable = qtytestreliable

    @property
    def ratepretestsample(self):
        """Gets the ratepretestsample of this RFTData.  # noqa: E501


        :return: The ratepretestsample of this RFTData.  # noqa: E501
        :rtype: float
        """
        return self._ratepretestsample

    @ratepretestsample.setter
    def ratepretestsample(self, ratepretestsample):
        """Sets the ratepretestsample of this RFTData.


        :param ratepretestsample: The ratepretestsample of this RFTData.  # noqa: E501
        :type: float
        """

        self._ratepretestsample = ratepretestsample

    @property
    def runmethod(self):
        """Gets the runmethod of this RFTData.  # noqa: E501


        :return: The runmethod of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._runmethod

    @runmethod.setter
    def runmethod(self, runmethod):
        """Sets the runmethod of this RFTData.


        :param runmethod: The runmethod of this RFTData.  # noqa: E501
        :type: str
        """

        self._runmethod = runmethod

    @property
    def runno(self):
        """Gets the runno of this RFTData.  # noqa: E501


        :return: The runno of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._runno

    @runno.setter
    def runno(self, runno):
        """Sets the runno of this RFTData.


        :param runno: The runno of this RFTData.  # noqa: E501
        :type: str
        """

        self._runno = runno

    @property
    def surfacetestunitname(self):
        """Gets the surfacetestunitname of this RFTData.  # noqa: E501


        :return: The surfacetestunitname of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._surfacetestunitname

    @surfacetestunitname.setter
    def surfacetestunitname(self, surfacetestunitname):
        """Sets the surfacetestunitname of this RFTData.


        :param surfacetestunitname: The surfacetestunitname of this RFTData.  # noqa: E501
        :type: str
        """

        self._surfacetestunitname = surfacetestunitname

    @property
    def testedby(self):
        """Gets the testedby of this RFTData.  # noqa: E501


        :return: The testedby of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this RFTData.


        :param testedby: The testedby of this RFTData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def toolconfig(self):
        """Gets the toolconfig of this RFTData.  # noqa: E501


        :return: The toolconfig of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._toolconfig

    @toolconfig.setter
    def toolconfig(self, toolconfig):
        """Sets the toolconfig of this RFTData.


        :param toolconfig: The toolconfig of this RFTData.  # noqa: E501
        :type: str
        """

        self._toolconfig = toolconfig

    @property
    def tooltyp(self):
        """Gets the tooltyp of this RFTData.  # noqa: E501


        :return: The tooltyp of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._tooltyp

    @tooltyp.setter
    def tooltyp(self, tooltyp):
        """Sets the tooltyp of this RFTData.


        :param tooltyp: The tooltyp of this RFTData.  # noqa: E501
        :type: str
        """

        self._tooltyp = tooltyp

    @property
    def volpretestsample(self):
        """Gets the volpretestsample of this RFTData.  # noqa: E501


        :return: The volpretestsample of this RFTData.  # noqa: E501
        :rtype: float
        """
        return self._volpretestsample

    @volpretestsample.setter
    def volpretestsample(self, volpretestsample):
        """Sets the volpretestsample of this RFTData.


        :param volpretestsample: The volpretestsample of this RFTData.  # noqa: E501
        :type: float
        """

        self._volpretestsample = volpretestsample

    @property
    def wellsituation(self):
        """Gets the wellsituation of this RFTData.  # noqa: E501


        :return: The wellsituation of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._wellsituation

    @wellsituation.setter
    def wellsituation(self, wellsituation):
        """Sets the wellsituation of this RFTData.


        :param wellsituation: The wellsituation of this RFTData.  # noqa: E501
        :type: str
        """

        self._wellsituation = wellsituation

    @property
    def systag(self):
        """Gets the systag of this RFTData.  # noqa: E501


        :return: The systag of this RFTData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RFTData.


        :param systag: The systag of this RFTData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RFTData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RFTData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
