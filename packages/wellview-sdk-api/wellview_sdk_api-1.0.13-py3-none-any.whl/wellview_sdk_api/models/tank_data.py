# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TankData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dttmend': 'datetime',
        'dttmmanufacture': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'note': 'str',
        'sn': 'str',
        'supplier': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'volume': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'dttmend': 'dttmend',
        'dttmmanufacture': 'dttmmanufacture',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'note': 'note',
        'sn': 'sn',
        'supplier': 'supplier',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'volume': 'volume',
        'systag': 'systag'
    }

    def __init__(self, dttmend=None, dttmmanufacture=None, dttmstart=None, idrec=None, idrecparent=None, idwell=None, note=None, sn=None, supplier=None, typ1=None, typ2=None, volume=None, systag=None):  # noqa: E501
        """TankData - a model defined in Swagger"""  # noqa: E501
        self._dttmend = None
        self._dttmmanufacture = None
        self._dttmstart = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._note = None
        self._sn = None
        self._supplier = None
        self._typ1 = None
        self._typ2 = None
        self._volume = None
        self._systag = None
        self.discriminator = None
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if note is not None:
            self.note = note
        if sn is not None:
            self.sn = sn
        if supplier is not None:
            self.supplier = supplier
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if volume is not None:
            self.volume = volume
        if systag is not None:
            self.systag = systag

    @property
    def dttmend(self):
        """Gets the dttmend of this TankData.  # noqa: E501


        :return: The dttmend of this TankData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this TankData.


        :param dttmend: The dttmend of this TankData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this TankData.  # noqa: E501


        :return: The dttmmanufacture of this TankData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this TankData.


        :param dttmmanufacture: The dttmmanufacture of this TankData.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def dttmstart(self):
        """Gets the dttmstart of this TankData.  # noqa: E501


        :return: The dttmstart of this TankData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this TankData.


        :param dttmstart: The dttmstart of this TankData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this TankData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TankData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TankData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TankData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TankData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this TankData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TankData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TankData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TankData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this TankData.  # noqa: E501


        :return: The note of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TankData.


        :param note: The note of this TankData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def sn(self):
        """Gets the sn of this TankData.  # noqa: E501


        :return: The sn of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this TankData.


        :param sn: The sn of this TankData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def supplier(self):
        """Gets the supplier of this TankData.  # noqa: E501


        :return: The supplier of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """Sets the supplier of this TankData.


        :param supplier: The supplier of this TankData.  # noqa: E501
        :type: str
        """

        self._supplier = supplier

    @property
    def typ1(self):
        """Gets the typ1 of this TankData.  # noqa: E501


        :return: The typ1 of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this TankData.


        :param typ1: The typ1 of this TankData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this TankData.  # noqa: E501


        :return: The typ2 of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this TankData.


        :param typ2: The typ2 of this TankData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def volume(self):
        """Gets the volume of this TankData.  # noqa: E501


        :return: The volume of this TankData.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this TankData.


        :param volume: The volume of this TankData.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def systag(self):
        """Gets the systag of this TankData.  # noqa: E501


        :return: The systag of this TankData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TankData.


        :param systag: The systag of this TankData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TankData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TankData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
