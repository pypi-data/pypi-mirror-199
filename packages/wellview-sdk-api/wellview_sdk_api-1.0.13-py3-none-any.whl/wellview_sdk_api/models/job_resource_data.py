# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobResourceData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dayorend': 'float',
        'dayorstart': 'float',
        'des': 'str',
        'dttmavailable': 'datetime',
        'idrec': 'str',
        'idrecjobservicecontract': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'qty': 'float',
        'resid': 'str',
        'source': 'str',
        'status': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'unitlabel': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dayorend': 'dayorend',
        'dayorstart': 'dayorstart',
        'des': 'des',
        'dttmavailable': 'dttmavailable',
        'idrec': 'idrec',
        'idrecjobservicecontract': 'idrecjobservicecontract',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'qty': 'qty',
        'resid': 'resid',
        'source': 'source',
        'status': 'status',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'unitlabel': 'unitlabel',
        'systag': 'systag'
    }

    def __init__(self, com=None, dayorend=None, dayorstart=None, des=None, dttmavailable=None, idrec=None, idrecjobservicecontract=None, idrecparent=None, idwell=None, qty=None, resid=None, source=None, status=None, typ1=None, typ2=None, unitlabel=None, systag=None):  # noqa: E501
        """JobResourceData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dayorend = None
        self._dayorstart = None
        self._des = None
        self._dttmavailable = None
        self._idrec = None
        self._idrecjobservicecontract = None
        self._idrecparent = None
        self._idwell = None
        self._qty = None
        self._resid = None
        self._source = None
        self._status = None
        self._typ1 = None
        self._typ2 = None
        self._unitlabel = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dayorend is not None:
            self.dayorend = dayorend
        if dayorstart is not None:
            self.dayorstart = dayorstart
        if des is not None:
            self.des = des
        if dttmavailable is not None:
            self.dttmavailable = dttmavailable
        if idrec is not None:
            self.idrec = idrec
        if idrecjobservicecontract is not None:
            self.idrecjobservicecontract = idrecjobservicecontract
        self.idrecparent = idrecparent
        self.idwell = idwell
        if qty is not None:
            self.qty = qty
        if resid is not None:
            self.resid = resid
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if unitlabel is not None:
            self.unitlabel = unitlabel
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this JobResourceData.  # noqa: E501


        :return: The com of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this JobResourceData.


        :param com: The com of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dayorend(self):
        """Gets the dayorend of this JobResourceData.  # noqa: E501


        :return: The dayorend of this JobResourceData.  # noqa: E501
        :rtype: float
        """
        return self._dayorend

    @dayorend.setter
    def dayorend(self, dayorend):
        """Sets the dayorend of this JobResourceData.


        :param dayorend: The dayorend of this JobResourceData.  # noqa: E501
        :type: float
        """

        self._dayorend = dayorend

    @property
    def dayorstart(self):
        """Gets the dayorstart of this JobResourceData.  # noqa: E501


        :return: The dayorstart of this JobResourceData.  # noqa: E501
        :rtype: float
        """
        return self._dayorstart

    @dayorstart.setter
    def dayorstart(self, dayorstart):
        """Sets the dayorstart of this JobResourceData.


        :param dayorstart: The dayorstart of this JobResourceData.  # noqa: E501
        :type: float
        """

        self._dayorstart = dayorstart

    @property
    def des(self):
        """Gets the des of this JobResourceData.  # noqa: E501


        :return: The des of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobResourceData.


        :param des: The des of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmavailable(self):
        """Gets the dttmavailable of this JobResourceData.  # noqa: E501


        :return: The dttmavailable of this JobResourceData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmavailable

    @dttmavailable.setter
    def dttmavailable(self, dttmavailable):
        """Sets the dttmavailable of this JobResourceData.


        :param dttmavailable: The dttmavailable of this JobResourceData.  # noqa: E501
        :type: datetime
        """

        self._dttmavailable = dttmavailable

    @property
    def idrec(self):
        """Gets the idrec of this JobResourceData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobResourceData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobservicecontract(self):
        """Gets the idrecjobservicecontract of this JobResourceData.  # noqa: E501


        :return: The idrecjobservicecontract of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobservicecontract

    @idrecjobservicecontract.setter
    def idrecjobservicecontract(self, idrecjobservicecontract):
        """Sets the idrecjobservicecontract of this JobResourceData.


        :param idrecjobservicecontract: The idrecjobservicecontract of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._idrecjobservicecontract = idrecjobservicecontract

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobResourceData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobResourceData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this JobResourceData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this JobResourceData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobResourceData.

        id of well  # noqa: E501

        :param idwell: The idwell of this JobResourceData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def qty(self):
        """Gets the qty of this JobResourceData.  # noqa: E501


        :return: The qty of this JobResourceData.  # noqa: E501
        :rtype: float
        """
        return self._qty

    @qty.setter
    def qty(self, qty):
        """Sets the qty of this JobResourceData.


        :param qty: The qty of this JobResourceData.  # noqa: E501
        :type: float
        """

        self._qty = qty

    @property
    def resid(self):
        """Gets the resid of this JobResourceData.  # noqa: E501


        :return: The resid of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._resid

    @resid.setter
    def resid(self, resid):
        """Sets the resid of this JobResourceData.


        :param resid: The resid of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._resid = resid

    @property
    def source(self):
        """Gets the source of this JobResourceData.  # noqa: E501


        :return: The source of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JobResourceData.


        :param source: The source of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this JobResourceData.  # noqa: E501


        :return: The status of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobResourceData.


        :param status: The status of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def typ1(self):
        """Gets the typ1 of this JobResourceData.  # noqa: E501


        :return: The typ1 of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this JobResourceData.


        :param typ1: The typ1 of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this JobResourceData.  # noqa: E501


        :return: The typ2 of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this JobResourceData.


        :param typ2: The typ2 of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def unitlabel(self):
        """Gets the unitlabel of this JobResourceData.  # noqa: E501


        :return: The unitlabel of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._unitlabel

    @unitlabel.setter
    def unitlabel(self, unitlabel):
        """Sets the unitlabel of this JobResourceData.


        :param unitlabel: The unitlabel of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._unitlabel = unitlabel

    @property
    def systag(self):
        """Gets the systag of this JobResourceData.  # noqa: E501


        :return: The systag of this JobResourceData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobResourceData.


        :param systag: The systag of this JobResourceData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobResourceData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobResourceData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
