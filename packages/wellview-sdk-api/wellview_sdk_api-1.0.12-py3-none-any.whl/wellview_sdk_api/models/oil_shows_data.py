# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OilShowsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'cutcolor': 'str',
        'cutfluorcolor': 'str',
        'cutfluorform': 'str',
        'cutfluorlevel': 'str',
        'cutfluorqft': 'float',
        'cutfluorspeed': 'str',
        'cutfluorstrength': 'str',
        'cutformulation': 'str',
        'cutlevel': 'str',
        'cutspeed': 'str',
        'cutstrength': 'str',
        'densityqft': 'float',
        'depthbtm': 'float',
        'depthtop': 'float',
        'dttm': 'datetime',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'naturalfluorcolor': 'str',
        'naturalfluordes': 'str',
        'naturalfluordist': 'str',
        'naturalfluorlevel': 'str',
        'naturalfluorpercent': 'float',
        'naturalfluorqft': 'float',
        'odor': 'str',
        'refno': 'str',
        'residuecolor': 'str',
        'showorigin': 'str',
        'showquality': 'str',
        'showtyp': 'str',
        'visiblestaincolor': 'str',
        'visiblestaindegree': 'str',
        'visiblestaindist': 'str',
        'visiblestainpercent': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'cutcolor': 'cutcolor',
        'cutfluorcolor': 'cutfluorcolor',
        'cutfluorform': 'cutfluorform',
        'cutfluorlevel': 'cutfluorlevel',
        'cutfluorqft': 'cutfluorqft',
        'cutfluorspeed': 'cutfluorspeed',
        'cutfluorstrength': 'cutfluorstrength',
        'cutformulation': 'cutformulation',
        'cutlevel': 'cutlevel',
        'cutspeed': 'cutspeed',
        'cutstrength': 'cutstrength',
        'densityqft': 'densityqft',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'dttm': 'dttm',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'naturalfluorcolor': 'naturalfluorcolor',
        'naturalfluordes': 'naturalfluordes',
        'naturalfluordist': 'naturalfluordist',
        'naturalfluorlevel': 'naturalfluorlevel',
        'naturalfluorpercent': 'naturalfluorpercent',
        'naturalfluorqft': 'naturalfluorqft',
        'odor': 'odor',
        'refno': 'refno',
        'residuecolor': 'residuecolor',
        'showorigin': 'showorigin',
        'showquality': 'showquality',
        'showtyp': 'showtyp',
        'visiblestaincolor': 'visiblestaincolor',
        'visiblestaindegree': 'visiblestaindegree',
        'visiblestaindist': 'visiblestaindist',
        'visiblestainpercent': 'visiblestainpercent',
        'systag': 'systag'
    }

    def __init__(self, com=None, cutcolor=None, cutfluorcolor=None, cutfluorform=None, cutfluorlevel=None, cutfluorqft=None, cutfluorspeed=None, cutfluorstrength=None, cutformulation=None, cutlevel=None, cutspeed=None, cutstrength=None, densityqft=None, depthbtm=None, depthtop=None, dttm=None, iconname=None, idrec=None, idrecparent=None, idwell=None, naturalfluorcolor=None, naturalfluordes=None, naturalfluordist=None, naturalfluorlevel=None, naturalfluorpercent=None, naturalfluorqft=None, odor=None, refno=None, residuecolor=None, showorigin=None, showquality=None, showtyp=None, visiblestaincolor=None, visiblestaindegree=None, visiblestaindist=None, visiblestainpercent=None, systag=None):  # noqa: E501
        """OilShowsData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._cutcolor = None
        self._cutfluorcolor = None
        self._cutfluorform = None
        self._cutfluorlevel = None
        self._cutfluorqft = None
        self._cutfluorspeed = None
        self._cutfluorstrength = None
        self._cutformulation = None
        self._cutlevel = None
        self._cutspeed = None
        self._cutstrength = None
        self._densityqft = None
        self._depthbtm = None
        self._depthtop = None
        self._dttm = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._naturalfluorcolor = None
        self._naturalfluordes = None
        self._naturalfluordist = None
        self._naturalfluorlevel = None
        self._naturalfluorpercent = None
        self._naturalfluorqft = None
        self._odor = None
        self._refno = None
        self._residuecolor = None
        self._showorigin = None
        self._showquality = None
        self._showtyp = None
        self._visiblestaincolor = None
        self._visiblestaindegree = None
        self._visiblestaindist = None
        self._visiblestainpercent = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if cutcolor is not None:
            self.cutcolor = cutcolor
        if cutfluorcolor is not None:
            self.cutfluorcolor = cutfluorcolor
        if cutfluorform is not None:
            self.cutfluorform = cutfluorform
        if cutfluorlevel is not None:
            self.cutfluorlevel = cutfluorlevel
        if cutfluorqft is not None:
            self.cutfluorqft = cutfluorqft
        if cutfluorspeed is not None:
            self.cutfluorspeed = cutfluorspeed
        if cutfluorstrength is not None:
            self.cutfluorstrength = cutfluorstrength
        if cutformulation is not None:
            self.cutformulation = cutformulation
        if cutlevel is not None:
            self.cutlevel = cutlevel
        if cutspeed is not None:
            self.cutspeed = cutspeed
        if cutstrength is not None:
            self.cutstrength = cutstrength
        if densityqft is not None:
            self.densityqft = densityqft
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if dttm is not None:
            self.dttm = dttm
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if naturalfluorcolor is not None:
            self.naturalfluorcolor = naturalfluorcolor
        if naturalfluordes is not None:
            self.naturalfluordes = naturalfluordes
        if naturalfluordist is not None:
            self.naturalfluordist = naturalfluordist
        if naturalfluorlevel is not None:
            self.naturalfluorlevel = naturalfluorlevel
        if naturalfluorpercent is not None:
            self.naturalfluorpercent = naturalfluorpercent
        if naturalfluorqft is not None:
            self.naturalfluorqft = naturalfluorqft
        if odor is not None:
            self.odor = odor
        if refno is not None:
            self.refno = refno
        if residuecolor is not None:
            self.residuecolor = residuecolor
        if showorigin is not None:
            self.showorigin = showorigin
        if showquality is not None:
            self.showquality = showquality
        if showtyp is not None:
            self.showtyp = showtyp
        if visiblestaincolor is not None:
            self.visiblestaincolor = visiblestaincolor
        if visiblestaindegree is not None:
            self.visiblestaindegree = visiblestaindegree
        if visiblestaindist is not None:
            self.visiblestaindist = visiblestaindist
        if visiblestainpercent is not None:
            self.visiblestainpercent = visiblestainpercent
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this OilShowsData.  # noqa: E501


        :return: The com of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this OilShowsData.


        :param com: The com of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def cutcolor(self):
        """Gets the cutcolor of this OilShowsData.  # noqa: E501


        :return: The cutcolor of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutcolor

    @cutcolor.setter
    def cutcolor(self, cutcolor):
        """Sets the cutcolor of this OilShowsData.


        :param cutcolor: The cutcolor of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutcolor = cutcolor

    @property
    def cutfluorcolor(self):
        """Gets the cutfluorcolor of this OilShowsData.  # noqa: E501


        :return: The cutfluorcolor of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutfluorcolor

    @cutfluorcolor.setter
    def cutfluorcolor(self, cutfluorcolor):
        """Sets the cutfluorcolor of this OilShowsData.


        :param cutfluorcolor: The cutfluorcolor of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutfluorcolor = cutfluorcolor

    @property
    def cutfluorform(self):
        """Gets the cutfluorform of this OilShowsData.  # noqa: E501


        :return: The cutfluorform of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutfluorform

    @cutfluorform.setter
    def cutfluorform(self, cutfluorform):
        """Sets the cutfluorform of this OilShowsData.


        :param cutfluorform: The cutfluorform of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutfluorform = cutfluorform

    @property
    def cutfluorlevel(self):
        """Gets the cutfluorlevel of this OilShowsData.  # noqa: E501


        :return: The cutfluorlevel of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutfluorlevel

    @cutfluorlevel.setter
    def cutfluorlevel(self, cutfluorlevel):
        """Sets the cutfluorlevel of this OilShowsData.


        :param cutfluorlevel: The cutfluorlevel of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutfluorlevel = cutfluorlevel

    @property
    def cutfluorqft(self):
        """Gets the cutfluorqft of this OilShowsData.  # noqa: E501


        :return: The cutfluorqft of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._cutfluorqft

    @cutfluorqft.setter
    def cutfluorqft(self, cutfluorqft):
        """Sets the cutfluorqft of this OilShowsData.


        :param cutfluorqft: The cutfluorqft of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._cutfluorqft = cutfluorqft

    @property
    def cutfluorspeed(self):
        """Gets the cutfluorspeed of this OilShowsData.  # noqa: E501


        :return: The cutfluorspeed of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutfluorspeed

    @cutfluorspeed.setter
    def cutfluorspeed(self, cutfluorspeed):
        """Sets the cutfluorspeed of this OilShowsData.


        :param cutfluorspeed: The cutfluorspeed of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutfluorspeed = cutfluorspeed

    @property
    def cutfluorstrength(self):
        """Gets the cutfluorstrength of this OilShowsData.  # noqa: E501


        :return: The cutfluorstrength of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutfluorstrength

    @cutfluorstrength.setter
    def cutfluorstrength(self, cutfluorstrength):
        """Sets the cutfluorstrength of this OilShowsData.


        :param cutfluorstrength: The cutfluorstrength of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutfluorstrength = cutfluorstrength

    @property
    def cutformulation(self):
        """Gets the cutformulation of this OilShowsData.  # noqa: E501


        :return: The cutformulation of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutformulation

    @cutformulation.setter
    def cutformulation(self, cutformulation):
        """Sets the cutformulation of this OilShowsData.


        :param cutformulation: The cutformulation of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutformulation = cutformulation

    @property
    def cutlevel(self):
        """Gets the cutlevel of this OilShowsData.  # noqa: E501


        :return: The cutlevel of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutlevel

    @cutlevel.setter
    def cutlevel(self, cutlevel):
        """Sets the cutlevel of this OilShowsData.


        :param cutlevel: The cutlevel of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutlevel = cutlevel

    @property
    def cutspeed(self):
        """Gets the cutspeed of this OilShowsData.  # noqa: E501


        :return: The cutspeed of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutspeed

    @cutspeed.setter
    def cutspeed(self, cutspeed):
        """Sets the cutspeed of this OilShowsData.


        :param cutspeed: The cutspeed of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutspeed = cutspeed

    @property
    def cutstrength(self):
        """Gets the cutstrength of this OilShowsData.  # noqa: E501


        :return: The cutstrength of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._cutstrength

    @cutstrength.setter
    def cutstrength(self, cutstrength):
        """Sets the cutstrength of this OilShowsData.


        :param cutstrength: The cutstrength of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._cutstrength = cutstrength

    @property
    def densityqft(self):
        """Gets the densityqft of this OilShowsData.  # noqa: E501


        :return: The densityqft of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._densityqft

    @densityqft.setter
    def densityqft(self, densityqft):
        """Sets the densityqft of this OilShowsData.


        :param densityqft: The densityqft of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._densityqft = densityqft

    @property
    def depthbtm(self):
        """Gets the depthbtm of this OilShowsData.  # noqa: E501


        :return: The depthbtm of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this OilShowsData.


        :param depthbtm: The depthbtm of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this OilShowsData.  # noqa: E501


        :return: The depthtop of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this OilShowsData.


        :param depthtop: The depthtop of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def dttm(self):
        """Gets the dttm of this OilShowsData.  # noqa: E501


        :return: The dttm of this OilShowsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this OilShowsData.


        :param dttm: The dttm of this OilShowsData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def iconname(self):
        """Gets the iconname of this OilShowsData.  # noqa: E501


        :return: The iconname of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this OilShowsData.


        :param iconname: The iconname of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this OilShowsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OilShowsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this OilShowsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this OilShowsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this OilShowsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this OilShowsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OilShowsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this OilShowsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def naturalfluorcolor(self):
        """Gets the naturalfluorcolor of this OilShowsData.  # noqa: E501


        :return: The naturalfluorcolor of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._naturalfluorcolor

    @naturalfluorcolor.setter
    def naturalfluorcolor(self, naturalfluorcolor):
        """Sets the naturalfluorcolor of this OilShowsData.


        :param naturalfluorcolor: The naturalfluorcolor of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._naturalfluorcolor = naturalfluorcolor

    @property
    def naturalfluordes(self):
        """Gets the naturalfluordes of this OilShowsData.  # noqa: E501


        :return: The naturalfluordes of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._naturalfluordes

    @naturalfluordes.setter
    def naturalfluordes(self, naturalfluordes):
        """Sets the naturalfluordes of this OilShowsData.


        :param naturalfluordes: The naturalfluordes of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._naturalfluordes = naturalfluordes

    @property
    def naturalfluordist(self):
        """Gets the naturalfluordist of this OilShowsData.  # noqa: E501


        :return: The naturalfluordist of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._naturalfluordist

    @naturalfluordist.setter
    def naturalfluordist(self, naturalfluordist):
        """Sets the naturalfluordist of this OilShowsData.


        :param naturalfluordist: The naturalfluordist of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._naturalfluordist = naturalfluordist

    @property
    def naturalfluorlevel(self):
        """Gets the naturalfluorlevel of this OilShowsData.  # noqa: E501


        :return: The naturalfluorlevel of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._naturalfluorlevel

    @naturalfluorlevel.setter
    def naturalfluorlevel(self, naturalfluorlevel):
        """Sets the naturalfluorlevel of this OilShowsData.


        :param naturalfluorlevel: The naturalfluorlevel of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._naturalfluorlevel = naturalfluorlevel

    @property
    def naturalfluorpercent(self):
        """Gets the naturalfluorpercent of this OilShowsData.  # noqa: E501


        :return: The naturalfluorpercent of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._naturalfluorpercent

    @naturalfluorpercent.setter
    def naturalfluorpercent(self, naturalfluorpercent):
        """Sets the naturalfluorpercent of this OilShowsData.


        :param naturalfluorpercent: The naturalfluorpercent of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._naturalfluorpercent = naturalfluorpercent

    @property
    def naturalfluorqft(self):
        """Gets the naturalfluorqft of this OilShowsData.  # noqa: E501


        :return: The naturalfluorqft of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._naturalfluorqft

    @naturalfluorqft.setter
    def naturalfluorqft(self, naturalfluorqft):
        """Sets the naturalfluorqft of this OilShowsData.


        :param naturalfluorqft: The naturalfluorqft of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._naturalfluorqft = naturalfluorqft

    @property
    def odor(self):
        """Gets the odor of this OilShowsData.  # noqa: E501


        :return: The odor of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._odor

    @odor.setter
    def odor(self, odor):
        """Sets the odor of this OilShowsData.


        :param odor: The odor of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._odor = odor

    @property
    def refno(self):
        """Gets the refno of this OilShowsData.  # noqa: E501


        :return: The refno of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this OilShowsData.


        :param refno: The refno of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def residuecolor(self):
        """Gets the residuecolor of this OilShowsData.  # noqa: E501


        :return: The residuecolor of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._residuecolor

    @residuecolor.setter
    def residuecolor(self, residuecolor):
        """Sets the residuecolor of this OilShowsData.


        :param residuecolor: The residuecolor of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._residuecolor = residuecolor

    @property
    def showorigin(self):
        """Gets the showorigin of this OilShowsData.  # noqa: E501


        :return: The showorigin of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._showorigin

    @showorigin.setter
    def showorigin(self, showorigin):
        """Sets the showorigin of this OilShowsData.


        :param showorigin: The showorigin of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._showorigin = showorigin

    @property
    def showquality(self):
        """Gets the showquality of this OilShowsData.  # noqa: E501


        :return: The showquality of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._showquality

    @showquality.setter
    def showquality(self, showquality):
        """Sets the showquality of this OilShowsData.


        :param showquality: The showquality of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._showquality = showquality

    @property
    def showtyp(self):
        """Gets the showtyp of this OilShowsData.  # noqa: E501


        :return: The showtyp of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._showtyp

    @showtyp.setter
    def showtyp(self, showtyp):
        """Sets the showtyp of this OilShowsData.


        :param showtyp: The showtyp of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._showtyp = showtyp

    @property
    def visiblestaincolor(self):
        """Gets the visiblestaincolor of this OilShowsData.  # noqa: E501


        :return: The visiblestaincolor of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._visiblestaincolor

    @visiblestaincolor.setter
    def visiblestaincolor(self, visiblestaincolor):
        """Sets the visiblestaincolor of this OilShowsData.


        :param visiblestaincolor: The visiblestaincolor of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._visiblestaincolor = visiblestaincolor

    @property
    def visiblestaindegree(self):
        """Gets the visiblestaindegree of this OilShowsData.  # noqa: E501


        :return: The visiblestaindegree of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._visiblestaindegree

    @visiblestaindegree.setter
    def visiblestaindegree(self, visiblestaindegree):
        """Sets the visiblestaindegree of this OilShowsData.


        :param visiblestaindegree: The visiblestaindegree of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._visiblestaindegree = visiblestaindegree

    @property
    def visiblestaindist(self):
        """Gets the visiblestaindist of this OilShowsData.  # noqa: E501


        :return: The visiblestaindist of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._visiblestaindist

    @visiblestaindist.setter
    def visiblestaindist(self, visiblestaindist):
        """Sets the visiblestaindist of this OilShowsData.


        :param visiblestaindist: The visiblestaindist of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._visiblestaindist = visiblestaindist

    @property
    def visiblestainpercent(self):
        """Gets the visiblestainpercent of this OilShowsData.  # noqa: E501


        :return: The visiblestainpercent of this OilShowsData.  # noqa: E501
        :rtype: float
        """
        return self._visiblestainpercent

    @visiblestainpercent.setter
    def visiblestainpercent(self, visiblestainpercent):
        """Sets the visiblestainpercent of this OilShowsData.


        :param visiblestainpercent: The visiblestainpercent of this OilShowsData.  # noqa: E501
        :type: float
        """

        self._visiblestainpercent = visiblestainpercent

    @property
    def systag(self):
        """Gets the systag of this OilShowsData.  # noqa: E501


        :return: The systag of this OilShowsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OilShowsData.


        :param systag: The systag of this OilShowsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OilShowsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OilShowsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
