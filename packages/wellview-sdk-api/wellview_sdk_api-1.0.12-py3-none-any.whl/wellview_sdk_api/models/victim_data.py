# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VictimData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'age': 'int',
        'com': 'str',
        'company': 'str',
        'durationlostwork': 'float',
        'durationrestrictedwork': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'incidentresult': 'str',
        'occupation': 'str',
        'permanentdisability': 'bool',
        'sex': 'str',
        'typemploy': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'victida': 'str',
        'victidb': 'str',
        'victname': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'age': 'age',
        'com': 'com',
        'company': 'company',
        'durationlostwork': 'durationlostwork',
        'durationrestrictedwork': 'durationrestrictedwork',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'incidentresult': 'incidentresult',
        'occupation': 'occupation',
        'permanentdisability': 'permanentdisability',
        'sex': 'sex',
        'typemploy': 'typemploy',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'victida': 'victida',
        'victidb': 'victidb',
        'victname': 'victname',
        'systag': 'systag'
    }

    def __init__(self, age=None, com=None, company=None, durationlostwork=None, durationrestrictedwork=None, idrec=None, idrecparent=None, idwell=None, incidentresult=None, occupation=None, permanentdisability=None, sex=None, typemploy=None, usertxt1=None, usertxt2=None, victida=None, victidb=None, victname=None, systag=None):  # noqa: E501
        """VictimData - a model defined in Swagger"""  # noqa: E501
        self._age = None
        self._com = None
        self._company = None
        self._durationlostwork = None
        self._durationrestrictedwork = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._incidentresult = None
        self._occupation = None
        self._permanentdisability = None
        self._sex = None
        self._typemploy = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._victida = None
        self._victidb = None
        self._victname = None
        self._systag = None
        self.discriminator = None
        if age is not None:
            self.age = age
        if com is not None:
            self.com = com
        if company is not None:
            self.company = company
        if durationlostwork is not None:
            self.durationlostwork = durationlostwork
        if durationrestrictedwork is not None:
            self.durationrestrictedwork = durationrestrictedwork
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if incidentresult is not None:
            self.incidentresult = incidentresult
        if occupation is not None:
            self.occupation = occupation
        if permanentdisability is not None:
            self.permanentdisability = permanentdisability
        if sex is not None:
            self.sex = sex
        if typemploy is not None:
            self.typemploy = typemploy
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if victida is not None:
            self.victida = victida
        if victidb is not None:
            self.victidb = victidb
        if victname is not None:
            self.victname = victname
        if systag is not None:
            self.systag = systag

    @property
    def age(self):
        """Gets the age of this VictimData.  # noqa: E501


        :return: The age of this VictimData.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this VictimData.


        :param age: The age of this VictimData.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def com(self):
        """Gets the com of this VictimData.  # noqa: E501


        :return: The com of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this VictimData.


        :param com: The com of this VictimData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def company(self):
        """Gets the company of this VictimData.  # noqa: E501


        :return: The company of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this VictimData.


        :param company: The company of this VictimData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def durationlostwork(self):
        """Gets the durationlostwork of this VictimData.  # noqa: E501


        :return: The durationlostwork of this VictimData.  # noqa: E501
        :rtype: float
        """
        return self._durationlostwork

    @durationlostwork.setter
    def durationlostwork(self, durationlostwork):
        """Sets the durationlostwork of this VictimData.


        :param durationlostwork: The durationlostwork of this VictimData.  # noqa: E501
        :type: float
        """

        self._durationlostwork = durationlostwork

    @property
    def durationrestrictedwork(self):
        """Gets the durationrestrictedwork of this VictimData.  # noqa: E501


        :return: The durationrestrictedwork of this VictimData.  # noqa: E501
        :rtype: float
        """
        return self._durationrestrictedwork

    @durationrestrictedwork.setter
    def durationrestrictedwork(self, durationrestrictedwork):
        """Sets the durationrestrictedwork of this VictimData.


        :param durationrestrictedwork: The durationrestrictedwork of this VictimData.  # noqa: E501
        :type: float
        """

        self._durationrestrictedwork = durationrestrictedwork

    @property
    def idrec(self):
        """Gets the idrec of this VictimData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this VictimData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this VictimData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this VictimData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this VictimData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this VictimData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this VictimData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this VictimData.

        id of well  # noqa: E501

        :param idwell: The idwell of this VictimData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def incidentresult(self):
        """Gets the incidentresult of this VictimData.  # noqa: E501


        :return: The incidentresult of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._incidentresult

    @incidentresult.setter
    def incidentresult(self, incidentresult):
        """Sets the incidentresult of this VictimData.


        :param incidentresult: The incidentresult of this VictimData.  # noqa: E501
        :type: str
        """

        self._incidentresult = incidentresult

    @property
    def occupation(self):
        """Gets the occupation of this VictimData.  # noqa: E501


        :return: The occupation of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._occupation

    @occupation.setter
    def occupation(self, occupation):
        """Sets the occupation of this VictimData.


        :param occupation: The occupation of this VictimData.  # noqa: E501
        :type: str
        """

        self._occupation = occupation

    @property
    def permanentdisability(self):
        """Gets the permanentdisability of this VictimData.  # noqa: E501


        :return: The permanentdisability of this VictimData.  # noqa: E501
        :rtype: bool
        """
        return self._permanentdisability

    @permanentdisability.setter
    def permanentdisability(self, permanentdisability):
        """Sets the permanentdisability of this VictimData.


        :param permanentdisability: The permanentdisability of this VictimData.  # noqa: E501
        :type: bool
        """

        self._permanentdisability = permanentdisability

    @property
    def sex(self):
        """Gets the sex of this VictimData.  # noqa: E501


        :return: The sex of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex):
        """Sets the sex of this VictimData.


        :param sex: The sex of this VictimData.  # noqa: E501
        :type: str
        """

        self._sex = sex

    @property
    def typemploy(self):
        """Gets the typemploy of this VictimData.  # noqa: E501


        :return: The typemploy of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._typemploy

    @typemploy.setter
    def typemploy(self, typemploy):
        """Sets the typemploy of this VictimData.


        :param typemploy: The typemploy of this VictimData.  # noqa: E501
        :type: str
        """

        self._typemploy = typemploy

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this VictimData.  # noqa: E501


        :return: The usertxt1 of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this VictimData.


        :param usertxt1: The usertxt1 of this VictimData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this VictimData.  # noqa: E501


        :return: The usertxt2 of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this VictimData.


        :param usertxt2: The usertxt2 of this VictimData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def victida(self):
        """Gets the victida of this VictimData.  # noqa: E501


        :return: The victida of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._victida

    @victida.setter
    def victida(self, victida):
        """Sets the victida of this VictimData.


        :param victida: The victida of this VictimData.  # noqa: E501
        :type: str
        """

        self._victida = victida

    @property
    def victidb(self):
        """Gets the victidb of this VictimData.  # noqa: E501


        :return: The victidb of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._victidb

    @victidb.setter
    def victidb(self, victidb):
        """Sets the victidb of this VictimData.


        :param victidb: The victidb of this VictimData.  # noqa: E501
        :type: str
        """

        self._victidb = victidb

    @property
    def victname(self):
        """Gets the victname of this VictimData.  # noqa: E501


        :return: The victname of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._victname

    @victname.setter
    def victname(self, victname):
        """Sets the victname of this VictimData.


        :param victname: The victname of this VictimData.  # noqa: E501
        :type: str
        """

        self._victname = victname

    @property
    def systag(self):
        """Gets the systag of this VictimData.  # noqa: E501


        :return: The systag of this VictimData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this VictimData.


        :param systag: The systag of this VictimData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VictimData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VictimData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
