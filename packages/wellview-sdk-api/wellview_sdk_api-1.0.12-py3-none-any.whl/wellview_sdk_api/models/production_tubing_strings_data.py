# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductionTubingStringsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'centralizersstandoffavg': 'float',
        'centralizersstandoffmin': 'float',
        'com': 'str',
        'contractor': 'str',
        'depthbtm': 'float',
        'depthcutpull': 'float',
        'des': 'str',
        'dttmcutpull': 'datetime',
        'dttmonbottom': 'datetime',
        'dttmoutofhole': 'datetime',
        'dttmpickup': 'datetime',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idrecjobpull': 'str',
        'idrecjobrun': 'str',
        'idrecstring': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'latposition': 'str',
        'notecutpull': 'str',
        'operatingpresslimit': 'float',
        'proposedcutpull': 'bool',
        'proposedpull': 'bool',
        'proposedrun': 'bool',
        'pullreason': 'str',
        'pullreasondetail': 'str',
        'reasoncutpull': 'str',
        'stringwtdown': 'float',
        'stringwtrotating': 'float',
        'stringwtup': 'float',
        'tension': 'float',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'volumeshoetrack': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'centralizersstandoffavg': 'centralizersstandoffavg',
        'centralizersstandoffmin': 'centralizersstandoffmin',
        'com': 'com',
        'contractor': 'contractor',
        'depthbtm': 'depthbtm',
        'depthcutpull': 'depthcutpull',
        'des': 'des',
        'dttmcutpull': 'dttmcutpull',
        'dttmonbottom': 'dttmonbottom',
        'dttmoutofhole': 'dttmoutofhole',
        'dttmpickup': 'dttmpickup',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idrecjobpull': 'idrecjobpull',
        'idrecjobrun': 'idrecjobrun',
        'idrecstring': 'idrecstring',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'latposition': 'latposition',
        'notecutpull': 'notecutpull',
        'operatingpresslimit': 'operatingpresslimit',
        'proposedcutpull': 'proposedcutpull',
        'proposedpull': 'proposedpull',
        'proposedrun': 'proposedrun',
        'pullreason': 'pullreason',
        'pullreasondetail': 'pullreasondetail',
        'reasoncutpull': 'reasoncutpull',
        'stringwtdown': 'stringwtdown',
        'stringwtrotating': 'stringwtrotating',
        'stringwtup': 'stringwtup',
        'tension': 'tension',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'volumeshoetrack': 'volumeshoetrack',
        'systag': 'systag'
    }

    def __init__(self, centralizersstandoffavg=None, centralizersstandoffmin=None, com=None, contractor=None, depthbtm=None, depthcutpull=None, des=None, dttmcutpull=None, dttmonbottom=None, dttmoutofhole=None, dttmpickup=None, dttmpull=None, dttmrun=None, idrec=None, idrecjobpull=None, idrecjobrun=None, idrecstring=None, idrecwellbore=None, idwell=None, latposition=None, notecutpull=None, operatingpresslimit=None, proposedcutpull=None, proposedpull=None, proposedrun=None, pullreason=None, pullreasondetail=None, reasoncutpull=None, stringwtdown=None, stringwtrotating=None, stringwtup=None, tension=None, usertxt1=None, usertxt2=None, usertxt3=None, volumeshoetrack=None, systag=None):  # noqa: E501
        """ProductionTubingStringsData - a model defined in Swagger"""  # noqa: E501
        self._centralizersstandoffavg = None
        self._centralizersstandoffmin = None
        self._com = None
        self._contractor = None
        self._depthbtm = None
        self._depthcutpull = None
        self._des = None
        self._dttmcutpull = None
        self._dttmonbottom = None
        self._dttmoutofhole = None
        self._dttmpickup = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idrecjobpull = None
        self._idrecjobrun = None
        self._idrecstring = None
        self._idrecwellbore = None
        self._idwell = None
        self._latposition = None
        self._notecutpull = None
        self._operatingpresslimit = None
        self._proposedcutpull = None
        self._proposedpull = None
        self._proposedrun = None
        self._pullreason = None
        self._pullreasondetail = None
        self._reasoncutpull = None
        self._stringwtdown = None
        self._stringwtrotating = None
        self._stringwtup = None
        self._tension = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._volumeshoetrack = None
        self._systag = None
        self.discriminator = None
        if centralizersstandoffavg is not None:
            self.centralizersstandoffavg = centralizersstandoffavg
        if centralizersstandoffmin is not None:
            self.centralizersstandoffmin = centralizersstandoffmin
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthcutpull is not None:
            self.depthcutpull = depthcutpull
        if des is not None:
            self.des = des
        if dttmcutpull is not None:
            self.dttmcutpull = dttmcutpull
        if dttmonbottom is not None:
            self.dttmonbottom = dttmonbottom
        if dttmoutofhole is not None:
            self.dttmoutofhole = dttmoutofhole
        if dttmpickup is not None:
            self.dttmpickup = dttmpickup
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        if idrecjobpull is not None:
            self.idrecjobpull = idrecjobpull
        if idrecjobrun is not None:
            self.idrecjobrun = idrecjobrun
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if latposition is not None:
            self.latposition = latposition
        if notecutpull is not None:
            self.notecutpull = notecutpull
        if operatingpresslimit is not None:
            self.operatingpresslimit = operatingpresslimit
        if proposedcutpull is not None:
            self.proposedcutpull = proposedcutpull
        if proposedpull is not None:
            self.proposedpull = proposedpull
        if proposedrun is not None:
            self.proposedrun = proposedrun
        if pullreason is not None:
            self.pullreason = pullreason
        if pullreasondetail is not None:
            self.pullreasondetail = pullreasondetail
        if reasoncutpull is not None:
            self.reasoncutpull = reasoncutpull
        if stringwtdown is not None:
            self.stringwtdown = stringwtdown
        if stringwtrotating is not None:
            self.stringwtrotating = stringwtrotating
        if stringwtup is not None:
            self.stringwtup = stringwtup
        if tension is not None:
            self.tension = tension
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if volumeshoetrack is not None:
            self.volumeshoetrack = volumeshoetrack
        if systag is not None:
            self.systag = systag

    @property
    def centralizersstandoffavg(self):
        """Gets the centralizersstandoffavg of this ProductionTubingStringsData.  # noqa: E501


        :return: The centralizersstandoffavg of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._centralizersstandoffavg

    @centralizersstandoffavg.setter
    def centralizersstandoffavg(self, centralizersstandoffavg):
        """Sets the centralizersstandoffavg of this ProductionTubingStringsData.


        :param centralizersstandoffavg: The centralizersstandoffavg of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._centralizersstandoffavg = centralizersstandoffavg

    @property
    def centralizersstandoffmin(self):
        """Gets the centralizersstandoffmin of this ProductionTubingStringsData.  # noqa: E501


        :return: The centralizersstandoffmin of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._centralizersstandoffmin

    @centralizersstandoffmin.setter
    def centralizersstandoffmin(self, centralizersstandoffmin):
        """Sets the centralizersstandoffmin of this ProductionTubingStringsData.


        :param centralizersstandoffmin: The centralizersstandoffmin of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._centralizersstandoffmin = centralizersstandoffmin

    @property
    def com(self):
        """Gets the com of this ProductionTubingStringsData.  # noqa: E501


        :return: The com of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProductionTubingStringsData.


        :param com: The com of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this ProductionTubingStringsData.  # noqa: E501


        :return: The contractor of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this ProductionTubingStringsData.


        :param contractor: The contractor of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def depthbtm(self):
        """Gets the depthbtm of this ProductionTubingStringsData.  # noqa: E501


        :return: The depthbtm of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this ProductionTubingStringsData.


        :param depthbtm: The depthbtm of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthcutpull(self):
        """Gets the depthcutpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The depthcutpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._depthcutpull

    @depthcutpull.setter
    def depthcutpull(self, depthcutpull):
        """Sets the depthcutpull of this ProductionTubingStringsData.


        :param depthcutpull: The depthcutpull of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._depthcutpull = depthcutpull

    @property
    def des(self):
        """Gets the des of this ProductionTubingStringsData.  # noqa: E501


        :return: The des of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this ProductionTubingStringsData.


        :param des: The des of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmcutpull(self):
        """Gets the dttmcutpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The dttmcutpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmcutpull

    @dttmcutpull.setter
    def dttmcutpull(self, dttmcutpull):
        """Sets the dttmcutpull of this ProductionTubingStringsData.


        :param dttmcutpull: The dttmcutpull of this ProductionTubingStringsData.  # noqa: E501
        :type: datetime
        """

        self._dttmcutpull = dttmcutpull

    @property
    def dttmonbottom(self):
        """Gets the dttmonbottom of this ProductionTubingStringsData.  # noqa: E501


        :return: The dttmonbottom of this ProductionTubingStringsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmonbottom

    @dttmonbottom.setter
    def dttmonbottom(self, dttmonbottom):
        """Sets the dttmonbottom of this ProductionTubingStringsData.


        :param dttmonbottom: The dttmonbottom of this ProductionTubingStringsData.  # noqa: E501
        :type: datetime
        """

        self._dttmonbottom = dttmonbottom

    @property
    def dttmoutofhole(self):
        """Gets the dttmoutofhole of this ProductionTubingStringsData.  # noqa: E501


        :return: The dttmoutofhole of this ProductionTubingStringsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmoutofhole

    @dttmoutofhole.setter
    def dttmoutofhole(self, dttmoutofhole):
        """Sets the dttmoutofhole of this ProductionTubingStringsData.


        :param dttmoutofhole: The dttmoutofhole of this ProductionTubingStringsData.  # noqa: E501
        :type: datetime
        """

        self._dttmoutofhole = dttmoutofhole

    @property
    def dttmpickup(self):
        """Gets the dttmpickup of this ProductionTubingStringsData.  # noqa: E501


        :return: The dttmpickup of this ProductionTubingStringsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpickup

    @dttmpickup.setter
    def dttmpickup(self, dttmpickup):
        """Sets the dttmpickup of this ProductionTubingStringsData.


        :param dttmpickup: The dttmpickup of this ProductionTubingStringsData.  # noqa: E501
        :type: datetime
        """

        self._dttmpickup = dttmpickup

    @property
    def dttmpull(self):
        """Gets the dttmpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The dttmpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this ProductionTubingStringsData.


        :param dttmpull: The dttmpull of this ProductionTubingStringsData.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this ProductionTubingStringsData.  # noqa: E501


        :return: The dttmrun of this ProductionTubingStringsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this ProductionTubingStringsData.


        :param dttmrun: The dttmrun of this ProductionTubingStringsData.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this ProductionTubingStringsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProductionTubingStringsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobpull(self):
        """Gets the idrecjobpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The idrecjobpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobpull

    @idrecjobpull.setter
    def idrecjobpull(self, idrecjobpull):
        """Sets the idrecjobpull of this ProductionTubingStringsData.


        :param idrecjobpull: The idrecjobpull of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._idrecjobpull = idrecjobpull

    @property
    def idrecjobrun(self):
        """Gets the idrecjobrun of this ProductionTubingStringsData.  # noqa: E501


        :return: The idrecjobrun of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobrun

    @idrecjobrun.setter
    def idrecjobrun(self, idrecjobrun):
        """Sets the idrecjobrun of this ProductionTubingStringsData.


        :param idrecjobrun: The idrecjobrun of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._idrecjobrun = idrecjobrun

    @property
    def idrecstring(self):
        """Gets the idrecstring of this ProductionTubingStringsData.  # noqa: E501


        :return: The idrecstring of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this ProductionTubingStringsData.


        :param idrecstring: The idrecstring of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this ProductionTubingStringsData.  # noqa: E501


        :return: The idrecwellbore of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this ProductionTubingStringsData.


        :param idrecwellbore: The idrecwellbore of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this ProductionTubingStringsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProductionTubingStringsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def latposition(self):
        """Gets the latposition of this ProductionTubingStringsData.  # noqa: E501


        :return: The latposition of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._latposition

    @latposition.setter
    def latposition(self, latposition):
        """Sets the latposition of this ProductionTubingStringsData.


        :param latposition: The latposition of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._latposition = latposition

    @property
    def notecutpull(self):
        """Gets the notecutpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The notecutpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._notecutpull

    @notecutpull.setter
    def notecutpull(self, notecutpull):
        """Sets the notecutpull of this ProductionTubingStringsData.


        :param notecutpull: The notecutpull of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._notecutpull = notecutpull

    @property
    def operatingpresslimit(self):
        """Gets the operatingpresslimit of this ProductionTubingStringsData.  # noqa: E501


        :return: The operatingpresslimit of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._operatingpresslimit

    @operatingpresslimit.setter
    def operatingpresslimit(self, operatingpresslimit):
        """Sets the operatingpresslimit of this ProductionTubingStringsData.


        :param operatingpresslimit: The operatingpresslimit of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._operatingpresslimit = operatingpresslimit

    @property
    def proposedcutpull(self):
        """Gets the proposedcutpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The proposedcutpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: bool
        """
        return self._proposedcutpull

    @proposedcutpull.setter
    def proposedcutpull(self, proposedcutpull):
        """Sets the proposedcutpull of this ProductionTubingStringsData.


        :param proposedcutpull: The proposedcutpull of this ProductionTubingStringsData.  # noqa: E501
        :type: bool
        """

        self._proposedcutpull = proposedcutpull

    @property
    def proposedpull(self):
        """Gets the proposedpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The proposedpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: bool
        """
        return self._proposedpull

    @proposedpull.setter
    def proposedpull(self, proposedpull):
        """Sets the proposedpull of this ProductionTubingStringsData.


        :param proposedpull: The proposedpull of this ProductionTubingStringsData.  # noqa: E501
        :type: bool
        """

        self._proposedpull = proposedpull

    @property
    def proposedrun(self):
        """Gets the proposedrun of this ProductionTubingStringsData.  # noqa: E501


        :return: The proposedrun of this ProductionTubingStringsData.  # noqa: E501
        :rtype: bool
        """
        return self._proposedrun

    @proposedrun.setter
    def proposedrun(self, proposedrun):
        """Sets the proposedrun of this ProductionTubingStringsData.


        :param proposedrun: The proposedrun of this ProductionTubingStringsData.  # noqa: E501
        :type: bool
        """

        self._proposedrun = proposedrun

    @property
    def pullreason(self):
        """Gets the pullreason of this ProductionTubingStringsData.  # noqa: E501


        :return: The pullreason of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this ProductionTubingStringsData.


        :param pullreason: The pullreason of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def pullreasondetail(self):
        """Gets the pullreasondetail of this ProductionTubingStringsData.  # noqa: E501


        :return: The pullreasondetail of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._pullreasondetail

    @pullreasondetail.setter
    def pullreasondetail(self, pullreasondetail):
        """Sets the pullreasondetail of this ProductionTubingStringsData.


        :param pullreasondetail: The pullreasondetail of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._pullreasondetail = pullreasondetail

    @property
    def reasoncutpull(self):
        """Gets the reasoncutpull of this ProductionTubingStringsData.  # noqa: E501


        :return: The reasoncutpull of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._reasoncutpull

    @reasoncutpull.setter
    def reasoncutpull(self, reasoncutpull):
        """Sets the reasoncutpull of this ProductionTubingStringsData.


        :param reasoncutpull: The reasoncutpull of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._reasoncutpull = reasoncutpull

    @property
    def stringwtdown(self):
        """Gets the stringwtdown of this ProductionTubingStringsData.  # noqa: E501


        :return: The stringwtdown of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._stringwtdown

    @stringwtdown.setter
    def stringwtdown(self, stringwtdown):
        """Sets the stringwtdown of this ProductionTubingStringsData.


        :param stringwtdown: The stringwtdown of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._stringwtdown = stringwtdown

    @property
    def stringwtrotating(self):
        """Gets the stringwtrotating of this ProductionTubingStringsData.  # noqa: E501


        :return: The stringwtrotating of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._stringwtrotating

    @stringwtrotating.setter
    def stringwtrotating(self, stringwtrotating):
        """Sets the stringwtrotating of this ProductionTubingStringsData.


        :param stringwtrotating: The stringwtrotating of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._stringwtrotating = stringwtrotating

    @property
    def stringwtup(self):
        """Gets the stringwtup of this ProductionTubingStringsData.  # noqa: E501


        :return: The stringwtup of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._stringwtup

    @stringwtup.setter
    def stringwtup(self, stringwtup):
        """Sets the stringwtup of this ProductionTubingStringsData.


        :param stringwtup: The stringwtup of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._stringwtup = stringwtup

    @property
    def tension(self):
        """Gets the tension of this ProductionTubingStringsData.  # noqa: E501


        :return: The tension of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._tension

    @tension.setter
    def tension(self, tension):
        """Sets the tension of this ProductionTubingStringsData.


        :param tension: The tension of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._tension = tension

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this ProductionTubingStringsData.  # noqa: E501


        :return: The usertxt1 of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this ProductionTubingStringsData.


        :param usertxt1: The usertxt1 of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this ProductionTubingStringsData.  # noqa: E501


        :return: The usertxt2 of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this ProductionTubingStringsData.


        :param usertxt2: The usertxt2 of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this ProductionTubingStringsData.  # noqa: E501


        :return: The usertxt3 of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this ProductionTubingStringsData.


        :param usertxt3: The usertxt3 of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def volumeshoetrack(self):
        """Gets the volumeshoetrack of this ProductionTubingStringsData.  # noqa: E501


        :return: The volumeshoetrack of this ProductionTubingStringsData.  # noqa: E501
        :rtype: float
        """
        return self._volumeshoetrack

    @volumeshoetrack.setter
    def volumeshoetrack(self, volumeshoetrack):
        """Sets the volumeshoetrack of this ProductionTubingStringsData.


        :param volumeshoetrack: The volumeshoetrack of this ProductionTubingStringsData.  # noqa: E501
        :type: float
        """

        self._volumeshoetrack = volumeshoetrack

    @property
    def systag(self):
        """Gets the systag of this ProductionTubingStringsData.  # noqa: E501


        :return: The systag of this ProductionTubingStringsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProductionTubingStringsData.


        :param systag: The systag of this ProductionTubingStringsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductionTubingStringsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionTubingStringsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
