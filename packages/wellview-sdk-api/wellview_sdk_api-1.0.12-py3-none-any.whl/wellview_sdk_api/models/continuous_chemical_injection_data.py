# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContinuousChemicalInjectionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'amountdesign': 'float',
        'com': 'str',
        'cost': 'float',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idrecstring': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'injectionloc': 'str',
        'productname': 'str',
        'proposed': 'bool',
        'purpose': 'str',
        'rateavg': 'float',
        'ratedesign': 'float',
        'recurfrequency': 'float',
        'recurnote': 'str',
        'typ': 'str',
        'unitlabel': 'str',
        'vendor': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'amountdesign': 'amountdesign',
        'com': 'com',
        'cost': 'cost',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idrecstring': 'idrecstring',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'injectionloc': 'injectionloc',
        'productname': 'productname',
        'proposed': 'proposed',
        'purpose': 'purpose',
        'rateavg': 'rateavg',
        'ratedesign': 'ratedesign',
        'recurfrequency': 'recurfrequency',
        'recurnote': 'recurnote',
        'typ': 'typ',
        'unitlabel': 'unitlabel',
        'vendor': 'vendor',
        'systag': 'systag'
    }

    def __init__(self, amount=None, amountdesign=None, com=None, cost=None, dttmend=None, dttmstart=None, idrec=None, idrecstring=None, idrecwellbore=None, idwell=None, injectionloc=None, productname=None, proposed=None, purpose=None, rateavg=None, ratedesign=None, recurfrequency=None, recurnote=None, typ=None, unitlabel=None, vendor=None, systag=None):  # noqa: E501
        """ContinuousChemicalInjectionData - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._amountdesign = None
        self._com = None
        self._cost = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idrecstring = None
        self._idrecwellbore = None
        self._idwell = None
        self._injectionloc = None
        self._productname = None
        self._proposed = None
        self._purpose = None
        self._rateavg = None
        self._ratedesign = None
        self._recurfrequency = None
        self._recurnote = None
        self._typ = None
        self._unitlabel = None
        self._vendor = None
        self._systag = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if amountdesign is not None:
            self.amountdesign = amountdesign
        if com is not None:
            self.com = com
        if cost is not None:
            self.cost = cost
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if injectionloc is not None:
            self.injectionloc = injectionloc
        if productname is not None:
            self.productname = productname
        if proposed is not None:
            self.proposed = proposed
        if purpose is not None:
            self.purpose = purpose
        if rateavg is not None:
            self.rateavg = rateavg
        if ratedesign is not None:
            self.ratedesign = ratedesign
        if recurfrequency is not None:
            self.recurfrequency = recurfrequency
        if recurnote is not None:
            self.recurnote = recurnote
        if typ is not None:
            self.typ = typ
        if unitlabel is not None:
            self.unitlabel = unitlabel
        if vendor is not None:
            self.vendor = vendor
        if systag is not None:
            self.systag = systag

    @property
    def amount(self):
        """Gets the amount of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The amount of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ContinuousChemicalInjectionData.


        :param amount: The amount of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amountdesign(self):
        """Gets the amountdesign of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The amountdesign of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: float
        """
        return self._amountdesign

    @amountdesign.setter
    def amountdesign(self, amountdesign):
        """Sets the amountdesign of this ContinuousChemicalInjectionData.


        :param amountdesign: The amountdesign of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: float
        """

        self._amountdesign = amountdesign

    @property
    def com(self):
        """Gets the com of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The com of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ContinuousChemicalInjectionData.


        :param com: The com of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def cost(self):
        """Gets the cost of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The cost of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ContinuousChemicalInjectionData.


        :param cost: The cost of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def dttmend(self):
        """Gets the dttmend of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The dttmend of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this ContinuousChemicalInjectionData.


        :param dttmend: The dttmend of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The dttmstart of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this ContinuousChemicalInjectionData.


        :param dttmstart: The dttmstart of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this ContinuousChemicalInjectionData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ContinuousChemicalInjectionData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecstring(self):
        """Gets the idrecstring of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The idrecstring of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this ContinuousChemicalInjectionData.


        :param idrecstring: The idrecstring of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The idrecwellbore of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this ContinuousChemicalInjectionData.


        :param idrecwellbore: The idrecwellbore of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this ContinuousChemicalInjectionData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ContinuousChemicalInjectionData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def injectionloc(self):
        """Gets the injectionloc of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The injectionloc of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._injectionloc

    @injectionloc.setter
    def injectionloc(self, injectionloc):
        """Sets the injectionloc of this ContinuousChemicalInjectionData.


        :param injectionloc: The injectionloc of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._injectionloc = injectionloc

    @property
    def productname(self):
        """Gets the productname of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The productname of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._productname

    @productname.setter
    def productname(self, productname):
        """Sets the productname of this ContinuousChemicalInjectionData.


        :param productname: The productname of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._productname = productname

    @property
    def proposed(self):
        """Gets the proposed of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The proposed of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this ContinuousChemicalInjectionData.


        :param proposed: The proposed of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def purpose(self):
        """Gets the purpose of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The purpose of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ContinuousChemicalInjectionData.


        :param purpose: The purpose of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def rateavg(self):
        """Gets the rateavg of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The rateavg of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: float
        """
        return self._rateavg

    @rateavg.setter
    def rateavg(self, rateavg):
        """Sets the rateavg of this ContinuousChemicalInjectionData.


        :param rateavg: The rateavg of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: float
        """

        self._rateavg = rateavg

    @property
    def ratedesign(self):
        """Gets the ratedesign of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The ratedesign of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: float
        """
        return self._ratedesign

    @ratedesign.setter
    def ratedesign(self, ratedesign):
        """Sets the ratedesign of this ContinuousChemicalInjectionData.


        :param ratedesign: The ratedesign of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: float
        """

        self._ratedesign = ratedesign

    @property
    def recurfrequency(self):
        """Gets the recurfrequency of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The recurfrequency of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: float
        """
        return self._recurfrequency

    @recurfrequency.setter
    def recurfrequency(self, recurfrequency):
        """Sets the recurfrequency of this ContinuousChemicalInjectionData.


        :param recurfrequency: The recurfrequency of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: float
        """

        self._recurfrequency = recurfrequency

    @property
    def recurnote(self):
        """Gets the recurnote of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The recurnote of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._recurnote

    @recurnote.setter
    def recurnote(self, recurnote):
        """Sets the recurnote of this ContinuousChemicalInjectionData.


        :param recurnote: The recurnote of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._recurnote = recurnote

    @property
    def typ(self):
        """Gets the typ of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The typ of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this ContinuousChemicalInjectionData.


        :param typ: The typ of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def unitlabel(self):
        """Gets the unitlabel of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The unitlabel of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._unitlabel

    @unitlabel.setter
    def unitlabel(self, unitlabel):
        """Sets the unitlabel of this ContinuousChemicalInjectionData.


        :param unitlabel: The unitlabel of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._unitlabel = unitlabel

    @property
    def vendor(self):
        """Gets the vendor of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The vendor of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ContinuousChemicalInjectionData.


        :param vendor: The vendor of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def systag(self):
        """Gets the systag of this ContinuousChemicalInjectionData.  # noqa: E501


        :return: The systag of this ContinuousChemicalInjectionData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ContinuousChemicalInjectionData.


        :param systag: The systag of this ContinuousChemicalInjectionData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContinuousChemicalInjectionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContinuousChemicalInjectionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
