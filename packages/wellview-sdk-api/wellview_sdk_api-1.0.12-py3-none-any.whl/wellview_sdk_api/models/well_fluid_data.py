# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellFluidData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actiontyp': 'str',
        'bsw': 'float',
        'density': 'float',
        'fluidtyp': 'str',
        'fromwell': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'nonrecov': 'float',
        'note': 'str',
        'purpose': 'str',
        'sandcut': 'float',
        'towell': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'actiontyp': 'actiontyp',
        'bsw': 'bsw',
        'density': 'density',
        'fluidtyp': 'fluidtyp',
        'fromwell': 'fromwell',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'nonrecov': 'nonrecov',
        'note': 'note',
        'purpose': 'purpose',
        'sandcut': 'sandcut',
        'towell': 'towell',
        'systag': 'systag'
    }

    def __init__(self, actiontyp=None, bsw=None, density=None, fluidtyp=None, fromwell=None, idrec=None, idrecparent=None, idreczonecompletion=None, idwell=None, nonrecov=None, note=None, purpose=None, sandcut=None, towell=None, systag=None):  # noqa: E501
        """WellFluidData - a model defined in Swagger"""  # noqa: E501
        self._actiontyp = None
        self._bsw = None
        self._density = None
        self._fluidtyp = None
        self._fromwell = None
        self._idrec = None
        self._idrecparent = None
        self._idreczonecompletion = None
        self._idwell = None
        self._nonrecov = None
        self._note = None
        self._purpose = None
        self._sandcut = None
        self._towell = None
        self._systag = None
        self.discriminator = None
        if actiontyp is not None:
            self.actiontyp = actiontyp
        if bsw is not None:
            self.bsw = bsw
        if density is not None:
            self.density = density
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if fromwell is not None:
            self.fromwell = fromwell
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if nonrecov is not None:
            self.nonrecov = nonrecov
        if note is not None:
            self.note = note
        if purpose is not None:
            self.purpose = purpose
        if sandcut is not None:
            self.sandcut = sandcut
        if towell is not None:
            self.towell = towell
        if systag is not None:
            self.systag = systag

    @property
    def actiontyp(self):
        """Gets the actiontyp of this WellFluidData.  # noqa: E501


        :return: The actiontyp of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._actiontyp

    @actiontyp.setter
    def actiontyp(self, actiontyp):
        """Sets the actiontyp of this WellFluidData.


        :param actiontyp: The actiontyp of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._actiontyp = actiontyp

    @property
    def bsw(self):
        """Gets the bsw of this WellFluidData.  # noqa: E501


        :return: The bsw of this WellFluidData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this WellFluidData.


        :param bsw: The bsw of this WellFluidData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def density(self):
        """Gets the density of this WellFluidData.  # noqa: E501


        :return: The density of this WellFluidData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this WellFluidData.


        :param density: The density of this WellFluidData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this WellFluidData.  # noqa: E501


        :return: The fluidtyp of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this WellFluidData.


        :param fluidtyp: The fluidtyp of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def fromwell(self):
        """Gets the fromwell of this WellFluidData.  # noqa: E501


        :return: The fromwell of this WellFluidData.  # noqa: E501
        :rtype: float
        """
        return self._fromwell

    @fromwell.setter
    def fromwell(self, fromwell):
        """Sets the fromwell of this WellFluidData.


        :param fromwell: The fromwell of this WellFluidData.  # noqa: E501
        :type: float
        """

        self._fromwell = fromwell

    @property
    def idrec(self):
        """Gets the idrec of this WellFluidData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellFluidData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this WellFluidData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this WellFluidData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this WellFluidData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this WellFluidData.  # noqa: E501


        :return: The idreczonecompletion of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this WellFluidData.


        :param idreczonecompletion: The idreczonecompletion of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this WellFluidData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellFluidData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellFluidData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def nonrecov(self):
        """Gets the nonrecov of this WellFluidData.  # noqa: E501


        :return: The nonrecov of this WellFluidData.  # noqa: E501
        :rtype: float
        """
        return self._nonrecov

    @nonrecov.setter
    def nonrecov(self, nonrecov):
        """Sets the nonrecov of this WellFluidData.


        :param nonrecov: The nonrecov of this WellFluidData.  # noqa: E501
        :type: float
        """

        self._nonrecov = nonrecov

    @property
    def note(self):
        """Gets the note of this WellFluidData.  # noqa: E501


        :return: The note of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this WellFluidData.


        :param note: The note of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def purpose(self):
        """Gets the purpose of this WellFluidData.  # noqa: E501


        :return: The purpose of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this WellFluidData.


        :param purpose: The purpose of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def sandcut(self):
        """Gets the sandcut of this WellFluidData.  # noqa: E501


        :return: The sandcut of this WellFluidData.  # noqa: E501
        :rtype: float
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this WellFluidData.


        :param sandcut: The sandcut of this WellFluidData.  # noqa: E501
        :type: float
        """

        self._sandcut = sandcut

    @property
    def towell(self):
        """Gets the towell of this WellFluidData.  # noqa: E501


        :return: The towell of this WellFluidData.  # noqa: E501
        :rtype: float
        """
        return self._towell

    @towell.setter
    def towell(self, towell):
        """Sets the towell of this WellFluidData.


        :param towell: The towell of this WellFluidData.  # noqa: E501
        :type: float
        """

        self._towell = towell

    @property
    def systag(self):
        """Gets the systag of this WellFluidData.  # noqa: E501


        :return: The systag of this WellFluidData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellFluidData.


        :param systag: The systag of this WellFluidData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellFluidData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellFluidData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
