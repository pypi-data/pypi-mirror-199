# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellViewWriteTableAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'WellViewTableActionEnum',
        'table': 'str',
        'blob_name': 'str',
        'reference_id': 'object',
        'data': 'list[WellViewWriteTableActionData]'
    }

    attribute_map = {
        'action': 'action',
        'table': 'table',
        'blob_name': 'blob_name',
        'reference_id': 'reference_id',
        'data': 'data'
    }

    def __init__(self, action=None, table=None, blob_name=None, reference_id=None, data=None):  # noqa: E501
        """WellViewWriteTableAction - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._table = None
        self._blob_name = None
        self._reference_id = None
        self._data = None
        self.discriminator = None
        self.action = action
        self.table = table
        if blob_name is not None:
            self.blob_name = blob_name
        if reference_id is not None:
            self.reference_id = reference_id
        self.data = data

    @property
    def action(self):
        """Gets the action of this WellViewWriteTableAction.  # noqa: E501


        :return: The action of this WellViewWriteTableAction.  # noqa: E501
        :rtype: WellViewTableActionEnum
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this WellViewWriteTableAction.


        :param action: The action of this WellViewWriteTableAction.  # noqa: E501
        :type: WellViewTableActionEnum
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def table(self):
        """Gets the table of this WellViewWriteTableAction.  # noqa: E501

        name of table  # noqa: E501

        :return: The table of this WellViewWriteTableAction.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this WellViewWriteTableAction.

        name of table  # noqa: E501

        :param table: The table of this WellViewWriteTableAction.  # noqa: E501
        :type: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")  # noqa: E501

        self._table = table

    @property
    def blob_name(self):
        """Gets the blob_name of this WellViewWriteTableAction.  # noqa: E501

        name of blob  # noqa: E501

        :return: The blob_name of this WellViewWriteTableAction.  # noqa: E501
        :rtype: str
        """
        return self._blob_name

    @blob_name.setter
    def blob_name(self, blob_name):
        """Sets the blob_name of this WellViewWriteTableAction.

        name of blob  # noqa: E501

        :param blob_name: The blob_name of this WellViewWriteTableAction.  # noqa: E501
        :type: str
        """

        self._blob_name = blob_name

    @property
    def reference_id(self):
        """Gets the reference_id of this WellViewWriteTableAction.  # noqa: E501

        id of reference  # noqa: E501

        :return: The reference_id of this WellViewWriteTableAction.  # noqa: E501
        :rtype: object
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this WellViewWriteTableAction.

        id of reference  # noqa: E501

        :param reference_id: The reference_id of this WellViewWriteTableAction.  # noqa: E501
        :type: object
        """

        self._reference_id = reference_id

    @property
    def data(self):
        """Gets the data of this WellViewWriteTableAction.  # noqa: E501


        :return: The data of this WellViewWriteTableAction.  # noqa: E501
        :rtype: list[WellViewWriteTableActionData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WellViewWriteTableAction.


        :param data: The data of this WellViewWriteTableAction.  # noqa: E501
        :type: list[WellViewWriteTableActionData]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellViewWriteTableAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellViewWriteTableAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
