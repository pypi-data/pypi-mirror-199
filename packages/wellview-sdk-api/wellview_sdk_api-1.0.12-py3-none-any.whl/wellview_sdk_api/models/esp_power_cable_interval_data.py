# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ESPPowerCableIntervalData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditionpull': 'str',
        'conditionrun': 'str',
        'cost': 'float',
        'costunitlabel': 'str',
        'hoursstart': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'pwrcablearmor': 'str',
        'pwrcablega': 'float',
        'pwrcableinsul': 'str',
        'pwrcablelength': 'float',
        'pwrcablemake': 'str',
        'pwrcablemodel': 'str',
        'pwrcablenosplice': 'int',
        'pwrcableprofile': 'str',
        'pwrcableshape': 'str',
        'pwrcablesheath': 'str',
        'pwrcablesn': 'str',
        'pwrcabletemprating': 'float',
        'pwrcabletensilemax': 'float',
        'pwrcabletyp': 'str',
        'pwrcablevolt': 'float',
        'pwrcablewtperlength': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'conditionpull': 'conditionpull',
        'conditionrun': 'conditionrun',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'hoursstart': 'hoursstart',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'pwrcablearmor': 'pwrcablearmor',
        'pwrcablega': 'pwrcablega',
        'pwrcableinsul': 'pwrcableinsul',
        'pwrcablelength': 'pwrcablelength',
        'pwrcablemake': 'pwrcablemake',
        'pwrcablemodel': 'pwrcablemodel',
        'pwrcablenosplice': 'pwrcablenosplice',
        'pwrcableprofile': 'pwrcableprofile',
        'pwrcableshape': 'pwrcableshape',
        'pwrcablesheath': 'pwrcablesheath',
        'pwrcablesn': 'pwrcablesn',
        'pwrcabletemprating': 'pwrcabletemprating',
        'pwrcabletensilemax': 'pwrcabletensilemax',
        'pwrcabletyp': 'pwrcabletyp',
        'pwrcablevolt': 'pwrcablevolt',
        'pwrcablewtperlength': 'pwrcablewtperlength',
        'systag': 'systag'
    }

    def __init__(self, conditionpull=None, conditionrun=None, cost=None, costunitlabel=None, hoursstart=None, idrec=None, idrecparent=None, idwell=None, pwrcablearmor=None, pwrcablega=None, pwrcableinsul=None, pwrcablelength=None, pwrcablemake=None, pwrcablemodel=None, pwrcablenosplice=None, pwrcableprofile=None, pwrcableshape=None, pwrcablesheath=None, pwrcablesn=None, pwrcabletemprating=None, pwrcabletensilemax=None, pwrcabletyp=None, pwrcablevolt=None, pwrcablewtperlength=None, systag=None):  # noqa: E501
        """ESPPowerCableIntervalData - a model defined in Swagger"""  # noqa: E501
        self._conditionpull = None
        self._conditionrun = None
        self._cost = None
        self._costunitlabel = None
        self._hoursstart = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._pwrcablearmor = None
        self._pwrcablega = None
        self._pwrcableinsul = None
        self._pwrcablelength = None
        self._pwrcablemake = None
        self._pwrcablemodel = None
        self._pwrcablenosplice = None
        self._pwrcableprofile = None
        self._pwrcableshape = None
        self._pwrcablesheath = None
        self._pwrcablesn = None
        self._pwrcabletemprating = None
        self._pwrcabletensilemax = None
        self._pwrcabletyp = None
        self._pwrcablevolt = None
        self._pwrcablewtperlength = None
        self._systag = None
        self.discriminator = None
        if conditionpull is not None:
            self.conditionpull = conditionpull
        if conditionrun is not None:
            self.conditionrun = conditionrun
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if hoursstart is not None:
            self.hoursstart = hoursstart
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if pwrcablearmor is not None:
            self.pwrcablearmor = pwrcablearmor
        if pwrcablega is not None:
            self.pwrcablega = pwrcablega
        if pwrcableinsul is not None:
            self.pwrcableinsul = pwrcableinsul
        if pwrcablelength is not None:
            self.pwrcablelength = pwrcablelength
        if pwrcablemake is not None:
            self.pwrcablemake = pwrcablemake
        if pwrcablemodel is not None:
            self.pwrcablemodel = pwrcablemodel
        if pwrcablenosplice is not None:
            self.pwrcablenosplice = pwrcablenosplice
        if pwrcableprofile is not None:
            self.pwrcableprofile = pwrcableprofile
        if pwrcableshape is not None:
            self.pwrcableshape = pwrcableshape
        if pwrcablesheath is not None:
            self.pwrcablesheath = pwrcablesheath
        if pwrcablesn is not None:
            self.pwrcablesn = pwrcablesn
        if pwrcabletemprating is not None:
            self.pwrcabletemprating = pwrcabletemprating
        if pwrcabletensilemax is not None:
            self.pwrcabletensilemax = pwrcabletensilemax
        if pwrcabletyp is not None:
            self.pwrcabletyp = pwrcabletyp
        if pwrcablevolt is not None:
            self.pwrcablevolt = pwrcablevolt
        if pwrcablewtperlength is not None:
            self.pwrcablewtperlength = pwrcablewtperlength
        if systag is not None:
            self.systag = systag

    @property
    def conditionpull(self):
        """Gets the conditionpull of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The conditionpull of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._conditionpull

    @conditionpull.setter
    def conditionpull(self, conditionpull):
        """Sets the conditionpull of this ESPPowerCableIntervalData.


        :param conditionpull: The conditionpull of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._conditionpull = conditionpull

    @property
    def conditionrun(self):
        """Gets the conditionrun of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The conditionrun of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._conditionrun

    @conditionrun.setter
    def conditionrun(self, conditionrun):
        """Sets the conditionrun of this ESPPowerCableIntervalData.


        :param conditionrun: The conditionrun of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._conditionrun = conditionrun

    @property
    def cost(self):
        """Gets the cost of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The cost of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ESPPowerCableIntervalData.


        :param cost: The cost of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The costunitlabel of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this ESPPowerCableIntervalData.


        :param costunitlabel: The costunitlabel of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def hoursstart(self):
        """Gets the hoursstart of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The hoursstart of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._hoursstart

    @hoursstart.setter
    def hoursstart(self, hoursstart):
        """Sets the hoursstart of this ESPPowerCableIntervalData.


        :param hoursstart: The hoursstart of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._hoursstart = hoursstart

    @property
    def idrec(self):
        """Gets the idrec of this ESPPowerCableIntervalData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ESPPowerCableIntervalData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ESPPowerCableIntervalData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ESPPowerCableIntervalData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ESPPowerCableIntervalData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ESPPowerCableIntervalData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def pwrcablearmor(self):
        """Gets the pwrcablearmor of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablearmor of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablearmor

    @pwrcablearmor.setter
    def pwrcablearmor(self, pwrcablearmor):
        """Sets the pwrcablearmor of this ESPPowerCableIntervalData.


        :param pwrcablearmor: The pwrcablearmor of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcablearmor = pwrcablearmor

    @property
    def pwrcablega(self):
        """Gets the pwrcablega of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablega of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._pwrcablega

    @pwrcablega.setter
    def pwrcablega(self, pwrcablega):
        """Sets the pwrcablega of this ESPPowerCableIntervalData.


        :param pwrcablega: The pwrcablega of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._pwrcablega = pwrcablega

    @property
    def pwrcableinsul(self):
        """Gets the pwrcableinsul of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcableinsul of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcableinsul

    @pwrcableinsul.setter
    def pwrcableinsul(self, pwrcableinsul):
        """Sets the pwrcableinsul of this ESPPowerCableIntervalData.


        :param pwrcableinsul: The pwrcableinsul of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcableinsul = pwrcableinsul

    @property
    def pwrcablelength(self):
        """Gets the pwrcablelength of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablelength of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._pwrcablelength

    @pwrcablelength.setter
    def pwrcablelength(self, pwrcablelength):
        """Sets the pwrcablelength of this ESPPowerCableIntervalData.


        :param pwrcablelength: The pwrcablelength of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._pwrcablelength = pwrcablelength

    @property
    def pwrcablemake(self):
        """Gets the pwrcablemake of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablemake of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablemake

    @pwrcablemake.setter
    def pwrcablemake(self, pwrcablemake):
        """Sets the pwrcablemake of this ESPPowerCableIntervalData.


        :param pwrcablemake: The pwrcablemake of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcablemake = pwrcablemake

    @property
    def pwrcablemodel(self):
        """Gets the pwrcablemodel of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablemodel of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablemodel

    @pwrcablemodel.setter
    def pwrcablemodel(self, pwrcablemodel):
        """Sets the pwrcablemodel of this ESPPowerCableIntervalData.


        :param pwrcablemodel: The pwrcablemodel of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcablemodel = pwrcablemodel

    @property
    def pwrcablenosplice(self):
        """Gets the pwrcablenosplice of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablenosplice of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: int
        """
        return self._pwrcablenosplice

    @pwrcablenosplice.setter
    def pwrcablenosplice(self, pwrcablenosplice):
        """Sets the pwrcablenosplice of this ESPPowerCableIntervalData.


        :param pwrcablenosplice: The pwrcablenosplice of this ESPPowerCableIntervalData.  # noqa: E501
        :type: int
        """

        self._pwrcablenosplice = pwrcablenosplice

    @property
    def pwrcableprofile(self):
        """Gets the pwrcableprofile of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcableprofile of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcableprofile

    @pwrcableprofile.setter
    def pwrcableprofile(self, pwrcableprofile):
        """Sets the pwrcableprofile of this ESPPowerCableIntervalData.


        :param pwrcableprofile: The pwrcableprofile of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcableprofile = pwrcableprofile

    @property
    def pwrcableshape(self):
        """Gets the pwrcableshape of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcableshape of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcableshape

    @pwrcableshape.setter
    def pwrcableshape(self, pwrcableshape):
        """Sets the pwrcableshape of this ESPPowerCableIntervalData.


        :param pwrcableshape: The pwrcableshape of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcableshape = pwrcableshape

    @property
    def pwrcablesheath(self):
        """Gets the pwrcablesheath of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablesheath of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablesheath

    @pwrcablesheath.setter
    def pwrcablesheath(self, pwrcablesheath):
        """Sets the pwrcablesheath of this ESPPowerCableIntervalData.


        :param pwrcablesheath: The pwrcablesheath of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcablesheath = pwrcablesheath

    @property
    def pwrcablesn(self):
        """Gets the pwrcablesn of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablesn of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablesn

    @pwrcablesn.setter
    def pwrcablesn(self, pwrcablesn):
        """Sets the pwrcablesn of this ESPPowerCableIntervalData.


        :param pwrcablesn: The pwrcablesn of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcablesn = pwrcablesn

    @property
    def pwrcabletemprating(self):
        """Gets the pwrcabletemprating of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcabletemprating of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._pwrcabletemprating

    @pwrcabletemprating.setter
    def pwrcabletemprating(self, pwrcabletemprating):
        """Sets the pwrcabletemprating of this ESPPowerCableIntervalData.


        :param pwrcabletemprating: The pwrcabletemprating of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._pwrcabletemprating = pwrcabletemprating

    @property
    def pwrcabletensilemax(self):
        """Gets the pwrcabletensilemax of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcabletensilemax of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._pwrcabletensilemax

    @pwrcabletensilemax.setter
    def pwrcabletensilemax(self, pwrcabletensilemax):
        """Sets the pwrcabletensilemax of this ESPPowerCableIntervalData.


        :param pwrcabletensilemax: The pwrcabletensilemax of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._pwrcabletensilemax = pwrcabletensilemax

    @property
    def pwrcabletyp(self):
        """Gets the pwrcabletyp of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcabletyp of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcabletyp

    @pwrcabletyp.setter
    def pwrcabletyp(self, pwrcabletyp):
        """Sets the pwrcabletyp of this ESPPowerCableIntervalData.


        :param pwrcabletyp: The pwrcabletyp of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._pwrcabletyp = pwrcabletyp

    @property
    def pwrcablevolt(self):
        """Gets the pwrcablevolt of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablevolt of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._pwrcablevolt

    @pwrcablevolt.setter
    def pwrcablevolt(self, pwrcablevolt):
        """Sets the pwrcablevolt of this ESPPowerCableIntervalData.


        :param pwrcablevolt: The pwrcablevolt of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._pwrcablevolt = pwrcablevolt

    @property
    def pwrcablewtperlength(self):
        """Gets the pwrcablewtperlength of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The pwrcablewtperlength of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: float
        """
        return self._pwrcablewtperlength

    @pwrcablewtperlength.setter
    def pwrcablewtperlength(self, pwrcablewtperlength):
        """Sets the pwrcablewtperlength of this ESPPowerCableIntervalData.


        :param pwrcablewtperlength: The pwrcablewtperlength of this ESPPowerCableIntervalData.  # noqa: E501
        :type: float
        """

        self._pwrcablewtperlength = pwrcablewtperlength

    @property
    def systag(self):
        """Gets the systag of this ESPPowerCableIntervalData.  # noqa: E501


        :return: The systag of this ESPPowerCableIntervalData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ESPPowerCableIntervalData.


        :param systag: The systag of this ESPPowerCableIntervalData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESPPowerCableIntervalData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESPPowerCableIntervalData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
