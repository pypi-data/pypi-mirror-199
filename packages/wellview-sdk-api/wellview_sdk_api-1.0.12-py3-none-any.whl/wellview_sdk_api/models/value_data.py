# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ValueData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actionrqd': 'bool',
        'actionrqdcom': 'str',
        'actionrqdtyp': 'str',
        'com': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecitem': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'reportedby': 'str',
        'value': 'float',
        'valuedes': 'str',
        'valueverified': 'bool',
        'systag': 'str'
    }

    attribute_map = {
        'actionrqd': 'actionrqd',
        'actionrqdcom': 'actionrqdcom',
        'actionrqdtyp': 'actionrqdtyp',
        'com': 'com',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecitem': 'idrecitem',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'reportedby': 'reportedby',
        'value': 'value',
        'valuedes': 'valuedes',
        'valueverified': 'valueverified',
        'systag': 'systag'
    }

    def __init__(self, actionrqd=None, actionrqdcom=None, actionrqdtyp=None, com=None, dttm=None, idrec=None, idrecitem=None, idrecparent=None, idwell=None, reportedby=None, value=None, valuedes=None, valueverified=None, systag=None):  # noqa: E501
        """ValueData - a model defined in Swagger"""  # noqa: E501
        self._actionrqd = None
        self._actionrqdcom = None
        self._actionrqdtyp = None
        self._com = None
        self._dttm = None
        self._idrec = None
        self._idrecitem = None
        self._idrecparent = None
        self._idwell = None
        self._reportedby = None
        self._value = None
        self._valuedes = None
        self._valueverified = None
        self._systag = None
        self.discriminator = None
        if actionrqd is not None:
            self.actionrqd = actionrqd
        if actionrqdcom is not None:
            self.actionrqdcom = actionrqdcom
        if actionrqdtyp is not None:
            self.actionrqdtyp = actionrqdtyp
        if com is not None:
            self.com = com
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecitem is not None:
            self.idrecitem = idrecitem
        self.idrecparent = idrecparent
        self.idwell = idwell
        if reportedby is not None:
            self.reportedby = reportedby
        if value is not None:
            self.value = value
        if valuedes is not None:
            self.valuedes = valuedes
        if valueverified is not None:
            self.valueverified = valueverified
        if systag is not None:
            self.systag = systag

    @property
    def actionrqd(self):
        """Gets the actionrqd of this ValueData.  # noqa: E501


        :return: The actionrqd of this ValueData.  # noqa: E501
        :rtype: bool
        """
        return self._actionrqd

    @actionrqd.setter
    def actionrqd(self, actionrqd):
        """Sets the actionrqd of this ValueData.


        :param actionrqd: The actionrqd of this ValueData.  # noqa: E501
        :type: bool
        """

        self._actionrqd = actionrqd

    @property
    def actionrqdcom(self):
        """Gets the actionrqdcom of this ValueData.  # noqa: E501


        :return: The actionrqdcom of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._actionrqdcom

    @actionrqdcom.setter
    def actionrqdcom(self, actionrqdcom):
        """Sets the actionrqdcom of this ValueData.


        :param actionrqdcom: The actionrqdcom of this ValueData.  # noqa: E501
        :type: str
        """

        self._actionrqdcom = actionrqdcom

    @property
    def actionrqdtyp(self):
        """Gets the actionrqdtyp of this ValueData.  # noqa: E501


        :return: The actionrqdtyp of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._actionrqdtyp

    @actionrqdtyp.setter
    def actionrqdtyp(self, actionrqdtyp):
        """Sets the actionrqdtyp of this ValueData.


        :param actionrqdtyp: The actionrqdtyp of this ValueData.  # noqa: E501
        :type: str
        """

        self._actionrqdtyp = actionrqdtyp

    @property
    def com(self):
        """Gets the com of this ValueData.  # noqa: E501


        :return: The com of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ValueData.


        :param com: The com of this ValueData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttm(self):
        """Gets the dttm of this ValueData.  # noqa: E501


        :return: The dttm of this ValueData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this ValueData.


        :param dttm: The dttm of this ValueData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this ValueData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ValueData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ValueData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecitem(self):
        """Gets the idrecitem of this ValueData.  # noqa: E501


        :return: The idrecitem of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._idrecitem

    @idrecitem.setter
    def idrecitem(self, idrecitem):
        """Sets the idrecitem of this ValueData.


        :param idrecitem: The idrecitem of this ValueData.  # noqa: E501
        :type: str
        """

        self._idrecitem = idrecitem

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ValueData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ValueData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ValueData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ValueData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ValueData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ValueData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def reportedby(self):
        """Gets the reportedby of this ValueData.  # noqa: E501


        :return: The reportedby of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._reportedby

    @reportedby.setter
    def reportedby(self, reportedby):
        """Sets the reportedby of this ValueData.


        :param reportedby: The reportedby of this ValueData.  # noqa: E501
        :type: str
        """

        self._reportedby = reportedby

    @property
    def value(self):
        """Gets the value of this ValueData.  # noqa: E501


        :return: The value of this ValueData.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueData.


        :param value: The value of this ValueData.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def valuedes(self):
        """Gets the valuedes of this ValueData.  # noqa: E501


        :return: The valuedes of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._valuedes

    @valuedes.setter
    def valuedes(self, valuedes):
        """Sets the valuedes of this ValueData.


        :param valuedes: The valuedes of this ValueData.  # noqa: E501
        :type: str
        """

        self._valuedes = valuedes

    @property
    def valueverified(self):
        """Gets the valueverified of this ValueData.  # noqa: E501


        :return: The valueverified of this ValueData.  # noqa: E501
        :rtype: bool
        """
        return self._valueverified

    @valueverified.setter
    def valueverified(self, valueverified):
        """Sets the valueverified of this ValueData.


        :param valueverified: The valueverified of this ValueData.  # noqa: E501
        :type: bool
        """

        self._valueverified = valueverified

    @property
    def systag(self):
        """Gets the systag of this ValueData.  # noqa: E501


        :return: The systag of this ValueData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ValueData.


        :param systag: The systag of this ValueData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
