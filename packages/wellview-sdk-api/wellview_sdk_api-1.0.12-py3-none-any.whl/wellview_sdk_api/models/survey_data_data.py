# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SurveyDataData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotation': 'str',
        'azimuth': 'float',
        'calcoverride': 'bool',
        'correction': 'str',
        'dlsoverride': 'float',
        'dontuse': 'bool',
        'dontusereason': 'str',
        'dttm': 'datetime',
        'ewoverride': 'float',
        'gravaxialraw': 'float',
        'gravtran1raw': 'float',
        'gravtran2raw': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'inclination': 'float',
        'magaxialraw': 'float',
        'magtran1raw': 'float',
        'magtran2raw': 'float',
        'md': 'float',
        'model': 'str',
        'note': 'str',
        'nsoverride': 'float',
        'source': 'str',
        'surveyedby': 'str',
        'surveymethod': 'str',
        'tfograv': 'float',
        'tfomag': 'float',
        'tooltyp1': 'str',
        'tooltyp2': 'str',
        'tvdoverride': 'float',
        'vsoverride': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'annotation': 'annotation',
        'azimuth': 'azimuth',
        'calcoverride': 'calcoverride',
        'correction': 'correction',
        'dlsoverride': 'dlsoverride',
        'dontuse': 'dontuse',
        'dontusereason': 'dontusereason',
        'dttm': 'dttm',
        'ewoverride': 'ewoverride',
        'gravaxialraw': 'gravaxialraw',
        'gravtran1raw': 'gravtran1raw',
        'gravtran2raw': 'gravtran2raw',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'inclination': 'inclination',
        'magaxialraw': 'magaxialraw',
        'magtran1raw': 'magtran1raw',
        'magtran2raw': 'magtran2raw',
        'md': 'md',
        'model': 'model',
        'note': 'note',
        'nsoverride': 'nsoverride',
        'source': 'source',
        'surveyedby': 'surveyedby',
        'surveymethod': 'surveymethod',
        'tfograv': 'tfograv',
        'tfomag': 'tfomag',
        'tooltyp1': 'tooltyp1',
        'tooltyp2': 'tooltyp2',
        'tvdoverride': 'tvdoverride',
        'vsoverride': 'vsoverride',
        'systag': 'systag'
    }

    def __init__(self, annotation=None, azimuth=None, calcoverride=None, correction=None, dlsoverride=None, dontuse=None, dontusereason=None, dttm=None, ewoverride=None, gravaxialraw=None, gravtran1raw=None, gravtran2raw=None, idrec=None, idrecparent=None, idwell=None, inclination=None, magaxialraw=None, magtran1raw=None, magtran2raw=None, md=None, model=None, note=None, nsoverride=None, source=None, surveyedby=None, surveymethod=None, tfograv=None, tfomag=None, tooltyp1=None, tooltyp2=None, tvdoverride=None, vsoverride=None, systag=None):  # noqa: E501
        """SurveyDataData - a model defined in Swagger"""  # noqa: E501
        self._annotation = None
        self._azimuth = None
        self._calcoverride = None
        self._correction = None
        self._dlsoverride = None
        self._dontuse = None
        self._dontusereason = None
        self._dttm = None
        self._ewoverride = None
        self._gravaxialraw = None
        self._gravtran1raw = None
        self._gravtran2raw = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._inclination = None
        self._magaxialraw = None
        self._magtran1raw = None
        self._magtran2raw = None
        self._md = None
        self._model = None
        self._note = None
        self._nsoverride = None
        self._source = None
        self._surveyedby = None
        self._surveymethod = None
        self._tfograv = None
        self._tfomag = None
        self._tooltyp1 = None
        self._tooltyp2 = None
        self._tvdoverride = None
        self._vsoverride = None
        self._systag = None
        self.discriminator = None
        if annotation is not None:
            self.annotation = annotation
        if azimuth is not None:
            self.azimuth = azimuth
        if calcoverride is not None:
            self.calcoverride = calcoverride
        if correction is not None:
            self.correction = correction
        if dlsoverride is not None:
            self.dlsoverride = dlsoverride
        if dontuse is not None:
            self.dontuse = dontuse
        if dontusereason is not None:
            self.dontusereason = dontusereason
        if dttm is not None:
            self.dttm = dttm
        if ewoverride is not None:
            self.ewoverride = ewoverride
        if gravaxialraw is not None:
            self.gravaxialraw = gravaxialraw
        if gravtran1raw is not None:
            self.gravtran1raw = gravtran1raw
        if gravtran2raw is not None:
            self.gravtran2raw = gravtran2raw
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if inclination is not None:
            self.inclination = inclination
        if magaxialraw is not None:
            self.magaxialraw = magaxialraw
        if magtran1raw is not None:
            self.magtran1raw = magtran1raw
        if magtran2raw is not None:
            self.magtran2raw = magtran2raw
        if md is not None:
            self.md = md
        if model is not None:
            self.model = model
        if note is not None:
            self.note = note
        if nsoverride is not None:
            self.nsoverride = nsoverride
        if source is not None:
            self.source = source
        if surveyedby is not None:
            self.surveyedby = surveyedby
        if surveymethod is not None:
            self.surveymethod = surveymethod
        if tfograv is not None:
            self.tfograv = tfograv
        if tfomag is not None:
            self.tfomag = tfomag
        if tooltyp1 is not None:
            self.tooltyp1 = tooltyp1
        if tooltyp2 is not None:
            self.tooltyp2 = tooltyp2
        if tvdoverride is not None:
            self.tvdoverride = tvdoverride
        if vsoverride is not None:
            self.vsoverride = vsoverride
        if systag is not None:
            self.systag = systag

    @property
    def annotation(self):
        """Gets the annotation of this SurveyDataData.  # noqa: E501


        :return: The annotation of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this SurveyDataData.


        :param annotation: The annotation of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._annotation = annotation

    @property
    def azimuth(self):
        """Gets the azimuth of this SurveyDataData.  # noqa: E501


        :return: The azimuth of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._azimuth

    @azimuth.setter
    def azimuth(self, azimuth):
        """Sets the azimuth of this SurveyDataData.


        :param azimuth: The azimuth of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._azimuth = azimuth

    @property
    def calcoverride(self):
        """Gets the calcoverride of this SurveyDataData.  # noqa: E501


        :return: The calcoverride of this SurveyDataData.  # noqa: E501
        :rtype: bool
        """
        return self._calcoverride

    @calcoverride.setter
    def calcoverride(self, calcoverride):
        """Sets the calcoverride of this SurveyDataData.


        :param calcoverride: The calcoverride of this SurveyDataData.  # noqa: E501
        :type: bool
        """

        self._calcoverride = calcoverride

    @property
    def correction(self):
        """Gets the correction of this SurveyDataData.  # noqa: E501


        :return: The correction of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._correction

    @correction.setter
    def correction(self, correction):
        """Sets the correction of this SurveyDataData.


        :param correction: The correction of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._correction = correction

    @property
    def dlsoverride(self):
        """Gets the dlsoverride of this SurveyDataData.  # noqa: E501


        :return: The dlsoverride of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._dlsoverride

    @dlsoverride.setter
    def dlsoverride(self, dlsoverride):
        """Sets the dlsoverride of this SurveyDataData.


        :param dlsoverride: The dlsoverride of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._dlsoverride = dlsoverride

    @property
    def dontuse(self):
        """Gets the dontuse of this SurveyDataData.  # noqa: E501


        :return: The dontuse of this SurveyDataData.  # noqa: E501
        :rtype: bool
        """
        return self._dontuse

    @dontuse.setter
    def dontuse(self, dontuse):
        """Sets the dontuse of this SurveyDataData.


        :param dontuse: The dontuse of this SurveyDataData.  # noqa: E501
        :type: bool
        """

        self._dontuse = dontuse

    @property
    def dontusereason(self):
        """Gets the dontusereason of this SurveyDataData.  # noqa: E501


        :return: The dontusereason of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._dontusereason

    @dontusereason.setter
    def dontusereason(self, dontusereason):
        """Sets the dontusereason of this SurveyDataData.


        :param dontusereason: The dontusereason of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._dontusereason = dontusereason

    @property
    def dttm(self):
        """Gets the dttm of this SurveyDataData.  # noqa: E501


        :return: The dttm of this SurveyDataData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this SurveyDataData.


        :param dttm: The dttm of this SurveyDataData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def ewoverride(self):
        """Gets the ewoverride of this SurveyDataData.  # noqa: E501


        :return: The ewoverride of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._ewoverride

    @ewoverride.setter
    def ewoverride(self, ewoverride):
        """Sets the ewoverride of this SurveyDataData.


        :param ewoverride: The ewoverride of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._ewoverride = ewoverride

    @property
    def gravaxialraw(self):
        """Gets the gravaxialraw of this SurveyDataData.  # noqa: E501


        :return: The gravaxialraw of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._gravaxialraw

    @gravaxialraw.setter
    def gravaxialraw(self, gravaxialraw):
        """Sets the gravaxialraw of this SurveyDataData.


        :param gravaxialraw: The gravaxialraw of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._gravaxialraw = gravaxialraw

    @property
    def gravtran1raw(self):
        """Gets the gravtran1raw of this SurveyDataData.  # noqa: E501


        :return: The gravtran1raw of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._gravtran1raw

    @gravtran1raw.setter
    def gravtran1raw(self, gravtran1raw):
        """Sets the gravtran1raw of this SurveyDataData.


        :param gravtran1raw: The gravtran1raw of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._gravtran1raw = gravtran1raw

    @property
    def gravtran2raw(self):
        """Gets the gravtran2raw of this SurveyDataData.  # noqa: E501


        :return: The gravtran2raw of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._gravtran2raw

    @gravtran2raw.setter
    def gravtran2raw(self, gravtran2raw):
        """Sets the gravtran2raw of this SurveyDataData.


        :param gravtran2raw: The gravtran2raw of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._gravtran2raw = gravtran2raw

    @property
    def idrec(self):
        """Gets the idrec of this SurveyDataData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SurveyDataData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this SurveyDataData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this SurveyDataData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this SurveyDataData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this SurveyDataData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SurveyDataData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SurveyDataData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def inclination(self):
        """Gets the inclination of this SurveyDataData.  # noqa: E501


        :return: The inclination of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._inclination

    @inclination.setter
    def inclination(self, inclination):
        """Sets the inclination of this SurveyDataData.


        :param inclination: The inclination of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._inclination = inclination

    @property
    def magaxialraw(self):
        """Gets the magaxialraw of this SurveyDataData.  # noqa: E501


        :return: The magaxialraw of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._magaxialraw

    @magaxialraw.setter
    def magaxialraw(self, magaxialraw):
        """Sets the magaxialraw of this SurveyDataData.


        :param magaxialraw: The magaxialraw of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._magaxialraw = magaxialraw

    @property
    def magtran1raw(self):
        """Gets the magtran1raw of this SurveyDataData.  # noqa: E501


        :return: The magtran1raw of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._magtran1raw

    @magtran1raw.setter
    def magtran1raw(self, magtran1raw):
        """Sets the magtran1raw of this SurveyDataData.


        :param magtran1raw: The magtran1raw of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._magtran1raw = magtran1raw

    @property
    def magtran2raw(self):
        """Gets the magtran2raw of this SurveyDataData.  # noqa: E501


        :return: The magtran2raw of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._magtran2raw

    @magtran2raw.setter
    def magtran2raw(self, magtran2raw):
        """Sets the magtran2raw of this SurveyDataData.


        :param magtran2raw: The magtran2raw of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._magtran2raw = magtran2raw

    @property
    def md(self):
        """Gets the md of this SurveyDataData.  # noqa: E501


        :return: The md of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._md

    @md.setter
    def md(self, md):
        """Sets the md of this SurveyDataData.


        :param md: The md of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._md = md

    @property
    def model(self):
        """Gets the model of this SurveyDataData.  # noqa: E501


        :return: The model of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SurveyDataData.


        :param model: The model of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def note(self):
        """Gets the note of this SurveyDataData.  # noqa: E501


        :return: The note of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this SurveyDataData.


        :param note: The note of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def nsoverride(self):
        """Gets the nsoverride of this SurveyDataData.  # noqa: E501


        :return: The nsoverride of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._nsoverride

    @nsoverride.setter
    def nsoverride(self, nsoverride):
        """Sets the nsoverride of this SurveyDataData.


        :param nsoverride: The nsoverride of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._nsoverride = nsoverride

    @property
    def source(self):
        """Gets the source of this SurveyDataData.  # noqa: E501


        :return: The source of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SurveyDataData.


        :param source: The source of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def surveyedby(self):
        """Gets the surveyedby of this SurveyDataData.  # noqa: E501


        :return: The surveyedby of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._surveyedby

    @surveyedby.setter
    def surveyedby(self, surveyedby):
        """Sets the surveyedby of this SurveyDataData.


        :param surveyedby: The surveyedby of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._surveyedby = surveyedby

    @property
    def surveymethod(self):
        """Gets the surveymethod of this SurveyDataData.  # noqa: E501


        :return: The surveymethod of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._surveymethod

    @surveymethod.setter
    def surveymethod(self, surveymethod):
        """Sets the surveymethod of this SurveyDataData.


        :param surveymethod: The surveymethod of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._surveymethod = surveymethod

    @property
    def tfograv(self):
        """Gets the tfograv of this SurveyDataData.  # noqa: E501


        :return: The tfograv of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._tfograv

    @tfograv.setter
    def tfograv(self, tfograv):
        """Sets the tfograv of this SurveyDataData.


        :param tfograv: The tfograv of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._tfograv = tfograv

    @property
    def tfomag(self):
        """Gets the tfomag of this SurveyDataData.  # noqa: E501


        :return: The tfomag of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._tfomag

    @tfomag.setter
    def tfomag(self, tfomag):
        """Sets the tfomag of this SurveyDataData.


        :param tfomag: The tfomag of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._tfomag = tfomag

    @property
    def tooltyp1(self):
        """Gets the tooltyp1 of this SurveyDataData.  # noqa: E501


        :return: The tooltyp1 of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._tooltyp1

    @tooltyp1.setter
    def tooltyp1(self, tooltyp1):
        """Sets the tooltyp1 of this SurveyDataData.


        :param tooltyp1: The tooltyp1 of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._tooltyp1 = tooltyp1

    @property
    def tooltyp2(self):
        """Gets the tooltyp2 of this SurveyDataData.  # noqa: E501


        :return: The tooltyp2 of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._tooltyp2

    @tooltyp2.setter
    def tooltyp2(self, tooltyp2):
        """Sets the tooltyp2 of this SurveyDataData.


        :param tooltyp2: The tooltyp2 of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._tooltyp2 = tooltyp2

    @property
    def tvdoverride(self):
        """Gets the tvdoverride of this SurveyDataData.  # noqa: E501


        :return: The tvdoverride of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._tvdoverride

    @tvdoverride.setter
    def tvdoverride(self, tvdoverride):
        """Sets the tvdoverride of this SurveyDataData.


        :param tvdoverride: The tvdoverride of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._tvdoverride = tvdoverride

    @property
    def vsoverride(self):
        """Gets the vsoverride of this SurveyDataData.  # noqa: E501


        :return: The vsoverride of this SurveyDataData.  # noqa: E501
        :rtype: float
        """
        return self._vsoverride

    @vsoverride.setter
    def vsoverride(self, vsoverride):
        """Sets the vsoverride of this SurveyDataData.


        :param vsoverride: The vsoverride of this SurveyDataData.  # noqa: E501
        :type: float
        """

        self._vsoverride = vsoverride

    @property
    def systag(self):
        """Gets the systag of this SurveyDataData.  # noqa: E501


        :return: The systag of this SurveyDataData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SurveyDataData.


        :param systag: The systag of this SurveyDataData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SurveyDataData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyDataData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
