# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OilPropertiesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'apigravityafterclean': 'float',
        'apigravityasreceived': 'float',
        'asphaltene': 'float',
        'bsw': 'float',
        'color': 'str',
        'com': 'str',
        'densityafterclean': 'float',
        'densityasreceived': 'float',
        'densityreftemp': 'float',
        'densityrelafterclean': 'float',
        'densityrelasreceived': 'float',
        'distillmethod': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'presbarometric': 'float',
        'presvapour': 'float',
        'salt': 'float',
        'sulphur': 'float',
        'tempboilinit': 'float',
        'tempflashpointcc': 'float',
        'tempflashpointoc': 'float',
        'temppourpoint': 'float',
        'temprefapigravity': 'float',
        'temprefkerosene': 'float',
        'temprefltgasoil': 'float',
        'temprefnaptha': 'float',
        'temproom': 'float',
        'volfracdistillloss': 'float',
        'volfrackerosene': 'float',
        'volfracltgasoil': 'float',
        'volfracnaptha': 'float',
        'volfracrecovered': 'float',
        'volfracresidue': 'float',
        'volfracsediment': 'float',
        'volfracwater': 'float',
        'waxpercent': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'apigravityafterclean': 'apigravityafterclean',
        'apigravityasreceived': 'apigravityasreceived',
        'asphaltene': 'asphaltene',
        'bsw': 'bsw',
        'color': 'color',
        'com': 'com',
        'densityafterclean': 'densityafterclean',
        'densityasreceived': 'densityasreceived',
        'densityreftemp': 'densityreftemp',
        'densityrelafterclean': 'densityrelafterclean',
        'densityrelasreceived': 'densityrelasreceived',
        'distillmethod': 'distillmethod',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'presbarometric': 'presbarometric',
        'presvapour': 'presvapour',
        'salt': 'salt',
        'sulphur': 'sulphur',
        'tempboilinit': 'tempboilinit',
        'tempflashpointcc': 'tempflashpointcc',
        'tempflashpointoc': 'tempflashpointoc',
        'temppourpoint': 'temppourpoint',
        'temprefapigravity': 'temprefapigravity',
        'temprefkerosene': 'temprefkerosene',
        'temprefltgasoil': 'temprefltgasoil',
        'temprefnaptha': 'temprefnaptha',
        'temproom': 'temproom',
        'volfracdistillloss': 'volfracdistillloss',
        'volfrackerosene': 'volfrackerosene',
        'volfracltgasoil': 'volfracltgasoil',
        'volfracnaptha': 'volfracnaptha',
        'volfracrecovered': 'volfracrecovered',
        'volfracresidue': 'volfracresidue',
        'volfracsediment': 'volfracsediment',
        'volfracwater': 'volfracwater',
        'waxpercent': 'waxpercent',
        'systag': 'systag'
    }

    def __init__(self, apigravityafterclean=None, apigravityasreceived=None, asphaltene=None, bsw=None, color=None, com=None, densityafterclean=None, densityasreceived=None, densityreftemp=None, densityrelafterclean=None, densityrelasreceived=None, distillmethod=None, idrec=None, idrecparent=None, idwell=None, presbarometric=None, presvapour=None, salt=None, sulphur=None, tempboilinit=None, tempflashpointcc=None, tempflashpointoc=None, temppourpoint=None, temprefapigravity=None, temprefkerosene=None, temprefltgasoil=None, temprefnaptha=None, temproom=None, volfracdistillloss=None, volfrackerosene=None, volfracltgasoil=None, volfracnaptha=None, volfracrecovered=None, volfracresidue=None, volfracsediment=None, volfracwater=None, waxpercent=None, systag=None):  # noqa: E501
        """OilPropertiesData - a model defined in Swagger"""  # noqa: E501
        self._apigravityafterclean = None
        self._apigravityasreceived = None
        self._asphaltene = None
        self._bsw = None
        self._color = None
        self._com = None
        self._densityafterclean = None
        self._densityasreceived = None
        self._densityreftemp = None
        self._densityrelafterclean = None
        self._densityrelasreceived = None
        self._distillmethod = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._presbarometric = None
        self._presvapour = None
        self._salt = None
        self._sulphur = None
        self._tempboilinit = None
        self._tempflashpointcc = None
        self._tempflashpointoc = None
        self._temppourpoint = None
        self._temprefapigravity = None
        self._temprefkerosene = None
        self._temprefltgasoil = None
        self._temprefnaptha = None
        self._temproom = None
        self._volfracdistillloss = None
        self._volfrackerosene = None
        self._volfracltgasoil = None
        self._volfracnaptha = None
        self._volfracrecovered = None
        self._volfracresidue = None
        self._volfracsediment = None
        self._volfracwater = None
        self._waxpercent = None
        self._systag = None
        self.discriminator = None
        if apigravityafterclean is not None:
            self.apigravityafterclean = apigravityafterclean
        if apigravityasreceived is not None:
            self.apigravityasreceived = apigravityasreceived
        if asphaltene is not None:
            self.asphaltene = asphaltene
        if bsw is not None:
            self.bsw = bsw
        if color is not None:
            self.color = color
        if com is not None:
            self.com = com
        if densityafterclean is not None:
            self.densityafterclean = densityafterclean
        if densityasreceived is not None:
            self.densityasreceived = densityasreceived
        if densityreftemp is not None:
            self.densityreftemp = densityreftemp
        if densityrelafterclean is not None:
            self.densityrelafterclean = densityrelafterclean
        if densityrelasreceived is not None:
            self.densityrelasreceived = densityrelasreceived
        if distillmethod is not None:
            self.distillmethod = distillmethod
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if presbarometric is not None:
            self.presbarometric = presbarometric
        if presvapour is not None:
            self.presvapour = presvapour
        if salt is not None:
            self.salt = salt
        if sulphur is not None:
            self.sulphur = sulphur
        if tempboilinit is not None:
            self.tempboilinit = tempboilinit
        if tempflashpointcc is not None:
            self.tempflashpointcc = tempflashpointcc
        if tempflashpointoc is not None:
            self.tempflashpointoc = tempflashpointoc
        if temppourpoint is not None:
            self.temppourpoint = temppourpoint
        if temprefapigravity is not None:
            self.temprefapigravity = temprefapigravity
        if temprefkerosene is not None:
            self.temprefkerosene = temprefkerosene
        if temprefltgasoil is not None:
            self.temprefltgasoil = temprefltgasoil
        if temprefnaptha is not None:
            self.temprefnaptha = temprefnaptha
        if temproom is not None:
            self.temproom = temproom
        if volfracdistillloss is not None:
            self.volfracdistillloss = volfracdistillloss
        if volfrackerosene is not None:
            self.volfrackerosene = volfrackerosene
        if volfracltgasoil is not None:
            self.volfracltgasoil = volfracltgasoil
        if volfracnaptha is not None:
            self.volfracnaptha = volfracnaptha
        if volfracrecovered is not None:
            self.volfracrecovered = volfracrecovered
        if volfracresidue is not None:
            self.volfracresidue = volfracresidue
        if volfracsediment is not None:
            self.volfracsediment = volfracsediment
        if volfracwater is not None:
            self.volfracwater = volfracwater
        if waxpercent is not None:
            self.waxpercent = waxpercent
        if systag is not None:
            self.systag = systag

    @property
    def apigravityafterclean(self):
        """Gets the apigravityafterclean of this OilPropertiesData.  # noqa: E501


        :return: The apigravityafterclean of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._apigravityafterclean

    @apigravityafterclean.setter
    def apigravityafterclean(self, apigravityafterclean):
        """Sets the apigravityafterclean of this OilPropertiesData.


        :param apigravityafterclean: The apigravityafterclean of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._apigravityafterclean = apigravityafterclean

    @property
    def apigravityasreceived(self):
        """Gets the apigravityasreceived of this OilPropertiesData.  # noqa: E501


        :return: The apigravityasreceived of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._apigravityasreceived

    @apigravityasreceived.setter
    def apigravityasreceived(self, apigravityasreceived):
        """Sets the apigravityasreceived of this OilPropertiesData.


        :param apigravityasreceived: The apigravityasreceived of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._apigravityasreceived = apigravityasreceived

    @property
    def asphaltene(self):
        """Gets the asphaltene of this OilPropertiesData.  # noqa: E501


        :return: The asphaltene of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._asphaltene

    @asphaltene.setter
    def asphaltene(self, asphaltene):
        """Sets the asphaltene of this OilPropertiesData.


        :param asphaltene: The asphaltene of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._asphaltene = asphaltene

    @property
    def bsw(self):
        """Gets the bsw of this OilPropertiesData.  # noqa: E501


        :return: The bsw of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this OilPropertiesData.


        :param bsw: The bsw of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def color(self):
        """Gets the color of this OilPropertiesData.  # noqa: E501


        :return: The color of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this OilPropertiesData.


        :param color: The color of this OilPropertiesData.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def com(self):
        """Gets the com of this OilPropertiesData.  # noqa: E501


        :return: The com of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this OilPropertiesData.


        :param com: The com of this OilPropertiesData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityafterclean(self):
        """Gets the densityafterclean of this OilPropertiesData.  # noqa: E501


        :return: The densityafterclean of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityafterclean

    @densityafterclean.setter
    def densityafterclean(self, densityafterclean):
        """Sets the densityafterclean of this OilPropertiesData.


        :param densityafterclean: The densityafterclean of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityafterclean = densityafterclean

    @property
    def densityasreceived(self):
        """Gets the densityasreceived of this OilPropertiesData.  # noqa: E501


        :return: The densityasreceived of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityasreceived

    @densityasreceived.setter
    def densityasreceived(self, densityasreceived):
        """Sets the densityasreceived of this OilPropertiesData.


        :param densityasreceived: The densityasreceived of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityasreceived = densityasreceived

    @property
    def densityreftemp(self):
        """Gets the densityreftemp of this OilPropertiesData.  # noqa: E501


        :return: The densityreftemp of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityreftemp

    @densityreftemp.setter
    def densityreftemp(self, densityreftemp):
        """Sets the densityreftemp of this OilPropertiesData.


        :param densityreftemp: The densityreftemp of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityreftemp = densityreftemp

    @property
    def densityrelafterclean(self):
        """Gets the densityrelafterclean of this OilPropertiesData.  # noqa: E501


        :return: The densityrelafterclean of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityrelafterclean

    @densityrelafterclean.setter
    def densityrelafterclean(self, densityrelafterclean):
        """Sets the densityrelafterclean of this OilPropertiesData.


        :param densityrelafterclean: The densityrelafterclean of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityrelafterclean = densityrelafterclean

    @property
    def densityrelasreceived(self):
        """Gets the densityrelasreceived of this OilPropertiesData.  # noqa: E501


        :return: The densityrelasreceived of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._densityrelasreceived

    @densityrelasreceived.setter
    def densityrelasreceived(self, densityrelasreceived):
        """Sets the densityrelasreceived of this OilPropertiesData.


        :param densityrelasreceived: The densityrelasreceived of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._densityrelasreceived = densityrelasreceived

    @property
    def distillmethod(self):
        """Gets the distillmethod of this OilPropertiesData.  # noqa: E501


        :return: The distillmethod of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._distillmethod

    @distillmethod.setter
    def distillmethod(self, distillmethod):
        """Sets the distillmethod of this OilPropertiesData.


        :param distillmethod: The distillmethod of this OilPropertiesData.  # noqa: E501
        :type: str
        """

        self._distillmethod = distillmethod

    @property
    def idrec(self):
        """Gets the idrec of this OilPropertiesData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OilPropertiesData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this OilPropertiesData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this OilPropertiesData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this OilPropertiesData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this OilPropertiesData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this OilPropertiesData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OilPropertiesData.

        id of well  # noqa: E501

        :param idwell: The idwell of this OilPropertiesData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def presbarometric(self):
        """Gets the presbarometric of this OilPropertiesData.  # noqa: E501


        :return: The presbarometric of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._presbarometric

    @presbarometric.setter
    def presbarometric(self, presbarometric):
        """Sets the presbarometric of this OilPropertiesData.


        :param presbarometric: The presbarometric of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._presbarometric = presbarometric

    @property
    def presvapour(self):
        """Gets the presvapour of this OilPropertiesData.  # noqa: E501


        :return: The presvapour of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._presvapour

    @presvapour.setter
    def presvapour(self, presvapour):
        """Sets the presvapour of this OilPropertiesData.


        :param presvapour: The presvapour of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._presvapour = presvapour

    @property
    def salt(self):
        """Gets the salt of this OilPropertiesData.  # noqa: E501


        :return: The salt of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this OilPropertiesData.


        :param salt: The salt of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._salt = salt

    @property
    def sulphur(self):
        """Gets the sulphur of this OilPropertiesData.  # noqa: E501


        :return: The sulphur of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._sulphur

    @sulphur.setter
    def sulphur(self, sulphur):
        """Sets the sulphur of this OilPropertiesData.


        :param sulphur: The sulphur of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._sulphur = sulphur

    @property
    def tempboilinit(self):
        """Gets the tempboilinit of this OilPropertiesData.  # noqa: E501


        :return: The tempboilinit of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._tempboilinit

    @tempboilinit.setter
    def tempboilinit(self, tempboilinit):
        """Sets the tempboilinit of this OilPropertiesData.


        :param tempboilinit: The tempboilinit of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._tempboilinit = tempboilinit

    @property
    def tempflashpointcc(self):
        """Gets the tempflashpointcc of this OilPropertiesData.  # noqa: E501


        :return: The tempflashpointcc of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._tempflashpointcc

    @tempflashpointcc.setter
    def tempflashpointcc(self, tempflashpointcc):
        """Sets the tempflashpointcc of this OilPropertiesData.


        :param tempflashpointcc: The tempflashpointcc of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._tempflashpointcc = tempflashpointcc

    @property
    def tempflashpointoc(self):
        """Gets the tempflashpointoc of this OilPropertiesData.  # noqa: E501


        :return: The tempflashpointoc of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._tempflashpointoc

    @tempflashpointoc.setter
    def tempflashpointoc(self, tempflashpointoc):
        """Sets the tempflashpointoc of this OilPropertiesData.


        :param tempflashpointoc: The tempflashpointoc of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._tempflashpointoc = tempflashpointoc

    @property
    def temppourpoint(self):
        """Gets the temppourpoint of this OilPropertiesData.  # noqa: E501


        :return: The temppourpoint of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temppourpoint

    @temppourpoint.setter
    def temppourpoint(self, temppourpoint):
        """Sets the temppourpoint of this OilPropertiesData.


        :param temppourpoint: The temppourpoint of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._temppourpoint = temppourpoint

    @property
    def temprefapigravity(self):
        """Gets the temprefapigravity of this OilPropertiesData.  # noqa: E501


        :return: The temprefapigravity of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefapigravity

    @temprefapigravity.setter
    def temprefapigravity(self, temprefapigravity):
        """Sets the temprefapigravity of this OilPropertiesData.


        :param temprefapigravity: The temprefapigravity of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefapigravity = temprefapigravity

    @property
    def temprefkerosene(self):
        """Gets the temprefkerosene of this OilPropertiesData.  # noqa: E501


        :return: The temprefkerosene of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefkerosene

    @temprefkerosene.setter
    def temprefkerosene(self, temprefkerosene):
        """Sets the temprefkerosene of this OilPropertiesData.


        :param temprefkerosene: The temprefkerosene of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefkerosene = temprefkerosene

    @property
    def temprefltgasoil(self):
        """Gets the temprefltgasoil of this OilPropertiesData.  # noqa: E501


        :return: The temprefltgasoil of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefltgasoil

    @temprefltgasoil.setter
    def temprefltgasoil(self, temprefltgasoil):
        """Sets the temprefltgasoil of this OilPropertiesData.


        :param temprefltgasoil: The temprefltgasoil of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefltgasoil = temprefltgasoil

    @property
    def temprefnaptha(self):
        """Gets the temprefnaptha of this OilPropertiesData.  # noqa: E501


        :return: The temprefnaptha of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temprefnaptha

    @temprefnaptha.setter
    def temprefnaptha(self, temprefnaptha):
        """Sets the temprefnaptha of this OilPropertiesData.


        :param temprefnaptha: The temprefnaptha of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._temprefnaptha = temprefnaptha

    @property
    def temproom(self):
        """Gets the temproom of this OilPropertiesData.  # noqa: E501


        :return: The temproom of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._temproom

    @temproom.setter
    def temproom(self, temproom):
        """Sets the temproom of this OilPropertiesData.


        :param temproom: The temproom of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._temproom = temproom

    @property
    def volfracdistillloss(self):
        """Gets the volfracdistillloss of this OilPropertiesData.  # noqa: E501


        :return: The volfracdistillloss of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracdistillloss

    @volfracdistillloss.setter
    def volfracdistillloss(self, volfracdistillloss):
        """Sets the volfracdistillloss of this OilPropertiesData.


        :param volfracdistillloss: The volfracdistillloss of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracdistillloss = volfracdistillloss

    @property
    def volfrackerosene(self):
        """Gets the volfrackerosene of this OilPropertiesData.  # noqa: E501


        :return: The volfrackerosene of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfrackerosene

    @volfrackerosene.setter
    def volfrackerosene(self, volfrackerosene):
        """Sets the volfrackerosene of this OilPropertiesData.


        :param volfrackerosene: The volfrackerosene of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfrackerosene = volfrackerosene

    @property
    def volfracltgasoil(self):
        """Gets the volfracltgasoil of this OilPropertiesData.  # noqa: E501


        :return: The volfracltgasoil of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracltgasoil

    @volfracltgasoil.setter
    def volfracltgasoil(self, volfracltgasoil):
        """Sets the volfracltgasoil of this OilPropertiesData.


        :param volfracltgasoil: The volfracltgasoil of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracltgasoil = volfracltgasoil

    @property
    def volfracnaptha(self):
        """Gets the volfracnaptha of this OilPropertiesData.  # noqa: E501


        :return: The volfracnaptha of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracnaptha

    @volfracnaptha.setter
    def volfracnaptha(self, volfracnaptha):
        """Sets the volfracnaptha of this OilPropertiesData.


        :param volfracnaptha: The volfracnaptha of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracnaptha = volfracnaptha

    @property
    def volfracrecovered(self):
        """Gets the volfracrecovered of this OilPropertiesData.  # noqa: E501


        :return: The volfracrecovered of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracrecovered

    @volfracrecovered.setter
    def volfracrecovered(self, volfracrecovered):
        """Sets the volfracrecovered of this OilPropertiesData.


        :param volfracrecovered: The volfracrecovered of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracrecovered = volfracrecovered

    @property
    def volfracresidue(self):
        """Gets the volfracresidue of this OilPropertiesData.  # noqa: E501


        :return: The volfracresidue of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracresidue

    @volfracresidue.setter
    def volfracresidue(self, volfracresidue):
        """Sets the volfracresidue of this OilPropertiesData.


        :param volfracresidue: The volfracresidue of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracresidue = volfracresidue

    @property
    def volfracsediment(self):
        """Gets the volfracsediment of this OilPropertiesData.  # noqa: E501


        :return: The volfracsediment of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracsediment

    @volfracsediment.setter
    def volfracsediment(self, volfracsediment):
        """Sets the volfracsediment of this OilPropertiesData.


        :param volfracsediment: The volfracsediment of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracsediment = volfracsediment

    @property
    def volfracwater(self):
        """Gets the volfracwater of this OilPropertiesData.  # noqa: E501


        :return: The volfracwater of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._volfracwater

    @volfracwater.setter
    def volfracwater(self, volfracwater):
        """Sets the volfracwater of this OilPropertiesData.


        :param volfracwater: The volfracwater of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._volfracwater = volfracwater

    @property
    def waxpercent(self):
        """Gets the waxpercent of this OilPropertiesData.  # noqa: E501


        :return: The waxpercent of this OilPropertiesData.  # noqa: E501
        :rtype: float
        """
        return self._waxpercent

    @waxpercent.setter
    def waxpercent(self, waxpercent):
        """Sets the waxpercent of this OilPropertiesData.


        :param waxpercent: The waxpercent of this OilPropertiesData.  # noqa: E501
        :type: float
        """

        self._waxpercent = waxpercent

    @property
    def systag(self):
        """Gets the systag of this OilPropertiesData.  # noqa: E501


        :return: The systag of this OilPropertiesData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OilPropertiesData.


        :param systag: The systag of this OilPropertiesData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OilPropertiesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OilPropertiesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
