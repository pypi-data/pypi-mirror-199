# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AFEData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'afenumber': 'str',
        'afenumbersupp': 'str',
        'afestatus': 'str',
        'com': 'str',
        'costtyp': 'str',
        'dttmafe': 'datetime',
        'dttmafeclose': 'datetime',
        'exclude': 'bool',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'projectname': 'str',
        'projectrefnumber': 'str',
        'typ': 'str',
        'workingint': 'float',
        'workingintnote': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'afenumber': 'afenumber',
        'afenumbersupp': 'afenumbersupp',
        'afestatus': 'afestatus',
        'com': 'com',
        'costtyp': 'costtyp',
        'dttmafe': 'dttmafe',
        'dttmafeclose': 'dttmafeclose',
        'exclude': 'exclude',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'projectname': 'projectname',
        'projectrefnumber': 'projectrefnumber',
        'typ': 'typ',
        'workingint': 'workingint',
        'workingintnote': 'workingintnote',
        'systag': 'systag'
    }

    def __init__(self, afenumber=None, afenumbersupp=None, afestatus=None, com=None, costtyp=None, dttmafe=None, dttmafeclose=None, exclude=None, idrec=None, idrecparent=None, idwell=None, projectname=None, projectrefnumber=None, typ=None, workingint=None, workingintnote=None, systag=None):  # noqa: E501
        """AFEData - a model defined in Swagger"""  # noqa: E501
        self._afenumber = None
        self._afenumbersupp = None
        self._afestatus = None
        self._com = None
        self._costtyp = None
        self._dttmafe = None
        self._dttmafeclose = None
        self._exclude = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._projectname = None
        self._projectrefnumber = None
        self._typ = None
        self._workingint = None
        self._workingintnote = None
        self._systag = None
        self.discriminator = None
        if afenumber is not None:
            self.afenumber = afenumber
        if afenumbersupp is not None:
            self.afenumbersupp = afenumbersupp
        if afestatus is not None:
            self.afestatus = afestatus
        if com is not None:
            self.com = com
        if costtyp is not None:
            self.costtyp = costtyp
        if dttmafe is not None:
            self.dttmafe = dttmafe
        if dttmafeclose is not None:
            self.dttmafeclose = dttmafeclose
        if exclude is not None:
            self.exclude = exclude
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if projectname is not None:
            self.projectname = projectname
        if projectrefnumber is not None:
            self.projectrefnumber = projectrefnumber
        if typ is not None:
            self.typ = typ
        if workingint is not None:
            self.workingint = workingint
        if workingintnote is not None:
            self.workingintnote = workingintnote
        if systag is not None:
            self.systag = systag

    @property
    def afenumber(self):
        """Gets the afenumber of this AFEData.  # noqa: E501


        :return: The afenumber of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._afenumber

    @afenumber.setter
    def afenumber(self, afenumber):
        """Sets the afenumber of this AFEData.


        :param afenumber: The afenumber of this AFEData.  # noqa: E501
        :type: str
        """

        self._afenumber = afenumber

    @property
    def afenumbersupp(self):
        """Gets the afenumbersupp of this AFEData.  # noqa: E501


        :return: The afenumbersupp of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._afenumbersupp

    @afenumbersupp.setter
    def afenumbersupp(self, afenumbersupp):
        """Sets the afenumbersupp of this AFEData.


        :param afenumbersupp: The afenumbersupp of this AFEData.  # noqa: E501
        :type: str
        """

        self._afenumbersupp = afenumbersupp

    @property
    def afestatus(self):
        """Gets the afestatus of this AFEData.  # noqa: E501


        :return: The afestatus of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._afestatus

    @afestatus.setter
    def afestatus(self, afestatus):
        """Sets the afestatus of this AFEData.


        :param afestatus: The afestatus of this AFEData.  # noqa: E501
        :type: str
        """

        self._afestatus = afestatus

    @property
    def com(self):
        """Gets the com of this AFEData.  # noqa: E501


        :return: The com of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this AFEData.


        :param com: The com of this AFEData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def costtyp(self):
        """Gets the costtyp of this AFEData.  # noqa: E501


        :return: The costtyp of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._costtyp

    @costtyp.setter
    def costtyp(self, costtyp):
        """Sets the costtyp of this AFEData.


        :param costtyp: The costtyp of this AFEData.  # noqa: E501
        :type: str
        """

        self._costtyp = costtyp

    @property
    def dttmafe(self):
        """Gets the dttmafe of this AFEData.  # noqa: E501


        :return: The dttmafe of this AFEData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmafe

    @dttmafe.setter
    def dttmafe(self, dttmafe):
        """Sets the dttmafe of this AFEData.


        :param dttmafe: The dttmafe of this AFEData.  # noqa: E501
        :type: datetime
        """

        self._dttmafe = dttmafe

    @property
    def dttmafeclose(self):
        """Gets the dttmafeclose of this AFEData.  # noqa: E501


        :return: The dttmafeclose of this AFEData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmafeclose

    @dttmafeclose.setter
    def dttmafeclose(self, dttmafeclose):
        """Sets the dttmafeclose of this AFEData.


        :param dttmafeclose: The dttmafeclose of this AFEData.  # noqa: E501
        :type: datetime
        """

        self._dttmafeclose = dttmafeclose

    @property
    def exclude(self):
        """Gets the exclude of this AFEData.  # noqa: E501


        :return: The exclude of this AFEData.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this AFEData.


        :param exclude: The exclude of this AFEData.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def idrec(self):
        """Gets the idrec of this AFEData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this AFEData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this AFEData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this AFEData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this AFEData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this AFEData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this AFEData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this AFEData.

        id of well  # noqa: E501

        :param idwell: The idwell of this AFEData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def projectname(self):
        """Gets the projectname of this AFEData.  # noqa: E501


        :return: The projectname of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._projectname

    @projectname.setter
    def projectname(self, projectname):
        """Sets the projectname of this AFEData.


        :param projectname: The projectname of this AFEData.  # noqa: E501
        :type: str
        """

        self._projectname = projectname

    @property
    def projectrefnumber(self):
        """Gets the projectrefnumber of this AFEData.  # noqa: E501


        :return: The projectrefnumber of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._projectrefnumber

    @projectrefnumber.setter
    def projectrefnumber(self, projectrefnumber):
        """Sets the projectrefnumber of this AFEData.


        :param projectrefnumber: The projectrefnumber of this AFEData.  # noqa: E501
        :type: str
        """

        self._projectrefnumber = projectrefnumber

    @property
    def typ(self):
        """Gets the typ of this AFEData.  # noqa: E501


        :return: The typ of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this AFEData.


        :param typ: The typ of this AFEData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def workingint(self):
        """Gets the workingint of this AFEData.  # noqa: E501


        :return: The workingint of this AFEData.  # noqa: E501
        :rtype: float
        """
        return self._workingint

    @workingint.setter
    def workingint(self, workingint):
        """Sets the workingint of this AFEData.


        :param workingint: The workingint of this AFEData.  # noqa: E501
        :type: float
        """

        self._workingint = workingint

    @property
    def workingintnote(self):
        """Gets the workingintnote of this AFEData.  # noqa: E501


        :return: The workingintnote of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._workingintnote

    @workingintnote.setter
    def workingintnote(self, workingintnote):
        """Sets the workingintnote of this AFEData.


        :param workingintnote: The workingintnote of this AFEData.  # noqa: E501
        :type: str
        """

        self._workingintnote = workingintnote

    @property
    def systag(self):
        """Gets the systag of this AFEData.  # noqa: E501


        :return: The systag of this AFEData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this AFEData.


        :param systag: The systag of this AFEData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AFEData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AFEData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
