# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceProblemsNPTData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accountablepty': 'str',
        'actiontaken': 'str',
        'com': 'str',
        'costrecov': 'float',
        'dateortyp': 'str',
        'depthend': 'float',
        'depthstart': 'float',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'estcostoverride': 'float',
        'estlosttime': 'float',
        'excludefromproblemtime': 'bool',
        'idrec': 'str',
        'idrecfaileditem': 'str',
        'idrecjobservicecontract': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'opscondition': 'str',
        'potentialseverity': 'str',
        'problemsystem1': 'str',
        'problemsystem2': 'str',
        'problemsystem3': 'str',
        'refno': 'str',
        'severity': 'str',
        'status': 'str',
        'typ': 'str',
        'typdetail': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'accountablepty': 'accountablepty',
        'actiontaken': 'actiontaken',
        'com': 'com',
        'costrecov': 'costrecov',
        'dateortyp': 'dateortyp',
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'estcostoverride': 'estcostoverride',
        'estlosttime': 'estlosttime',
        'excludefromproblemtime': 'excludefromproblemtime',
        'idrec': 'idrec',
        'idrecfaileditem': 'idrecfaileditem',
        'idrecjobservicecontract': 'idrecjobservicecontract',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'opscondition': 'opscondition',
        'potentialseverity': 'potentialseverity',
        'problemsystem1': 'problemsystem1',
        'problemsystem2': 'problemsystem2',
        'problemsystem3': 'problemsystem3',
        'refno': 'refno',
        'severity': 'severity',
        'status': 'status',
        'typ': 'typ',
        'typdetail': 'typdetail',
        'systag': 'systag'
    }

    def __init__(self, accountablepty=None, actiontaken=None, com=None, costrecov=None, dateortyp=None, depthend=None, depthstart=None, des=None, dttmend=None, dttmstart=None, estcostoverride=None, estlosttime=None, excludefromproblemtime=None, idrec=None, idrecfaileditem=None, idrecjobservicecontract=None, idrecparent=None, idrecwellbore=None, idwell=None, opscondition=None, potentialseverity=None, problemsystem1=None, problemsystem2=None, problemsystem3=None, refno=None, severity=None, status=None, typ=None, typdetail=None, systag=None):  # noqa: E501
        """ServiceProblemsNPTData - a model defined in Swagger"""  # noqa: E501
        self._accountablepty = None
        self._actiontaken = None
        self._com = None
        self._costrecov = None
        self._dateortyp = None
        self._depthend = None
        self._depthstart = None
        self._des = None
        self._dttmend = None
        self._dttmstart = None
        self._estcostoverride = None
        self._estlosttime = None
        self._excludefromproblemtime = None
        self._idrec = None
        self._idrecfaileditem = None
        self._idrecjobservicecontract = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._opscondition = None
        self._potentialseverity = None
        self._problemsystem1 = None
        self._problemsystem2 = None
        self._problemsystem3 = None
        self._refno = None
        self._severity = None
        self._status = None
        self._typ = None
        self._typdetail = None
        self._systag = None
        self.discriminator = None
        if accountablepty is not None:
            self.accountablepty = accountablepty
        if actiontaken is not None:
            self.actiontaken = actiontaken
        if com is not None:
            self.com = com
        if costrecov is not None:
            self.costrecov = costrecov
        if dateortyp is not None:
            self.dateortyp = dateortyp
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if estcostoverride is not None:
            self.estcostoverride = estcostoverride
        if estlosttime is not None:
            self.estlosttime = estlosttime
        if excludefromproblemtime is not None:
            self.excludefromproblemtime = excludefromproblemtime
        if idrec is not None:
            self.idrec = idrec
        if idrecfaileditem is not None:
            self.idrecfaileditem = idrecfaileditem
        if idrecjobservicecontract is not None:
            self.idrecjobservicecontract = idrecjobservicecontract
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if opscondition is not None:
            self.opscondition = opscondition
        if potentialseverity is not None:
            self.potentialseverity = potentialseverity
        if problemsystem1 is not None:
            self.problemsystem1 = problemsystem1
        if problemsystem2 is not None:
            self.problemsystem2 = problemsystem2
        if problemsystem3 is not None:
            self.problemsystem3 = problemsystem3
        if refno is not None:
            self.refno = refno
        if severity is not None:
            self.severity = severity
        if status is not None:
            self.status = status
        if typ is not None:
            self.typ = typ
        if typdetail is not None:
            self.typdetail = typdetail
        if systag is not None:
            self.systag = systag

    @property
    def accountablepty(self):
        """Gets the accountablepty of this ServiceProblemsNPTData.  # noqa: E501


        :return: The accountablepty of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._accountablepty

    @accountablepty.setter
    def accountablepty(self, accountablepty):
        """Sets the accountablepty of this ServiceProblemsNPTData.


        :param accountablepty: The accountablepty of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._accountablepty = accountablepty

    @property
    def actiontaken(self):
        """Gets the actiontaken of this ServiceProblemsNPTData.  # noqa: E501


        :return: The actiontaken of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._actiontaken

    @actiontaken.setter
    def actiontaken(self, actiontaken):
        """Sets the actiontaken of this ServiceProblemsNPTData.


        :param actiontaken: The actiontaken of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._actiontaken = actiontaken

    @property
    def com(self):
        """Gets the com of this ServiceProblemsNPTData.  # noqa: E501


        :return: The com of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ServiceProblemsNPTData.


        :param com: The com of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def costrecov(self):
        """Gets the costrecov of this ServiceProblemsNPTData.  # noqa: E501


        :return: The costrecov of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: float
        """
        return self._costrecov

    @costrecov.setter
    def costrecov(self, costrecov):
        """Sets the costrecov of this ServiceProblemsNPTData.


        :param costrecov: The costrecov of this ServiceProblemsNPTData.  # noqa: E501
        :type: float
        """

        self._costrecov = costrecov

    @property
    def dateortyp(self):
        """Gets the dateortyp of this ServiceProblemsNPTData.  # noqa: E501


        :return: The dateortyp of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._dateortyp

    @dateortyp.setter
    def dateortyp(self, dateortyp):
        """Sets the dateortyp of this ServiceProblemsNPTData.


        :param dateortyp: The dateortyp of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._dateortyp = dateortyp

    @property
    def depthend(self):
        """Gets the depthend of this ServiceProblemsNPTData.  # noqa: E501


        :return: The depthend of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: float
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this ServiceProblemsNPTData.


        :param depthend: The depthend of this ServiceProblemsNPTData.  # noqa: E501
        :type: float
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this ServiceProblemsNPTData.  # noqa: E501


        :return: The depthstart of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: float
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this ServiceProblemsNPTData.


        :param depthstart: The depthstart of this ServiceProblemsNPTData.  # noqa: E501
        :type: float
        """

        self._depthstart = depthstart

    @property
    def des(self):
        """Gets the des of this ServiceProblemsNPTData.  # noqa: E501


        :return: The des of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this ServiceProblemsNPTData.


        :param des: The des of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this ServiceProblemsNPTData.  # noqa: E501


        :return: The dttmend of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this ServiceProblemsNPTData.


        :param dttmend: The dttmend of this ServiceProblemsNPTData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this ServiceProblemsNPTData.  # noqa: E501


        :return: The dttmstart of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this ServiceProblemsNPTData.


        :param dttmstart: The dttmstart of this ServiceProblemsNPTData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def estcostoverride(self):
        """Gets the estcostoverride of this ServiceProblemsNPTData.  # noqa: E501


        :return: The estcostoverride of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: float
        """
        return self._estcostoverride

    @estcostoverride.setter
    def estcostoverride(self, estcostoverride):
        """Sets the estcostoverride of this ServiceProblemsNPTData.


        :param estcostoverride: The estcostoverride of this ServiceProblemsNPTData.  # noqa: E501
        :type: float
        """

        self._estcostoverride = estcostoverride

    @property
    def estlosttime(self):
        """Gets the estlosttime of this ServiceProblemsNPTData.  # noqa: E501


        :return: The estlosttime of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: float
        """
        return self._estlosttime

    @estlosttime.setter
    def estlosttime(self, estlosttime):
        """Sets the estlosttime of this ServiceProblemsNPTData.


        :param estlosttime: The estlosttime of this ServiceProblemsNPTData.  # noqa: E501
        :type: float
        """

        self._estlosttime = estlosttime

    @property
    def excludefromproblemtime(self):
        """Gets the excludefromproblemtime of this ServiceProblemsNPTData.  # noqa: E501


        :return: The excludefromproblemtime of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: bool
        """
        return self._excludefromproblemtime

    @excludefromproblemtime.setter
    def excludefromproblemtime(self, excludefromproblemtime):
        """Sets the excludefromproblemtime of this ServiceProblemsNPTData.


        :param excludefromproblemtime: The excludefromproblemtime of this ServiceProblemsNPTData.  # noqa: E501
        :type: bool
        """

        self._excludefromproblemtime = excludefromproblemtime

    @property
    def idrec(self):
        """Gets the idrec of this ServiceProblemsNPTData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ServiceProblemsNPTData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecfaileditem(self):
        """Gets the idrecfaileditem of this ServiceProblemsNPTData.  # noqa: E501


        :return: The idrecfaileditem of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._idrecfaileditem

    @idrecfaileditem.setter
    def idrecfaileditem(self, idrecfaileditem):
        """Sets the idrecfaileditem of this ServiceProblemsNPTData.


        :param idrecfaileditem: The idrecfaileditem of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._idrecfaileditem = idrecfaileditem

    @property
    def idrecjobservicecontract(self):
        """Gets the idrecjobservicecontract of this ServiceProblemsNPTData.  # noqa: E501


        :return: The idrecjobservicecontract of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobservicecontract

    @idrecjobservicecontract.setter
    def idrecjobservicecontract(self, idrecjobservicecontract):
        """Sets the idrecjobservicecontract of this ServiceProblemsNPTData.


        :param idrecjobservicecontract: The idrecjobservicecontract of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._idrecjobservicecontract = idrecjobservicecontract

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ServiceProblemsNPTData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ServiceProblemsNPTData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this ServiceProblemsNPTData.  # noqa: E501


        :return: The idrecwellbore of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this ServiceProblemsNPTData.


        :param idrecwellbore: The idrecwellbore of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this ServiceProblemsNPTData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ServiceProblemsNPTData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def opscondition(self):
        """Gets the opscondition of this ServiceProblemsNPTData.  # noqa: E501


        :return: The opscondition of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._opscondition

    @opscondition.setter
    def opscondition(self, opscondition):
        """Sets the opscondition of this ServiceProblemsNPTData.


        :param opscondition: The opscondition of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._opscondition = opscondition

    @property
    def potentialseverity(self):
        """Gets the potentialseverity of this ServiceProblemsNPTData.  # noqa: E501


        :return: The potentialseverity of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._potentialseverity

    @potentialseverity.setter
    def potentialseverity(self, potentialseverity):
        """Sets the potentialseverity of this ServiceProblemsNPTData.


        :param potentialseverity: The potentialseverity of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._potentialseverity = potentialseverity

    @property
    def problemsystem1(self):
        """Gets the problemsystem1 of this ServiceProblemsNPTData.  # noqa: E501


        :return: The problemsystem1 of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._problemsystem1

    @problemsystem1.setter
    def problemsystem1(self, problemsystem1):
        """Sets the problemsystem1 of this ServiceProblemsNPTData.


        :param problemsystem1: The problemsystem1 of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._problemsystem1 = problemsystem1

    @property
    def problemsystem2(self):
        """Gets the problemsystem2 of this ServiceProblemsNPTData.  # noqa: E501


        :return: The problemsystem2 of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._problemsystem2

    @problemsystem2.setter
    def problemsystem2(self, problemsystem2):
        """Sets the problemsystem2 of this ServiceProblemsNPTData.


        :param problemsystem2: The problemsystem2 of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._problemsystem2 = problemsystem2

    @property
    def problemsystem3(self):
        """Gets the problemsystem3 of this ServiceProblemsNPTData.  # noqa: E501


        :return: The problemsystem3 of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._problemsystem3

    @problemsystem3.setter
    def problemsystem3(self, problemsystem3):
        """Sets the problemsystem3 of this ServiceProblemsNPTData.


        :param problemsystem3: The problemsystem3 of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._problemsystem3 = problemsystem3

    @property
    def refno(self):
        """Gets the refno of this ServiceProblemsNPTData.  # noqa: E501


        :return: The refno of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this ServiceProblemsNPTData.


        :param refno: The refno of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def severity(self):
        """Gets the severity of this ServiceProblemsNPTData.  # noqa: E501


        :return: The severity of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ServiceProblemsNPTData.


        :param severity: The severity of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def status(self):
        """Gets the status of this ServiceProblemsNPTData.  # noqa: E501


        :return: The status of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceProblemsNPTData.


        :param status: The status of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def typ(self):
        """Gets the typ of this ServiceProblemsNPTData.  # noqa: E501


        :return: The typ of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this ServiceProblemsNPTData.


        :param typ: The typ of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def typdetail(self):
        """Gets the typdetail of this ServiceProblemsNPTData.  # noqa: E501


        :return: The typdetail of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._typdetail

    @typdetail.setter
    def typdetail(self, typdetail):
        """Sets the typdetail of this ServiceProblemsNPTData.


        :param typdetail: The typdetail of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._typdetail = typdetail

    @property
    def systag(self):
        """Gets the systag of this ServiceProblemsNPTData.  # noqa: E501


        :return: The systag of this ServiceProblemsNPTData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ServiceProblemsNPTData.


        :param systag: The systag of this ServiceProblemsNPTData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceProblemsNPTData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceProblemsNPTData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
