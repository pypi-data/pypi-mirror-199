# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RFTFluidData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densityfluid': 'float',
        'dursample': 'float',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'nacl': 'float',
        'ph': 'float',
        'preschamberend': 'float',
        'preschambersurf': 'float',
        'refno': 'str',
        'refnosamplechamber': 'str',
        'volfluid': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'densityfluid': 'densityfluid',
        'dursample': 'dursample',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'nacl': 'nacl',
        'ph': 'ph',
        'preschamberend': 'preschamberend',
        'preschambersurf': 'preschambersurf',
        'refno': 'refno',
        'refnosamplechamber': 'refnosamplechamber',
        'volfluid': 'volfluid',
        'systag': 'systag'
    }

    def __init__(self, com=None, densityfluid=None, dursample=None, fluidtyp=None, idrec=None, idrecparent=None, idwell=None, nacl=None, ph=None, preschamberend=None, preschambersurf=None, refno=None, refnosamplechamber=None, volfluid=None, systag=None):  # noqa: E501
        """RFTFluidData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densityfluid = None
        self._dursample = None
        self._fluidtyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._nacl = None
        self._ph = None
        self._preschamberend = None
        self._preschambersurf = None
        self._refno = None
        self._refnosamplechamber = None
        self._volfluid = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densityfluid is not None:
            self.densityfluid = densityfluid
        if dursample is not None:
            self.dursample = dursample
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if nacl is not None:
            self.nacl = nacl
        if ph is not None:
            self.ph = ph
        if preschamberend is not None:
            self.preschamberend = preschamberend
        if preschambersurf is not None:
            self.preschambersurf = preschambersurf
        if refno is not None:
            self.refno = refno
        if refnosamplechamber is not None:
            self.refnosamplechamber = refnosamplechamber
        if volfluid is not None:
            self.volfluid = volfluid
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this RFTFluidData.  # noqa: E501


        :return: The com of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this RFTFluidData.


        :param com: The com of this RFTFluidData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityfluid(self):
        """Gets the densityfluid of this RFTFluidData.  # noqa: E501


        :return: The densityfluid of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._densityfluid

    @densityfluid.setter
    def densityfluid(self, densityfluid):
        """Sets the densityfluid of this RFTFluidData.


        :param densityfluid: The densityfluid of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._densityfluid = densityfluid

    @property
    def dursample(self):
        """Gets the dursample of this RFTFluidData.  # noqa: E501


        :return: The dursample of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._dursample

    @dursample.setter
    def dursample(self, dursample):
        """Sets the dursample of this RFTFluidData.


        :param dursample: The dursample of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._dursample = dursample

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this RFTFluidData.  # noqa: E501


        :return: The fluidtyp of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this RFTFluidData.


        :param fluidtyp: The fluidtyp of this RFTFluidData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this RFTFluidData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RFTFluidData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RFTFluidData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RFTFluidData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RFTFluidData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this RFTFluidData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this RFTFluidData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RFTFluidData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RFTFluidData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def nacl(self):
        """Gets the nacl of this RFTFluidData.  # noqa: E501


        :return: The nacl of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._nacl

    @nacl.setter
    def nacl(self, nacl):
        """Sets the nacl of this RFTFluidData.


        :param nacl: The nacl of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._nacl = nacl

    @property
    def ph(self):
        """Gets the ph of this RFTFluidData.  # noqa: E501


        :return: The ph of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._ph

    @ph.setter
    def ph(self, ph):
        """Sets the ph of this RFTFluidData.


        :param ph: The ph of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._ph = ph

    @property
    def preschamberend(self):
        """Gets the preschamberend of this RFTFluidData.  # noqa: E501


        :return: The preschamberend of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._preschamberend

    @preschamberend.setter
    def preschamberend(self, preschamberend):
        """Sets the preschamberend of this RFTFluidData.


        :param preschamberend: The preschamberend of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._preschamberend = preschamberend

    @property
    def preschambersurf(self):
        """Gets the preschambersurf of this RFTFluidData.  # noqa: E501


        :return: The preschambersurf of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._preschambersurf

    @preschambersurf.setter
    def preschambersurf(self, preschambersurf):
        """Sets the preschambersurf of this RFTFluidData.


        :param preschambersurf: The preschambersurf of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._preschambersurf = preschambersurf

    @property
    def refno(self):
        """Gets the refno of this RFTFluidData.  # noqa: E501


        :return: The refno of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this RFTFluidData.


        :param refno: The refno of this RFTFluidData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def refnosamplechamber(self):
        """Gets the refnosamplechamber of this RFTFluidData.  # noqa: E501


        :return: The refnosamplechamber of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._refnosamplechamber

    @refnosamplechamber.setter
    def refnosamplechamber(self, refnosamplechamber):
        """Sets the refnosamplechamber of this RFTFluidData.


        :param refnosamplechamber: The refnosamplechamber of this RFTFluidData.  # noqa: E501
        :type: str
        """

        self._refnosamplechamber = refnosamplechamber

    @property
    def volfluid(self):
        """Gets the volfluid of this RFTFluidData.  # noqa: E501


        :return: The volfluid of this RFTFluidData.  # noqa: E501
        :rtype: float
        """
        return self._volfluid

    @volfluid.setter
    def volfluid(self, volfluid):
        """Sets the volfluid of this RFTFluidData.


        :param volfluid: The volfluid of this RFTFluidData.  # noqa: E501
        :type: float
        """

        self._volfluid = volfluid

    @property
    def systag(self):
        """Gets the systag of this RFTFluidData.  # noqa: E501


        :return: The systag of this RFTFluidData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RFTFluidData.


        :param systag: The systag of this RFTFluidData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RFTFluidData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RFTFluidData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
