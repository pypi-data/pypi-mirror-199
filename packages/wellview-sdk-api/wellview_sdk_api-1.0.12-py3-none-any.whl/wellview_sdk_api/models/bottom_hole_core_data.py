# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BottomHoleCoreData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barrellength': 'float',
        'barreltyp': 'str',
        'com': 'str',
        'contractor': 'str',
        'coreno': 'int',
        'depthbtm': 'float',
        'depthtop': 'float',
        'des': 'str',
        'dttm': 'datetime',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idrecdrillstringcomp': 'str',
        'idrecgeoeval': 'str',
        'idrecjob': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'lenrecovered': 'float',
        'oriented': 'bool',
        'proposed': 'bool',
        'purpose': 'str',
        'refno': 'str',
        'rqd': 'float',
        'szdiacore': 'float',
        'treatmentmethod': 'str',
        'typ': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'barrellength': 'barrellength',
        'barreltyp': 'barreltyp',
        'com': 'com',
        'contractor': 'contractor',
        'coreno': 'coreno',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'dttm': 'dttm',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idrecdrillstringcomp': 'idrecdrillstringcomp',
        'idrecgeoeval': 'idrecgeoeval',
        'idrecjob': 'idrecjob',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'lenrecovered': 'lenrecovered',
        'oriented': 'oriented',
        'proposed': 'proposed',
        'purpose': 'purpose',
        'refno': 'refno',
        'rqd': 'rqd',
        'szdiacore': 'szdiacore',
        'treatmentmethod': 'treatmentmethod',
        'typ': 'typ',
        'systag': 'systag'
    }

    def __init__(self, barrellength=None, barreltyp=None, com=None, contractor=None, coreno=None, depthbtm=None, depthtop=None, des=None, dttm=None, fluidtyp=None, idrec=None, idrecdrillstringcomp=None, idrecgeoeval=None, idrecjob=None, idrecwellbore=None, idwell=None, lenrecovered=None, oriented=None, proposed=None, purpose=None, refno=None, rqd=None, szdiacore=None, treatmentmethod=None, typ=None, systag=None):  # noqa: E501
        """BottomHoleCoreData - a model defined in Swagger"""  # noqa: E501
        self._barrellength = None
        self._barreltyp = None
        self._com = None
        self._contractor = None
        self._coreno = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._dttm = None
        self._fluidtyp = None
        self._idrec = None
        self._idrecdrillstringcomp = None
        self._idrecgeoeval = None
        self._idrecjob = None
        self._idrecwellbore = None
        self._idwell = None
        self._lenrecovered = None
        self._oriented = None
        self._proposed = None
        self._purpose = None
        self._refno = None
        self._rqd = None
        self._szdiacore = None
        self._treatmentmethod = None
        self._typ = None
        self._systag = None
        self.discriminator = None
        if barrellength is not None:
            self.barrellength = barrellength
        if barreltyp is not None:
            self.barreltyp = barreltyp
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if coreno is not None:
            self.coreno = coreno
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idrecdrillstringcomp is not None:
            self.idrecdrillstringcomp = idrecdrillstringcomp
        if idrecgeoeval is not None:
            self.idrecgeoeval = idrecgeoeval
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if lenrecovered is not None:
            self.lenrecovered = lenrecovered
        if oriented is not None:
            self.oriented = oriented
        if proposed is not None:
            self.proposed = proposed
        if purpose is not None:
            self.purpose = purpose
        if refno is not None:
            self.refno = refno
        if rqd is not None:
            self.rqd = rqd
        if szdiacore is not None:
            self.szdiacore = szdiacore
        if treatmentmethod is not None:
            self.treatmentmethod = treatmentmethod
        if typ is not None:
            self.typ = typ
        if systag is not None:
            self.systag = systag

    @property
    def barrellength(self):
        """Gets the barrellength of this BottomHoleCoreData.  # noqa: E501


        :return: The barrellength of this BottomHoleCoreData.  # noqa: E501
        :rtype: float
        """
        return self._barrellength

    @barrellength.setter
    def barrellength(self, barrellength):
        """Sets the barrellength of this BottomHoleCoreData.


        :param barrellength: The barrellength of this BottomHoleCoreData.  # noqa: E501
        :type: float
        """

        self._barrellength = barrellength

    @property
    def barreltyp(self):
        """Gets the barreltyp of this BottomHoleCoreData.  # noqa: E501


        :return: The barreltyp of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._barreltyp

    @barreltyp.setter
    def barreltyp(self, barreltyp):
        """Sets the barreltyp of this BottomHoleCoreData.


        :param barreltyp: The barreltyp of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._barreltyp = barreltyp

    @property
    def com(self):
        """Gets the com of this BottomHoleCoreData.  # noqa: E501


        :return: The com of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this BottomHoleCoreData.


        :param com: The com of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this BottomHoleCoreData.  # noqa: E501


        :return: The contractor of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this BottomHoleCoreData.


        :param contractor: The contractor of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def coreno(self):
        """Gets the coreno of this BottomHoleCoreData.  # noqa: E501


        :return: The coreno of this BottomHoleCoreData.  # noqa: E501
        :rtype: int
        """
        return self._coreno

    @coreno.setter
    def coreno(self, coreno):
        """Sets the coreno of this BottomHoleCoreData.


        :param coreno: The coreno of this BottomHoleCoreData.  # noqa: E501
        :type: int
        """

        self._coreno = coreno

    @property
    def depthbtm(self):
        """Gets the depthbtm of this BottomHoleCoreData.  # noqa: E501


        :return: The depthbtm of this BottomHoleCoreData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this BottomHoleCoreData.


        :param depthbtm: The depthbtm of this BottomHoleCoreData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this BottomHoleCoreData.  # noqa: E501


        :return: The depthtop of this BottomHoleCoreData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this BottomHoleCoreData.


        :param depthtop: The depthtop of this BottomHoleCoreData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this BottomHoleCoreData.  # noqa: E501


        :return: The des of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this BottomHoleCoreData.


        :param des: The des of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this BottomHoleCoreData.  # noqa: E501


        :return: The dttm of this BottomHoleCoreData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this BottomHoleCoreData.


        :param dttm: The dttm of this BottomHoleCoreData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this BottomHoleCoreData.  # noqa: E501


        :return: The fluidtyp of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this BottomHoleCoreData.


        :param fluidtyp: The fluidtyp of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this BottomHoleCoreData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this BottomHoleCoreData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdrillstringcomp(self):
        """Gets the idrecdrillstringcomp of this BottomHoleCoreData.  # noqa: E501


        :return: The idrecdrillstringcomp of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomp

    @idrecdrillstringcomp.setter
    def idrecdrillstringcomp(self, idrecdrillstringcomp):
        """Sets the idrecdrillstringcomp of this BottomHoleCoreData.


        :param idrecdrillstringcomp: The idrecdrillstringcomp of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomp = idrecdrillstringcomp

    @property
    def idrecgeoeval(self):
        """Gets the idrecgeoeval of this BottomHoleCoreData.  # noqa: E501


        :return: The idrecgeoeval of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecgeoeval

    @idrecgeoeval.setter
    def idrecgeoeval(self, idrecgeoeval):
        """Sets the idrecgeoeval of this BottomHoleCoreData.


        :param idrecgeoeval: The idrecgeoeval of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._idrecgeoeval = idrecgeoeval

    @property
    def idrecjob(self):
        """Gets the idrecjob of this BottomHoleCoreData.  # noqa: E501


        :return: The idrecjob of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this BottomHoleCoreData.


        :param idrecjob: The idrecjob of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this BottomHoleCoreData.  # noqa: E501


        :return: The idrecwellbore of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this BottomHoleCoreData.


        :param idrecwellbore: The idrecwellbore of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this BottomHoleCoreData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this BottomHoleCoreData.

        id of well  # noqa: E501

        :param idwell: The idwell of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lenrecovered(self):
        """Gets the lenrecovered of this BottomHoleCoreData.  # noqa: E501


        :return: The lenrecovered of this BottomHoleCoreData.  # noqa: E501
        :rtype: float
        """
        return self._lenrecovered

    @lenrecovered.setter
    def lenrecovered(self, lenrecovered):
        """Sets the lenrecovered of this BottomHoleCoreData.


        :param lenrecovered: The lenrecovered of this BottomHoleCoreData.  # noqa: E501
        :type: float
        """

        self._lenrecovered = lenrecovered

    @property
    def oriented(self):
        """Gets the oriented of this BottomHoleCoreData.  # noqa: E501


        :return: The oriented of this BottomHoleCoreData.  # noqa: E501
        :rtype: bool
        """
        return self._oriented

    @oriented.setter
    def oriented(self, oriented):
        """Sets the oriented of this BottomHoleCoreData.


        :param oriented: The oriented of this BottomHoleCoreData.  # noqa: E501
        :type: bool
        """

        self._oriented = oriented

    @property
    def proposed(self):
        """Gets the proposed of this BottomHoleCoreData.  # noqa: E501


        :return: The proposed of this BottomHoleCoreData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this BottomHoleCoreData.


        :param proposed: The proposed of this BottomHoleCoreData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def purpose(self):
        """Gets the purpose of this BottomHoleCoreData.  # noqa: E501


        :return: The purpose of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this BottomHoleCoreData.


        :param purpose: The purpose of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def refno(self):
        """Gets the refno of this BottomHoleCoreData.  # noqa: E501


        :return: The refno of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this BottomHoleCoreData.


        :param refno: The refno of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def rqd(self):
        """Gets the rqd of this BottomHoleCoreData.  # noqa: E501


        :return: The rqd of this BottomHoleCoreData.  # noqa: E501
        :rtype: float
        """
        return self._rqd

    @rqd.setter
    def rqd(self, rqd):
        """Sets the rqd of this BottomHoleCoreData.


        :param rqd: The rqd of this BottomHoleCoreData.  # noqa: E501
        :type: float
        """

        self._rqd = rqd

    @property
    def szdiacore(self):
        """Gets the szdiacore of this BottomHoleCoreData.  # noqa: E501


        :return: The szdiacore of this BottomHoleCoreData.  # noqa: E501
        :rtype: float
        """
        return self._szdiacore

    @szdiacore.setter
    def szdiacore(self, szdiacore):
        """Sets the szdiacore of this BottomHoleCoreData.


        :param szdiacore: The szdiacore of this BottomHoleCoreData.  # noqa: E501
        :type: float
        """

        self._szdiacore = szdiacore

    @property
    def treatmentmethod(self):
        """Gets the treatmentmethod of this BottomHoleCoreData.  # noqa: E501


        :return: The treatmentmethod of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._treatmentmethod

    @treatmentmethod.setter
    def treatmentmethod(self, treatmentmethod):
        """Sets the treatmentmethod of this BottomHoleCoreData.


        :param treatmentmethod: The treatmentmethod of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._treatmentmethod = treatmentmethod

    @property
    def typ(self):
        """Gets the typ of this BottomHoleCoreData.  # noqa: E501


        :return: The typ of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this BottomHoleCoreData.


        :param typ: The typ of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def systag(self):
        """Gets the systag of this BottomHoleCoreData.  # noqa: E501


        :return: The systag of this BottomHoleCoreData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this BottomHoleCoreData.


        :param systag: The systag of this BottomHoleCoreData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BottomHoleCoreData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BottomHoleCoreData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
