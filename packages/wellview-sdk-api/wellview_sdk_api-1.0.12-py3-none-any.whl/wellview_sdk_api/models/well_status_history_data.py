# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellStatusHistoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idwell': 'str',
        'primaryfluiddes': 'str',
        'source': 'str',
        'wellstatus1': 'str',
        'wellstatus2': 'str',
        'welltyp1': 'str',
        'welltyp2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'primaryfluiddes': 'primaryfluiddes',
        'source': 'source',
        'wellstatus1': 'wellstatus1',
        'wellstatus2': 'wellstatus2',
        'welltyp1': 'welltyp1',
        'welltyp2': 'welltyp2',
        'systag': 'systag'
    }

    def __init__(self, com=None, dttm=None, idrec=None, idwell=None, primaryfluiddes=None, source=None, wellstatus1=None, wellstatus2=None, welltyp1=None, welltyp2=None, systag=None):  # noqa: E501
        """WellStatusHistoryData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttm = None
        self._idrec = None
        self._idwell = None
        self._primaryfluiddes = None
        self._source = None
        self._wellstatus1 = None
        self._wellstatus2 = None
        self._welltyp1 = None
        self._welltyp2 = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        self.idwell = idwell
        if primaryfluiddes is not None:
            self.primaryfluiddes = primaryfluiddes
        if source is not None:
            self.source = source
        if wellstatus1 is not None:
            self.wellstatus1 = wellstatus1
        if wellstatus2 is not None:
            self.wellstatus2 = wellstatus2
        if welltyp1 is not None:
            self.welltyp1 = welltyp1
        if welltyp2 is not None:
            self.welltyp2 = welltyp2
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this WellStatusHistoryData.  # noqa: E501


        :return: The com of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellStatusHistoryData.


        :param com: The com of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttm(self):
        """Gets the dttm of this WellStatusHistoryData.  # noqa: E501


        :return: The dttm of this WellStatusHistoryData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellStatusHistoryData.


        :param dttm: The dttm of this WellStatusHistoryData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this WellStatusHistoryData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellStatusHistoryData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this WellStatusHistoryData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellStatusHistoryData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def primaryfluiddes(self):
        """Gets the primaryfluiddes of this WellStatusHistoryData.  # noqa: E501


        :return: The primaryfluiddes of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._primaryfluiddes

    @primaryfluiddes.setter
    def primaryfluiddes(self, primaryfluiddes):
        """Sets the primaryfluiddes of this WellStatusHistoryData.


        :param primaryfluiddes: The primaryfluiddes of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._primaryfluiddes = primaryfluiddes

    @property
    def source(self):
        """Gets the source of this WellStatusHistoryData.  # noqa: E501


        :return: The source of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this WellStatusHistoryData.


        :param source: The source of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def wellstatus1(self):
        """Gets the wellstatus1 of this WellStatusHistoryData.  # noqa: E501


        :return: The wellstatus1 of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._wellstatus1

    @wellstatus1.setter
    def wellstatus1(self, wellstatus1):
        """Sets the wellstatus1 of this WellStatusHistoryData.


        :param wellstatus1: The wellstatus1 of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._wellstatus1 = wellstatus1

    @property
    def wellstatus2(self):
        """Gets the wellstatus2 of this WellStatusHistoryData.  # noqa: E501


        :return: The wellstatus2 of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._wellstatus2

    @wellstatus2.setter
    def wellstatus2(self, wellstatus2):
        """Sets the wellstatus2 of this WellStatusHistoryData.


        :param wellstatus2: The wellstatus2 of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._wellstatus2 = wellstatus2

    @property
    def welltyp1(self):
        """Gets the welltyp1 of this WellStatusHistoryData.  # noqa: E501


        :return: The welltyp1 of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._welltyp1

    @welltyp1.setter
    def welltyp1(self, welltyp1):
        """Sets the welltyp1 of this WellStatusHistoryData.


        :param welltyp1: The welltyp1 of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._welltyp1 = welltyp1

    @property
    def welltyp2(self):
        """Gets the welltyp2 of this WellStatusHistoryData.  # noqa: E501


        :return: The welltyp2 of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._welltyp2

    @welltyp2.setter
    def welltyp2(self, welltyp2):
        """Sets the welltyp2 of this WellStatusHistoryData.


        :param welltyp2: The welltyp2 of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._welltyp2 = welltyp2

    @property
    def systag(self):
        """Gets the systag of this WellStatusHistoryData.  # noqa: E501


        :return: The systag of this WellStatusHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellStatusHistoryData.


        :param systag: The systag of this WellStatusHistoryData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellStatusHistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellStatusHistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
