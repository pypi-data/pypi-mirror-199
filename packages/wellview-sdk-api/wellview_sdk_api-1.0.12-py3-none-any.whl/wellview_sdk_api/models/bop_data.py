# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BOPData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'com': 'str',
        'depthbtm': 'float',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmlastcert': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'presrating': 'float',
        'proposed': 'bool',
        'service': 'str',
        'szclear': 'float',
        'szheight': 'float',
        'szidnom': 'float',
        'weight': 'float',
        'systag': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'com': 'com',
        'depthbtm': 'depthbtm',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmlastcert': 'dttmlastcert',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'presrating': 'presrating',
        'proposed': 'proposed',
        'service': 'service',
        'szclear': 'szclear',
        'szheight': 'szheight',
        'szidnom': 'szidnom',
        'weight': 'weight',
        'systag': 'systag'
    }

    def __init__(self, _class=None, com=None, depthbtm=None, des=None, dttmend=None, dttmlastcert=None, dttmstart=None, idrec=None, idrecparent=None, idwell=None, presrating=None, proposed=None, service=None, szclear=None, szheight=None, szidnom=None, weight=None, systag=None):  # noqa: E501
        """BOPData - a model defined in Swagger"""  # noqa: E501
        self.__class = None
        self._com = None
        self._depthbtm = None
        self._des = None
        self._dttmend = None
        self._dttmlastcert = None
        self._dttmstart = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._presrating = None
        self._proposed = None
        self._service = None
        self._szclear = None
        self._szheight = None
        self._szidnom = None
        self._weight = None
        self._systag = None
        self.discriminator = None
        if _class is not None:
            self._class = _class
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmlastcert is not None:
            self.dttmlastcert = dttmlastcert
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if presrating is not None:
            self.presrating = presrating
        if proposed is not None:
            self.proposed = proposed
        if service is not None:
            self.service = service
        if szclear is not None:
            self.szclear = szclear
        if szheight is not None:
            self.szheight = szheight
        if szidnom is not None:
            self.szidnom = szidnom
        if weight is not None:
            self.weight = weight
        if systag is not None:
            self.systag = systag

    @property
    def _class(self):
        """Gets the _class of this BOPData.  # noqa: E501


        :return: The _class of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this BOPData.


        :param _class: The _class of this BOPData.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def com(self):
        """Gets the com of this BOPData.  # noqa: E501


        :return: The com of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this BOPData.


        :param com: The com of this BOPData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this BOPData.  # noqa: E501


        :return: The depthbtm of this BOPData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this BOPData.


        :param depthbtm: The depthbtm of this BOPData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def des(self):
        """Gets the des of this BOPData.  # noqa: E501


        :return: The des of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this BOPData.


        :param des: The des of this BOPData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this BOPData.  # noqa: E501


        :return: The dttmend of this BOPData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this BOPData.


        :param dttmend: The dttmend of this BOPData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmlastcert(self):
        """Gets the dttmlastcert of this BOPData.  # noqa: E501


        :return: The dttmlastcert of this BOPData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastcert

    @dttmlastcert.setter
    def dttmlastcert(self, dttmlastcert):
        """Sets the dttmlastcert of this BOPData.


        :param dttmlastcert: The dttmlastcert of this BOPData.  # noqa: E501
        :type: datetime
        """

        self._dttmlastcert = dttmlastcert

    @property
    def dttmstart(self):
        """Gets the dttmstart of this BOPData.  # noqa: E501


        :return: The dttmstart of this BOPData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this BOPData.


        :param dttmstart: The dttmstart of this BOPData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this BOPData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this BOPData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this BOPData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this BOPData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this BOPData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this BOPData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this BOPData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this BOPData.

        id of well  # noqa: E501

        :param idwell: The idwell of this BOPData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def presrating(self):
        """Gets the presrating of this BOPData.  # noqa: E501


        :return: The presrating of this BOPData.  # noqa: E501
        :rtype: float
        """
        return self._presrating

    @presrating.setter
    def presrating(self, presrating):
        """Sets the presrating of this BOPData.


        :param presrating: The presrating of this BOPData.  # noqa: E501
        :type: float
        """

        self._presrating = presrating

    @property
    def proposed(self):
        """Gets the proposed of this BOPData.  # noqa: E501


        :return: The proposed of this BOPData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this BOPData.


        :param proposed: The proposed of this BOPData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def service(self):
        """Gets the service of this BOPData.  # noqa: E501


        :return: The service of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this BOPData.


        :param service: The service of this BOPData.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def szclear(self):
        """Gets the szclear of this BOPData.  # noqa: E501


        :return: The szclear of this BOPData.  # noqa: E501
        :rtype: float
        """
        return self._szclear

    @szclear.setter
    def szclear(self, szclear):
        """Sets the szclear of this BOPData.


        :param szclear: The szclear of this BOPData.  # noqa: E501
        :type: float
        """

        self._szclear = szclear

    @property
    def szheight(self):
        """Gets the szheight of this BOPData.  # noqa: E501


        :return: The szheight of this BOPData.  # noqa: E501
        :rtype: float
        """
        return self._szheight

    @szheight.setter
    def szheight(self, szheight):
        """Sets the szheight of this BOPData.


        :param szheight: The szheight of this BOPData.  # noqa: E501
        :type: float
        """

        self._szheight = szheight

    @property
    def szidnom(self):
        """Gets the szidnom of this BOPData.  # noqa: E501


        :return: The szidnom of this BOPData.  # noqa: E501
        :rtype: float
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this BOPData.


        :param szidnom: The szidnom of this BOPData.  # noqa: E501
        :type: float
        """

        self._szidnom = szidnom

    @property
    def weight(self):
        """Gets the weight of this BOPData.  # noqa: E501


        :return: The weight of this BOPData.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this BOPData.


        :param weight: The weight of this BOPData.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def systag(self):
        """Gets the systag of this BOPData.  # noqa: E501


        :return: The systag of this BOPData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this BOPData.


        :param systag: The systag of this BOPData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BOPData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BOPData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
