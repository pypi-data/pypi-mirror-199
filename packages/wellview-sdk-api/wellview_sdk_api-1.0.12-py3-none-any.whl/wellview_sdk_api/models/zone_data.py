# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ZoneData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'datasource': 'str',
        'depthbtm': 'float',
        'depthref': 'float',
        'depthtop': 'float',
        'dttmzoneabandon': 'datetime',
        'dttmzonelic': 'datetime',
        'dttmzoneonprod': 'datetime',
        'fieldcode': 'str',
        'fieldname': 'str',
        'iconname': 'str',
        'idrec': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'objective': 'str',
        'unitcode': 'str',
        'unitname': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'usertxt6': 'str',
        'zonecode': 'str',
        'zoneida': 'str',
        'zoneidb': 'str',
        'zoneidc': 'str',
        'zoneidd': 'str',
        'zoneide': 'str',
        'zonelicensee': 'str',
        'zonelicenseno': 'str',
        'zonename': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'datasource': 'datasource',
        'depthbtm': 'depthbtm',
        'depthref': 'depthref',
        'depthtop': 'depthtop',
        'dttmzoneabandon': 'dttmzoneabandon',
        'dttmzonelic': 'dttmzonelic',
        'dttmzoneonprod': 'dttmzoneonprod',
        'fieldcode': 'fieldcode',
        'fieldname': 'fieldname',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'objective': 'objective',
        'unitcode': 'unitcode',
        'unitname': 'unitname',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'usertxt6': 'usertxt6',
        'zonecode': 'zonecode',
        'zoneida': 'zoneida',
        'zoneidb': 'zoneidb',
        'zoneidc': 'zoneidc',
        'zoneidd': 'zoneidd',
        'zoneide': 'zoneide',
        'zonelicensee': 'zonelicensee',
        'zonelicenseno': 'zonelicenseno',
        'zonename': 'zonename',
        'systag': 'systag'
    }

    def __init__(self, com=None, datasource=None, depthbtm=None, depthref=None, depthtop=None, dttmzoneabandon=None, dttmzonelic=None, dttmzoneonprod=None, fieldcode=None, fieldname=None, iconname=None, idrec=None, idrecwellbore=None, idwell=None, objective=None, unitcode=None, unitname=None, usertxt1=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, usertxt6=None, zonecode=None, zoneida=None, zoneidb=None, zoneidc=None, zoneidd=None, zoneide=None, zonelicensee=None, zonelicenseno=None, zonename=None, systag=None):  # noqa: E501
        """ZoneData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._datasource = None
        self._depthbtm = None
        self._depthref = None
        self._depthtop = None
        self._dttmzoneabandon = None
        self._dttmzonelic = None
        self._dttmzoneonprod = None
        self._fieldcode = None
        self._fieldname = None
        self._iconname = None
        self._idrec = None
        self._idrecwellbore = None
        self._idwell = None
        self._objective = None
        self._unitcode = None
        self._unitname = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._usertxt6 = None
        self._zonecode = None
        self._zoneida = None
        self._zoneidb = None
        self._zoneidc = None
        self._zoneidd = None
        self._zoneide = None
        self._zonelicensee = None
        self._zonelicenseno = None
        self._zonename = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if datasource is not None:
            self.datasource = datasource
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthref is not None:
            self.depthref = depthref
        if depthtop is not None:
            self.depthtop = depthtop
        if dttmzoneabandon is not None:
            self.dttmzoneabandon = dttmzoneabandon
        if dttmzonelic is not None:
            self.dttmzonelic = dttmzonelic
        if dttmzoneonprod is not None:
            self.dttmzoneonprod = dttmzoneonprod
        if fieldcode is not None:
            self.fieldcode = fieldcode
        if fieldname is not None:
            self.fieldname = fieldname
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if objective is not None:
            self.objective = objective
        if unitcode is not None:
            self.unitcode = unitcode
        if unitname is not None:
            self.unitname = unitname
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if usertxt6 is not None:
            self.usertxt6 = usertxt6
        if zonecode is not None:
            self.zonecode = zonecode
        if zoneida is not None:
            self.zoneida = zoneida
        if zoneidb is not None:
            self.zoneidb = zoneidb
        if zoneidc is not None:
            self.zoneidc = zoneidc
        if zoneidd is not None:
            self.zoneidd = zoneidd
        if zoneide is not None:
            self.zoneide = zoneide
        if zonelicensee is not None:
            self.zonelicensee = zonelicensee
        if zonelicenseno is not None:
            self.zonelicenseno = zonelicenseno
        if zonename is not None:
            self.zonename = zonename
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this ZoneData.  # noqa: E501


        :return: The com of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ZoneData.


        :param com: The com of this ZoneData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def datasource(self):
        """Gets the datasource of this ZoneData.  # noqa: E501


        :return: The datasource of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this ZoneData.


        :param datasource: The datasource of this ZoneData.  # noqa: E501
        :type: str
        """

        self._datasource = datasource

    @property
    def depthbtm(self):
        """Gets the depthbtm of this ZoneData.  # noqa: E501


        :return: The depthbtm of this ZoneData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this ZoneData.


        :param depthbtm: The depthbtm of this ZoneData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthref(self):
        """Gets the depthref of this ZoneData.  # noqa: E501


        :return: The depthref of this ZoneData.  # noqa: E501
        :rtype: float
        """
        return self._depthref

    @depthref.setter
    def depthref(self, depthref):
        """Sets the depthref of this ZoneData.


        :param depthref: The depthref of this ZoneData.  # noqa: E501
        :type: float
        """

        self._depthref = depthref

    @property
    def depthtop(self):
        """Gets the depthtop of this ZoneData.  # noqa: E501


        :return: The depthtop of this ZoneData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this ZoneData.


        :param depthtop: The depthtop of this ZoneData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def dttmzoneabandon(self):
        """Gets the dttmzoneabandon of this ZoneData.  # noqa: E501


        :return: The dttmzoneabandon of this ZoneData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmzoneabandon

    @dttmzoneabandon.setter
    def dttmzoneabandon(self, dttmzoneabandon):
        """Sets the dttmzoneabandon of this ZoneData.


        :param dttmzoneabandon: The dttmzoneabandon of this ZoneData.  # noqa: E501
        :type: datetime
        """

        self._dttmzoneabandon = dttmzoneabandon

    @property
    def dttmzonelic(self):
        """Gets the dttmzonelic of this ZoneData.  # noqa: E501


        :return: The dttmzonelic of this ZoneData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmzonelic

    @dttmzonelic.setter
    def dttmzonelic(self, dttmzonelic):
        """Sets the dttmzonelic of this ZoneData.


        :param dttmzonelic: The dttmzonelic of this ZoneData.  # noqa: E501
        :type: datetime
        """

        self._dttmzonelic = dttmzonelic

    @property
    def dttmzoneonprod(self):
        """Gets the dttmzoneonprod of this ZoneData.  # noqa: E501


        :return: The dttmzoneonprod of this ZoneData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmzoneonprod

    @dttmzoneonprod.setter
    def dttmzoneonprod(self, dttmzoneonprod):
        """Sets the dttmzoneonprod of this ZoneData.


        :param dttmzoneonprod: The dttmzoneonprod of this ZoneData.  # noqa: E501
        :type: datetime
        """

        self._dttmzoneonprod = dttmzoneonprod

    @property
    def fieldcode(self):
        """Gets the fieldcode of this ZoneData.  # noqa: E501


        :return: The fieldcode of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._fieldcode

    @fieldcode.setter
    def fieldcode(self, fieldcode):
        """Sets the fieldcode of this ZoneData.


        :param fieldcode: The fieldcode of this ZoneData.  # noqa: E501
        :type: str
        """

        self._fieldcode = fieldcode

    @property
    def fieldname(self):
        """Gets the fieldname of this ZoneData.  # noqa: E501


        :return: The fieldname of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this ZoneData.


        :param fieldname: The fieldname of this ZoneData.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def iconname(self):
        """Gets the iconname of this ZoneData.  # noqa: E501


        :return: The iconname of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this ZoneData.


        :param iconname: The iconname of this ZoneData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this ZoneData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ZoneData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ZoneData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this ZoneData.  # noqa: E501


        :return: The idrecwellbore of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this ZoneData.


        :param idrecwellbore: The idrecwellbore of this ZoneData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this ZoneData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ZoneData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ZoneData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def objective(self):
        """Gets the objective of this ZoneData.  # noqa: E501


        :return: The objective of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this ZoneData.


        :param objective: The objective of this ZoneData.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def unitcode(self):
        """Gets the unitcode of this ZoneData.  # noqa: E501


        :return: The unitcode of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._unitcode

    @unitcode.setter
    def unitcode(self, unitcode):
        """Sets the unitcode of this ZoneData.


        :param unitcode: The unitcode of this ZoneData.  # noqa: E501
        :type: str
        """

        self._unitcode = unitcode

    @property
    def unitname(self):
        """Gets the unitname of this ZoneData.  # noqa: E501


        :return: The unitname of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._unitname

    @unitname.setter
    def unitname(self, unitname):
        """Sets the unitname of this ZoneData.


        :param unitname: The unitname of this ZoneData.  # noqa: E501
        :type: str
        """

        self._unitname = unitname

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this ZoneData.  # noqa: E501


        :return: The usertxt1 of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this ZoneData.


        :param usertxt1: The usertxt1 of this ZoneData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this ZoneData.  # noqa: E501


        :return: The usertxt2 of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this ZoneData.


        :param usertxt2: The usertxt2 of this ZoneData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this ZoneData.  # noqa: E501


        :return: The usertxt3 of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this ZoneData.


        :param usertxt3: The usertxt3 of this ZoneData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this ZoneData.  # noqa: E501


        :return: The usertxt4 of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this ZoneData.


        :param usertxt4: The usertxt4 of this ZoneData.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this ZoneData.  # noqa: E501


        :return: The usertxt5 of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this ZoneData.


        :param usertxt5: The usertxt5 of this ZoneData.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def usertxt6(self):
        """Gets the usertxt6 of this ZoneData.  # noqa: E501


        :return: The usertxt6 of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt6

    @usertxt6.setter
    def usertxt6(self, usertxt6):
        """Sets the usertxt6 of this ZoneData.


        :param usertxt6: The usertxt6 of this ZoneData.  # noqa: E501
        :type: str
        """

        self._usertxt6 = usertxt6

    @property
    def zonecode(self):
        """Gets the zonecode of this ZoneData.  # noqa: E501


        :return: The zonecode of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zonecode

    @zonecode.setter
    def zonecode(self, zonecode):
        """Sets the zonecode of this ZoneData.


        :param zonecode: The zonecode of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zonecode = zonecode

    @property
    def zoneida(self):
        """Gets the zoneida of this ZoneData.  # noqa: E501


        :return: The zoneida of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zoneida

    @zoneida.setter
    def zoneida(self, zoneida):
        """Sets the zoneida of this ZoneData.


        :param zoneida: The zoneida of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zoneida = zoneida

    @property
    def zoneidb(self):
        """Gets the zoneidb of this ZoneData.  # noqa: E501


        :return: The zoneidb of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zoneidb

    @zoneidb.setter
    def zoneidb(self, zoneidb):
        """Sets the zoneidb of this ZoneData.


        :param zoneidb: The zoneidb of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zoneidb = zoneidb

    @property
    def zoneidc(self):
        """Gets the zoneidc of this ZoneData.  # noqa: E501


        :return: The zoneidc of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zoneidc

    @zoneidc.setter
    def zoneidc(self, zoneidc):
        """Sets the zoneidc of this ZoneData.


        :param zoneidc: The zoneidc of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zoneidc = zoneidc

    @property
    def zoneidd(self):
        """Gets the zoneidd of this ZoneData.  # noqa: E501


        :return: The zoneidd of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zoneidd

    @zoneidd.setter
    def zoneidd(self, zoneidd):
        """Sets the zoneidd of this ZoneData.


        :param zoneidd: The zoneidd of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zoneidd = zoneidd

    @property
    def zoneide(self):
        """Gets the zoneide of this ZoneData.  # noqa: E501


        :return: The zoneide of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zoneide

    @zoneide.setter
    def zoneide(self, zoneide):
        """Sets the zoneide of this ZoneData.


        :param zoneide: The zoneide of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zoneide = zoneide

    @property
    def zonelicensee(self):
        """Gets the zonelicensee of this ZoneData.  # noqa: E501


        :return: The zonelicensee of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zonelicensee

    @zonelicensee.setter
    def zonelicensee(self, zonelicensee):
        """Sets the zonelicensee of this ZoneData.


        :param zonelicensee: The zonelicensee of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zonelicensee = zonelicensee

    @property
    def zonelicenseno(self):
        """Gets the zonelicenseno of this ZoneData.  # noqa: E501


        :return: The zonelicenseno of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zonelicenseno

    @zonelicenseno.setter
    def zonelicenseno(self, zonelicenseno):
        """Sets the zonelicenseno of this ZoneData.


        :param zonelicenseno: The zonelicenseno of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zonelicenseno = zonelicenseno

    @property
    def zonename(self):
        """Gets the zonename of this ZoneData.  # noqa: E501


        :return: The zonename of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._zonename

    @zonename.setter
    def zonename(self, zonename):
        """Sets the zonename of this ZoneData.


        :param zonename: The zonename of this ZoneData.  # noqa: E501
        :type: str
        """

        self._zonename = zonename

    @property
    def systag(self):
        """Gets the systag of this ZoneData.  # noqa: E501


        :return: The systag of this ZoneData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ZoneData.


        :param systag: The systag of this ZoneData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZoneData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZoneData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
