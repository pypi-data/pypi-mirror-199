# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PumpingPrimeMoverData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beltlength': 'float',
        'beltmodel': 'str',
        'beltno': 'int',
        'beltpowertranseff': 'float',
        'beltreductionratio': 'float',
        'beltxsect': 'str',
        'com': 'str',
        'conditionend': 'str',
        'conditionstart': 'str',
        'dttmend': 'datetime',
        'dttmlastoverhaul': 'datetime',
        'dttmstart': 'datetime',
        'frame': 'str',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecrod': 'str',
        'idwell': 'str',
        'make': 'str',
        'model': 'str',
        'pmtyp': 'str',
        'powerrating': 'float',
        'proposed': 'bool',
        'refid': 'str',
        'rpmrating': 'float',
        'servicefact': 'float',
        'sn': 'str',
        'speeddes': 'str',
        'szsheave': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'beltlength': 'beltlength',
        'beltmodel': 'beltmodel',
        'beltno': 'beltno',
        'beltpowertranseff': 'beltpowertranseff',
        'beltreductionratio': 'beltreductionratio',
        'beltxsect': 'beltxsect',
        'com': 'com',
        'conditionend': 'conditionend',
        'conditionstart': 'conditionstart',
        'dttmend': 'dttmend',
        'dttmlastoverhaul': 'dttmlastoverhaul',
        'dttmstart': 'dttmstart',
        'frame': 'frame',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecrod': 'idrecrod',
        'idwell': 'idwell',
        'make': 'make',
        'model': 'model',
        'pmtyp': 'pmtyp',
        'powerrating': 'powerrating',
        'proposed': 'proposed',
        'refid': 'refid',
        'rpmrating': 'rpmrating',
        'servicefact': 'servicefact',
        'sn': 'sn',
        'speeddes': 'speeddes',
        'szsheave': 'szsheave',
        'systag': 'systag'
    }

    def __init__(self, beltlength=None, beltmodel=None, beltno=None, beltpowertranseff=None, beltreductionratio=None, beltxsect=None, com=None, conditionend=None, conditionstart=None, dttmend=None, dttmlastoverhaul=None, dttmstart=None, frame=None, idrec=None, idrecjob=None, idrecrod=None, idwell=None, make=None, model=None, pmtyp=None, powerrating=None, proposed=None, refid=None, rpmrating=None, servicefact=None, sn=None, speeddes=None, szsheave=None, systag=None):  # noqa: E501
        """PumpingPrimeMoverData - a model defined in Swagger"""  # noqa: E501
        self._beltlength = None
        self._beltmodel = None
        self._beltno = None
        self._beltpowertranseff = None
        self._beltreductionratio = None
        self._beltxsect = None
        self._com = None
        self._conditionend = None
        self._conditionstart = None
        self._dttmend = None
        self._dttmlastoverhaul = None
        self._dttmstart = None
        self._frame = None
        self._idrec = None
        self._idrecjob = None
        self._idrecrod = None
        self._idwell = None
        self._make = None
        self._model = None
        self._pmtyp = None
        self._powerrating = None
        self._proposed = None
        self._refid = None
        self._rpmrating = None
        self._servicefact = None
        self._sn = None
        self._speeddes = None
        self._szsheave = None
        self._systag = None
        self.discriminator = None
        if beltlength is not None:
            self.beltlength = beltlength
        if beltmodel is not None:
            self.beltmodel = beltmodel
        if beltno is not None:
            self.beltno = beltno
        if beltpowertranseff is not None:
            self.beltpowertranseff = beltpowertranseff
        if beltreductionratio is not None:
            self.beltreductionratio = beltreductionratio
        if beltxsect is not None:
            self.beltxsect = beltxsect
        if com is not None:
            self.com = com
        if conditionend is not None:
            self.conditionend = conditionend
        if conditionstart is not None:
            self.conditionstart = conditionstart
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmlastoverhaul is not None:
            self.dttmlastoverhaul = dttmlastoverhaul
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if frame is not None:
            self.frame = frame
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecrod is not None:
            self.idrecrod = idrecrod
        self.idwell = idwell
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if pmtyp is not None:
            self.pmtyp = pmtyp
        if powerrating is not None:
            self.powerrating = powerrating
        if proposed is not None:
            self.proposed = proposed
        if refid is not None:
            self.refid = refid
        if rpmrating is not None:
            self.rpmrating = rpmrating
        if servicefact is not None:
            self.servicefact = servicefact
        if sn is not None:
            self.sn = sn
        if speeddes is not None:
            self.speeddes = speeddes
        if szsheave is not None:
            self.szsheave = szsheave
        if systag is not None:
            self.systag = systag

    @property
    def beltlength(self):
        """Gets the beltlength of this PumpingPrimeMoverData.  # noqa: E501


        :return: The beltlength of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._beltlength

    @beltlength.setter
    def beltlength(self, beltlength):
        """Sets the beltlength of this PumpingPrimeMoverData.


        :param beltlength: The beltlength of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._beltlength = beltlength

    @property
    def beltmodel(self):
        """Gets the beltmodel of this PumpingPrimeMoverData.  # noqa: E501


        :return: The beltmodel of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._beltmodel

    @beltmodel.setter
    def beltmodel(self, beltmodel):
        """Sets the beltmodel of this PumpingPrimeMoverData.


        :param beltmodel: The beltmodel of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._beltmodel = beltmodel

    @property
    def beltno(self):
        """Gets the beltno of this PumpingPrimeMoverData.  # noqa: E501


        :return: The beltno of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: int
        """
        return self._beltno

    @beltno.setter
    def beltno(self, beltno):
        """Sets the beltno of this PumpingPrimeMoverData.


        :param beltno: The beltno of this PumpingPrimeMoverData.  # noqa: E501
        :type: int
        """

        self._beltno = beltno

    @property
    def beltpowertranseff(self):
        """Gets the beltpowertranseff of this PumpingPrimeMoverData.  # noqa: E501


        :return: The beltpowertranseff of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._beltpowertranseff

    @beltpowertranseff.setter
    def beltpowertranseff(self, beltpowertranseff):
        """Sets the beltpowertranseff of this PumpingPrimeMoverData.


        :param beltpowertranseff: The beltpowertranseff of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._beltpowertranseff = beltpowertranseff

    @property
    def beltreductionratio(self):
        """Gets the beltreductionratio of this PumpingPrimeMoverData.  # noqa: E501


        :return: The beltreductionratio of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._beltreductionratio

    @beltreductionratio.setter
    def beltreductionratio(self, beltreductionratio):
        """Sets the beltreductionratio of this PumpingPrimeMoverData.


        :param beltreductionratio: The beltreductionratio of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._beltreductionratio = beltreductionratio

    @property
    def beltxsect(self):
        """Gets the beltxsect of this PumpingPrimeMoverData.  # noqa: E501


        :return: The beltxsect of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._beltxsect

    @beltxsect.setter
    def beltxsect(self, beltxsect):
        """Sets the beltxsect of this PumpingPrimeMoverData.


        :param beltxsect: The beltxsect of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._beltxsect = beltxsect

    @property
    def com(self):
        """Gets the com of this PumpingPrimeMoverData.  # noqa: E501


        :return: The com of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this PumpingPrimeMoverData.


        :param com: The com of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conditionend(self):
        """Gets the conditionend of this PumpingPrimeMoverData.  # noqa: E501


        :return: The conditionend of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._conditionend

    @conditionend.setter
    def conditionend(self, conditionend):
        """Sets the conditionend of this PumpingPrimeMoverData.


        :param conditionend: The conditionend of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._conditionend = conditionend

    @property
    def conditionstart(self):
        """Gets the conditionstart of this PumpingPrimeMoverData.  # noqa: E501


        :return: The conditionstart of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._conditionstart

    @conditionstart.setter
    def conditionstart(self, conditionstart):
        """Sets the conditionstart of this PumpingPrimeMoverData.


        :param conditionstart: The conditionstart of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._conditionstart = conditionstart

    @property
    def dttmend(self):
        """Gets the dttmend of this PumpingPrimeMoverData.  # noqa: E501


        :return: The dttmend of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this PumpingPrimeMoverData.


        :param dttmend: The dttmend of this PumpingPrimeMoverData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmlastoverhaul(self):
        """Gets the dttmlastoverhaul of this PumpingPrimeMoverData.  # noqa: E501


        :return: The dttmlastoverhaul of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastoverhaul

    @dttmlastoverhaul.setter
    def dttmlastoverhaul(self, dttmlastoverhaul):
        """Sets the dttmlastoverhaul of this PumpingPrimeMoverData.


        :param dttmlastoverhaul: The dttmlastoverhaul of this PumpingPrimeMoverData.  # noqa: E501
        :type: datetime
        """

        self._dttmlastoverhaul = dttmlastoverhaul

    @property
    def dttmstart(self):
        """Gets the dttmstart of this PumpingPrimeMoverData.  # noqa: E501


        :return: The dttmstart of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this PumpingPrimeMoverData.


        :param dttmstart: The dttmstart of this PumpingPrimeMoverData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def frame(self):
        """Gets the frame of this PumpingPrimeMoverData.  # noqa: E501


        :return: The frame of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this PumpingPrimeMoverData.


        :param frame: The frame of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._frame = frame

    @property
    def idrec(self):
        """Gets the idrec of this PumpingPrimeMoverData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PumpingPrimeMoverData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this PumpingPrimeMoverData.  # noqa: E501


        :return: The idrecjob of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this PumpingPrimeMoverData.


        :param idrecjob: The idrecjob of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecrod(self):
        """Gets the idrecrod of this PumpingPrimeMoverData.  # noqa: E501


        :return: The idrecrod of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._idrecrod

    @idrecrod.setter
    def idrecrod(self, idrecrod):
        """Sets the idrecrod of this PumpingPrimeMoverData.


        :param idrecrod: The idrecrod of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._idrecrod = idrecrod

    @property
    def idwell(self):
        """Gets the idwell of this PumpingPrimeMoverData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PumpingPrimeMoverData.

        id of well  # noqa: E501

        :param idwell: The idwell of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def make(self):
        """Gets the make of this PumpingPrimeMoverData.  # noqa: E501


        :return: The make of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this PumpingPrimeMoverData.


        :param make: The make of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this PumpingPrimeMoverData.  # noqa: E501


        :return: The model of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PumpingPrimeMoverData.


        :param model: The model of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def pmtyp(self):
        """Gets the pmtyp of this PumpingPrimeMoverData.  # noqa: E501


        :return: The pmtyp of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._pmtyp

    @pmtyp.setter
    def pmtyp(self, pmtyp):
        """Sets the pmtyp of this PumpingPrimeMoverData.


        :param pmtyp: The pmtyp of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._pmtyp = pmtyp

    @property
    def powerrating(self):
        """Gets the powerrating of this PumpingPrimeMoverData.  # noqa: E501


        :return: The powerrating of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._powerrating

    @powerrating.setter
    def powerrating(self, powerrating):
        """Sets the powerrating of this PumpingPrimeMoverData.


        :param powerrating: The powerrating of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._powerrating = powerrating

    @property
    def proposed(self):
        """Gets the proposed of this PumpingPrimeMoverData.  # noqa: E501


        :return: The proposed of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this PumpingPrimeMoverData.


        :param proposed: The proposed of this PumpingPrimeMoverData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def refid(self):
        """Gets the refid of this PumpingPrimeMoverData.  # noqa: E501


        :return: The refid of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this PumpingPrimeMoverData.


        :param refid: The refid of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def rpmrating(self):
        """Gets the rpmrating of this PumpingPrimeMoverData.  # noqa: E501


        :return: The rpmrating of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._rpmrating

    @rpmrating.setter
    def rpmrating(self, rpmrating):
        """Sets the rpmrating of this PumpingPrimeMoverData.


        :param rpmrating: The rpmrating of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._rpmrating = rpmrating

    @property
    def servicefact(self):
        """Gets the servicefact of this PumpingPrimeMoverData.  # noqa: E501


        :return: The servicefact of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._servicefact

    @servicefact.setter
    def servicefact(self, servicefact):
        """Sets the servicefact of this PumpingPrimeMoverData.


        :param servicefact: The servicefact of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._servicefact = servicefact

    @property
    def sn(self):
        """Gets the sn of this PumpingPrimeMoverData.  # noqa: E501


        :return: The sn of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this PumpingPrimeMoverData.


        :param sn: The sn of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def speeddes(self):
        """Gets the speeddes of this PumpingPrimeMoverData.  # noqa: E501


        :return: The speeddes of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._speeddes

    @speeddes.setter
    def speeddes(self, speeddes):
        """Sets the speeddes of this PumpingPrimeMoverData.


        :param speeddes: The speeddes of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._speeddes = speeddes

    @property
    def szsheave(self):
        """Gets the szsheave of this PumpingPrimeMoverData.  # noqa: E501


        :return: The szsheave of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: float
        """
        return self._szsheave

    @szsheave.setter
    def szsheave(self, szsheave):
        """Sets the szsheave of this PumpingPrimeMoverData.


        :param szsheave: The szsheave of this PumpingPrimeMoverData.  # noqa: E501
        :type: float
        """

        self._szsheave = szsheave

    @property
    def systag(self):
        """Gets the systag of this PumpingPrimeMoverData.  # noqa: E501


        :return: The systag of this PumpingPrimeMoverData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PumpingPrimeMoverData.


        :param systag: The systag of this PumpingPrimeMoverData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PumpingPrimeMoverData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PumpingPrimeMoverData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
