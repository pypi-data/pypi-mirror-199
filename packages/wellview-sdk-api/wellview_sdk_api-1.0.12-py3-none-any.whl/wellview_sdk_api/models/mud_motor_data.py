# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MudMotorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bearingtyp': 'str',
        'deflnmagnlower': 'float',
        'deflnmagnupper': 'float',
        'deflntyplower': 'str',
        'deflntypupper': 'str',
        'designflowratemax': 'float',
        'designflowratemin': 'float',
        'designrpmmax': 'float',
        'designrpmmin': 'float',
        'elastomermodel': 'str',
        'elastomertyp': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lengthplaybitsubaxialbearing': 'float',
        'lengthstage': 'float',
        'lengthtolowerdefln': 'float',
        'lengthtoupperdefln': 'float',
        'lobeconfig': 'str',
        'note': 'str',
        'presdiffmax': 'float',
        'ratiorpmtoflow': 'float',
        'rotorboredjet': 'bool',
        'rotorcoating': 'str',
        'rotornozdia': 'float',
        'stageno': 'str',
        'statorevenwall': 'bool',
        'statormaterial': 'str',
        'statorrotorinterference': 'float',
        'statorrotorinterferencemin': 'float',
        'torquemax': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'bearingtyp': 'bearingtyp',
        'deflnmagnlower': 'deflnmagnlower',
        'deflnmagnupper': 'deflnmagnupper',
        'deflntyplower': 'deflntyplower',
        'deflntypupper': 'deflntypupper',
        'designflowratemax': 'designflowratemax',
        'designflowratemin': 'designflowratemin',
        'designrpmmax': 'designrpmmax',
        'designrpmmin': 'designrpmmin',
        'elastomermodel': 'elastomermodel',
        'elastomertyp': 'elastomertyp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lengthplaybitsubaxialbearing': 'lengthplaybitsubaxialbearing',
        'lengthstage': 'lengthstage',
        'lengthtolowerdefln': 'lengthtolowerdefln',
        'lengthtoupperdefln': 'lengthtoupperdefln',
        'lobeconfig': 'lobeconfig',
        'note': 'note',
        'presdiffmax': 'presdiffmax',
        'ratiorpmtoflow': 'ratiorpmtoflow',
        'rotorboredjet': 'rotorboredjet',
        'rotorcoating': 'rotorcoating',
        'rotornozdia': 'rotornozdia',
        'stageno': 'stageno',
        'statorevenwall': 'statorevenwall',
        'statormaterial': 'statormaterial',
        'statorrotorinterference': 'statorrotorinterference',
        'statorrotorinterferencemin': 'statorrotorinterferencemin',
        'torquemax': 'torquemax',
        'systag': 'systag'
    }

    def __init__(self, bearingtyp=None, deflnmagnlower=None, deflnmagnupper=None, deflntyplower=None, deflntypupper=None, designflowratemax=None, designflowratemin=None, designrpmmax=None, designrpmmin=None, elastomermodel=None, elastomertyp=None, idrec=None, idrecparent=None, idwell=None, lengthplaybitsubaxialbearing=None, lengthstage=None, lengthtolowerdefln=None, lengthtoupperdefln=None, lobeconfig=None, note=None, presdiffmax=None, ratiorpmtoflow=None, rotorboredjet=None, rotorcoating=None, rotornozdia=None, stageno=None, statorevenwall=None, statormaterial=None, statorrotorinterference=None, statorrotorinterferencemin=None, torquemax=None, systag=None):  # noqa: E501
        """MudMotorData - a model defined in Swagger"""  # noqa: E501
        self._bearingtyp = None
        self._deflnmagnlower = None
        self._deflnmagnupper = None
        self._deflntyplower = None
        self._deflntypupper = None
        self._designflowratemax = None
        self._designflowratemin = None
        self._designrpmmax = None
        self._designrpmmin = None
        self._elastomermodel = None
        self._elastomertyp = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lengthplaybitsubaxialbearing = None
        self._lengthstage = None
        self._lengthtolowerdefln = None
        self._lengthtoupperdefln = None
        self._lobeconfig = None
        self._note = None
        self._presdiffmax = None
        self._ratiorpmtoflow = None
        self._rotorboredjet = None
        self._rotorcoating = None
        self._rotornozdia = None
        self._stageno = None
        self._statorevenwall = None
        self._statormaterial = None
        self._statorrotorinterference = None
        self._statorrotorinterferencemin = None
        self._torquemax = None
        self._systag = None
        self.discriminator = None
        if bearingtyp is not None:
            self.bearingtyp = bearingtyp
        if deflnmagnlower is not None:
            self.deflnmagnlower = deflnmagnlower
        if deflnmagnupper is not None:
            self.deflnmagnupper = deflnmagnupper
        if deflntyplower is not None:
            self.deflntyplower = deflntyplower
        if deflntypupper is not None:
            self.deflntypupper = deflntypupper
        if designflowratemax is not None:
            self.designflowratemax = designflowratemax
        if designflowratemin is not None:
            self.designflowratemin = designflowratemin
        if designrpmmax is not None:
            self.designrpmmax = designrpmmax
        if designrpmmin is not None:
            self.designrpmmin = designrpmmin
        if elastomermodel is not None:
            self.elastomermodel = elastomermodel
        if elastomertyp is not None:
            self.elastomertyp = elastomertyp
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if lengthplaybitsubaxialbearing is not None:
            self.lengthplaybitsubaxialbearing = lengthplaybitsubaxialbearing
        if lengthstage is not None:
            self.lengthstage = lengthstage
        if lengthtolowerdefln is not None:
            self.lengthtolowerdefln = lengthtolowerdefln
        if lengthtoupperdefln is not None:
            self.lengthtoupperdefln = lengthtoupperdefln
        if lobeconfig is not None:
            self.lobeconfig = lobeconfig
        if note is not None:
            self.note = note
        if presdiffmax is not None:
            self.presdiffmax = presdiffmax
        if ratiorpmtoflow is not None:
            self.ratiorpmtoflow = ratiorpmtoflow
        if rotorboredjet is not None:
            self.rotorboredjet = rotorboredjet
        if rotorcoating is not None:
            self.rotorcoating = rotorcoating
        if rotornozdia is not None:
            self.rotornozdia = rotornozdia
        if stageno is not None:
            self.stageno = stageno
        if statorevenwall is not None:
            self.statorevenwall = statorevenwall
        if statormaterial is not None:
            self.statormaterial = statormaterial
        if statorrotorinterference is not None:
            self.statorrotorinterference = statorrotorinterference
        if statorrotorinterferencemin is not None:
            self.statorrotorinterferencemin = statorrotorinterferencemin
        if torquemax is not None:
            self.torquemax = torquemax
        if systag is not None:
            self.systag = systag

    @property
    def bearingtyp(self):
        """Gets the bearingtyp of this MudMotorData.  # noqa: E501


        :return: The bearingtyp of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._bearingtyp

    @bearingtyp.setter
    def bearingtyp(self, bearingtyp):
        """Sets the bearingtyp of this MudMotorData.


        :param bearingtyp: The bearingtyp of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._bearingtyp = bearingtyp

    @property
    def deflnmagnlower(self):
        """Gets the deflnmagnlower of this MudMotorData.  # noqa: E501


        :return: The deflnmagnlower of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._deflnmagnlower

    @deflnmagnlower.setter
    def deflnmagnlower(self, deflnmagnlower):
        """Sets the deflnmagnlower of this MudMotorData.


        :param deflnmagnlower: The deflnmagnlower of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._deflnmagnlower = deflnmagnlower

    @property
    def deflnmagnupper(self):
        """Gets the deflnmagnupper of this MudMotorData.  # noqa: E501


        :return: The deflnmagnupper of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._deflnmagnupper

    @deflnmagnupper.setter
    def deflnmagnupper(self, deflnmagnupper):
        """Sets the deflnmagnupper of this MudMotorData.


        :param deflnmagnupper: The deflnmagnupper of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._deflnmagnupper = deflnmagnupper

    @property
    def deflntyplower(self):
        """Gets the deflntyplower of this MudMotorData.  # noqa: E501


        :return: The deflntyplower of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._deflntyplower

    @deflntyplower.setter
    def deflntyplower(self, deflntyplower):
        """Sets the deflntyplower of this MudMotorData.


        :param deflntyplower: The deflntyplower of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._deflntyplower = deflntyplower

    @property
    def deflntypupper(self):
        """Gets the deflntypupper of this MudMotorData.  # noqa: E501


        :return: The deflntypupper of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._deflntypupper

    @deflntypupper.setter
    def deflntypupper(self, deflntypupper):
        """Sets the deflntypupper of this MudMotorData.


        :param deflntypupper: The deflntypupper of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._deflntypupper = deflntypupper

    @property
    def designflowratemax(self):
        """Gets the designflowratemax of this MudMotorData.  # noqa: E501


        :return: The designflowratemax of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._designflowratemax

    @designflowratemax.setter
    def designflowratemax(self, designflowratemax):
        """Sets the designflowratemax of this MudMotorData.


        :param designflowratemax: The designflowratemax of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._designflowratemax = designflowratemax

    @property
    def designflowratemin(self):
        """Gets the designflowratemin of this MudMotorData.  # noqa: E501


        :return: The designflowratemin of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._designflowratemin

    @designflowratemin.setter
    def designflowratemin(self, designflowratemin):
        """Sets the designflowratemin of this MudMotorData.


        :param designflowratemin: The designflowratemin of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._designflowratemin = designflowratemin

    @property
    def designrpmmax(self):
        """Gets the designrpmmax of this MudMotorData.  # noqa: E501


        :return: The designrpmmax of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._designrpmmax

    @designrpmmax.setter
    def designrpmmax(self, designrpmmax):
        """Sets the designrpmmax of this MudMotorData.


        :param designrpmmax: The designrpmmax of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._designrpmmax = designrpmmax

    @property
    def designrpmmin(self):
        """Gets the designrpmmin of this MudMotorData.  # noqa: E501


        :return: The designrpmmin of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._designrpmmin

    @designrpmmin.setter
    def designrpmmin(self, designrpmmin):
        """Sets the designrpmmin of this MudMotorData.


        :param designrpmmin: The designrpmmin of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._designrpmmin = designrpmmin

    @property
    def elastomermodel(self):
        """Gets the elastomermodel of this MudMotorData.  # noqa: E501


        :return: The elastomermodel of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._elastomermodel

    @elastomermodel.setter
    def elastomermodel(self, elastomermodel):
        """Sets the elastomermodel of this MudMotorData.


        :param elastomermodel: The elastomermodel of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._elastomermodel = elastomermodel

    @property
    def elastomertyp(self):
        """Gets the elastomertyp of this MudMotorData.  # noqa: E501


        :return: The elastomertyp of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._elastomertyp

    @elastomertyp.setter
    def elastomertyp(self, elastomertyp):
        """Sets the elastomertyp of this MudMotorData.


        :param elastomertyp: The elastomertyp of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._elastomertyp = elastomertyp

    @property
    def idrec(self):
        """Gets the idrec of this MudMotorData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this MudMotorData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this MudMotorData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this MudMotorData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this MudMotorData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this MudMotorData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this MudMotorData.

        id of well  # noqa: E501

        :param idwell: The idwell of this MudMotorData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lengthplaybitsubaxialbearing(self):
        """Gets the lengthplaybitsubaxialbearing of this MudMotorData.  # noqa: E501


        :return: The lengthplaybitsubaxialbearing of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._lengthplaybitsubaxialbearing

    @lengthplaybitsubaxialbearing.setter
    def lengthplaybitsubaxialbearing(self, lengthplaybitsubaxialbearing):
        """Sets the lengthplaybitsubaxialbearing of this MudMotorData.


        :param lengthplaybitsubaxialbearing: The lengthplaybitsubaxialbearing of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._lengthplaybitsubaxialbearing = lengthplaybitsubaxialbearing

    @property
    def lengthstage(self):
        """Gets the lengthstage of this MudMotorData.  # noqa: E501


        :return: The lengthstage of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._lengthstage

    @lengthstage.setter
    def lengthstage(self, lengthstage):
        """Sets the lengthstage of this MudMotorData.


        :param lengthstage: The lengthstage of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._lengthstage = lengthstage

    @property
    def lengthtolowerdefln(self):
        """Gets the lengthtolowerdefln of this MudMotorData.  # noqa: E501


        :return: The lengthtolowerdefln of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._lengthtolowerdefln

    @lengthtolowerdefln.setter
    def lengthtolowerdefln(self, lengthtolowerdefln):
        """Sets the lengthtolowerdefln of this MudMotorData.


        :param lengthtolowerdefln: The lengthtolowerdefln of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._lengthtolowerdefln = lengthtolowerdefln

    @property
    def lengthtoupperdefln(self):
        """Gets the lengthtoupperdefln of this MudMotorData.  # noqa: E501


        :return: The lengthtoupperdefln of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._lengthtoupperdefln

    @lengthtoupperdefln.setter
    def lengthtoupperdefln(self, lengthtoupperdefln):
        """Sets the lengthtoupperdefln of this MudMotorData.


        :param lengthtoupperdefln: The lengthtoupperdefln of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._lengthtoupperdefln = lengthtoupperdefln

    @property
    def lobeconfig(self):
        """Gets the lobeconfig of this MudMotorData.  # noqa: E501


        :return: The lobeconfig of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._lobeconfig

    @lobeconfig.setter
    def lobeconfig(self, lobeconfig):
        """Sets the lobeconfig of this MudMotorData.


        :param lobeconfig: The lobeconfig of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._lobeconfig = lobeconfig

    @property
    def note(self):
        """Gets the note of this MudMotorData.  # noqa: E501


        :return: The note of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this MudMotorData.


        :param note: The note of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def presdiffmax(self):
        """Gets the presdiffmax of this MudMotorData.  # noqa: E501


        :return: The presdiffmax of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._presdiffmax

    @presdiffmax.setter
    def presdiffmax(self, presdiffmax):
        """Sets the presdiffmax of this MudMotorData.


        :param presdiffmax: The presdiffmax of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._presdiffmax = presdiffmax

    @property
    def ratiorpmtoflow(self):
        """Gets the ratiorpmtoflow of this MudMotorData.  # noqa: E501


        :return: The ratiorpmtoflow of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._ratiorpmtoflow

    @ratiorpmtoflow.setter
    def ratiorpmtoflow(self, ratiorpmtoflow):
        """Sets the ratiorpmtoflow of this MudMotorData.


        :param ratiorpmtoflow: The ratiorpmtoflow of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._ratiorpmtoflow = ratiorpmtoflow

    @property
    def rotorboredjet(self):
        """Gets the rotorboredjet of this MudMotorData.  # noqa: E501


        :return: The rotorboredjet of this MudMotorData.  # noqa: E501
        :rtype: bool
        """
        return self._rotorboredjet

    @rotorboredjet.setter
    def rotorboredjet(self, rotorboredjet):
        """Sets the rotorboredjet of this MudMotorData.


        :param rotorboredjet: The rotorboredjet of this MudMotorData.  # noqa: E501
        :type: bool
        """

        self._rotorboredjet = rotorboredjet

    @property
    def rotorcoating(self):
        """Gets the rotorcoating of this MudMotorData.  # noqa: E501


        :return: The rotorcoating of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._rotorcoating

    @rotorcoating.setter
    def rotorcoating(self, rotorcoating):
        """Sets the rotorcoating of this MudMotorData.


        :param rotorcoating: The rotorcoating of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._rotorcoating = rotorcoating

    @property
    def rotornozdia(self):
        """Gets the rotornozdia of this MudMotorData.  # noqa: E501


        :return: The rotornozdia of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._rotornozdia

    @rotornozdia.setter
    def rotornozdia(self, rotornozdia):
        """Sets the rotornozdia of this MudMotorData.


        :param rotornozdia: The rotornozdia of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._rotornozdia = rotornozdia

    @property
    def stageno(self):
        """Gets the stageno of this MudMotorData.  # noqa: E501


        :return: The stageno of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._stageno

    @stageno.setter
    def stageno(self, stageno):
        """Sets the stageno of this MudMotorData.


        :param stageno: The stageno of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._stageno = stageno

    @property
    def statorevenwall(self):
        """Gets the statorevenwall of this MudMotorData.  # noqa: E501


        :return: The statorevenwall of this MudMotorData.  # noqa: E501
        :rtype: bool
        """
        return self._statorevenwall

    @statorevenwall.setter
    def statorevenwall(self, statorevenwall):
        """Sets the statorevenwall of this MudMotorData.


        :param statorevenwall: The statorevenwall of this MudMotorData.  # noqa: E501
        :type: bool
        """

        self._statorevenwall = statorevenwall

    @property
    def statormaterial(self):
        """Gets the statormaterial of this MudMotorData.  # noqa: E501


        :return: The statormaterial of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._statormaterial

    @statormaterial.setter
    def statormaterial(self, statormaterial):
        """Sets the statormaterial of this MudMotorData.


        :param statormaterial: The statormaterial of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._statormaterial = statormaterial

    @property
    def statorrotorinterference(self):
        """Gets the statorrotorinterference of this MudMotorData.  # noqa: E501


        :return: The statorrotorinterference of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._statorrotorinterference

    @statorrotorinterference.setter
    def statorrotorinterference(self, statorrotorinterference):
        """Sets the statorrotorinterference of this MudMotorData.


        :param statorrotorinterference: The statorrotorinterference of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._statorrotorinterference = statorrotorinterference

    @property
    def statorrotorinterferencemin(self):
        """Gets the statorrotorinterferencemin of this MudMotorData.  # noqa: E501


        :return: The statorrotorinterferencemin of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._statorrotorinterferencemin

    @statorrotorinterferencemin.setter
    def statorrotorinterferencemin(self, statorrotorinterferencemin):
        """Sets the statorrotorinterferencemin of this MudMotorData.


        :param statorrotorinterferencemin: The statorrotorinterferencemin of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._statorrotorinterferencemin = statorrotorinterferencemin

    @property
    def torquemax(self):
        """Gets the torquemax of this MudMotorData.  # noqa: E501


        :return: The torquemax of this MudMotorData.  # noqa: E501
        :rtype: float
        """
        return self._torquemax

    @torquemax.setter
    def torquemax(self, torquemax):
        """Sets the torquemax of this MudMotorData.


        :param torquemax: The torquemax of this MudMotorData.  # noqa: E501
        :type: float
        """

        self._torquemax = torquemax

    @property
    def systag(self):
        """Gets the systag of this MudMotorData.  # noqa: E501


        :return: The systag of this MudMotorData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this MudMotorData.


        :param systag: The systag of this MudMotorData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MudMotorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MudMotorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
