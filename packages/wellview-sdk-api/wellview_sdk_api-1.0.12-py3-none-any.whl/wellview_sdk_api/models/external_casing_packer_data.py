# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalCasingPackerData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ecpload': 'float',
        'equivholesz': 'float',
        'icvpresact': 'float',
        'icvpresset': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'inflationmeth': 'str',
        'inflfluidden': 'float',
        'inflfluidtyp': 'str',
        'inflvol': 'float',
        'knockoffrod': 'bool',
        'reqrelease': 'str',
        'reqset': 'str',
        'sealload': 'float',
        'selectiveinfl': 'bool',
        'svpresact': 'float',
        'svpresset': 'float',
        'typ': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'ecpload': 'ecpload',
        'equivholesz': 'equivholesz',
        'icvpresact': 'icvpresact',
        'icvpresset': 'icvpresset',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'inflationmeth': 'inflationmeth',
        'inflfluidden': 'inflfluidden',
        'inflfluidtyp': 'inflfluidtyp',
        'inflvol': 'inflvol',
        'knockoffrod': 'knockoffrod',
        'reqrelease': 'reqrelease',
        'reqset': 'reqset',
        'sealload': 'sealload',
        'selectiveinfl': 'selectiveinfl',
        'svpresact': 'svpresact',
        'svpresset': 'svpresset',
        'typ': 'typ',
        'systag': 'systag'
    }

    def __init__(self, ecpload=None, equivholesz=None, icvpresact=None, icvpresset=None, idrec=None, idrecparent=None, idwell=None, inflationmeth=None, inflfluidden=None, inflfluidtyp=None, inflvol=None, knockoffrod=None, reqrelease=None, reqset=None, sealload=None, selectiveinfl=None, svpresact=None, svpresset=None, typ=None, systag=None):  # noqa: E501
        """ExternalCasingPackerData - a model defined in Swagger"""  # noqa: E501
        self._ecpload = None
        self._equivholesz = None
        self._icvpresact = None
        self._icvpresset = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._inflationmeth = None
        self._inflfluidden = None
        self._inflfluidtyp = None
        self._inflvol = None
        self._knockoffrod = None
        self._reqrelease = None
        self._reqset = None
        self._sealload = None
        self._selectiveinfl = None
        self._svpresact = None
        self._svpresset = None
        self._typ = None
        self._systag = None
        self.discriminator = None
        if ecpload is not None:
            self.ecpload = ecpload
        if equivholesz is not None:
            self.equivholesz = equivholesz
        if icvpresact is not None:
            self.icvpresact = icvpresact
        if icvpresset is not None:
            self.icvpresset = icvpresset
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if inflationmeth is not None:
            self.inflationmeth = inflationmeth
        if inflfluidden is not None:
            self.inflfluidden = inflfluidden
        if inflfluidtyp is not None:
            self.inflfluidtyp = inflfluidtyp
        if inflvol is not None:
            self.inflvol = inflvol
        if knockoffrod is not None:
            self.knockoffrod = knockoffrod
        if reqrelease is not None:
            self.reqrelease = reqrelease
        if reqset is not None:
            self.reqset = reqset
        if sealload is not None:
            self.sealload = sealload
        if selectiveinfl is not None:
            self.selectiveinfl = selectiveinfl
        if svpresact is not None:
            self.svpresact = svpresact
        if svpresset is not None:
            self.svpresset = svpresset
        if typ is not None:
            self.typ = typ
        if systag is not None:
            self.systag = systag

    @property
    def ecpload(self):
        """Gets the ecpload of this ExternalCasingPackerData.  # noqa: E501


        :return: The ecpload of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._ecpload

    @ecpload.setter
    def ecpload(self, ecpload):
        """Sets the ecpload of this ExternalCasingPackerData.


        :param ecpload: The ecpload of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._ecpload = ecpload

    @property
    def equivholesz(self):
        """Gets the equivholesz of this ExternalCasingPackerData.  # noqa: E501


        :return: The equivholesz of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._equivholesz

    @equivholesz.setter
    def equivholesz(self, equivholesz):
        """Sets the equivholesz of this ExternalCasingPackerData.


        :param equivholesz: The equivholesz of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._equivholesz = equivholesz

    @property
    def icvpresact(self):
        """Gets the icvpresact of this ExternalCasingPackerData.  # noqa: E501


        :return: The icvpresact of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._icvpresact

    @icvpresact.setter
    def icvpresact(self, icvpresact):
        """Sets the icvpresact of this ExternalCasingPackerData.


        :param icvpresact: The icvpresact of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._icvpresact = icvpresact

    @property
    def icvpresset(self):
        """Gets the icvpresset of this ExternalCasingPackerData.  # noqa: E501


        :return: The icvpresset of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._icvpresset

    @icvpresset.setter
    def icvpresset(self, icvpresset):
        """Sets the icvpresset of this ExternalCasingPackerData.


        :param icvpresset: The icvpresset of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._icvpresset = icvpresset

    @property
    def idrec(self):
        """Gets the idrec of this ExternalCasingPackerData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ExternalCasingPackerData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ExternalCasingPackerData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ExternalCasingPackerData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ExternalCasingPackerData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ExternalCasingPackerData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def inflationmeth(self):
        """Gets the inflationmeth of this ExternalCasingPackerData.  # noqa: E501


        :return: The inflationmeth of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._inflationmeth

    @inflationmeth.setter
    def inflationmeth(self, inflationmeth):
        """Sets the inflationmeth of this ExternalCasingPackerData.


        :param inflationmeth: The inflationmeth of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._inflationmeth = inflationmeth

    @property
    def inflfluidden(self):
        """Gets the inflfluidden of this ExternalCasingPackerData.  # noqa: E501


        :return: The inflfluidden of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._inflfluidden

    @inflfluidden.setter
    def inflfluidden(self, inflfluidden):
        """Sets the inflfluidden of this ExternalCasingPackerData.


        :param inflfluidden: The inflfluidden of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._inflfluidden = inflfluidden

    @property
    def inflfluidtyp(self):
        """Gets the inflfluidtyp of this ExternalCasingPackerData.  # noqa: E501


        :return: The inflfluidtyp of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._inflfluidtyp

    @inflfluidtyp.setter
    def inflfluidtyp(self, inflfluidtyp):
        """Sets the inflfluidtyp of this ExternalCasingPackerData.


        :param inflfluidtyp: The inflfluidtyp of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._inflfluidtyp = inflfluidtyp

    @property
    def inflvol(self):
        """Gets the inflvol of this ExternalCasingPackerData.  # noqa: E501


        :return: The inflvol of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._inflvol

    @inflvol.setter
    def inflvol(self, inflvol):
        """Sets the inflvol of this ExternalCasingPackerData.


        :param inflvol: The inflvol of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._inflvol = inflvol

    @property
    def knockoffrod(self):
        """Gets the knockoffrod of this ExternalCasingPackerData.  # noqa: E501


        :return: The knockoffrod of this ExternalCasingPackerData.  # noqa: E501
        :rtype: bool
        """
        return self._knockoffrod

    @knockoffrod.setter
    def knockoffrod(self, knockoffrod):
        """Sets the knockoffrod of this ExternalCasingPackerData.


        :param knockoffrod: The knockoffrod of this ExternalCasingPackerData.  # noqa: E501
        :type: bool
        """

        self._knockoffrod = knockoffrod

    @property
    def reqrelease(self):
        """Gets the reqrelease of this ExternalCasingPackerData.  # noqa: E501


        :return: The reqrelease of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._reqrelease

    @reqrelease.setter
    def reqrelease(self, reqrelease):
        """Sets the reqrelease of this ExternalCasingPackerData.


        :param reqrelease: The reqrelease of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._reqrelease = reqrelease

    @property
    def reqset(self):
        """Gets the reqset of this ExternalCasingPackerData.  # noqa: E501


        :return: The reqset of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._reqset

    @reqset.setter
    def reqset(self, reqset):
        """Sets the reqset of this ExternalCasingPackerData.


        :param reqset: The reqset of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._reqset = reqset

    @property
    def sealload(self):
        """Gets the sealload of this ExternalCasingPackerData.  # noqa: E501


        :return: The sealload of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._sealload

    @sealload.setter
    def sealload(self, sealload):
        """Sets the sealload of this ExternalCasingPackerData.


        :param sealload: The sealload of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._sealload = sealload

    @property
    def selectiveinfl(self):
        """Gets the selectiveinfl of this ExternalCasingPackerData.  # noqa: E501


        :return: The selectiveinfl of this ExternalCasingPackerData.  # noqa: E501
        :rtype: bool
        """
        return self._selectiveinfl

    @selectiveinfl.setter
    def selectiveinfl(self, selectiveinfl):
        """Sets the selectiveinfl of this ExternalCasingPackerData.


        :param selectiveinfl: The selectiveinfl of this ExternalCasingPackerData.  # noqa: E501
        :type: bool
        """

        self._selectiveinfl = selectiveinfl

    @property
    def svpresact(self):
        """Gets the svpresact of this ExternalCasingPackerData.  # noqa: E501


        :return: The svpresact of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._svpresact

    @svpresact.setter
    def svpresact(self, svpresact):
        """Sets the svpresact of this ExternalCasingPackerData.


        :param svpresact: The svpresact of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._svpresact = svpresact

    @property
    def svpresset(self):
        """Gets the svpresset of this ExternalCasingPackerData.  # noqa: E501


        :return: The svpresset of this ExternalCasingPackerData.  # noqa: E501
        :rtype: float
        """
        return self._svpresset

    @svpresset.setter
    def svpresset(self, svpresset):
        """Sets the svpresset of this ExternalCasingPackerData.


        :param svpresset: The svpresset of this ExternalCasingPackerData.  # noqa: E501
        :type: float
        """

        self._svpresset = svpresset

    @property
    def typ(self):
        """Gets the typ of this ExternalCasingPackerData.  # noqa: E501


        :return: The typ of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this ExternalCasingPackerData.


        :param typ: The typ of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def systag(self):
        """Gets the systag of this ExternalCasingPackerData.  # noqa: E501


        :return: The systag of this ExternalCasingPackerData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ExternalCasingPackerData.


        :param systag: The systag of this ExternalCasingPackerData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalCasingPackerData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalCasingPackerData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
