# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SidewallCoreData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulletsfire': 'int',
        'bulletsmisfire': 'int',
        'com': 'str',
        'contractor': 'str',
        'des': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecdrillstringcomp': 'str',
        'idrecgeoeval': 'str',
        'idrecjob': 'str',
        'idreclog': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'proposed': 'bool',
        'purpose': 'str',
        'runno': 'str',
        'samplesempty': 'int',
        'sampleslostinhole': 'int',
        'samplesplan': 'int',
        'samplesrecover': 'int',
        'szdiacore': 'float',
        'typ': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'bulletsfire': 'bulletsfire',
        'bulletsmisfire': 'bulletsmisfire',
        'com': 'com',
        'contractor': 'contractor',
        'des': 'des',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecdrillstringcomp': 'idrecdrillstringcomp',
        'idrecgeoeval': 'idrecgeoeval',
        'idrecjob': 'idrecjob',
        'idreclog': 'idreclog',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'proposed': 'proposed',
        'purpose': 'purpose',
        'runno': 'runno',
        'samplesempty': 'samplesempty',
        'sampleslostinhole': 'sampleslostinhole',
        'samplesplan': 'samplesplan',
        'samplesrecover': 'samplesrecover',
        'szdiacore': 'szdiacore',
        'typ': 'typ',
        'systag': 'systag'
    }

    def __init__(self, bulletsfire=None, bulletsmisfire=None, com=None, contractor=None, des=None, dttm=None, idrec=None, idrecdrillstringcomp=None, idrecgeoeval=None, idrecjob=None, idreclog=None, idrecwellbore=None, idwell=None, proposed=None, purpose=None, runno=None, samplesempty=None, sampleslostinhole=None, samplesplan=None, samplesrecover=None, szdiacore=None, typ=None, systag=None):  # noqa: E501
        """SidewallCoreData - a model defined in Swagger"""  # noqa: E501
        self._bulletsfire = None
        self._bulletsmisfire = None
        self._com = None
        self._contractor = None
        self._des = None
        self._dttm = None
        self._idrec = None
        self._idrecdrillstringcomp = None
        self._idrecgeoeval = None
        self._idrecjob = None
        self._idreclog = None
        self._idrecwellbore = None
        self._idwell = None
        self._proposed = None
        self._purpose = None
        self._runno = None
        self._samplesempty = None
        self._sampleslostinhole = None
        self._samplesplan = None
        self._samplesrecover = None
        self._szdiacore = None
        self._typ = None
        self._systag = None
        self.discriminator = None
        if bulletsfire is not None:
            self.bulletsfire = bulletsfire
        if bulletsmisfire is not None:
            self.bulletsmisfire = bulletsmisfire
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecdrillstringcomp is not None:
            self.idrecdrillstringcomp = idrecdrillstringcomp
        if idrecgeoeval is not None:
            self.idrecgeoeval = idrecgeoeval
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idreclog is not None:
            self.idreclog = idreclog
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if proposed is not None:
            self.proposed = proposed
        if purpose is not None:
            self.purpose = purpose
        if runno is not None:
            self.runno = runno
        if samplesempty is not None:
            self.samplesempty = samplesempty
        if sampleslostinhole is not None:
            self.sampleslostinhole = sampleslostinhole
        if samplesplan is not None:
            self.samplesplan = samplesplan
        if samplesrecover is not None:
            self.samplesrecover = samplesrecover
        if szdiacore is not None:
            self.szdiacore = szdiacore
        if typ is not None:
            self.typ = typ
        if systag is not None:
            self.systag = systag

    @property
    def bulletsfire(self):
        """Gets the bulletsfire of this SidewallCoreData.  # noqa: E501


        :return: The bulletsfire of this SidewallCoreData.  # noqa: E501
        :rtype: int
        """
        return self._bulletsfire

    @bulletsfire.setter
    def bulletsfire(self, bulletsfire):
        """Sets the bulletsfire of this SidewallCoreData.


        :param bulletsfire: The bulletsfire of this SidewallCoreData.  # noqa: E501
        :type: int
        """

        self._bulletsfire = bulletsfire

    @property
    def bulletsmisfire(self):
        """Gets the bulletsmisfire of this SidewallCoreData.  # noqa: E501


        :return: The bulletsmisfire of this SidewallCoreData.  # noqa: E501
        :rtype: int
        """
        return self._bulletsmisfire

    @bulletsmisfire.setter
    def bulletsmisfire(self, bulletsmisfire):
        """Sets the bulletsmisfire of this SidewallCoreData.


        :param bulletsmisfire: The bulletsmisfire of this SidewallCoreData.  # noqa: E501
        :type: int
        """

        self._bulletsmisfire = bulletsmisfire

    @property
    def com(self):
        """Gets the com of this SidewallCoreData.  # noqa: E501


        :return: The com of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SidewallCoreData.


        :param com: The com of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this SidewallCoreData.  # noqa: E501


        :return: The contractor of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this SidewallCoreData.


        :param contractor: The contractor of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def des(self):
        """Gets the des of this SidewallCoreData.  # noqa: E501


        :return: The des of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this SidewallCoreData.


        :param des: The des of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this SidewallCoreData.  # noqa: E501


        :return: The dttm of this SidewallCoreData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this SidewallCoreData.


        :param dttm: The dttm of this SidewallCoreData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this SidewallCoreData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SidewallCoreData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecdrillstringcomp(self):
        """Gets the idrecdrillstringcomp of this SidewallCoreData.  # noqa: E501


        :return: The idrecdrillstringcomp of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecdrillstringcomp

    @idrecdrillstringcomp.setter
    def idrecdrillstringcomp(self, idrecdrillstringcomp):
        """Sets the idrecdrillstringcomp of this SidewallCoreData.


        :param idrecdrillstringcomp: The idrecdrillstringcomp of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._idrecdrillstringcomp = idrecdrillstringcomp

    @property
    def idrecgeoeval(self):
        """Gets the idrecgeoeval of this SidewallCoreData.  # noqa: E501


        :return: The idrecgeoeval of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecgeoeval

    @idrecgeoeval.setter
    def idrecgeoeval(self, idrecgeoeval):
        """Sets the idrecgeoeval of this SidewallCoreData.


        :param idrecgeoeval: The idrecgeoeval of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._idrecgeoeval = idrecgeoeval

    @property
    def idrecjob(self):
        """Gets the idrecjob of this SidewallCoreData.  # noqa: E501


        :return: The idrecjob of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this SidewallCoreData.


        :param idrecjob: The idrecjob of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idreclog(self):
        """Gets the idreclog of this SidewallCoreData.  # noqa: E501


        :return: The idreclog of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idreclog

    @idreclog.setter
    def idreclog(self, idreclog):
        """Sets the idreclog of this SidewallCoreData.


        :param idreclog: The idreclog of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._idreclog = idreclog

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this SidewallCoreData.  # noqa: E501


        :return: The idrecwellbore of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this SidewallCoreData.


        :param idrecwellbore: The idrecwellbore of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this SidewallCoreData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SidewallCoreData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SidewallCoreData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def proposed(self):
        """Gets the proposed of this SidewallCoreData.  # noqa: E501


        :return: The proposed of this SidewallCoreData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this SidewallCoreData.


        :param proposed: The proposed of this SidewallCoreData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def purpose(self):
        """Gets the purpose of this SidewallCoreData.  # noqa: E501


        :return: The purpose of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SidewallCoreData.


        :param purpose: The purpose of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def runno(self):
        """Gets the runno of this SidewallCoreData.  # noqa: E501


        :return: The runno of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._runno

    @runno.setter
    def runno(self, runno):
        """Sets the runno of this SidewallCoreData.


        :param runno: The runno of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._runno = runno

    @property
    def samplesempty(self):
        """Gets the samplesempty of this SidewallCoreData.  # noqa: E501


        :return: The samplesempty of this SidewallCoreData.  # noqa: E501
        :rtype: int
        """
        return self._samplesempty

    @samplesempty.setter
    def samplesempty(self, samplesempty):
        """Sets the samplesempty of this SidewallCoreData.


        :param samplesempty: The samplesempty of this SidewallCoreData.  # noqa: E501
        :type: int
        """

        self._samplesempty = samplesempty

    @property
    def sampleslostinhole(self):
        """Gets the sampleslostinhole of this SidewallCoreData.  # noqa: E501


        :return: The sampleslostinhole of this SidewallCoreData.  # noqa: E501
        :rtype: int
        """
        return self._sampleslostinhole

    @sampleslostinhole.setter
    def sampleslostinhole(self, sampleslostinhole):
        """Sets the sampleslostinhole of this SidewallCoreData.


        :param sampleslostinhole: The sampleslostinhole of this SidewallCoreData.  # noqa: E501
        :type: int
        """

        self._sampleslostinhole = sampleslostinhole

    @property
    def samplesplan(self):
        """Gets the samplesplan of this SidewallCoreData.  # noqa: E501


        :return: The samplesplan of this SidewallCoreData.  # noqa: E501
        :rtype: int
        """
        return self._samplesplan

    @samplesplan.setter
    def samplesplan(self, samplesplan):
        """Sets the samplesplan of this SidewallCoreData.


        :param samplesplan: The samplesplan of this SidewallCoreData.  # noqa: E501
        :type: int
        """

        self._samplesplan = samplesplan

    @property
    def samplesrecover(self):
        """Gets the samplesrecover of this SidewallCoreData.  # noqa: E501


        :return: The samplesrecover of this SidewallCoreData.  # noqa: E501
        :rtype: int
        """
        return self._samplesrecover

    @samplesrecover.setter
    def samplesrecover(self, samplesrecover):
        """Sets the samplesrecover of this SidewallCoreData.


        :param samplesrecover: The samplesrecover of this SidewallCoreData.  # noqa: E501
        :type: int
        """

        self._samplesrecover = samplesrecover

    @property
    def szdiacore(self):
        """Gets the szdiacore of this SidewallCoreData.  # noqa: E501


        :return: The szdiacore of this SidewallCoreData.  # noqa: E501
        :rtype: float
        """
        return self._szdiacore

    @szdiacore.setter
    def szdiacore(self, szdiacore):
        """Sets the szdiacore of this SidewallCoreData.


        :param szdiacore: The szdiacore of this SidewallCoreData.  # noqa: E501
        :type: float
        """

        self._szdiacore = szdiacore

    @property
    def typ(self):
        """Gets the typ of this SidewallCoreData.  # noqa: E501


        :return: The typ of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this SidewallCoreData.


        :param typ: The typ of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def systag(self):
        """Gets the systag of this SidewallCoreData.  # noqa: E501


        :return: The systag of this SidewallCoreData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SidewallCoreData.


        :param systag: The systag of this SidewallCoreData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SidewallCoreData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SidewallCoreData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
