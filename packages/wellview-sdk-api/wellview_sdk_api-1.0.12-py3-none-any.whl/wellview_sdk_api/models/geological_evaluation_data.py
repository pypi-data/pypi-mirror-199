# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeologicalEvaluationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttm': 'datetime',
        'evaltyp': 'str',
        'geoevalida': 'str',
        'geoevalidb': 'str',
        'geoevalidc': 'str',
        'geologistcompany': 'str',
        'geologistname': 'str',
        'idrec': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttm': 'dttm',
        'evaltyp': 'evaltyp',
        'geoevalida': 'geoevalida',
        'geoevalidb': 'geoevalidb',
        'geoevalidc': 'geoevalidc',
        'geologistcompany': 'geologistcompany',
        'geologistname': 'geologistname',
        'idrec': 'idrec',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'systag': 'systag'
    }

    def __init__(self, com=None, dttm=None, evaltyp=None, geoevalida=None, geoevalidb=None, geoevalidc=None, geologistcompany=None, geologistname=None, idrec=None, idrecwellbore=None, idwell=None, systag=None):  # noqa: E501
        """GeologicalEvaluationData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttm = None
        self._evaltyp = None
        self._geoevalida = None
        self._geoevalidb = None
        self._geoevalidc = None
        self._geologistcompany = None
        self._geologistname = None
        self._idrec = None
        self._idrecwellbore = None
        self._idwell = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttm is not None:
            self.dttm = dttm
        if evaltyp is not None:
            self.evaltyp = evaltyp
        if geoevalida is not None:
            self.geoevalida = geoevalida
        if geoevalidb is not None:
            self.geoevalidb = geoevalidb
        if geoevalidc is not None:
            self.geoevalidc = geoevalidc
        if geologistcompany is not None:
            self.geologistcompany = geologistcompany
        if geologistname is not None:
            self.geologistname = geologistname
        if idrec is not None:
            self.idrec = idrec
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this GeologicalEvaluationData.  # noqa: E501


        :return: The com of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this GeologicalEvaluationData.


        :param com: The com of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttm(self):
        """Gets the dttm of this GeologicalEvaluationData.  # noqa: E501


        :return: The dttm of this GeologicalEvaluationData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this GeologicalEvaluationData.


        :param dttm: The dttm of this GeologicalEvaluationData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def evaltyp(self):
        """Gets the evaltyp of this GeologicalEvaluationData.  # noqa: E501


        :return: The evaltyp of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._evaltyp

    @evaltyp.setter
    def evaltyp(self, evaltyp):
        """Sets the evaltyp of this GeologicalEvaluationData.


        :param evaltyp: The evaltyp of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._evaltyp = evaltyp

    @property
    def geoevalida(self):
        """Gets the geoevalida of this GeologicalEvaluationData.  # noqa: E501


        :return: The geoevalida of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._geoevalida

    @geoevalida.setter
    def geoevalida(self, geoevalida):
        """Sets the geoevalida of this GeologicalEvaluationData.


        :param geoevalida: The geoevalida of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._geoevalida = geoevalida

    @property
    def geoevalidb(self):
        """Gets the geoevalidb of this GeologicalEvaluationData.  # noqa: E501


        :return: The geoevalidb of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._geoevalidb

    @geoevalidb.setter
    def geoevalidb(self, geoevalidb):
        """Sets the geoevalidb of this GeologicalEvaluationData.


        :param geoevalidb: The geoevalidb of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._geoevalidb = geoevalidb

    @property
    def geoevalidc(self):
        """Gets the geoevalidc of this GeologicalEvaluationData.  # noqa: E501


        :return: The geoevalidc of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._geoevalidc

    @geoevalidc.setter
    def geoevalidc(self, geoevalidc):
        """Sets the geoevalidc of this GeologicalEvaluationData.


        :param geoevalidc: The geoevalidc of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._geoevalidc = geoevalidc

    @property
    def geologistcompany(self):
        """Gets the geologistcompany of this GeologicalEvaluationData.  # noqa: E501


        :return: The geologistcompany of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._geologistcompany

    @geologistcompany.setter
    def geologistcompany(self, geologistcompany):
        """Sets the geologistcompany of this GeologicalEvaluationData.


        :param geologistcompany: The geologistcompany of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._geologistcompany = geologistcompany

    @property
    def geologistname(self):
        """Gets the geologistname of this GeologicalEvaluationData.  # noqa: E501


        :return: The geologistname of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._geologistname

    @geologistname.setter
    def geologistname(self, geologistname):
        """Sets the geologistname of this GeologicalEvaluationData.


        :param geologistname: The geologistname of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._geologistname = geologistname

    @property
    def idrec(self):
        """Gets the idrec of this GeologicalEvaluationData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this GeologicalEvaluationData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this GeologicalEvaluationData.  # noqa: E501


        :return: The idrecwellbore of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this GeologicalEvaluationData.


        :param idrecwellbore: The idrecwellbore of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this GeologicalEvaluationData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this GeologicalEvaluationData.

        id of well  # noqa: E501

        :param idwell: The idwell of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def systag(self):
        """Gets the systag of this GeologicalEvaluationData.  # noqa: E501


        :return: The systag of this GeologicalEvaluationData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this GeologicalEvaluationData.


        :param systag: The systag of this GeologicalEvaluationData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeologicalEvaluationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeologicalEvaluationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
