# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ESPMotorsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'housingmetallurgy': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'mtrcablearmor': 'str',
        'mtrcableconditionpull': 'str',
        'mtrcableconditionrun': 'str',
        'mtrcablega': 'float',
        'mtrcableinsul': 'str',
        'mtrcablelength': 'float',
        'mtrcablemake': 'str',
        'mtrcableprotectqty': 'str',
        'mtrcableprotecttyp': 'str',
        'mtrcableshape': 'str',
        'mtrcablesheath': 'str',
        'mtrcablesn': 'str',
        'mtrcabletyp': 'str',
        'mtrcablevolt': 'float',
        'mtrcurrentrating': 'float',
        'mtrfreqrating': 'float',
        'mtrlubr': 'str',
        'mtrpowerrating': 'float',
        'mtrtyp': 'str',
        'mtrvoltagerating': 'float',
        'penetratortyp': 'str',
        'pwrcablebandqty': 'str',
        'pwrcablebandtyp': 'str',
        'pwrcableguardqty': 'str',
        'pwrcableguardtyp': 'str',
        'shaftmetallurgy': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'housingmetallurgy': 'housingmetallurgy',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'mtrcablearmor': 'mtrcablearmor',
        'mtrcableconditionpull': 'mtrcableconditionpull',
        'mtrcableconditionrun': 'mtrcableconditionrun',
        'mtrcablega': 'mtrcablega',
        'mtrcableinsul': 'mtrcableinsul',
        'mtrcablelength': 'mtrcablelength',
        'mtrcablemake': 'mtrcablemake',
        'mtrcableprotectqty': 'mtrcableprotectqty',
        'mtrcableprotecttyp': 'mtrcableprotecttyp',
        'mtrcableshape': 'mtrcableshape',
        'mtrcablesheath': 'mtrcablesheath',
        'mtrcablesn': 'mtrcablesn',
        'mtrcabletyp': 'mtrcabletyp',
        'mtrcablevolt': 'mtrcablevolt',
        'mtrcurrentrating': 'mtrcurrentrating',
        'mtrfreqrating': 'mtrfreqrating',
        'mtrlubr': 'mtrlubr',
        'mtrpowerrating': 'mtrpowerrating',
        'mtrtyp': 'mtrtyp',
        'mtrvoltagerating': 'mtrvoltagerating',
        'penetratortyp': 'penetratortyp',
        'pwrcablebandqty': 'pwrcablebandqty',
        'pwrcablebandtyp': 'pwrcablebandtyp',
        'pwrcableguardqty': 'pwrcableguardqty',
        'pwrcableguardtyp': 'pwrcableguardtyp',
        'shaftmetallurgy': 'shaftmetallurgy',
        'systag': 'systag'
    }

    def __init__(self, housingmetallurgy=None, idrec=None, idrecparent=None, idwell=None, mtrcablearmor=None, mtrcableconditionpull=None, mtrcableconditionrun=None, mtrcablega=None, mtrcableinsul=None, mtrcablelength=None, mtrcablemake=None, mtrcableprotectqty=None, mtrcableprotecttyp=None, mtrcableshape=None, mtrcablesheath=None, mtrcablesn=None, mtrcabletyp=None, mtrcablevolt=None, mtrcurrentrating=None, mtrfreqrating=None, mtrlubr=None, mtrpowerrating=None, mtrtyp=None, mtrvoltagerating=None, penetratortyp=None, pwrcablebandqty=None, pwrcablebandtyp=None, pwrcableguardqty=None, pwrcableguardtyp=None, shaftmetallurgy=None, systag=None):  # noqa: E501
        """ESPMotorsData - a model defined in Swagger"""  # noqa: E501
        self._housingmetallurgy = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._mtrcablearmor = None
        self._mtrcableconditionpull = None
        self._mtrcableconditionrun = None
        self._mtrcablega = None
        self._mtrcableinsul = None
        self._mtrcablelength = None
        self._mtrcablemake = None
        self._mtrcableprotectqty = None
        self._mtrcableprotecttyp = None
        self._mtrcableshape = None
        self._mtrcablesheath = None
        self._mtrcablesn = None
        self._mtrcabletyp = None
        self._mtrcablevolt = None
        self._mtrcurrentrating = None
        self._mtrfreqrating = None
        self._mtrlubr = None
        self._mtrpowerrating = None
        self._mtrtyp = None
        self._mtrvoltagerating = None
        self._penetratortyp = None
        self._pwrcablebandqty = None
        self._pwrcablebandtyp = None
        self._pwrcableguardqty = None
        self._pwrcableguardtyp = None
        self._shaftmetallurgy = None
        self._systag = None
        self.discriminator = None
        if housingmetallurgy is not None:
            self.housingmetallurgy = housingmetallurgy
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if mtrcablearmor is not None:
            self.mtrcablearmor = mtrcablearmor
        if mtrcableconditionpull is not None:
            self.mtrcableconditionpull = mtrcableconditionpull
        if mtrcableconditionrun is not None:
            self.mtrcableconditionrun = mtrcableconditionrun
        if mtrcablega is not None:
            self.mtrcablega = mtrcablega
        if mtrcableinsul is not None:
            self.mtrcableinsul = mtrcableinsul
        if mtrcablelength is not None:
            self.mtrcablelength = mtrcablelength
        if mtrcablemake is not None:
            self.mtrcablemake = mtrcablemake
        if mtrcableprotectqty is not None:
            self.mtrcableprotectqty = mtrcableprotectqty
        if mtrcableprotecttyp is not None:
            self.mtrcableprotecttyp = mtrcableprotecttyp
        if mtrcableshape is not None:
            self.mtrcableshape = mtrcableshape
        if mtrcablesheath is not None:
            self.mtrcablesheath = mtrcablesheath
        if mtrcablesn is not None:
            self.mtrcablesn = mtrcablesn
        if mtrcabletyp is not None:
            self.mtrcabletyp = mtrcabletyp
        if mtrcablevolt is not None:
            self.mtrcablevolt = mtrcablevolt
        if mtrcurrentrating is not None:
            self.mtrcurrentrating = mtrcurrentrating
        if mtrfreqrating is not None:
            self.mtrfreqrating = mtrfreqrating
        if mtrlubr is not None:
            self.mtrlubr = mtrlubr
        if mtrpowerrating is not None:
            self.mtrpowerrating = mtrpowerrating
        if mtrtyp is not None:
            self.mtrtyp = mtrtyp
        if mtrvoltagerating is not None:
            self.mtrvoltagerating = mtrvoltagerating
        if penetratortyp is not None:
            self.penetratortyp = penetratortyp
        if pwrcablebandqty is not None:
            self.pwrcablebandqty = pwrcablebandqty
        if pwrcablebandtyp is not None:
            self.pwrcablebandtyp = pwrcablebandtyp
        if pwrcableguardqty is not None:
            self.pwrcableguardqty = pwrcableguardqty
        if pwrcableguardtyp is not None:
            self.pwrcableguardtyp = pwrcableguardtyp
        if shaftmetallurgy is not None:
            self.shaftmetallurgy = shaftmetallurgy
        if systag is not None:
            self.systag = systag

    @property
    def housingmetallurgy(self):
        """Gets the housingmetallurgy of this ESPMotorsData.  # noqa: E501


        :return: The housingmetallurgy of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._housingmetallurgy

    @housingmetallurgy.setter
    def housingmetallurgy(self, housingmetallurgy):
        """Sets the housingmetallurgy of this ESPMotorsData.


        :param housingmetallurgy: The housingmetallurgy of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._housingmetallurgy = housingmetallurgy

    @property
    def idrec(self):
        """Gets the idrec of this ESPMotorsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ESPMotorsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this ESPMotorsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this ESPMotorsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this ESPMotorsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this ESPMotorsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ESPMotorsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ESPMotorsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def mtrcablearmor(self):
        """Gets the mtrcablearmor of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablearmor of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcablearmor

    @mtrcablearmor.setter
    def mtrcablearmor(self, mtrcablearmor):
        """Sets the mtrcablearmor of this ESPMotorsData.


        :param mtrcablearmor: The mtrcablearmor of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcablearmor = mtrcablearmor

    @property
    def mtrcableconditionpull(self):
        """Gets the mtrcableconditionpull of this ESPMotorsData.  # noqa: E501


        :return: The mtrcableconditionpull of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcableconditionpull

    @mtrcableconditionpull.setter
    def mtrcableconditionpull(self, mtrcableconditionpull):
        """Sets the mtrcableconditionpull of this ESPMotorsData.


        :param mtrcableconditionpull: The mtrcableconditionpull of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcableconditionpull = mtrcableconditionpull

    @property
    def mtrcableconditionrun(self):
        """Gets the mtrcableconditionrun of this ESPMotorsData.  # noqa: E501


        :return: The mtrcableconditionrun of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcableconditionrun

    @mtrcableconditionrun.setter
    def mtrcableconditionrun(self, mtrcableconditionrun):
        """Sets the mtrcableconditionrun of this ESPMotorsData.


        :param mtrcableconditionrun: The mtrcableconditionrun of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcableconditionrun = mtrcableconditionrun

    @property
    def mtrcablega(self):
        """Gets the mtrcablega of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablega of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrcablega

    @mtrcablega.setter
    def mtrcablega(self, mtrcablega):
        """Sets the mtrcablega of this ESPMotorsData.


        :param mtrcablega: The mtrcablega of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrcablega = mtrcablega

    @property
    def mtrcableinsul(self):
        """Gets the mtrcableinsul of this ESPMotorsData.  # noqa: E501


        :return: The mtrcableinsul of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcableinsul

    @mtrcableinsul.setter
    def mtrcableinsul(self, mtrcableinsul):
        """Sets the mtrcableinsul of this ESPMotorsData.


        :param mtrcableinsul: The mtrcableinsul of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcableinsul = mtrcableinsul

    @property
    def mtrcablelength(self):
        """Gets the mtrcablelength of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablelength of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrcablelength

    @mtrcablelength.setter
    def mtrcablelength(self, mtrcablelength):
        """Sets the mtrcablelength of this ESPMotorsData.


        :param mtrcablelength: The mtrcablelength of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrcablelength = mtrcablelength

    @property
    def mtrcablemake(self):
        """Gets the mtrcablemake of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablemake of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcablemake

    @mtrcablemake.setter
    def mtrcablemake(self, mtrcablemake):
        """Sets the mtrcablemake of this ESPMotorsData.


        :param mtrcablemake: The mtrcablemake of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcablemake = mtrcablemake

    @property
    def mtrcableprotectqty(self):
        """Gets the mtrcableprotectqty of this ESPMotorsData.  # noqa: E501


        :return: The mtrcableprotectqty of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcableprotectqty

    @mtrcableprotectqty.setter
    def mtrcableprotectqty(self, mtrcableprotectqty):
        """Sets the mtrcableprotectqty of this ESPMotorsData.


        :param mtrcableprotectqty: The mtrcableprotectqty of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcableprotectqty = mtrcableprotectqty

    @property
    def mtrcableprotecttyp(self):
        """Gets the mtrcableprotecttyp of this ESPMotorsData.  # noqa: E501


        :return: The mtrcableprotecttyp of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcableprotecttyp

    @mtrcableprotecttyp.setter
    def mtrcableprotecttyp(self, mtrcableprotecttyp):
        """Sets the mtrcableprotecttyp of this ESPMotorsData.


        :param mtrcableprotecttyp: The mtrcableprotecttyp of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcableprotecttyp = mtrcableprotecttyp

    @property
    def mtrcableshape(self):
        """Gets the mtrcableshape of this ESPMotorsData.  # noqa: E501


        :return: The mtrcableshape of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcableshape

    @mtrcableshape.setter
    def mtrcableshape(self, mtrcableshape):
        """Sets the mtrcableshape of this ESPMotorsData.


        :param mtrcableshape: The mtrcableshape of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcableshape = mtrcableshape

    @property
    def mtrcablesheath(self):
        """Gets the mtrcablesheath of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablesheath of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcablesheath

    @mtrcablesheath.setter
    def mtrcablesheath(self, mtrcablesheath):
        """Sets the mtrcablesheath of this ESPMotorsData.


        :param mtrcablesheath: The mtrcablesheath of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcablesheath = mtrcablesheath

    @property
    def mtrcablesn(self):
        """Gets the mtrcablesn of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablesn of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcablesn

    @mtrcablesn.setter
    def mtrcablesn(self, mtrcablesn):
        """Sets the mtrcablesn of this ESPMotorsData.


        :param mtrcablesn: The mtrcablesn of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcablesn = mtrcablesn

    @property
    def mtrcabletyp(self):
        """Gets the mtrcabletyp of this ESPMotorsData.  # noqa: E501


        :return: The mtrcabletyp of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrcabletyp

    @mtrcabletyp.setter
    def mtrcabletyp(self, mtrcabletyp):
        """Sets the mtrcabletyp of this ESPMotorsData.


        :param mtrcabletyp: The mtrcabletyp of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrcabletyp = mtrcabletyp

    @property
    def mtrcablevolt(self):
        """Gets the mtrcablevolt of this ESPMotorsData.  # noqa: E501


        :return: The mtrcablevolt of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrcablevolt

    @mtrcablevolt.setter
    def mtrcablevolt(self, mtrcablevolt):
        """Sets the mtrcablevolt of this ESPMotorsData.


        :param mtrcablevolt: The mtrcablevolt of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrcablevolt = mtrcablevolt

    @property
    def mtrcurrentrating(self):
        """Gets the mtrcurrentrating of this ESPMotorsData.  # noqa: E501


        :return: The mtrcurrentrating of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrcurrentrating

    @mtrcurrentrating.setter
    def mtrcurrentrating(self, mtrcurrentrating):
        """Sets the mtrcurrentrating of this ESPMotorsData.


        :param mtrcurrentrating: The mtrcurrentrating of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrcurrentrating = mtrcurrentrating

    @property
    def mtrfreqrating(self):
        """Gets the mtrfreqrating of this ESPMotorsData.  # noqa: E501


        :return: The mtrfreqrating of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrfreqrating

    @mtrfreqrating.setter
    def mtrfreqrating(self, mtrfreqrating):
        """Sets the mtrfreqrating of this ESPMotorsData.


        :param mtrfreqrating: The mtrfreqrating of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrfreqrating = mtrfreqrating

    @property
    def mtrlubr(self):
        """Gets the mtrlubr of this ESPMotorsData.  # noqa: E501


        :return: The mtrlubr of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrlubr

    @mtrlubr.setter
    def mtrlubr(self, mtrlubr):
        """Sets the mtrlubr of this ESPMotorsData.


        :param mtrlubr: The mtrlubr of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrlubr = mtrlubr

    @property
    def mtrpowerrating(self):
        """Gets the mtrpowerrating of this ESPMotorsData.  # noqa: E501


        :return: The mtrpowerrating of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrpowerrating

    @mtrpowerrating.setter
    def mtrpowerrating(self, mtrpowerrating):
        """Sets the mtrpowerrating of this ESPMotorsData.


        :param mtrpowerrating: The mtrpowerrating of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrpowerrating = mtrpowerrating

    @property
    def mtrtyp(self):
        """Gets the mtrtyp of this ESPMotorsData.  # noqa: E501


        :return: The mtrtyp of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._mtrtyp

    @mtrtyp.setter
    def mtrtyp(self, mtrtyp):
        """Sets the mtrtyp of this ESPMotorsData.


        :param mtrtyp: The mtrtyp of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._mtrtyp = mtrtyp

    @property
    def mtrvoltagerating(self):
        """Gets the mtrvoltagerating of this ESPMotorsData.  # noqa: E501


        :return: The mtrvoltagerating of this ESPMotorsData.  # noqa: E501
        :rtype: float
        """
        return self._mtrvoltagerating

    @mtrvoltagerating.setter
    def mtrvoltagerating(self, mtrvoltagerating):
        """Sets the mtrvoltagerating of this ESPMotorsData.


        :param mtrvoltagerating: The mtrvoltagerating of this ESPMotorsData.  # noqa: E501
        :type: float
        """

        self._mtrvoltagerating = mtrvoltagerating

    @property
    def penetratortyp(self):
        """Gets the penetratortyp of this ESPMotorsData.  # noqa: E501


        :return: The penetratortyp of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._penetratortyp

    @penetratortyp.setter
    def penetratortyp(self, penetratortyp):
        """Sets the penetratortyp of this ESPMotorsData.


        :param penetratortyp: The penetratortyp of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._penetratortyp = penetratortyp

    @property
    def pwrcablebandqty(self):
        """Gets the pwrcablebandqty of this ESPMotorsData.  # noqa: E501


        :return: The pwrcablebandqty of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablebandqty

    @pwrcablebandqty.setter
    def pwrcablebandqty(self, pwrcablebandqty):
        """Sets the pwrcablebandqty of this ESPMotorsData.


        :param pwrcablebandqty: The pwrcablebandqty of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._pwrcablebandqty = pwrcablebandqty

    @property
    def pwrcablebandtyp(self):
        """Gets the pwrcablebandtyp of this ESPMotorsData.  # noqa: E501


        :return: The pwrcablebandtyp of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcablebandtyp

    @pwrcablebandtyp.setter
    def pwrcablebandtyp(self, pwrcablebandtyp):
        """Sets the pwrcablebandtyp of this ESPMotorsData.


        :param pwrcablebandtyp: The pwrcablebandtyp of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._pwrcablebandtyp = pwrcablebandtyp

    @property
    def pwrcableguardqty(self):
        """Gets the pwrcableguardqty of this ESPMotorsData.  # noqa: E501


        :return: The pwrcableguardqty of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcableguardqty

    @pwrcableguardqty.setter
    def pwrcableguardqty(self, pwrcableguardqty):
        """Sets the pwrcableguardqty of this ESPMotorsData.


        :param pwrcableguardqty: The pwrcableguardqty of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._pwrcableguardqty = pwrcableguardqty

    @property
    def pwrcableguardtyp(self):
        """Gets the pwrcableguardtyp of this ESPMotorsData.  # noqa: E501


        :return: The pwrcableguardtyp of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._pwrcableguardtyp

    @pwrcableguardtyp.setter
    def pwrcableguardtyp(self, pwrcableguardtyp):
        """Sets the pwrcableguardtyp of this ESPMotorsData.


        :param pwrcableguardtyp: The pwrcableguardtyp of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._pwrcableguardtyp = pwrcableguardtyp

    @property
    def shaftmetallurgy(self):
        """Gets the shaftmetallurgy of this ESPMotorsData.  # noqa: E501


        :return: The shaftmetallurgy of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._shaftmetallurgy

    @shaftmetallurgy.setter
    def shaftmetallurgy(self, shaftmetallurgy):
        """Sets the shaftmetallurgy of this ESPMotorsData.


        :param shaftmetallurgy: The shaftmetallurgy of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._shaftmetallurgy = shaftmetallurgy

    @property
    def systag(self):
        """Gets the systag of this ESPMotorsData.  # noqa: E501


        :return: The systag of this ESPMotorsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ESPMotorsData.


        :param systag: The systag of this ESPMotorsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ESPMotorsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ESPMotorsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
