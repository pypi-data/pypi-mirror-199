# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductionSettingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'prescas': 'float',
        'prestub': 'float',
        'prodmethdetail': 'str',
        'prodmethtyp': 'str',
        'settingobjective': 'str',
        'settingresult': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'prestub': 'prestub',
        'prodmethdetail': 'prodmethdetail',
        'prodmethtyp': 'prodmethtyp',
        'settingobjective': 'settingobjective',
        'settingresult': 'settingresult',
        'systag': 'systag'
    }

    def __init__(self, com=None, dttmend=None, dttmstart=None, idrec=None, idreczonecompletion=None, idwell=None, prescas=None, prestub=None, prodmethdetail=None, prodmethtyp=None, settingobjective=None, settingresult=None, systag=None):  # noqa: E501
        """ProductionSettingData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idreczonecompletion = None
        self._idwell = None
        self._prescas = None
        self._prestub = None
        self._prodmethdetail = None
        self._prodmethtyp = None
        self._settingobjective = None
        self._settingresult = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if prestub is not None:
            self.prestub = prestub
        if prodmethdetail is not None:
            self.prodmethdetail = prodmethdetail
        if prodmethtyp is not None:
            self.prodmethtyp = prodmethtyp
        if settingobjective is not None:
            self.settingobjective = settingobjective
        if settingresult is not None:
            self.settingresult = settingresult
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this ProductionSettingData.  # noqa: E501


        :return: The com of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProductionSettingData.


        :param com: The com of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttmend(self):
        """Gets the dttmend of this ProductionSettingData.  # noqa: E501


        :return: The dttmend of this ProductionSettingData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this ProductionSettingData.


        :param dttmend: The dttmend of this ProductionSettingData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this ProductionSettingData.  # noqa: E501


        :return: The dttmstart of this ProductionSettingData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this ProductionSettingData.


        :param dttmstart: The dttmstart of this ProductionSettingData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this ProductionSettingData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProductionSettingData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this ProductionSettingData.  # noqa: E501


        :return: The idreczonecompletion of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this ProductionSettingData.


        :param idreczonecompletion: The idreczonecompletion of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this ProductionSettingData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProductionSettingData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ProductionSettingData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this ProductionSettingData.  # noqa: E501


        :return: The prescas of this ProductionSettingData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this ProductionSettingData.


        :param prescas: The prescas of this ProductionSettingData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def prestub(self):
        """Gets the prestub of this ProductionSettingData.  # noqa: E501


        :return: The prestub of this ProductionSettingData.  # noqa: E501
        :rtype: float
        """
        return self._prestub

    @prestub.setter
    def prestub(self, prestub):
        """Sets the prestub of this ProductionSettingData.


        :param prestub: The prestub of this ProductionSettingData.  # noqa: E501
        :type: float
        """

        self._prestub = prestub

    @property
    def prodmethdetail(self):
        """Gets the prodmethdetail of this ProductionSettingData.  # noqa: E501


        :return: The prodmethdetail of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._prodmethdetail

    @prodmethdetail.setter
    def prodmethdetail(self, prodmethdetail):
        """Sets the prodmethdetail of this ProductionSettingData.


        :param prodmethdetail: The prodmethdetail of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._prodmethdetail = prodmethdetail

    @property
    def prodmethtyp(self):
        """Gets the prodmethtyp of this ProductionSettingData.  # noqa: E501


        :return: The prodmethtyp of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._prodmethtyp

    @prodmethtyp.setter
    def prodmethtyp(self, prodmethtyp):
        """Sets the prodmethtyp of this ProductionSettingData.


        :param prodmethtyp: The prodmethtyp of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._prodmethtyp = prodmethtyp

    @property
    def settingobjective(self):
        """Gets the settingobjective of this ProductionSettingData.  # noqa: E501


        :return: The settingobjective of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._settingobjective

    @settingobjective.setter
    def settingobjective(self, settingobjective):
        """Sets the settingobjective of this ProductionSettingData.


        :param settingobjective: The settingobjective of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._settingobjective = settingobjective

    @property
    def settingresult(self):
        """Gets the settingresult of this ProductionSettingData.  # noqa: E501


        :return: The settingresult of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._settingresult

    @settingresult.setter
    def settingresult(self, settingresult):
        """Sets the settingresult of this ProductionSettingData.


        :param settingresult: The settingresult of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._settingresult = settingresult

    @property
    def systag(self):
        """Gets the systag of this ProductionSettingData.  # noqa: E501


        :return: The systag of this ProductionSettingData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProductionSettingData.


        :param systag: The systag of this ProductionSettingData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductionSettingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionSettingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
