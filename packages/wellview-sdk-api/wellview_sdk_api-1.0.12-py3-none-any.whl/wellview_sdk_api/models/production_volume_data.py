# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductionVolumeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activitytyp': 'str',
        'com': 'str',
        'datasource': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'activitytyp': 'activitytyp',
        'com': 'com',
        'datasource': 'datasource',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'systag': 'systag'
    }

    def __init__(self, activitytyp=None, com=None, datasource=None, dttmend=None, dttmstart=None, idrec=None, idreczonecompletion=None, idwell=None, systag=None):  # noqa: E501
        """ProductionVolumeData - a model defined in Swagger"""  # noqa: E501
        self._activitytyp = None
        self._com = None
        self._datasource = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idreczonecompletion = None
        self._idwell = None
        self._systag = None
        self.discriminator = None
        if activitytyp is not None:
            self.activitytyp = activitytyp
        if com is not None:
            self.com = com
        if datasource is not None:
            self.datasource = datasource
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if systag is not None:
            self.systag = systag

    @property
    def activitytyp(self):
        """Gets the activitytyp of this ProductionVolumeData.  # noqa: E501


        :return: The activitytyp of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._activitytyp

    @activitytyp.setter
    def activitytyp(self, activitytyp):
        """Sets the activitytyp of this ProductionVolumeData.


        :param activitytyp: The activitytyp of this ProductionVolumeData.  # noqa: E501
        :type: str
        """

        self._activitytyp = activitytyp

    @property
    def com(self):
        """Gets the com of this ProductionVolumeData.  # noqa: E501


        :return: The com of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProductionVolumeData.


        :param com: The com of this ProductionVolumeData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def datasource(self):
        """Gets the datasource of this ProductionVolumeData.  # noqa: E501


        :return: The datasource of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this ProductionVolumeData.


        :param datasource: The datasource of this ProductionVolumeData.  # noqa: E501
        :type: str
        """

        self._datasource = datasource

    @property
    def dttmend(self):
        """Gets the dttmend of this ProductionVolumeData.  # noqa: E501


        :return: The dttmend of this ProductionVolumeData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this ProductionVolumeData.


        :param dttmend: The dttmend of this ProductionVolumeData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this ProductionVolumeData.  # noqa: E501


        :return: The dttmstart of this ProductionVolumeData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this ProductionVolumeData.


        :param dttmstart: The dttmstart of this ProductionVolumeData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this ProductionVolumeData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProductionVolumeData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ProductionVolumeData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this ProductionVolumeData.  # noqa: E501


        :return: The idreczonecompletion of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this ProductionVolumeData.


        :param idreczonecompletion: The idreczonecompletion of this ProductionVolumeData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this ProductionVolumeData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProductionVolumeData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ProductionVolumeData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def systag(self):
        """Gets the systag of this ProductionVolumeData.  # noqa: E501


        :return: The systag of this ProductionVolumeData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProductionVolumeData.


        :param systag: The systag of this ProductionVolumeData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductionVolumeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionVolumeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
