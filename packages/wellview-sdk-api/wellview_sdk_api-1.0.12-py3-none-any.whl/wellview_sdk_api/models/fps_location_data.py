# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FPSLocationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eventseq': 'int',
        'grid': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'latituderef': 'float',
        'locexcept': 'str',
        'longituderef': 'float',
        'note': 'str',
        'section': 'int',
        'source': 'str',
        'unit': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'eventseq': 'eventseq',
        'grid': 'grid',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'latituderef': 'latituderef',
        'locexcept': 'locexcept',
        'longituderef': 'longituderef',
        'note': 'note',
        'section': 'section',
        'source': 'source',
        'unit': 'unit',
        'systag': 'systag'
    }

    def __init__(self, eventseq=None, grid=None, idrec=None, idrecparent=None, idwell=None, latituderef=None, locexcept=None, longituderef=None, note=None, section=None, source=None, unit=None, systag=None):  # noqa: E501
        """FPSLocationData - a model defined in Swagger"""  # noqa: E501
        self._eventseq = None
        self._grid = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._latituderef = None
        self._locexcept = None
        self._longituderef = None
        self._note = None
        self._section = None
        self._source = None
        self._unit = None
        self._systag = None
        self.discriminator = None
        if eventseq is not None:
            self.eventseq = eventseq
        if grid is not None:
            self.grid = grid
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if latituderef is not None:
            self.latituderef = latituderef
        if locexcept is not None:
            self.locexcept = locexcept
        if longituderef is not None:
            self.longituderef = longituderef
        if note is not None:
            self.note = note
        if section is not None:
            self.section = section
        if source is not None:
            self.source = source
        if unit is not None:
            self.unit = unit
        if systag is not None:
            self.systag = systag

    @property
    def eventseq(self):
        """Gets the eventseq of this FPSLocationData.  # noqa: E501


        :return: The eventseq of this FPSLocationData.  # noqa: E501
        :rtype: int
        """
        return self._eventseq

    @eventseq.setter
    def eventseq(self, eventseq):
        """Sets the eventseq of this FPSLocationData.


        :param eventseq: The eventseq of this FPSLocationData.  # noqa: E501
        :type: int
        """

        self._eventseq = eventseq

    @property
    def grid(self):
        """Gets the grid of this FPSLocationData.  # noqa: E501


        :return: The grid of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._grid

    @grid.setter
    def grid(self, grid):
        """Sets the grid of this FPSLocationData.


        :param grid: The grid of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._grid = grid

    @property
    def idrec(self):
        """Gets the idrec of this FPSLocationData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FPSLocationData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this FPSLocationData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this FPSLocationData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this FPSLocationData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this FPSLocationData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FPSLocationData.

        id of well  # noqa: E501

        :param idwell: The idwell of this FPSLocationData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def latituderef(self):
        """Gets the latituderef of this FPSLocationData.  # noqa: E501


        :return: The latituderef of this FPSLocationData.  # noqa: E501
        :rtype: float
        """
        return self._latituderef

    @latituderef.setter
    def latituderef(self, latituderef):
        """Sets the latituderef of this FPSLocationData.


        :param latituderef: The latituderef of this FPSLocationData.  # noqa: E501
        :type: float
        """

        self._latituderef = latituderef

    @property
    def locexcept(self):
        """Gets the locexcept of this FPSLocationData.  # noqa: E501


        :return: The locexcept of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._locexcept

    @locexcept.setter
    def locexcept(self, locexcept):
        """Sets the locexcept of this FPSLocationData.


        :param locexcept: The locexcept of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._locexcept = locexcept

    @property
    def longituderef(self):
        """Gets the longituderef of this FPSLocationData.  # noqa: E501


        :return: The longituderef of this FPSLocationData.  # noqa: E501
        :rtype: float
        """
        return self._longituderef

    @longituderef.setter
    def longituderef(self, longituderef):
        """Sets the longituderef of this FPSLocationData.


        :param longituderef: The longituderef of this FPSLocationData.  # noqa: E501
        :type: float
        """

        self._longituderef = longituderef

    @property
    def note(self):
        """Gets the note of this FPSLocationData.  # noqa: E501


        :return: The note of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FPSLocationData.


        :param note: The note of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def section(self):
        """Gets the section of this FPSLocationData.  # noqa: E501


        :return: The section of this FPSLocationData.  # noqa: E501
        :rtype: int
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this FPSLocationData.


        :param section: The section of this FPSLocationData.  # noqa: E501
        :type: int
        """

        self._section = section

    @property
    def source(self):
        """Gets the source of this FPSLocationData.  # noqa: E501


        :return: The source of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FPSLocationData.


        :param source: The source of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def unit(self):
        """Gets the unit of this FPSLocationData.  # noqa: E501


        :return: The unit of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this FPSLocationData.


        :param unit: The unit of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def systag(self):
        """Gets the systag of this FPSLocationData.  # noqa: E501


        :return: The systag of this FPSLocationData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FPSLocationData.


        :param systag: The systag of this FPSLocationData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FPSLocationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FPSLocationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
