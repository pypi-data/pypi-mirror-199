# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CrewTrainingData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'company': 'str',
        'companycontact': 'str',
        'companycontacttitle': 'str',
        'des': 'str',
        'dttm': 'datetime',
        'dttmexpiry': 'datetime',
        'durtraining': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'refno': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'company': 'company',
        'companycontact': 'companycontact',
        'companycontacttitle': 'companycontacttitle',
        'des': 'des',
        'dttm': 'dttm',
        'dttmexpiry': 'dttmexpiry',
        'durtraining': 'durtraining',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'refno': 'refno',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, com=None, company=None, companycontact=None, companycontacttitle=None, des=None, dttm=None, dttmexpiry=None, durtraining=None, idrec=None, idrecparent=None, idwell=None, refno=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """CrewTrainingData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._company = None
        self._companycontact = None
        self._companycontacttitle = None
        self._des = None
        self._dttm = None
        self._dttmexpiry = None
        self._durtraining = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._refno = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if company is not None:
            self.company = company
        if companycontact is not None:
            self.companycontact = companycontact
        if companycontacttitle is not None:
            self.companycontacttitle = companycontacttitle
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if dttmexpiry is not None:
            self.dttmexpiry = dttmexpiry
        if durtraining is not None:
            self.durtraining = durtraining
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if refno is not None:
            self.refno = refno
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this CrewTrainingData.  # noqa: E501


        :return: The com of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CrewTrainingData.


        :param com: The com of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def company(self):
        """Gets the company of this CrewTrainingData.  # noqa: E501


        :return: The company of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CrewTrainingData.


        :param company: The company of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def companycontact(self):
        """Gets the companycontact of this CrewTrainingData.  # noqa: E501


        :return: The companycontact of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._companycontact

    @companycontact.setter
    def companycontact(self, companycontact):
        """Sets the companycontact of this CrewTrainingData.


        :param companycontact: The companycontact of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._companycontact = companycontact

    @property
    def companycontacttitle(self):
        """Gets the companycontacttitle of this CrewTrainingData.  # noqa: E501


        :return: The companycontacttitle of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._companycontacttitle

    @companycontacttitle.setter
    def companycontacttitle(self, companycontacttitle):
        """Sets the companycontacttitle of this CrewTrainingData.


        :param companycontacttitle: The companycontacttitle of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._companycontacttitle = companycontacttitle

    @property
    def des(self):
        """Gets the des of this CrewTrainingData.  # noqa: E501


        :return: The des of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this CrewTrainingData.


        :param des: The des of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this CrewTrainingData.  # noqa: E501


        :return: The dttm of this CrewTrainingData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this CrewTrainingData.


        :param dttm: The dttm of this CrewTrainingData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def dttmexpiry(self):
        """Gets the dttmexpiry of this CrewTrainingData.  # noqa: E501


        :return: The dttmexpiry of this CrewTrainingData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmexpiry

    @dttmexpiry.setter
    def dttmexpiry(self, dttmexpiry):
        """Sets the dttmexpiry of this CrewTrainingData.


        :param dttmexpiry: The dttmexpiry of this CrewTrainingData.  # noqa: E501
        :type: datetime
        """

        self._dttmexpiry = dttmexpiry

    @property
    def durtraining(self):
        """Gets the durtraining of this CrewTrainingData.  # noqa: E501


        :return: The durtraining of this CrewTrainingData.  # noqa: E501
        :rtype: float
        """
        return self._durtraining

    @durtraining.setter
    def durtraining(self, durtraining):
        """Sets the durtraining of this CrewTrainingData.


        :param durtraining: The durtraining of this CrewTrainingData.  # noqa: E501
        :type: float
        """

        self._durtraining = durtraining

    @property
    def idrec(self):
        """Gets the idrec of this CrewTrainingData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CrewTrainingData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CrewTrainingData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CrewTrainingData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this CrewTrainingData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CrewTrainingData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CrewTrainingData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CrewTrainingData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def refno(self):
        """Gets the refno of this CrewTrainingData.  # noqa: E501


        :return: The refno of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this CrewTrainingData.


        :param refno: The refno of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def typ1(self):
        """Gets the typ1 of this CrewTrainingData.  # noqa: E501


        :return: The typ1 of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this CrewTrainingData.


        :param typ1: The typ1 of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this CrewTrainingData.  # noqa: E501


        :return: The typ2 of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this CrewTrainingData.


        :param typ2: The typ2 of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this CrewTrainingData.  # noqa: E501


        :return: The systag of this CrewTrainingData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CrewTrainingData.


        :param systag: The systag of this CrewTrainingData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrewTrainingData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrewTrainingData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
