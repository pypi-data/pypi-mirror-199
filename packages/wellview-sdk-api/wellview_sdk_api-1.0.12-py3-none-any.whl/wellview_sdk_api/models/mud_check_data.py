# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MudCheckData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alkalinity': 'float',
        'barite': 'float',
        'brine': 'float',
        'cacl': 'float',
        'calcium': 'float',
        'ceccuttings': 'float',
        'checkedby': 'str',
        'chlorides': 'float',
        'com': 'str',
        'contractor': 'str',
        'cuttingsszavg': 'float',
        'density': 'float',
        'depth': 'float',
        'dontuse': 'bool',
        'dontusereason': 'str',
        'dttm': 'datetime',
        'ecd': 'float',
        'elecstability': 'float',
        'filtercake': 'float',
        'filtrate': 'float',
        'filtrationsz': 'float',
        'funnelviscosity': 'float',
        'gel10min': 'float',
        'gel10sec': 'float',
        'gel30min': 'float',
        'hardnessca': 'float',
        'hthpfiltercake': 'float',
        'hthpfiltrate': 'float',
        'hthppres': 'float',
        'hthptemp': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'iron': 'float',
        'kcl': 'float',
        'koverride': 'float',
        'lcm': 'str',
        'lime': 'float',
        'magnesium': 'float',
        'mbt': 'float',
        'mf': 'float',
        'mudtyp1': 'str',
        'mudtyp2': 'str',
        'noverride': 'float',
        'ntu': 'int',
        'ntuout': 'int',
        'oilgrease': 'float',
        'oiloncuttings': 'float',
        'oilpercent': 'float',
        'p1': 'float',
        'p2': 'float',
        'pf': 'float',
        'ph': 'float',
        'phmethod': 'str',
        'plasticvis': 'float',
        'pm': 'float',
        'pmfiltrate': 'float',
        'polymer': 'float',
        'polymertyp': 'str',
        'potassium': 'float',
        'presvisc': 'float',
        'salt': 'float',
        'sands': 'float',
        'solids': 'float',
        'solidsavggrav': 'float',
        'solidscorrected': 'float',
        'solidshighgrav': 'float',
        'solidshighgravwt': 'float',
        'solidslowgrav': 'float',
        'solidslowgravwt': 'float',
        'source': 'str',
        'staticsheen': 'float',
        'sulfide': 'float',
        'tempbottomhole': 'float',
        'tempcrystal': 'float',
        'tempflowline': 'float',
        'tempph': 'float',
        'tempvisc': 'float',
        'vis100rpm': 'float',
        'vis200rpm': 'float',
        'vis300rpm': 'float',
        'vis30rpm': 'float',
        'vis3rpm': 'float',
        'vis600rpm': 'float',
        'vis60rpm': 'float',
        'vis6rpm': 'float',
        'waterpercent': 'float',
        'weightmetalrecov': 'float',
        'yieldpt': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'alkalinity': 'alkalinity',
        'barite': 'barite',
        'brine': 'brine',
        'cacl': 'cacl',
        'calcium': 'calcium',
        'ceccuttings': 'ceccuttings',
        'checkedby': 'checkedby',
        'chlorides': 'chlorides',
        'com': 'com',
        'contractor': 'contractor',
        'cuttingsszavg': 'cuttingsszavg',
        'density': 'density',
        'depth': 'depth',
        'dontuse': 'dontuse',
        'dontusereason': 'dontusereason',
        'dttm': 'dttm',
        'ecd': 'ecd',
        'elecstability': 'elecstability',
        'filtercake': 'filtercake',
        'filtrate': 'filtrate',
        'filtrationsz': 'filtrationsz',
        'funnelviscosity': 'funnelviscosity',
        'gel10min': 'gel10min',
        'gel10sec': 'gel10sec',
        'gel30min': 'gel30min',
        'hardnessca': 'hardnessca',
        'hthpfiltercake': 'hthpfiltercake',
        'hthpfiltrate': 'hthpfiltrate',
        'hthppres': 'hthppres',
        'hthptemp': 'hthptemp',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'iron': 'iron',
        'kcl': 'kcl',
        'koverride': 'koverride',
        'lcm': 'lcm',
        'lime': 'lime',
        'magnesium': 'magnesium',
        'mbt': 'mbt',
        'mf': 'mf',
        'mudtyp1': 'mudtyp1',
        'mudtyp2': 'mudtyp2',
        'noverride': 'noverride',
        'ntu': 'ntu',
        'ntuout': 'ntuout',
        'oilgrease': 'oilgrease',
        'oiloncuttings': 'oiloncuttings',
        'oilpercent': 'oilpercent',
        'p1': 'p1',
        'p2': 'p2',
        'pf': 'pf',
        'ph': 'ph',
        'phmethod': 'phmethod',
        'plasticvis': 'plasticvis',
        'pm': 'pm',
        'pmfiltrate': 'pmfiltrate',
        'polymer': 'polymer',
        'polymertyp': 'polymertyp',
        'potassium': 'potassium',
        'presvisc': 'presvisc',
        'salt': 'salt',
        'sands': 'sands',
        'solids': 'solids',
        'solidsavggrav': 'solidsavggrav',
        'solidscorrected': 'solidscorrected',
        'solidshighgrav': 'solidshighgrav',
        'solidshighgravwt': 'solidshighgravwt',
        'solidslowgrav': 'solidslowgrav',
        'solidslowgravwt': 'solidslowgravwt',
        'source': 'source',
        'staticsheen': 'staticsheen',
        'sulfide': 'sulfide',
        'tempbottomhole': 'tempbottomhole',
        'tempcrystal': 'tempcrystal',
        'tempflowline': 'tempflowline',
        'tempph': 'tempph',
        'tempvisc': 'tempvisc',
        'vis100rpm': 'vis100rpm',
        'vis200rpm': 'vis200rpm',
        'vis300rpm': 'vis300rpm',
        'vis30rpm': 'vis30rpm',
        'vis3rpm': 'vis3rpm',
        'vis600rpm': 'vis600rpm',
        'vis60rpm': 'vis60rpm',
        'vis6rpm': 'vis6rpm',
        'waterpercent': 'waterpercent',
        'weightmetalrecov': 'weightmetalrecov',
        'yieldpt': 'yieldpt',
        'systag': 'systag'
    }

    def __init__(self, alkalinity=None, barite=None, brine=None, cacl=None, calcium=None, ceccuttings=None, checkedby=None, chlorides=None, com=None, contractor=None, cuttingsszavg=None, density=None, depth=None, dontuse=None, dontusereason=None, dttm=None, ecd=None, elecstability=None, filtercake=None, filtrate=None, filtrationsz=None, funnelviscosity=None, gel10min=None, gel10sec=None, gel30min=None, hardnessca=None, hthpfiltercake=None, hthpfiltrate=None, hthppres=None, hthptemp=None, idrec=None, idrecparent=None, idrecwellbore=None, idwell=None, iron=None, kcl=None, koverride=None, lcm=None, lime=None, magnesium=None, mbt=None, mf=None, mudtyp1=None, mudtyp2=None, noverride=None, ntu=None, ntuout=None, oilgrease=None, oiloncuttings=None, oilpercent=None, p1=None, p2=None, pf=None, ph=None, phmethod=None, plasticvis=None, pm=None, pmfiltrate=None, polymer=None, polymertyp=None, potassium=None, presvisc=None, salt=None, sands=None, solids=None, solidsavggrav=None, solidscorrected=None, solidshighgrav=None, solidshighgravwt=None, solidslowgrav=None, solidslowgravwt=None, source=None, staticsheen=None, sulfide=None, tempbottomhole=None, tempcrystal=None, tempflowline=None, tempph=None, tempvisc=None, vis100rpm=None, vis200rpm=None, vis300rpm=None, vis30rpm=None, vis3rpm=None, vis600rpm=None, vis60rpm=None, vis6rpm=None, waterpercent=None, weightmetalrecov=None, yieldpt=None, systag=None):  # noqa: E501
        """MudCheckData - a model defined in Swagger"""  # noqa: E501
        self._alkalinity = None
        self._barite = None
        self._brine = None
        self._cacl = None
        self._calcium = None
        self._ceccuttings = None
        self._checkedby = None
        self._chlorides = None
        self._com = None
        self._contractor = None
        self._cuttingsszavg = None
        self._density = None
        self._depth = None
        self._dontuse = None
        self._dontusereason = None
        self._dttm = None
        self._ecd = None
        self._elecstability = None
        self._filtercake = None
        self._filtrate = None
        self._filtrationsz = None
        self._funnelviscosity = None
        self._gel10min = None
        self._gel10sec = None
        self._gel30min = None
        self._hardnessca = None
        self._hthpfiltercake = None
        self._hthpfiltrate = None
        self._hthppres = None
        self._hthptemp = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._iron = None
        self._kcl = None
        self._koverride = None
        self._lcm = None
        self._lime = None
        self._magnesium = None
        self._mbt = None
        self._mf = None
        self._mudtyp1 = None
        self._mudtyp2 = None
        self._noverride = None
        self._ntu = None
        self._ntuout = None
        self._oilgrease = None
        self._oiloncuttings = None
        self._oilpercent = None
        self._p1 = None
        self._p2 = None
        self._pf = None
        self._ph = None
        self._phmethod = None
        self._plasticvis = None
        self._pm = None
        self._pmfiltrate = None
        self._polymer = None
        self._polymertyp = None
        self._potassium = None
        self._presvisc = None
        self._salt = None
        self._sands = None
        self._solids = None
        self._solidsavggrav = None
        self._solidscorrected = None
        self._solidshighgrav = None
        self._solidshighgravwt = None
        self._solidslowgrav = None
        self._solidslowgravwt = None
        self._source = None
        self._staticsheen = None
        self._sulfide = None
        self._tempbottomhole = None
        self._tempcrystal = None
        self._tempflowline = None
        self._tempph = None
        self._tempvisc = None
        self._vis100rpm = None
        self._vis200rpm = None
        self._vis300rpm = None
        self._vis30rpm = None
        self._vis3rpm = None
        self._vis600rpm = None
        self._vis60rpm = None
        self._vis6rpm = None
        self._waterpercent = None
        self._weightmetalrecov = None
        self._yieldpt = None
        self._systag = None
        self.discriminator = None
        if alkalinity is not None:
            self.alkalinity = alkalinity
        if barite is not None:
            self.barite = barite
        if brine is not None:
            self.brine = brine
        if cacl is not None:
            self.cacl = cacl
        if calcium is not None:
            self.calcium = calcium
        if ceccuttings is not None:
            self.ceccuttings = ceccuttings
        if checkedby is not None:
            self.checkedby = checkedby
        if chlorides is not None:
            self.chlorides = chlorides
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if cuttingsszavg is not None:
            self.cuttingsszavg = cuttingsszavg
        if density is not None:
            self.density = density
        if depth is not None:
            self.depth = depth
        if dontuse is not None:
            self.dontuse = dontuse
        if dontusereason is not None:
            self.dontusereason = dontusereason
        if dttm is not None:
            self.dttm = dttm
        if ecd is not None:
            self.ecd = ecd
        if elecstability is not None:
            self.elecstability = elecstability
        if filtercake is not None:
            self.filtercake = filtercake
        if filtrate is not None:
            self.filtrate = filtrate
        if filtrationsz is not None:
            self.filtrationsz = filtrationsz
        if funnelviscosity is not None:
            self.funnelviscosity = funnelviscosity
        if gel10min is not None:
            self.gel10min = gel10min
        if gel10sec is not None:
            self.gel10sec = gel10sec
        if gel30min is not None:
            self.gel30min = gel30min
        if hardnessca is not None:
            self.hardnessca = hardnessca
        if hthpfiltercake is not None:
            self.hthpfiltercake = hthpfiltercake
        if hthpfiltrate is not None:
            self.hthpfiltrate = hthpfiltrate
        if hthppres is not None:
            self.hthppres = hthppres
        if hthptemp is not None:
            self.hthptemp = hthptemp
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if iron is not None:
            self.iron = iron
        if kcl is not None:
            self.kcl = kcl
        if koverride is not None:
            self.koverride = koverride
        if lcm is not None:
            self.lcm = lcm
        if lime is not None:
            self.lime = lime
        if magnesium is not None:
            self.magnesium = magnesium
        if mbt is not None:
            self.mbt = mbt
        if mf is not None:
            self.mf = mf
        if mudtyp1 is not None:
            self.mudtyp1 = mudtyp1
        if mudtyp2 is not None:
            self.mudtyp2 = mudtyp2
        if noverride is not None:
            self.noverride = noverride
        if ntu is not None:
            self.ntu = ntu
        if ntuout is not None:
            self.ntuout = ntuout
        if oilgrease is not None:
            self.oilgrease = oilgrease
        if oiloncuttings is not None:
            self.oiloncuttings = oiloncuttings
        if oilpercent is not None:
            self.oilpercent = oilpercent
        if p1 is not None:
            self.p1 = p1
        if p2 is not None:
            self.p2 = p2
        if pf is not None:
            self.pf = pf
        if ph is not None:
            self.ph = ph
        if phmethod is not None:
            self.phmethod = phmethod
        if plasticvis is not None:
            self.plasticvis = plasticvis
        if pm is not None:
            self.pm = pm
        if pmfiltrate is not None:
            self.pmfiltrate = pmfiltrate
        if polymer is not None:
            self.polymer = polymer
        if polymertyp is not None:
            self.polymertyp = polymertyp
        if potassium is not None:
            self.potassium = potassium
        if presvisc is not None:
            self.presvisc = presvisc
        if salt is not None:
            self.salt = salt
        if sands is not None:
            self.sands = sands
        if solids is not None:
            self.solids = solids
        if solidsavggrav is not None:
            self.solidsavggrav = solidsavggrav
        if solidscorrected is not None:
            self.solidscorrected = solidscorrected
        if solidshighgrav is not None:
            self.solidshighgrav = solidshighgrav
        if solidshighgravwt is not None:
            self.solidshighgravwt = solidshighgravwt
        if solidslowgrav is not None:
            self.solidslowgrav = solidslowgrav
        if solidslowgravwt is not None:
            self.solidslowgravwt = solidslowgravwt
        if source is not None:
            self.source = source
        if staticsheen is not None:
            self.staticsheen = staticsheen
        if sulfide is not None:
            self.sulfide = sulfide
        if tempbottomhole is not None:
            self.tempbottomhole = tempbottomhole
        if tempcrystal is not None:
            self.tempcrystal = tempcrystal
        if tempflowline is not None:
            self.tempflowline = tempflowline
        if tempph is not None:
            self.tempph = tempph
        if tempvisc is not None:
            self.tempvisc = tempvisc
        if vis100rpm is not None:
            self.vis100rpm = vis100rpm
        if vis200rpm is not None:
            self.vis200rpm = vis200rpm
        if vis300rpm is not None:
            self.vis300rpm = vis300rpm
        if vis30rpm is not None:
            self.vis30rpm = vis30rpm
        if vis3rpm is not None:
            self.vis3rpm = vis3rpm
        if vis600rpm is not None:
            self.vis600rpm = vis600rpm
        if vis60rpm is not None:
            self.vis60rpm = vis60rpm
        if vis6rpm is not None:
            self.vis6rpm = vis6rpm
        if waterpercent is not None:
            self.waterpercent = waterpercent
        if weightmetalrecov is not None:
            self.weightmetalrecov = weightmetalrecov
        if yieldpt is not None:
            self.yieldpt = yieldpt
        if systag is not None:
            self.systag = systag

    @property
    def alkalinity(self):
        """Gets the alkalinity of this MudCheckData.  # noqa: E501


        :return: The alkalinity of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._alkalinity

    @alkalinity.setter
    def alkalinity(self, alkalinity):
        """Sets the alkalinity of this MudCheckData.


        :param alkalinity: The alkalinity of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._alkalinity = alkalinity

    @property
    def barite(self):
        """Gets the barite of this MudCheckData.  # noqa: E501


        :return: The barite of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._barite

    @barite.setter
    def barite(self, barite):
        """Sets the barite of this MudCheckData.


        :param barite: The barite of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._barite = barite

    @property
    def brine(self):
        """Gets the brine of this MudCheckData.  # noqa: E501


        :return: The brine of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._brine

    @brine.setter
    def brine(self, brine):
        """Sets the brine of this MudCheckData.


        :param brine: The brine of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._brine = brine

    @property
    def cacl(self):
        """Gets the cacl of this MudCheckData.  # noqa: E501


        :return: The cacl of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._cacl

    @cacl.setter
    def cacl(self, cacl):
        """Sets the cacl of this MudCheckData.


        :param cacl: The cacl of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._cacl = cacl

    @property
    def calcium(self):
        """Gets the calcium of this MudCheckData.  # noqa: E501


        :return: The calcium of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._calcium

    @calcium.setter
    def calcium(self, calcium):
        """Sets the calcium of this MudCheckData.


        :param calcium: The calcium of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._calcium = calcium

    @property
    def ceccuttings(self):
        """Gets the ceccuttings of this MudCheckData.  # noqa: E501


        :return: The ceccuttings of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._ceccuttings

    @ceccuttings.setter
    def ceccuttings(self, ceccuttings):
        """Sets the ceccuttings of this MudCheckData.


        :param ceccuttings: The ceccuttings of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._ceccuttings = ceccuttings

    @property
    def checkedby(self):
        """Gets the checkedby of this MudCheckData.  # noqa: E501


        :return: The checkedby of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._checkedby

    @checkedby.setter
    def checkedby(self, checkedby):
        """Sets the checkedby of this MudCheckData.


        :param checkedby: The checkedby of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._checkedby = checkedby

    @property
    def chlorides(self):
        """Gets the chlorides of this MudCheckData.  # noqa: E501


        :return: The chlorides of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._chlorides

    @chlorides.setter
    def chlorides(self, chlorides):
        """Sets the chlorides of this MudCheckData.


        :param chlorides: The chlorides of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._chlorides = chlorides

    @property
    def com(self):
        """Gets the com of this MudCheckData.  # noqa: E501


        :return: The com of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this MudCheckData.


        :param com: The com of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this MudCheckData.  # noqa: E501


        :return: The contractor of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this MudCheckData.


        :param contractor: The contractor of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def cuttingsszavg(self):
        """Gets the cuttingsszavg of this MudCheckData.  # noqa: E501


        :return: The cuttingsszavg of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._cuttingsszavg

    @cuttingsszavg.setter
    def cuttingsszavg(self, cuttingsszavg):
        """Sets the cuttingsszavg of this MudCheckData.


        :param cuttingsszavg: The cuttingsszavg of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._cuttingsszavg = cuttingsszavg

    @property
    def density(self):
        """Gets the density of this MudCheckData.  # noqa: E501


        :return: The density of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this MudCheckData.


        :param density: The density of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def depth(self):
        """Gets the depth of this MudCheckData.  # noqa: E501


        :return: The depth of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this MudCheckData.


        :param depth: The depth of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def dontuse(self):
        """Gets the dontuse of this MudCheckData.  # noqa: E501


        :return: The dontuse of this MudCheckData.  # noqa: E501
        :rtype: bool
        """
        return self._dontuse

    @dontuse.setter
    def dontuse(self, dontuse):
        """Sets the dontuse of this MudCheckData.


        :param dontuse: The dontuse of this MudCheckData.  # noqa: E501
        :type: bool
        """

        self._dontuse = dontuse

    @property
    def dontusereason(self):
        """Gets the dontusereason of this MudCheckData.  # noqa: E501


        :return: The dontusereason of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._dontusereason

    @dontusereason.setter
    def dontusereason(self, dontusereason):
        """Sets the dontusereason of this MudCheckData.


        :param dontusereason: The dontusereason of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._dontusereason = dontusereason

    @property
    def dttm(self):
        """Gets the dttm of this MudCheckData.  # noqa: E501


        :return: The dttm of this MudCheckData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this MudCheckData.


        :param dttm: The dttm of this MudCheckData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def ecd(self):
        """Gets the ecd of this MudCheckData.  # noqa: E501


        :return: The ecd of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._ecd

    @ecd.setter
    def ecd(self, ecd):
        """Sets the ecd of this MudCheckData.


        :param ecd: The ecd of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._ecd = ecd

    @property
    def elecstability(self):
        """Gets the elecstability of this MudCheckData.  # noqa: E501


        :return: The elecstability of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._elecstability

    @elecstability.setter
    def elecstability(self, elecstability):
        """Sets the elecstability of this MudCheckData.


        :param elecstability: The elecstability of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._elecstability = elecstability

    @property
    def filtercake(self):
        """Gets the filtercake of this MudCheckData.  # noqa: E501


        :return: The filtercake of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._filtercake

    @filtercake.setter
    def filtercake(self, filtercake):
        """Sets the filtercake of this MudCheckData.


        :param filtercake: The filtercake of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._filtercake = filtercake

    @property
    def filtrate(self):
        """Gets the filtrate of this MudCheckData.  # noqa: E501


        :return: The filtrate of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._filtrate

    @filtrate.setter
    def filtrate(self, filtrate):
        """Sets the filtrate of this MudCheckData.


        :param filtrate: The filtrate of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._filtrate = filtrate

    @property
    def filtrationsz(self):
        """Gets the filtrationsz of this MudCheckData.  # noqa: E501


        :return: The filtrationsz of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._filtrationsz

    @filtrationsz.setter
    def filtrationsz(self, filtrationsz):
        """Sets the filtrationsz of this MudCheckData.


        :param filtrationsz: The filtrationsz of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._filtrationsz = filtrationsz

    @property
    def funnelviscosity(self):
        """Gets the funnelviscosity of this MudCheckData.  # noqa: E501


        :return: The funnelviscosity of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._funnelviscosity

    @funnelviscosity.setter
    def funnelviscosity(self, funnelviscosity):
        """Sets the funnelviscosity of this MudCheckData.


        :param funnelviscosity: The funnelviscosity of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._funnelviscosity = funnelviscosity

    @property
    def gel10min(self):
        """Gets the gel10min of this MudCheckData.  # noqa: E501


        :return: The gel10min of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._gel10min

    @gel10min.setter
    def gel10min(self, gel10min):
        """Sets the gel10min of this MudCheckData.


        :param gel10min: The gel10min of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._gel10min = gel10min

    @property
    def gel10sec(self):
        """Gets the gel10sec of this MudCheckData.  # noqa: E501


        :return: The gel10sec of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._gel10sec

    @gel10sec.setter
    def gel10sec(self, gel10sec):
        """Sets the gel10sec of this MudCheckData.


        :param gel10sec: The gel10sec of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._gel10sec = gel10sec

    @property
    def gel30min(self):
        """Gets the gel30min of this MudCheckData.  # noqa: E501


        :return: The gel30min of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._gel30min

    @gel30min.setter
    def gel30min(self, gel30min):
        """Sets the gel30min of this MudCheckData.


        :param gel30min: The gel30min of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._gel30min = gel30min

    @property
    def hardnessca(self):
        """Gets the hardnessca of this MudCheckData.  # noqa: E501


        :return: The hardnessca of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._hardnessca

    @hardnessca.setter
    def hardnessca(self, hardnessca):
        """Sets the hardnessca of this MudCheckData.


        :param hardnessca: The hardnessca of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._hardnessca = hardnessca

    @property
    def hthpfiltercake(self):
        """Gets the hthpfiltercake of this MudCheckData.  # noqa: E501


        :return: The hthpfiltercake of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._hthpfiltercake

    @hthpfiltercake.setter
    def hthpfiltercake(self, hthpfiltercake):
        """Sets the hthpfiltercake of this MudCheckData.


        :param hthpfiltercake: The hthpfiltercake of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._hthpfiltercake = hthpfiltercake

    @property
    def hthpfiltrate(self):
        """Gets the hthpfiltrate of this MudCheckData.  # noqa: E501


        :return: The hthpfiltrate of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._hthpfiltrate

    @hthpfiltrate.setter
    def hthpfiltrate(self, hthpfiltrate):
        """Sets the hthpfiltrate of this MudCheckData.


        :param hthpfiltrate: The hthpfiltrate of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._hthpfiltrate = hthpfiltrate

    @property
    def hthppres(self):
        """Gets the hthppres of this MudCheckData.  # noqa: E501


        :return: The hthppres of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._hthppres

    @hthppres.setter
    def hthppres(self, hthppres):
        """Sets the hthppres of this MudCheckData.


        :param hthppres: The hthppres of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._hthppres = hthppres

    @property
    def hthptemp(self):
        """Gets the hthptemp of this MudCheckData.  # noqa: E501


        :return: The hthptemp of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._hthptemp

    @hthptemp.setter
    def hthptemp(self, hthptemp):
        """Sets the hthptemp of this MudCheckData.


        :param hthptemp: The hthptemp of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._hthptemp = hthptemp

    @property
    def idrec(self):
        """Gets the idrec of this MudCheckData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this MudCheckData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this MudCheckData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this MudCheckData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this MudCheckData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this MudCheckData.  # noqa: E501


        :return: The idrecwellbore of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this MudCheckData.


        :param idrecwellbore: The idrecwellbore of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this MudCheckData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this MudCheckData.

        id of well  # noqa: E501

        :param idwell: The idwell of this MudCheckData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def iron(self):
        """Gets the iron of this MudCheckData.  # noqa: E501


        :return: The iron of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._iron

    @iron.setter
    def iron(self, iron):
        """Sets the iron of this MudCheckData.


        :param iron: The iron of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._iron = iron

    @property
    def kcl(self):
        """Gets the kcl of this MudCheckData.  # noqa: E501


        :return: The kcl of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._kcl

    @kcl.setter
    def kcl(self, kcl):
        """Sets the kcl of this MudCheckData.


        :param kcl: The kcl of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._kcl = kcl

    @property
    def koverride(self):
        """Gets the koverride of this MudCheckData.  # noqa: E501


        :return: The koverride of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._koverride

    @koverride.setter
    def koverride(self, koverride):
        """Sets the koverride of this MudCheckData.


        :param koverride: The koverride of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._koverride = koverride

    @property
    def lcm(self):
        """Gets the lcm of this MudCheckData.  # noqa: E501


        :return: The lcm of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._lcm

    @lcm.setter
    def lcm(self, lcm):
        """Sets the lcm of this MudCheckData.


        :param lcm: The lcm of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._lcm = lcm

    @property
    def lime(self):
        """Gets the lime of this MudCheckData.  # noqa: E501


        :return: The lime of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._lime

    @lime.setter
    def lime(self, lime):
        """Sets the lime of this MudCheckData.


        :param lime: The lime of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._lime = lime

    @property
    def magnesium(self):
        """Gets the magnesium of this MudCheckData.  # noqa: E501


        :return: The magnesium of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._magnesium

    @magnesium.setter
    def magnesium(self, magnesium):
        """Sets the magnesium of this MudCheckData.


        :param magnesium: The magnesium of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._magnesium = magnesium

    @property
    def mbt(self):
        """Gets the mbt of this MudCheckData.  # noqa: E501


        :return: The mbt of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._mbt

    @mbt.setter
    def mbt(self, mbt):
        """Sets the mbt of this MudCheckData.


        :param mbt: The mbt of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._mbt = mbt

    @property
    def mf(self):
        """Gets the mf of this MudCheckData.  # noqa: E501


        :return: The mf of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._mf

    @mf.setter
    def mf(self, mf):
        """Sets the mf of this MudCheckData.


        :param mf: The mf of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._mf = mf

    @property
    def mudtyp1(self):
        """Gets the mudtyp1 of this MudCheckData.  # noqa: E501


        :return: The mudtyp1 of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._mudtyp1

    @mudtyp1.setter
    def mudtyp1(self, mudtyp1):
        """Sets the mudtyp1 of this MudCheckData.


        :param mudtyp1: The mudtyp1 of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._mudtyp1 = mudtyp1

    @property
    def mudtyp2(self):
        """Gets the mudtyp2 of this MudCheckData.  # noqa: E501


        :return: The mudtyp2 of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._mudtyp2

    @mudtyp2.setter
    def mudtyp2(self, mudtyp2):
        """Sets the mudtyp2 of this MudCheckData.


        :param mudtyp2: The mudtyp2 of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._mudtyp2 = mudtyp2

    @property
    def noverride(self):
        """Gets the noverride of this MudCheckData.  # noqa: E501


        :return: The noverride of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._noverride

    @noverride.setter
    def noverride(self, noverride):
        """Sets the noverride of this MudCheckData.


        :param noverride: The noverride of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._noverride = noverride

    @property
    def ntu(self):
        """Gets the ntu of this MudCheckData.  # noqa: E501


        :return: The ntu of this MudCheckData.  # noqa: E501
        :rtype: int
        """
        return self._ntu

    @ntu.setter
    def ntu(self, ntu):
        """Sets the ntu of this MudCheckData.


        :param ntu: The ntu of this MudCheckData.  # noqa: E501
        :type: int
        """

        self._ntu = ntu

    @property
    def ntuout(self):
        """Gets the ntuout of this MudCheckData.  # noqa: E501


        :return: The ntuout of this MudCheckData.  # noqa: E501
        :rtype: int
        """
        return self._ntuout

    @ntuout.setter
    def ntuout(self, ntuout):
        """Sets the ntuout of this MudCheckData.


        :param ntuout: The ntuout of this MudCheckData.  # noqa: E501
        :type: int
        """

        self._ntuout = ntuout

    @property
    def oilgrease(self):
        """Gets the oilgrease of this MudCheckData.  # noqa: E501


        :return: The oilgrease of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._oilgrease

    @oilgrease.setter
    def oilgrease(self, oilgrease):
        """Sets the oilgrease of this MudCheckData.


        :param oilgrease: The oilgrease of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._oilgrease = oilgrease

    @property
    def oiloncuttings(self):
        """Gets the oiloncuttings of this MudCheckData.  # noqa: E501


        :return: The oiloncuttings of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._oiloncuttings

    @oiloncuttings.setter
    def oiloncuttings(self, oiloncuttings):
        """Sets the oiloncuttings of this MudCheckData.


        :param oiloncuttings: The oiloncuttings of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._oiloncuttings = oiloncuttings

    @property
    def oilpercent(self):
        """Gets the oilpercent of this MudCheckData.  # noqa: E501


        :return: The oilpercent of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._oilpercent

    @oilpercent.setter
    def oilpercent(self, oilpercent):
        """Sets the oilpercent of this MudCheckData.


        :param oilpercent: The oilpercent of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._oilpercent = oilpercent

    @property
    def p1(self):
        """Gets the p1 of this MudCheckData.  # noqa: E501


        :return: The p1 of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._p1

    @p1.setter
    def p1(self, p1):
        """Sets the p1 of this MudCheckData.


        :param p1: The p1 of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._p1 = p1

    @property
    def p2(self):
        """Gets the p2 of this MudCheckData.  # noqa: E501


        :return: The p2 of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._p2

    @p2.setter
    def p2(self, p2):
        """Sets the p2 of this MudCheckData.


        :param p2: The p2 of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._p2 = p2

    @property
    def pf(self):
        """Gets the pf of this MudCheckData.  # noqa: E501


        :return: The pf of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._pf

    @pf.setter
    def pf(self, pf):
        """Sets the pf of this MudCheckData.


        :param pf: The pf of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._pf = pf

    @property
    def ph(self):
        """Gets the ph of this MudCheckData.  # noqa: E501


        :return: The ph of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._ph

    @ph.setter
    def ph(self, ph):
        """Sets the ph of this MudCheckData.


        :param ph: The ph of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._ph = ph

    @property
    def phmethod(self):
        """Gets the phmethod of this MudCheckData.  # noqa: E501


        :return: The phmethod of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._phmethod

    @phmethod.setter
    def phmethod(self, phmethod):
        """Sets the phmethod of this MudCheckData.


        :param phmethod: The phmethod of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._phmethod = phmethod

    @property
    def plasticvis(self):
        """Gets the plasticvis of this MudCheckData.  # noqa: E501


        :return: The plasticvis of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._plasticvis

    @plasticvis.setter
    def plasticvis(self, plasticvis):
        """Sets the plasticvis of this MudCheckData.


        :param plasticvis: The plasticvis of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._plasticvis = plasticvis

    @property
    def pm(self):
        """Gets the pm of this MudCheckData.  # noqa: E501


        :return: The pm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._pm

    @pm.setter
    def pm(self, pm):
        """Sets the pm of this MudCheckData.


        :param pm: The pm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._pm = pm

    @property
    def pmfiltrate(self):
        """Gets the pmfiltrate of this MudCheckData.  # noqa: E501


        :return: The pmfiltrate of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._pmfiltrate

    @pmfiltrate.setter
    def pmfiltrate(self, pmfiltrate):
        """Sets the pmfiltrate of this MudCheckData.


        :param pmfiltrate: The pmfiltrate of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._pmfiltrate = pmfiltrate

    @property
    def polymer(self):
        """Gets the polymer of this MudCheckData.  # noqa: E501


        :return: The polymer of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._polymer

    @polymer.setter
    def polymer(self, polymer):
        """Sets the polymer of this MudCheckData.


        :param polymer: The polymer of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._polymer = polymer

    @property
    def polymertyp(self):
        """Gets the polymertyp of this MudCheckData.  # noqa: E501


        :return: The polymertyp of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._polymertyp

    @polymertyp.setter
    def polymertyp(self, polymertyp):
        """Sets the polymertyp of this MudCheckData.


        :param polymertyp: The polymertyp of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._polymertyp = polymertyp

    @property
    def potassium(self):
        """Gets the potassium of this MudCheckData.  # noqa: E501


        :return: The potassium of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._potassium

    @potassium.setter
    def potassium(self, potassium):
        """Sets the potassium of this MudCheckData.


        :param potassium: The potassium of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._potassium = potassium

    @property
    def presvisc(self):
        """Gets the presvisc of this MudCheckData.  # noqa: E501


        :return: The presvisc of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._presvisc

    @presvisc.setter
    def presvisc(self, presvisc):
        """Sets the presvisc of this MudCheckData.


        :param presvisc: The presvisc of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._presvisc = presvisc

    @property
    def salt(self):
        """Gets the salt of this MudCheckData.  # noqa: E501


        :return: The salt of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this MudCheckData.


        :param salt: The salt of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._salt = salt

    @property
    def sands(self):
        """Gets the sands of this MudCheckData.  # noqa: E501


        :return: The sands of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._sands

    @sands.setter
    def sands(self, sands):
        """Sets the sands of this MudCheckData.


        :param sands: The sands of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._sands = sands

    @property
    def solids(self):
        """Gets the solids of this MudCheckData.  # noqa: E501


        :return: The solids of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solids

    @solids.setter
    def solids(self, solids):
        """Sets the solids of this MudCheckData.


        :param solids: The solids of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solids = solids

    @property
    def solidsavggrav(self):
        """Gets the solidsavggrav of this MudCheckData.  # noqa: E501


        :return: The solidsavggrav of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solidsavggrav

    @solidsavggrav.setter
    def solidsavggrav(self, solidsavggrav):
        """Sets the solidsavggrav of this MudCheckData.


        :param solidsavggrav: The solidsavggrav of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solidsavggrav = solidsavggrav

    @property
    def solidscorrected(self):
        """Gets the solidscorrected of this MudCheckData.  # noqa: E501


        :return: The solidscorrected of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solidscorrected

    @solidscorrected.setter
    def solidscorrected(self, solidscorrected):
        """Sets the solidscorrected of this MudCheckData.


        :param solidscorrected: The solidscorrected of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solidscorrected = solidscorrected

    @property
    def solidshighgrav(self):
        """Gets the solidshighgrav of this MudCheckData.  # noqa: E501


        :return: The solidshighgrav of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solidshighgrav

    @solidshighgrav.setter
    def solidshighgrav(self, solidshighgrav):
        """Sets the solidshighgrav of this MudCheckData.


        :param solidshighgrav: The solidshighgrav of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solidshighgrav = solidshighgrav

    @property
    def solidshighgravwt(self):
        """Gets the solidshighgravwt of this MudCheckData.  # noqa: E501


        :return: The solidshighgravwt of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solidshighgravwt

    @solidshighgravwt.setter
    def solidshighgravwt(self, solidshighgravwt):
        """Sets the solidshighgravwt of this MudCheckData.


        :param solidshighgravwt: The solidshighgravwt of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solidshighgravwt = solidshighgravwt

    @property
    def solidslowgrav(self):
        """Gets the solidslowgrav of this MudCheckData.  # noqa: E501


        :return: The solidslowgrav of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solidslowgrav

    @solidslowgrav.setter
    def solidslowgrav(self, solidslowgrav):
        """Sets the solidslowgrav of this MudCheckData.


        :param solidslowgrav: The solidslowgrav of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solidslowgrav = solidslowgrav

    @property
    def solidslowgravwt(self):
        """Gets the solidslowgravwt of this MudCheckData.  # noqa: E501


        :return: The solidslowgravwt of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._solidslowgravwt

    @solidslowgravwt.setter
    def solidslowgravwt(self, solidslowgravwt):
        """Sets the solidslowgravwt of this MudCheckData.


        :param solidslowgravwt: The solidslowgravwt of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._solidslowgravwt = solidslowgravwt

    @property
    def source(self):
        """Gets the source of this MudCheckData.  # noqa: E501


        :return: The source of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MudCheckData.


        :param source: The source of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def staticsheen(self):
        """Gets the staticsheen of this MudCheckData.  # noqa: E501


        :return: The staticsheen of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._staticsheen

    @staticsheen.setter
    def staticsheen(self, staticsheen):
        """Sets the staticsheen of this MudCheckData.


        :param staticsheen: The staticsheen of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._staticsheen = staticsheen

    @property
    def sulfide(self):
        """Gets the sulfide of this MudCheckData.  # noqa: E501


        :return: The sulfide of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._sulfide

    @sulfide.setter
    def sulfide(self, sulfide):
        """Sets the sulfide of this MudCheckData.


        :param sulfide: The sulfide of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._sulfide = sulfide

    @property
    def tempbottomhole(self):
        """Gets the tempbottomhole of this MudCheckData.  # noqa: E501


        :return: The tempbottomhole of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._tempbottomhole

    @tempbottomhole.setter
    def tempbottomhole(self, tempbottomhole):
        """Sets the tempbottomhole of this MudCheckData.


        :param tempbottomhole: The tempbottomhole of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._tempbottomhole = tempbottomhole

    @property
    def tempcrystal(self):
        """Gets the tempcrystal of this MudCheckData.  # noqa: E501


        :return: The tempcrystal of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._tempcrystal

    @tempcrystal.setter
    def tempcrystal(self, tempcrystal):
        """Sets the tempcrystal of this MudCheckData.


        :param tempcrystal: The tempcrystal of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._tempcrystal = tempcrystal

    @property
    def tempflowline(self):
        """Gets the tempflowline of this MudCheckData.  # noqa: E501


        :return: The tempflowline of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._tempflowline

    @tempflowline.setter
    def tempflowline(self, tempflowline):
        """Sets the tempflowline of this MudCheckData.


        :param tempflowline: The tempflowline of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._tempflowline = tempflowline

    @property
    def tempph(self):
        """Gets the tempph of this MudCheckData.  # noqa: E501


        :return: The tempph of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._tempph

    @tempph.setter
    def tempph(self, tempph):
        """Sets the tempph of this MudCheckData.


        :param tempph: The tempph of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._tempph = tempph

    @property
    def tempvisc(self):
        """Gets the tempvisc of this MudCheckData.  # noqa: E501


        :return: The tempvisc of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._tempvisc

    @tempvisc.setter
    def tempvisc(self, tempvisc):
        """Sets the tempvisc of this MudCheckData.


        :param tempvisc: The tempvisc of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._tempvisc = tempvisc

    @property
    def vis100rpm(self):
        """Gets the vis100rpm of this MudCheckData.  # noqa: E501


        :return: The vis100rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis100rpm

    @vis100rpm.setter
    def vis100rpm(self, vis100rpm):
        """Sets the vis100rpm of this MudCheckData.


        :param vis100rpm: The vis100rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis100rpm = vis100rpm

    @property
    def vis200rpm(self):
        """Gets the vis200rpm of this MudCheckData.  # noqa: E501


        :return: The vis200rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis200rpm

    @vis200rpm.setter
    def vis200rpm(self, vis200rpm):
        """Sets the vis200rpm of this MudCheckData.


        :param vis200rpm: The vis200rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis200rpm = vis200rpm

    @property
    def vis300rpm(self):
        """Gets the vis300rpm of this MudCheckData.  # noqa: E501


        :return: The vis300rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis300rpm

    @vis300rpm.setter
    def vis300rpm(self, vis300rpm):
        """Sets the vis300rpm of this MudCheckData.


        :param vis300rpm: The vis300rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis300rpm = vis300rpm

    @property
    def vis30rpm(self):
        """Gets the vis30rpm of this MudCheckData.  # noqa: E501


        :return: The vis30rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis30rpm

    @vis30rpm.setter
    def vis30rpm(self, vis30rpm):
        """Sets the vis30rpm of this MudCheckData.


        :param vis30rpm: The vis30rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis30rpm = vis30rpm

    @property
    def vis3rpm(self):
        """Gets the vis3rpm of this MudCheckData.  # noqa: E501


        :return: The vis3rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis3rpm

    @vis3rpm.setter
    def vis3rpm(self, vis3rpm):
        """Sets the vis3rpm of this MudCheckData.


        :param vis3rpm: The vis3rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis3rpm = vis3rpm

    @property
    def vis600rpm(self):
        """Gets the vis600rpm of this MudCheckData.  # noqa: E501


        :return: The vis600rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis600rpm

    @vis600rpm.setter
    def vis600rpm(self, vis600rpm):
        """Sets the vis600rpm of this MudCheckData.


        :param vis600rpm: The vis600rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis600rpm = vis600rpm

    @property
    def vis60rpm(self):
        """Gets the vis60rpm of this MudCheckData.  # noqa: E501


        :return: The vis60rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis60rpm

    @vis60rpm.setter
    def vis60rpm(self, vis60rpm):
        """Sets the vis60rpm of this MudCheckData.


        :param vis60rpm: The vis60rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis60rpm = vis60rpm

    @property
    def vis6rpm(self):
        """Gets the vis6rpm of this MudCheckData.  # noqa: E501


        :return: The vis6rpm of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._vis6rpm

    @vis6rpm.setter
    def vis6rpm(self, vis6rpm):
        """Sets the vis6rpm of this MudCheckData.


        :param vis6rpm: The vis6rpm of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._vis6rpm = vis6rpm

    @property
    def waterpercent(self):
        """Gets the waterpercent of this MudCheckData.  # noqa: E501


        :return: The waterpercent of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._waterpercent

    @waterpercent.setter
    def waterpercent(self, waterpercent):
        """Sets the waterpercent of this MudCheckData.


        :param waterpercent: The waterpercent of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._waterpercent = waterpercent

    @property
    def weightmetalrecov(self):
        """Gets the weightmetalrecov of this MudCheckData.  # noqa: E501


        :return: The weightmetalrecov of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._weightmetalrecov

    @weightmetalrecov.setter
    def weightmetalrecov(self, weightmetalrecov):
        """Sets the weightmetalrecov of this MudCheckData.


        :param weightmetalrecov: The weightmetalrecov of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._weightmetalrecov = weightmetalrecov

    @property
    def yieldpt(self):
        """Gets the yieldpt of this MudCheckData.  # noqa: E501


        :return: The yieldpt of this MudCheckData.  # noqa: E501
        :rtype: float
        """
        return self._yieldpt

    @yieldpt.setter
    def yieldpt(self, yieldpt):
        """Sets the yieldpt of this MudCheckData.


        :param yieldpt: The yieldpt of this MudCheckData.  # noqa: E501
        :type: float
        """

        self._yieldpt = yieldpt

    @property
    def systag(self):
        """Gets the systag of this MudCheckData.  # noqa: E501


        :return: The systag of this MudCheckData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this MudCheckData.


        :param systag: The systag of this MudCheckData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MudCheckData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MudCheckData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
