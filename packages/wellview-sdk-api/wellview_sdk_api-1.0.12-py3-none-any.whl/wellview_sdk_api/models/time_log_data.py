# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TimeLogData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code1': 'str',
        'code2': 'str',
        'code3': 'str',
        'code4': 'str',
        'com': 'str',
        'depthend': 'float',
        'depthstart': 'float',
        'duration': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idrecwsstring': 'str',
        'idwell': 'str',
        'inactive': 'bool',
        'opscategory': 'str',
        'refderrick': 'str',
        'unschedtyp': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'systag': 'str',
        'sysseq': 'int'
    }

    attribute_map = {
        'code1': 'code1',
        'code2': 'code2',
        'code3': 'code3',
        'code4': 'code4',
        'com': 'com',
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'duration': 'duration',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idrecwsstring': 'idrecwsstring',
        'idwell': 'idwell',
        'inactive': 'inactive',
        'opscategory': 'opscategory',
        'refderrick': 'refderrick',
        'unschedtyp': 'unschedtyp',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'systag': 'systag',
        'sysseq': 'sysseq'
    }

    def __init__(self, code1=None, code2=None, code3=None, code4=None, com=None, depthend=None, depthstart=None, duration=None, idrec=None, idrecparent=None, idrecwellbore=None, idrecwsstring=None, idwell=None, inactive=None, opscategory=None, refderrick=None, unschedtyp=None, usertxt1=None, usertxt2=None, systag=None, sysseq=None):  # noqa: E501
        """TimeLogData - a model defined in Swagger"""  # noqa: E501
        self._code1 = None
        self._code2 = None
        self._code3 = None
        self._code4 = None
        self._com = None
        self._depthend = None
        self._depthstart = None
        self._duration = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idrecwsstring = None
        self._idwell = None
        self._inactive = None
        self._opscategory = None
        self._refderrick = None
        self._unschedtyp = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._systag = None
        self._sysseq = None
        self.discriminator = None
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if code3 is not None:
            self.code3 = code3
        if code4 is not None:
            self.code4 = code4
        if com is not None:
            self.com = com
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if duration is not None:
            self.duration = duration
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idrecwsstring is not None:
            self.idrecwsstring = idrecwsstring
        self.idwell = idwell
        if inactive is not None:
            self.inactive = inactive
        if opscategory is not None:
            self.opscategory = opscategory
        if refderrick is not None:
            self.refderrick = refderrick
        if unschedtyp is not None:
            self.unschedtyp = unschedtyp
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if systag is not None:
            self.systag = systag
        if sysseq is not None:
            self.sysseq = sysseq

    @property
    def code1(self):
        """Gets the code1 of this TimeLogData.  # noqa: E501


        :return: The code1 of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this TimeLogData.


        :param code1: The code1 of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this TimeLogData.  # noqa: E501


        :return: The code2 of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this TimeLogData.


        :param code2: The code2 of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this TimeLogData.  # noqa: E501


        :return: The code3 of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this TimeLogData.


        :param code3: The code3 of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._code3 = code3

    @property
    def code4(self):
        """Gets the code4 of this TimeLogData.  # noqa: E501


        :return: The code4 of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._code4

    @code4.setter
    def code4(self, code4):
        """Sets the code4 of this TimeLogData.


        :param code4: The code4 of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._code4 = code4

    @property
    def com(self):
        """Gets the com of this TimeLogData.  # noqa: E501


        :return: The com of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this TimeLogData.


        :param com: The com of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthend(self):
        """Gets the depthend of this TimeLogData.  # noqa: E501


        :return: The depthend of this TimeLogData.  # noqa: E501
        :rtype: float
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this TimeLogData.


        :param depthend: The depthend of this TimeLogData.  # noqa: E501
        :type: float
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this TimeLogData.  # noqa: E501


        :return: The depthstart of this TimeLogData.  # noqa: E501
        :rtype: float
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this TimeLogData.


        :param depthstart: The depthstart of this TimeLogData.  # noqa: E501
        :type: float
        """

        self._depthstart = depthstart

    @property
    def duration(self):
        """Gets the duration of this TimeLogData.  # noqa: E501


        :return: The duration of this TimeLogData.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimeLogData.


        :param duration: The duration of this TimeLogData.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def idrec(self):
        """Gets the idrec of this TimeLogData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TimeLogData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TimeLogData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TimeLogData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this TimeLogData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this TimeLogData.  # noqa: E501


        :return: The idrecwellbore of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this TimeLogData.


        :param idrecwellbore: The idrecwellbore of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idrecwsstring(self):
        """Gets the idrecwsstring of this TimeLogData.  # noqa: E501


        :return: The idrecwsstring of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwsstring

    @idrecwsstring.setter
    def idrecwsstring(self, idrecwsstring):
        """Sets the idrecwsstring of this TimeLogData.


        :param idrecwsstring: The idrecwsstring of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._idrecwsstring = idrecwsstring

    @property
    def idwell(self):
        """Gets the idwell of this TimeLogData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TimeLogData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TimeLogData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def inactive(self):
        """Gets the inactive of this TimeLogData.  # noqa: E501


        :return: The inactive of this TimeLogData.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this TimeLogData.


        :param inactive: The inactive of this TimeLogData.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def opscategory(self):
        """Gets the opscategory of this TimeLogData.  # noqa: E501


        :return: The opscategory of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._opscategory

    @opscategory.setter
    def opscategory(self, opscategory):
        """Sets the opscategory of this TimeLogData.


        :param opscategory: The opscategory of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._opscategory = opscategory

    @property
    def refderrick(self):
        """Gets the refderrick of this TimeLogData.  # noqa: E501


        :return: The refderrick of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._refderrick

    @refderrick.setter
    def refderrick(self, refderrick):
        """Sets the refderrick of this TimeLogData.


        :param refderrick: The refderrick of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._refderrick = refderrick

    @property
    def unschedtyp(self):
        """Gets the unschedtyp of this TimeLogData.  # noqa: E501


        :return: The unschedtyp of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._unschedtyp

    @unschedtyp.setter
    def unschedtyp(self, unschedtyp):
        """Sets the unschedtyp of this TimeLogData.


        :param unschedtyp: The unschedtyp of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._unschedtyp = unschedtyp

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this TimeLogData.  # noqa: E501


        :return: The usertxt1 of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this TimeLogData.


        :param usertxt1: The usertxt1 of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this TimeLogData.  # noqa: E501


        :return: The usertxt2 of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this TimeLogData.


        :param usertxt2: The usertxt2 of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def systag(self):
        """Gets the systag of this TimeLogData.  # noqa: E501


        :return: The systag of this TimeLogData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TimeLogData.


        :param systag: The systag of this TimeLogData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def sysseq(self):
        """Gets the sysseq of this TimeLogData.  # noqa: E501


        :return: The sysseq of this TimeLogData.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this TimeLogData.


        :param sysseq: The sysseq of this TimeLogData.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeLogData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeLogData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
