# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DrillBitData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bitconsid': 'str',
        'bladeno': 'int',
        'connsz': 'float',
        'connthrd': 'str',
        'cost': 'float',
        'depthdrilledstart': 'float',
        'dttmmanufacture': 'datetime',
        'iadccode1': 'str',
        'iadccode2': 'str',
        'iadccode3': 'str',
        'iadccode4': 'str',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'length': 'float',
        'lengthgauge': 'float',
        'make': 'str',
        'model': 'str',
        'note': 'str',
        'owner': 'str',
        'proposed': 'bool',
        'refid': 'str',
        'sn': 'str',
        'szcutter': 'float',
        'szoddrill': 'float',
        'szodpass': 'float',
        'tmstart': 'float',
        'typ1': 'str',
        'typ2': 'str',
        'usedclass': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'bitconsid': 'bitconsid',
        'bladeno': 'bladeno',
        'connsz': 'connsz',
        'connthrd': 'connthrd',
        'cost': 'cost',
        'depthdrilledstart': 'depthdrilledstart',
        'dttmmanufacture': 'dttmmanufacture',
        'iadccode1': 'iadccode1',
        'iadccode2': 'iadccode2',
        'iadccode3': 'iadccode3',
        'iadccode4': 'iadccode4',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'length': 'length',
        'lengthgauge': 'lengthgauge',
        'make': 'make',
        'model': 'model',
        'note': 'note',
        'owner': 'owner',
        'proposed': 'proposed',
        'refid': 'refid',
        'sn': 'sn',
        'szcutter': 'szcutter',
        'szoddrill': 'szoddrill',
        'szodpass': 'szodpass',
        'tmstart': 'tmstart',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usedclass': 'usedclass',
        'systag': 'systag'
    }

    def __init__(self, bitconsid=None, bladeno=None, connsz=None, connthrd=None, cost=None, depthdrilledstart=None, dttmmanufacture=None, iadccode1=None, iadccode2=None, iadccode3=None, iadccode4=None, iconname=None, idrec=None, idrecparent=None, idwell=None, length=None, lengthgauge=None, make=None, model=None, note=None, owner=None, proposed=None, refid=None, sn=None, szcutter=None, szoddrill=None, szodpass=None, tmstart=None, typ1=None, typ2=None, usedclass=None, systag=None):  # noqa: E501
        """DrillBitData - a model defined in Swagger"""  # noqa: E501
        self._bitconsid = None
        self._bladeno = None
        self._connsz = None
        self._connthrd = None
        self._cost = None
        self._depthdrilledstart = None
        self._dttmmanufacture = None
        self._iadccode1 = None
        self._iadccode2 = None
        self._iadccode3 = None
        self._iadccode4 = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._length = None
        self._lengthgauge = None
        self._make = None
        self._model = None
        self._note = None
        self._owner = None
        self._proposed = None
        self._refid = None
        self._sn = None
        self._szcutter = None
        self._szoddrill = None
        self._szodpass = None
        self._tmstart = None
        self._typ1 = None
        self._typ2 = None
        self._usedclass = None
        self._systag = None
        self.discriminator = None
        if bitconsid is not None:
            self.bitconsid = bitconsid
        if bladeno is not None:
            self.bladeno = bladeno
        if connsz is not None:
            self.connsz = connsz
        if connthrd is not None:
            self.connthrd = connthrd
        if cost is not None:
            self.cost = cost
        if depthdrilledstart is not None:
            self.depthdrilledstart = depthdrilledstart
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if iadccode1 is not None:
            self.iadccode1 = iadccode1
        if iadccode2 is not None:
            self.iadccode2 = iadccode2
        if iadccode3 is not None:
            self.iadccode3 = iadccode3
        if iadccode4 is not None:
            self.iadccode4 = iadccode4
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if length is not None:
            self.length = length
        if lengthgauge is not None:
            self.lengthgauge = lengthgauge
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if note is not None:
            self.note = note
        if owner is not None:
            self.owner = owner
        if proposed is not None:
            self.proposed = proposed
        if refid is not None:
            self.refid = refid
        if sn is not None:
            self.sn = sn
        if szcutter is not None:
            self.szcutter = szcutter
        if szoddrill is not None:
            self.szoddrill = szoddrill
        if szodpass is not None:
            self.szodpass = szodpass
        if tmstart is not None:
            self.tmstart = tmstart
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usedclass is not None:
            self.usedclass = usedclass
        if systag is not None:
            self.systag = systag

    @property
    def bitconsid(self):
        """Gets the bitconsid of this DrillBitData.  # noqa: E501


        :return: The bitconsid of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._bitconsid

    @bitconsid.setter
    def bitconsid(self, bitconsid):
        """Sets the bitconsid of this DrillBitData.


        :param bitconsid: The bitconsid of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._bitconsid = bitconsid

    @property
    def bladeno(self):
        """Gets the bladeno of this DrillBitData.  # noqa: E501


        :return: The bladeno of this DrillBitData.  # noqa: E501
        :rtype: int
        """
        return self._bladeno

    @bladeno.setter
    def bladeno(self, bladeno):
        """Sets the bladeno of this DrillBitData.


        :param bladeno: The bladeno of this DrillBitData.  # noqa: E501
        :type: int
        """

        self._bladeno = bladeno

    @property
    def connsz(self):
        """Gets the connsz of this DrillBitData.  # noqa: E501


        :return: The connsz of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._connsz

    @connsz.setter
    def connsz(self, connsz):
        """Sets the connsz of this DrillBitData.


        :param connsz: The connsz of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._connsz = connsz

    @property
    def connthrd(self):
        """Gets the connthrd of this DrillBitData.  # noqa: E501


        :return: The connthrd of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._connthrd

    @connthrd.setter
    def connthrd(self, connthrd):
        """Sets the connthrd of this DrillBitData.


        :param connthrd: The connthrd of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._connthrd = connthrd

    @property
    def cost(self):
        """Gets the cost of this DrillBitData.  # noqa: E501


        :return: The cost of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this DrillBitData.


        :param cost: The cost of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def depthdrilledstart(self):
        """Gets the depthdrilledstart of this DrillBitData.  # noqa: E501


        :return: The depthdrilledstart of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._depthdrilledstart

    @depthdrilledstart.setter
    def depthdrilledstart(self, depthdrilledstart):
        """Sets the depthdrilledstart of this DrillBitData.


        :param depthdrilledstart: The depthdrilledstart of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._depthdrilledstart = depthdrilledstart

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this DrillBitData.  # noqa: E501


        :return: The dttmmanufacture of this DrillBitData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this DrillBitData.


        :param dttmmanufacture: The dttmmanufacture of this DrillBitData.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def iadccode1(self):
        """Gets the iadccode1 of this DrillBitData.  # noqa: E501


        :return: The iadccode1 of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._iadccode1

    @iadccode1.setter
    def iadccode1(self, iadccode1):
        """Sets the iadccode1 of this DrillBitData.


        :param iadccode1: The iadccode1 of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._iadccode1 = iadccode1

    @property
    def iadccode2(self):
        """Gets the iadccode2 of this DrillBitData.  # noqa: E501


        :return: The iadccode2 of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._iadccode2

    @iadccode2.setter
    def iadccode2(self, iadccode2):
        """Sets the iadccode2 of this DrillBitData.


        :param iadccode2: The iadccode2 of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._iadccode2 = iadccode2

    @property
    def iadccode3(self):
        """Gets the iadccode3 of this DrillBitData.  # noqa: E501


        :return: The iadccode3 of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._iadccode3

    @iadccode3.setter
    def iadccode3(self, iadccode3):
        """Sets the iadccode3 of this DrillBitData.


        :param iadccode3: The iadccode3 of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._iadccode3 = iadccode3

    @property
    def iadccode4(self):
        """Gets the iadccode4 of this DrillBitData.  # noqa: E501


        :return: The iadccode4 of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._iadccode4

    @iadccode4.setter
    def iadccode4(self, iadccode4):
        """Sets the iadccode4 of this DrillBitData.


        :param iadccode4: The iadccode4 of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._iadccode4 = iadccode4

    @property
    def iconname(self):
        """Gets the iconname of this DrillBitData.  # noqa: E501


        :return: The iconname of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this DrillBitData.


        :param iconname: The iconname of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this DrillBitData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DrillBitData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this DrillBitData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this DrillBitData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this DrillBitData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this DrillBitData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DrillBitData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DrillBitData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def length(self):
        """Gets the length of this DrillBitData.  # noqa: E501


        :return: The length of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this DrillBitData.


        :param length: The length of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def lengthgauge(self):
        """Gets the lengthgauge of this DrillBitData.  # noqa: E501


        :return: The lengthgauge of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._lengthgauge

    @lengthgauge.setter
    def lengthgauge(self, lengthgauge):
        """Sets the lengthgauge of this DrillBitData.


        :param lengthgauge: The lengthgauge of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._lengthgauge = lengthgauge

    @property
    def make(self):
        """Gets the make of this DrillBitData.  # noqa: E501


        :return: The make of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this DrillBitData.


        :param make: The make of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this DrillBitData.  # noqa: E501


        :return: The model of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DrillBitData.


        :param model: The model of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def note(self):
        """Gets the note of this DrillBitData.  # noqa: E501


        :return: The note of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this DrillBitData.


        :param note: The note of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def owner(self):
        """Gets the owner of this DrillBitData.  # noqa: E501


        :return: The owner of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DrillBitData.


        :param owner: The owner of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def proposed(self):
        """Gets the proposed of this DrillBitData.  # noqa: E501


        :return: The proposed of this DrillBitData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this DrillBitData.


        :param proposed: The proposed of this DrillBitData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def refid(self):
        """Gets the refid of this DrillBitData.  # noqa: E501


        :return: The refid of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this DrillBitData.


        :param refid: The refid of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sn(self):
        """Gets the sn of this DrillBitData.  # noqa: E501


        :return: The sn of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this DrillBitData.


        :param sn: The sn of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def szcutter(self):
        """Gets the szcutter of this DrillBitData.  # noqa: E501


        :return: The szcutter of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._szcutter

    @szcutter.setter
    def szcutter(self, szcutter):
        """Sets the szcutter of this DrillBitData.


        :param szcutter: The szcutter of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._szcutter = szcutter

    @property
    def szoddrill(self):
        """Gets the szoddrill of this DrillBitData.  # noqa: E501


        :return: The szoddrill of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._szoddrill

    @szoddrill.setter
    def szoddrill(self, szoddrill):
        """Sets the szoddrill of this DrillBitData.


        :param szoddrill: The szoddrill of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._szoddrill = szoddrill

    @property
    def szodpass(self):
        """Gets the szodpass of this DrillBitData.  # noqa: E501


        :return: The szodpass of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._szodpass

    @szodpass.setter
    def szodpass(self, szodpass):
        """Sets the szodpass of this DrillBitData.


        :param szodpass: The szodpass of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._szodpass = szodpass

    @property
    def tmstart(self):
        """Gets the tmstart of this DrillBitData.  # noqa: E501


        :return: The tmstart of this DrillBitData.  # noqa: E501
        :rtype: float
        """
        return self._tmstart

    @tmstart.setter
    def tmstart(self, tmstart):
        """Sets the tmstart of this DrillBitData.


        :param tmstart: The tmstart of this DrillBitData.  # noqa: E501
        :type: float
        """

        self._tmstart = tmstart

    @property
    def typ1(self):
        """Gets the typ1 of this DrillBitData.  # noqa: E501


        :return: The typ1 of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this DrillBitData.


        :param typ1: The typ1 of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this DrillBitData.  # noqa: E501


        :return: The typ2 of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this DrillBitData.


        :param typ2: The typ2 of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usedclass(self):
        """Gets the usedclass of this DrillBitData.  # noqa: E501


        :return: The usedclass of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._usedclass

    @usedclass.setter
    def usedclass(self, usedclass):
        """Sets the usedclass of this DrillBitData.


        :param usedclass: The usedclass of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._usedclass = usedclass

    @property
    def systag(self):
        """Gets the systag of this DrillBitData.  # noqa: E501


        :return: The systag of this DrillBitData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DrillBitData.


        :param systag: The systag of this DrillBitData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DrillBitData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrillBitData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
