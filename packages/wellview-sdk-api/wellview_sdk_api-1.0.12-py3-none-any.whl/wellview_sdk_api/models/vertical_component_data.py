# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VerticalComponentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'connbtmsz': 'float',
        'connbtmtyp': 'str',
        'conntopsz': 'float',
        'conntoptyp': 'str',
        'cost': 'float',
        'costunitlabel': 'str',
        'des': 'str',
        'dttmmanufacture': 'datetime',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecstring': 'str',
        'idwell': 'str',
        'length': 'float',
        'make': 'str',
        'maxpres': 'float',
        'minbore': 'float',
        'model': 'str',
        'packofftype': 'str',
        'productspeclevel': 'str',
        'refid': 'str',
        'sect': 'str',
        'service': 'str',
        'sn': 'str',
        'szidnom': 'float',
        'szodnom': 'float',
        'typ1': 'str',
        'typ2': 'str',
        'usertxt': 'str',
        'workpres': 'float',
        'workpresbtm': 'float',
        'workprestop': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'connbtmsz': 'connbtmsz',
        'connbtmtyp': 'connbtmtyp',
        'conntopsz': 'conntopsz',
        'conntoptyp': 'conntoptyp',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'des': 'des',
        'dttmmanufacture': 'dttmmanufacture',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecstring': 'idrecstring',
        'idwell': 'idwell',
        'length': 'length',
        'make': 'make',
        'maxpres': 'maxpres',
        'minbore': 'minbore',
        'model': 'model',
        'packofftype': 'packofftype',
        'productspeclevel': 'productspeclevel',
        'refid': 'refid',
        'sect': 'sect',
        'service': 'service',
        'sn': 'sn',
        'szidnom': 'szidnom',
        'szodnom': 'szodnom',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usertxt': 'usertxt',
        'workpres': 'workpres',
        'workpresbtm': 'workpresbtm',
        'workprestop': 'workprestop',
        'systag': 'systag'
    }

    def __init__(self, com=None, connbtmsz=None, connbtmtyp=None, conntopsz=None, conntoptyp=None, cost=None, costunitlabel=None, des=None, dttmmanufacture=None, iconname=None, idrec=None, idrecparent=None, idrecstring=None, idwell=None, length=None, make=None, maxpres=None, minbore=None, model=None, packofftype=None, productspeclevel=None, refid=None, sect=None, service=None, sn=None, szidnom=None, szodnom=None, typ1=None, typ2=None, usertxt=None, workpres=None, workpresbtm=None, workprestop=None, systag=None):  # noqa: E501
        """VerticalComponentData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._connbtmsz = None
        self._connbtmtyp = None
        self._conntopsz = None
        self._conntoptyp = None
        self._cost = None
        self._costunitlabel = None
        self._des = None
        self._dttmmanufacture = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idrecstring = None
        self._idwell = None
        self._length = None
        self._make = None
        self._maxpres = None
        self._minbore = None
        self._model = None
        self._packofftype = None
        self._productspeclevel = None
        self._refid = None
        self._sect = None
        self._service = None
        self._sn = None
        self._szidnom = None
        self._szodnom = None
        self._typ1 = None
        self._typ2 = None
        self._usertxt = None
        self._workpres = None
        self._workpresbtm = None
        self._workprestop = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if connbtmsz is not None:
            self.connbtmsz = connbtmsz
        if connbtmtyp is not None:
            self.connbtmtyp = connbtmtyp
        if conntopsz is not None:
            self.conntopsz = conntopsz
        if conntoptyp is not None:
            self.conntoptyp = conntoptyp
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if des is not None:
            self.des = des
        if dttmmanufacture is not None:
            self.dttmmanufacture = dttmmanufacture
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecstring is not None:
            self.idrecstring = idrecstring
        self.idwell = idwell
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if maxpres is not None:
            self.maxpres = maxpres
        if minbore is not None:
            self.minbore = minbore
        if model is not None:
            self.model = model
        if packofftype is not None:
            self.packofftype = packofftype
        if productspeclevel is not None:
            self.productspeclevel = productspeclevel
        if refid is not None:
            self.refid = refid
        if sect is not None:
            self.sect = sect
        if service is not None:
            self.service = service
        if sn is not None:
            self.sn = sn
        if szidnom is not None:
            self.szidnom = szidnom
        if szodnom is not None:
            self.szodnom = szodnom
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usertxt is not None:
            self.usertxt = usertxt
        if workpres is not None:
            self.workpres = workpres
        if workpresbtm is not None:
            self.workpresbtm = workpresbtm
        if workprestop is not None:
            self.workprestop = workprestop
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this VerticalComponentData.  # noqa: E501


        :return: The com of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this VerticalComponentData.


        :param com: The com of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def connbtmsz(self):
        """Gets the connbtmsz of this VerticalComponentData.  # noqa: E501


        :return: The connbtmsz of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._connbtmsz

    @connbtmsz.setter
    def connbtmsz(self, connbtmsz):
        """Sets the connbtmsz of this VerticalComponentData.


        :param connbtmsz: The connbtmsz of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._connbtmsz = connbtmsz

    @property
    def connbtmtyp(self):
        """Gets the connbtmtyp of this VerticalComponentData.  # noqa: E501


        :return: The connbtmtyp of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._connbtmtyp

    @connbtmtyp.setter
    def connbtmtyp(self, connbtmtyp):
        """Sets the connbtmtyp of this VerticalComponentData.


        :param connbtmtyp: The connbtmtyp of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._connbtmtyp = connbtmtyp

    @property
    def conntopsz(self):
        """Gets the conntopsz of this VerticalComponentData.  # noqa: E501


        :return: The conntopsz of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._conntopsz

    @conntopsz.setter
    def conntopsz(self, conntopsz):
        """Sets the conntopsz of this VerticalComponentData.


        :param conntopsz: The conntopsz of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._conntopsz = conntopsz

    @property
    def conntoptyp(self):
        """Gets the conntoptyp of this VerticalComponentData.  # noqa: E501


        :return: The conntoptyp of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._conntoptyp

    @conntoptyp.setter
    def conntoptyp(self, conntoptyp):
        """Sets the conntoptyp of this VerticalComponentData.


        :param conntoptyp: The conntoptyp of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._conntoptyp = conntoptyp

    @property
    def cost(self):
        """Gets the cost of this VerticalComponentData.  # noqa: E501


        :return: The cost of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this VerticalComponentData.


        :param cost: The cost of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this VerticalComponentData.  # noqa: E501


        :return: The costunitlabel of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this VerticalComponentData.


        :param costunitlabel: The costunitlabel of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def des(self):
        """Gets the des of this VerticalComponentData.  # noqa: E501


        :return: The des of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this VerticalComponentData.


        :param des: The des of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmmanufacture(self):
        """Gets the dttmmanufacture of this VerticalComponentData.  # noqa: E501


        :return: The dttmmanufacture of this VerticalComponentData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmmanufacture

    @dttmmanufacture.setter
    def dttmmanufacture(self, dttmmanufacture):
        """Sets the dttmmanufacture of this VerticalComponentData.


        :param dttmmanufacture: The dttmmanufacture of this VerticalComponentData.  # noqa: E501
        :type: datetime
        """

        self._dttmmanufacture = dttmmanufacture

    @property
    def iconname(self):
        """Gets the iconname of this VerticalComponentData.  # noqa: E501


        :return: The iconname of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this VerticalComponentData.


        :param iconname: The iconname of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this VerticalComponentData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this VerticalComponentData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this VerticalComponentData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this VerticalComponentData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this VerticalComponentData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecstring(self):
        """Gets the idrecstring of this VerticalComponentData.  # noqa: E501


        :return: The idrecstring of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this VerticalComponentData.


        :param idrecstring: The idrecstring of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idwell(self):
        """Gets the idwell of this VerticalComponentData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this VerticalComponentData.

        id of well  # noqa: E501

        :param idwell: The idwell of this VerticalComponentData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def length(self):
        """Gets the length of this VerticalComponentData.  # noqa: E501


        :return: The length of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this VerticalComponentData.


        :param length: The length of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this VerticalComponentData.  # noqa: E501


        :return: The make of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this VerticalComponentData.


        :param make: The make of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def maxpres(self):
        """Gets the maxpres of this VerticalComponentData.  # noqa: E501


        :return: The maxpres of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._maxpres

    @maxpres.setter
    def maxpres(self, maxpres):
        """Sets the maxpres of this VerticalComponentData.


        :param maxpres: The maxpres of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._maxpres = maxpres

    @property
    def minbore(self):
        """Gets the minbore of this VerticalComponentData.  # noqa: E501


        :return: The minbore of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._minbore

    @minbore.setter
    def minbore(self, minbore):
        """Sets the minbore of this VerticalComponentData.


        :param minbore: The minbore of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._minbore = minbore

    @property
    def model(self):
        """Gets the model of this VerticalComponentData.  # noqa: E501


        :return: The model of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VerticalComponentData.


        :param model: The model of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def packofftype(self):
        """Gets the packofftype of this VerticalComponentData.  # noqa: E501


        :return: The packofftype of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._packofftype

    @packofftype.setter
    def packofftype(self, packofftype):
        """Sets the packofftype of this VerticalComponentData.


        :param packofftype: The packofftype of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._packofftype = packofftype

    @property
    def productspeclevel(self):
        """Gets the productspeclevel of this VerticalComponentData.  # noqa: E501


        :return: The productspeclevel of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._productspeclevel

    @productspeclevel.setter
    def productspeclevel(self, productspeclevel):
        """Sets the productspeclevel of this VerticalComponentData.


        :param productspeclevel: The productspeclevel of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._productspeclevel = productspeclevel

    @property
    def refid(self):
        """Gets the refid of this VerticalComponentData.  # noqa: E501


        :return: The refid of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this VerticalComponentData.


        :param refid: The refid of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sect(self):
        """Gets the sect of this VerticalComponentData.  # noqa: E501


        :return: The sect of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._sect

    @sect.setter
    def sect(self, sect):
        """Sets the sect of this VerticalComponentData.


        :param sect: The sect of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._sect = sect

    @property
    def service(self):
        """Gets the service of this VerticalComponentData.  # noqa: E501


        :return: The service of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this VerticalComponentData.


        :param service: The service of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sn(self):
        """Gets the sn of this VerticalComponentData.  # noqa: E501


        :return: The sn of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this VerticalComponentData.


        :param sn: The sn of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def szidnom(self):
        """Gets the szidnom of this VerticalComponentData.  # noqa: E501


        :return: The szidnom of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this VerticalComponentData.


        :param szidnom: The szidnom of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._szidnom = szidnom

    @property
    def szodnom(self):
        """Gets the szodnom of this VerticalComponentData.  # noqa: E501


        :return: The szodnom of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this VerticalComponentData.


        :param szodnom: The szodnom of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._szodnom = szodnom

    @property
    def typ1(self):
        """Gets the typ1 of this VerticalComponentData.  # noqa: E501


        :return: The typ1 of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this VerticalComponentData.


        :param typ1: The typ1 of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this VerticalComponentData.  # noqa: E501


        :return: The typ2 of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this VerticalComponentData.


        :param typ2: The typ2 of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usertxt(self):
        """Gets the usertxt of this VerticalComponentData.  # noqa: E501


        :return: The usertxt of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt

    @usertxt.setter
    def usertxt(self, usertxt):
        """Sets the usertxt of this VerticalComponentData.


        :param usertxt: The usertxt of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._usertxt = usertxt

    @property
    def workpres(self):
        """Gets the workpres of this VerticalComponentData.  # noqa: E501


        :return: The workpres of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._workpres

    @workpres.setter
    def workpres(self, workpres):
        """Sets the workpres of this VerticalComponentData.


        :param workpres: The workpres of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._workpres = workpres

    @property
    def workpresbtm(self):
        """Gets the workpresbtm of this VerticalComponentData.  # noqa: E501


        :return: The workpresbtm of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._workpresbtm

    @workpresbtm.setter
    def workpresbtm(self, workpresbtm):
        """Sets the workpresbtm of this VerticalComponentData.


        :param workpresbtm: The workpresbtm of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._workpresbtm = workpresbtm

    @property
    def workprestop(self):
        """Gets the workprestop of this VerticalComponentData.  # noqa: E501


        :return: The workprestop of this VerticalComponentData.  # noqa: E501
        :rtype: float
        """
        return self._workprestop

    @workprestop.setter
    def workprestop(self, workprestop):
        """Sets the workprestop of this VerticalComponentData.


        :param workprestop: The workprestop of this VerticalComponentData.  # noqa: E501
        :type: float
        """

        self._workprestop = workprestop

    @property
    def systag(self):
        """Gets the systag of this VerticalComponentData.  # noqa: E501


        :return: The systag of this VerticalComponentData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this VerticalComponentData.


        :param systag: The systag of this VerticalComponentData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerticalComponentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerticalComponentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
