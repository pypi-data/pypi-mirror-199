# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellHeaderData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'str',
        'area': 'str',
        'basin': 'str',
        'basincode': 'str',
        'com': 'str',
        'country': 'str',
        'county': 'str',
        'currentwellstatus1': 'str',
        'currentwellstatus2': 'str',
        'directionstowell': 'str',
        'district': 'str',
        'division': 'str',
        'divisioncode': 'str',
        'dttmabandon': 'datetime',
        'dttmfirstprod': 'datetime',
        'dttmrr': 'datetime',
        'dttmspud': 'datetime',
        'dttmwellclass': 'datetime',
        'dttmwelllic': 'datetime',
        'elvcasflange': 'float',
        'elvground': 'float',
        'elvlat': 'float',
        'elvmudline': 'float',
        'elvorigkb': 'float',
        'elvtubhead': 'float',
        'environmentsensitive': 'bool',
        'ewdist': 'float',
        'ewflag': 'str',
        'fieldcode': 'str',
        'fieldname': 'str',
        'fieldoffice': 'str',
        'fieldofficecode': 'str',
        'govauthority': 'str',
        'hih2s': 'bool',
        'hisitp': 'bool',
        'idrecelvhistory': 'str',
        'idwell': 'str',
        'latitude': 'float',
        'latlongdatum': 'str',
        'latlongsource': 'str',
        'lease': 'str',
        'leasecode': 'str',
        'legalsurveyloc': 'str',
        'legalsurveysubtyp': 'str',
        'legalsurveytyp': 'str',
        'localtimezone': 'float',
        'locationnote': 'str',
        'locationref': 'str',
        'locationsensitive': 'bool',
        'locationtyp': 'str',
        'longitude': 'float',
        'nsdist': 'float',
        'nsflag': 'str',
        'operated': 'bool',
        'operator': 'str',
        'operatorcode': 'str',
        'padcode': 'str',
        'padname': 'str',
        'platform': 'str',
        'primaryfluiddes': 'str',
        'problemflag': 'bool',
        'riskclass': 'str',
        'slot': 'str',
        'stateprov': 'str',
        'surfacerights': 'str',
        'towndist': 'float',
        'townflag': 'str',
        'townname': 'str',
        'townstateprov': 'str',
        'userboolean1': 'bool',
        'userboolean2': 'bool',
        'userboolean3': 'bool',
        'userboolean4': 'bool',
        'userboolean5': 'bool',
        'userdttm1': 'datetime',
        'userdttm2': 'datetime',
        'userdttm3': 'datetime',
        'userdttm4': 'datetime',
        'userdttm5': 'datetime',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'usernum4': 'float',
        'usernum5': 'float',
        'usernum6': 'float',
        'usertxt1': 'str',
        'usertxt10': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'usertxt4': 'str',
        'usertxt5': 'str',
        'usertxt6': 'str',
        'usertxt7': 'str',
        'usertxt8': 'str',
        'usertxt9': 'str',
        'utmgridzone': 'int',
        'utmsource': 'str',
        'utmx': 'float',
        'utmy': 'float',
        'waterdepth': 'float',
        'waterdepthref': 'str',
        'wellclass': 'str',
        'wellconfig': 'str',
        'wellida': 'str',
        'wellidb': 'str',
        'wellidc': 'str',
        'wellidd': 'str',
        'wellide': 'str',
        'welllicensee': 'str',
        'welllicenseno': 'str',
        'wellname': 'str',
        'welltyp1': 'str',
        'welltyp2': 'str',
        'systag': 'str',
        'syssecuritytyp': 'str'

    }

    attribute_map = {
        'agent': 'agent',
        'area': 'area',
        'basin': 'basin',
        'basincode': 'basincode',
        'com': 'com',
        'country': 'country',
        'county': 'county',
        'currentwellstatus1': 'currentwellstatus1',
        'currentwellstatus2': 'currentwellstatus2',
        'directionstowell': 'directionstowell',
        'district': 'district',
        'division': 'division',
        'divisioncode': 'divisioncode',
        'dttmabandon': 'dttmabandon',
        'dttmfirstprod': 'dttmfirstprod',
        'dttmrr': 'dttmrr',
        'dttmspud': 'dttmspud',
        'dttmwellclass': 'dttmwellclass',
        'dttmwelllic': 'dttmwelllic',
        'elvcasflange': 'elvcasflange',
        'elvground': 'elvground',
        'elvlat': 'elvlat',
        'elvmudline': 'elvmudline',
        'elvorigkb': 'elvorigkb',
        'elvtubhead': 'elvtubhead',
        'environmentsensitive': 'environmentsensitive',
        'ewdist': 'ewdist',
        'ewflag': 'ewflag',
        'fieldcode': 'fieldcode',
        'fieldname': 'fieldname',
        'fieldoffice': 'fieldoffice',
        'fieldofficecode': 'fieldofficecode',
        'govauthority': 'govauthority',
        'hih2s': 'hih2s',
        'hisitp': 'hisitp',
        'idrecelvhistory': 'idrecelvhistory',
        'idwell': 'idwell',
        'latitude': 'latitude',
        'latlongdatum': 'latlongdatum',
        'latlongsource': 'latlongsource',
        'lease': 'lease',
        'leasecode': 'leasecode',
        'legalsurveyloc': 'legalsurveyloc',
        'legalsurveysubtyp': 'legalsurveysubtyp',
        'legalsurveytyp': 'legalsurveytyp',
        'localtimezone': 'localtimezone',
        'locationnote': 'locationnote',
        'locationref': 'locationref',
        'locationsensitive': 'locationsensitive',
        'locationtyp': 'locationtyp',
        'longitude': 'longitude',
        'nsdist': 'nsdist',
        'nsflag': 'nsflag',
        'operated': 'operated',
        'operator': 'operator',
        'operatorcode': 'operatorcode',
        'padcode': 'padcode',
        'padname': 'padname',
        'platform': 'platform',
        'primaryfluiddes': 'primaryfluiddes',
        'problemflag': 'problemflag',
        'riskclass': 'riskclass',
        'slot': 'slot',
        'stateprov': 'stateprov',
        'surfacerights': 'surfacerights',
        'towndist': 'towndist',
        'townflag': 'townflag',
        'townname': 'townname',
        'townstateprov': 'townstateprov',
        'userboolean1': 'userboolean1',
        'userboolean2': 'userboolean2',
        'userboolean3': 'userboolean3',
        'userboolean4': 'userboolean4',
        'userboolean5': 'userboolean5',
        'userdttm1': 'userdttm1',
        'userdttm2': 'userdttm2',
        'userdttm3': 'userdttm3',
        'userdttm4': 'userdttm4',
        'userdttm5': 'userdttm5',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usernum4': 'usernum4',
        'usernum5': 'usernum5',
        'usernum6': 'usernum6',
        'usertxt1': 'usertxt1',
        'usertxt10': 'usertxt10',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'usertxt4': 'usertxt4',
        'usertxt5': 'usertxt5',
        'usertxt6': 'usertxt6',
        'usertxt7': 'usertxt7',
        'usertxt8': 'usertxt8',
        'usertxt9': 'usertxt9',
        'utmgridzone': 'utmgridzone',
        'utmsource': 'utmsource',
        'utmx': 'utmx',
        'utmy': 'utmy',
        'waterdepth': 'waterdepth',
        'waterdepthref': 'waterdepthref',
        'wellclass': 'wellclass',
        'wellconfig': 'wellconfig',
        'wellida': 'wellida',
        'wellidb': 'wellidb',
        'wellidc': 'wellidc',
        'wellidd': 'wellidd',
        'wellide': 'wellide',
        'welllicensee': 'welllicensee',
        'welllicenseno': 'welllicenseno',
        'wellname': 'wellname',
        'welltyp1': 'welltyp1',
        'welltyp2': 'welltyp2',
        'systag': 'systag',
        'syssecuritytyp': 'str'

    }

    def __init__(self, agent=None, area=None, basin=None, basincode=None, com=None, country=None, county=None, currentwellstatus1=None, currentwellstatus2=None, directionstowell=None, district=None, division=None, divisioncode=None, dttmabandon=None, dttmfirstprod=None, dttmrr=None, dttmspud=None, dttmwellclass=None, dttmwelllic=None, elvcasflange=None, elvground=None, elvlat=None, elvmudline=None, elvorigkb=None, elvtubhead=None, environmentsensitive=None, ewdist=None, ewflag=None, fieldcode=None, fieldname=None, fieldoffice=None, fieldofficecode=None, govauthority=None, hih2s=None, hisitp=None, idrecelvhistory=None, idwell=None, latitude=None, latlongdatum=None, latlongsource=None, lease=None, leasecode=None, legalsurveyloc=None, legalsurveysubtyp=None, legalsurveytyp=None, localtimezone=None, locationnote=None, locationref=None, locationsensitive=None, locationtyp=None, longitude=None, nsdist=None, nsflag=None, operated=None, operator=None, operatorcode=None, padcode=None, padname=None, platform=None, primaryfluiddes=None, problemflag=None, riskclass=None, slot=None, stateprov=None, surfacerights=None, towndist=None, townflag=None, townname=None, townstateprov=None, userboolean1=None, userboolean2=None, userboolean3=None, userboolean4=None, userboolean5=None, userdttm1=None, userdttm2=None, userdttm3=None, userdttm4=None, userdttm5=None, usernum1=None, usernum2=None, usernum3=None, usernum4=None, usernum5=None, usernum6=None, usertxt1=None, usertxt10=None, usertxt2=None, usertxt3=None, usertxt4=None, usertxt5=None, usertxt6=None, usertxt7=None, usertxt8=None, usertxt9=None, utmgridzone=None, utmsource=None, utmx=None, utmy=None, waterdepth=None, waterdepthref=None, wellclass=None, wellconfig=None, wellida=None, wellidb=None, wellidc=None, wellidd=None, wellide=None, welllicensee=None, welllicenseno=None, wellname=None, welltyp1=None, welltyp2=None, systag=None, syssecuritytyp=None):  # noqa: E501
        """WellHeaderData - a model defined in Swagger"""  # noqa: E501
        self._agent = None
        self._area = None
        self._basin = None
        self._basincode = None
        self._com = None
        self._country = None
        self._county = None
        self._currentwellstatus1 = None
        self._currentwellstatus2 = None
        self._directionstowell = None
        self._district = None
        self._division = None
        self._divisioncode = None
        self._dttmabandon = None
        self._dttmfirstprod = None
        self._dttmrr = None
        self._dttmspud = None
        self._dttmwellclass = None
        self._dttmwelllic = None
        self._elvcasflange = None
        self._elvground = None
        self._elvlat = None
        self._elvmudline = None
        self._elvorigkb = None
        self._elvtubhead = None
        self._environmentsensitive = None
        self._ewdist = None
        self._ewflag = None
        self._fieldcode = None
        self._fieldname = None
        self._fieldoffice = None
        self._fieldofficecode = None
        self._govauthority = None
        self._hih2s = None
        self._hisitp = None
        self._idrecelvhistory = None
        self._idwell = None
        self._latitude = None
        self._latlongdatum = None
        self._latlongsource = None
        self._lease = None
        self._leasecode = None
        self._legalsurveyloc = None
        self._legalsurveysubtyp = None
        self._legalsurveytyp = None
        self._localtimezone = None
        self._locationnote = None
        self._locationref = None
        self._locationsensitive = None
        self._locationtyp = None
        self._longitude = None
        self._nsdist = None
        self._nsflag = None
        self._operated = None
        self._operator = None
        self._operatorcode = None
        self._padcode = None
        self._padname = None
        self._platform = None
        self._primaryfluiddes = None
        self._problemflag = None
        self._riskclass = None
        self._slot = None
        self._stateprov = None
        self._surfacerights = None
        self._towndist = None
        self._townflag = None
        self._townname = None
        self._townstateprov = None
        self._userboolean1 = None
        self._userboolean2 = None
        self._userboolean3 = None
        self._userboolean4 = None
        self._userboolean5 = None
        self._userdttm1 = None
        self._userdttm2 = None
        self._userdttm3 = None
        self._userdttm4 = None
        self._userdttm5 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usernum4 = None
        self._usernum5 = None
        self._usernum6 = None
        self._usertxt1 = None
        self._usertxt10 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._usertxt4 = None
        self._usertxt5 = None
        self._usertxt6 = None
        self._usertxt7 = None
        self._usertxt8 = None
        self._usertxt9 = None
        self._utmgridzone = None
        self._utmsource = None
        self._utmx = None
        self._utmy = None
        self._waterdepth = None
        self._waterdepthref = None
        self._wellclass = None
        self._wellconfig = None
        self._wellida = None
        self._wellidb = None
        self._wellidc = None
        self._wellidd = None
        self._wellide = None
        self._welllicensee = None
        self._welllicenseno = None
        self._wellname = None
        self._welltyp1 = None
        self._welltyp2 = None
        self._systag = None
        self._syssecuritytyp = None
        self.discriminator = None
        if agent is not None:
            self.agent = agent
        if area is not None:
            self.area = area
        if basin is not None:
            self.basin = basin
        if basincode is not None:
            self.basincode = basincode
        if com is not None:
            self.com = com
        if country is not None:
            self.country = country
        if county is not None:
            self.county = county
        if currentwellstatus1 is not None:
            self.currentwellstatus1 = currentwellstatus1
        if currentwellstatus2 is not None:
            self.currentwellstatus2 = currentwellstatus2
        if directionstowell is not None:
            self.directionstowell = directionstowell
        if district is not None:
            self.district = district
        if division is not None:
            self.division = division
        if divisioncode is not None:
            self.divisioncode = divisioncode
        if dttmabandon is not None:
            self.dttmabandon = dttmabandon
        if dttmfirstprod is not None:
            self.dttmfirstprod = dttmfirstprod
        if dttmrr is not None:
            self.dttmrr = dttmrr
        if dttmspud is not None:
            self.dttmspud = dttmspud
        if dttmwellclass is not None:
            self.dttmwellclass = dttmwellclass
        if dttmwelllic is not None:
            self.dttmwelllic = dttmwelllic
        if elvcasflange is not None:
            self.elvcasflange = elvcasflange
        if elvground is not None:
            self.elvground = elvground
        if elvlat is not None:
            self.elvlat = elvlat
        if elvmudline is not None:
            self.elvmudline = elvmudline
        if elvorigkb is not None:
            self.elvorigkb = elvorigkb
        if elvtubhead is not None:
            self.elvtubhead = elvtubhead
        if environmentsensitive is not None:
            self.environmentsensitive = environmentsensitive
        if ewdist is not None:
            self.ewdist = ewdist
        if ewflag is not None:
            self.ewflag = ewflag
        if fieldcode is not None:
            self.fieldcode = fieldcode
        if fieldname is not None:
            self.fieldname = fieldname
        if fieldoffice is not None:
            self.fieldoffice = fieldoffice
        if fieldofficecode is not None:
            self.fieldofficecode = fieldofficecode
        if govauthority is not None:
            self.govauthority = govauthority
        if hih2s is not None:
            self.hih2s = hih2s
        if hisitp is not None:
            self.hisitp = hisitp
        if idrecelvhistory is not None:
            self.idrecelvhistory = idrecelvhistory
        self.idwell = idwell
        if latitude is not None:
            self.latitude = latitude
        if latlongdatum is not None:
            self.latlongdatum = latlongdatum
        if latlongsource is not None:
            self.latlongsource = latlongsource
        if lease is not None:
            self.lease = lease
        if leasecode is not None:
            self.leasecode = leasecode
        if legalsurveyloc is not None:
            self.legalsurveyloc = legalsurveyloc
        if legalsurveysubtyp is not None:
            self.legalsurveysubtyp = legalsurveysubtyp
        if legalsurveytyp is not None:
            self.legalsurveytyp = legalsurveytyp
        if localtimezone is not None:
            self.localtimezone = localtimezone
        if locationnote is not None:
            self.locationnote = locationnote
        if locationref is not None:
            self.locationref = locationref
        if locationsensitive is not None:
            self.locationsensitive = locationsensitive
        if locationtyp is not None:
            self.locationtyp = locationtyp
        if longitude is not None:
            self.longitude = longitude
        if nsdist is not None:
            self.nsdist = nsdist
        if nsflag is not None:
            self.nsflag = nsflag
        if operated is not None:
            self.operated = operated
        if operator is not None:
            self.operator = operator
        if operatorcode is not None:
            self.operatorcode = operatorcode
        if padcode is not None:
            self.padcode = padcode
        if padname is not None:
            self.padname = padname
        if platform is not None:
            self.platform = platform
        if primaryfluiddes is not None:
            self.primaryfluiddes = primaryfluiddes
        if problemflag is not None:
            self.problemflag = problemflag
        if riskclass is not None:
            self.riskclass = riskclass
        if slot is not None:
            self.slot = slot
        if stateprov is not None:
            self.stateprov = stateprov
        if surfacerights is not None:
            self.surfacerights = surfacerights
        if towndist is not None:
            self.towndist = towndist
        if townflag is not None:
            self.townflag = townflag
        if townname is not None:
            self.townname = townname
        if townstateprov is not None:
            self.townstateprov = townstateprov
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if userboolean2 is not None:
            self.userboolean2 = userboolean2
        if userboolean3 is not None:
            self.userboolean3 = userboolean3
        if userboolean4 is not None:
            self.userboolean4 = userboolean4
        if userboolean5 is not None:
            self.userboolean5 = userboolean5
        if userdttm1 is not None:
            self.userdttm1 = userdttm1
        if userdttm2 is not None:
            self.userdttm2 = userdttm2
        if userdttm3 is not None:
            self.userdttm3 = userdttm3
        if userdttm4 is not None:
            self.userdttm4 = userdttm4
        if userdttm5 is not None:
            self.userdttm5 = userdttm5
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usernum4 is not None:
            self.usernum4 = usernum4
        if usernum5 is not None:
            self.usernum5 = usernum5
        if usernum6 is not None:
            self.usernum6 = usernum6
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt10 is not None:
            self.usertxt10 = usertxt10
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if usertxt4 is not None:
            self.usertxt4 = usertxt4
        if usertxt5 is not None:
            self.usertxt5 = usertxt5
        if usertxt6 is not None:
            self.usertxt6 = usertxt6
        if usertxt7 is not None:
            self.usertxt7 = usertxt7
        if usertxt8 is not None:
            self.usertxt8 = usertxt8
        if usertxt9 is not None:
            self.usertxt9 = usertxt9
        if utmgridzone is not None:
            self.utmgridzone = utmgridzone
        if utmsource is not None:
            self.utmsource = utmsource
        if utmx is not None:
            self.utmx = utmx
        if utmy is not None:
            self.utmy = utmy
        if waterdepth is not None:
            self.waterdepth = waterdepth
        if waterdepthref is not None:
            self.waterdepthref = waterdepthref
        if wellclass is not None:
            self.wellclass = wellclass
        if wellconfig is not None:
            self.wellconfig = wellconfig
        if wellida is not None:
            self.wellida = wellida
        if wellidb is not None:
            self.wellidb = wellidb
        if wellidc is not None:
            self.wellidc = wellidc
        if wellidd is not None:
            self.wellidd = wellidd
        if wellide is not None:
            self.wellide = wellide
        if welllicensee is not None:
            self.welllicensee = welllicensee
        if welllicenseno is not None:
            self.welllicenseno = welllicenseno
        if wellname is not None:
            self.wellname = wellname
        if welltyp1 is not None:
            self.welltyp1 = welltyp1
        if welltyp2 is not None:
            self.welltyp2 = welltyp2
        if systag is not None:
            self.systag = systag
        if syssecuritytyp is not None:
            self.syssecuritytyp = syssecuritytyp

    @property
    def agent(self):
        """Gets the agent of this WellHeaderData.  # noqa: E501


        :return: The agent of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this WellHeaderData.


        :param agent: The agent of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def area(self):
        """Gets the area of this WellHeaderData.  # noqa: E501


        :return: The area of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this WellHeaderData.


        :param area: The area of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def basin(self):
        """Gets the basin of this WellHeaderData.  # noqa: E501


        :return: The basin of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._basin

    @basin.setter
    def basin(self, basin):
        """Sets the basin of this WellHeaderData.


        :param basin: The basin of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._basin = basin

    @property
    def basincode(self):
        """Gets the basincode of this WellHeaderData.  # noqa: E501


        :return: The basincode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._basincode

    @basincode.setter
    def basincode(self, basincode):
        """Sets the basincode of this WellHeaderData.


        :param basincode: The basincode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._basincode = basincode

    @property
    def com(self):
        """Gets the com of this WellHeaderData.  # noqa: E501


        :return: The com of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellHeaderData.


        :param com: The com of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def country(self):
        """Gets the country of this WellHeaderData.  # noqa: E501


        :return: The country of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this WellHeaderData.


        :param country: The country of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this WellHeaderData.  # noqa: E501


        :return: The county of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this WellHeaderData.


        :param county: The county of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def currentwellstatus1(self):
        """Gets the currentwellstatus1 of this WellHeaderData.  # noqa: E501


        :return: The currentwellstatus1 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._currentwellstatus1

    @currentwellstatus1.setter
    def currentwellstatus1(self, currentwellstatus1):
        """Sets the currentwellstatus1 of this WellHeaderData.


        :param currentwellstatus1: The currentwellstatus1 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._currentwellstatus1 = currentwellstatus1

    @property
    def currentwellstatus2(self):
        """Gets the currentwellstatus2 of this WellHeaderData.  # noqa: E501


        :return: The currentwellstatus2 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._currentwellstatus2

    @currentwellstatus2.setter
    def currentwellstatus2(self, currentwellstatus2):
        """Sets the currentwellstatus2 of this WellHeaderData.


        :param currentwellstatus2: The currentwellstatus2 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._currentwellstatus2 = currentwellstatus2

    @property
    def directionstowell(self):
        """Gets the directionstowell of this WellHeaderData.  # noqa: E501


        :return: The directionstowell of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._directionstowell

    @directionstowell.setter
    def directionstowell(self, directionstowell):
        """Sets the directionstowell of this WellHeaderData.


        :param directionstowell: The directionstowell of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._directionstowell = directionstowell

    @property
    def district(self):
        """Gets the district of this WellHeaderData.  # noqa: E501


        :return: The district of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this WellHeaderData.


        :param district: The district of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def division(self):
        """Gets the division of this WellHeaderData.  # noqa: E501


        :return: The division of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._division

    @division.setter
    def division(self, division):
        """Sets the division of this WellHeaderData.


        :param division: The division of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._division = division

    @property
    def divisioncode(self):
        """Gets the divisioncode of this WellHeaderData.  # noqa: E501


        :return: The divisioncode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._divisioncode

    @divisioncode.setter
    def divisioncode(self, divisioncode):
        """Sets the divisioncode of this WellHeaderData.


        :param divisioncode: The divisioncode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._divisioncode = divisioncode

    @property
    def dttmabandon(self):
        """Gets the dttmabandon of this WellHeaderData.  # noqa: E501


        :return: The dttmabandon of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmabandon

    @dttmabandon.setter
    def dttmabandon(self, dttmabandon):
        """Sets the dttmabandon of this WellHeaderData.


        :param dttmabandon: The dttmabandon of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._dttmabandon = dttmabandon

    @property
    def dttmfirstprod(self):
        """Gets the dttmfirstprod of this WellHeaderData.  # noqa: E501


        :return: The dttmfirstprod of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmfirstprod

    @dttmfirstprod.setter
    def dttmfirstprod(self, dttmfirstprod):
        """Sets the dttmfirstprod of this WellHeaderData.


        :param dttmfirstprod: The dttmfirstprod of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._dttmfirstprod = dttmfirstprod

    @property
    def dttmrr(self):
        """Gets the dttmrr of this WellHeaderData.  # noqa: E501


        :return: The dttmrr of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrr

    @dttmrr.setter
    def dttmrr(self, dttmrr):
        """Sets the dttmrr of this WellHeaderData.


        :param dttmrr: The dttmrr of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._dttmrr = dttmrr

    @property
    def dttmspud(self):
        """Gets the dttmspud of this WellHeaderData.  # noqa: E501


        :return: The dttmspud of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmspud

    @dttmspud.setter
    def dttmspud(self, dttmspud):
        """Sets the dttmspud of this WellHeaderData.


        :param dttmspud: The dttmspud of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._dttmspud = dttmspud

    @property
    def dttmwellclass(self):
        """Gets the dttmwellclass of this WellHeaderData.  # noqa: E501


        :return: The dttmwellclass of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmwellclass

    @dttmwellclass.setter
    def dttmwellclass(self, dttmwellclass):
        """Sets the dttmwellclass of this WellHeaderData.


        :param dttmwellclass: The dttmwellclass of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._dttmwellclass = dttmwellclass

    @property
    def dttmwelllic(self):
        """Gets the dttmwelllic of this WellHeaderData.  # noqa: E501


        :return: The dttmwelllic of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmwelllic

    @dttmwelllic.setter
    def dttmwelllic(self, dttmwelllic):
        """Sets the dttmwelllic of this WellHeaderData.


        :param dttmwelllic: The dttmwelllic of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._dttmwelllic = dttmwelllic

    @property
    def elvcasflange(self):
        """Gets the elvcasflange of this WellHeaderData.  # noqa: E501


        :return: The elvcasflange of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._elvcasflange

    @elvcasflange.setter
    def elvcasflange(self, elvcasflange):
        """Sets the elvcasflange of this WellHeaderData.


        :param elvcasflange: The elvcasflange of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._elvcasflange = elvcasflange

    @property
    def elvground(self):
        """Gets the elvground of this WellHeaderData.  # noqa: E501


        :return: The elvground of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._elvground

    @elvground.setter
    def elvground(self, elvground):
        """Sets the elvground of this WellHeaderData.


        :param elvground: The elvground of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._elvground = elvground

    @property
    def elvlat(self):
        """Gets the elvlat of this WellHeaderData.  # noqa: E501


        :return: The elvlat of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._elvlat

    @elvlat.setter
    def elvlat(self, elvlat):
        """Sets the elvlat of this WellHeaderData.


        :param elvlat: The elvlat of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._elvlat = elvlat

    @property
    def elvmudline(self):
        """Gets the elvmudline of this WellHeaderData.  # noqa: E501


        :return: The elvmudline of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._elvmudline

    @elvmudline.setter
    def elvmudline(self, elvmudline):
        """Sets the elvmudline of this WellHeaderData.


        :param elvmudline: The elvmudline of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._elvmudline = elvmudline

    @property
    def elvorigkb(self):
        """Gets the elvorigkb of this WellHeaderData.  # noqa: E501


        :return: The elvorigkb of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._elvorigkb

    @elvorigkb.setter
    def elvorigkb(self, elvorigkb):
        """Sets the elvorigkb of this WellHeaderData.


        :param elvorigkb: The elvorigkb of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._elvorigkb = elvorigkb

    @property
    def elvtubhead(self):
        """Gets the elvtubhead of this WellHeaderData.  # noqa: E501


        :return: The elvtubhead of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._elvtubhead

    @elvtubhead.setter
    def elvtubhead(self, elvtubhead):
        """Sets the elvtubhead of this WellHeaderData.


        :param elvtubhead: The elvtubhead of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._elvtubhead = elvtubhead

    @property
    def environmentsensitive(self):
        """Gets the environmentsensitive of this WellHeaderData.  # noqa: E501


        :return: The environmentsensitive of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._environmentsensitive

    @environmentsensitive.setter
    def environmentsensitive(self, environmentsensitive):
        """Sets the environmentsensitive of this WellHeaderData.


        :param environmentsensitive: The environmentsensitive of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._environmentsensitive = environmentsensitive

    @property
    def ewdist(self):
        """Gets the ewdist of this WellHeaderData.  # noqa: E501


        :return: The ewdist of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._ewdist

    @ewdist.setter
    def ewdist(self, ewdist):
        """Sets the ewdist of this WellHeaderData.


        :param ewdist: The ewdist of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._ewdist = ewdist

    @property
    def ewflag(self):
        """Gets the ewflag of this WellHeaderData.  # noqa: E501


        :return: The ewflag of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._ewflag

    @ewflag.setter
    def ewflag(self, ewflag):
        """Sets the ewflag of this WellHeaderData.


        :param ewflag: The ewflag of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._ewflag = ewflag

    @property
    def fieldcode(self):
        """Gets the fieldcode of this WellHeaderData.  # noqa: E501


        :return: The fieldcode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._fieldcode

    @fieldcode.setter
    def fieldcode(self, fieldcode):
        """Sets the fieldcode of this WellHeaderData.


        :param fieldcode: The fieldcode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._fieldcode = fieldcode

    @property
    def fieldname(self):
        """Gets the fieldname of this WellHeaderData.  # noqa: E501


        :return: The fieldname of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this WellHeaderData.


        :param fieldname: The fieldname of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def fieldoffice(self):
        """Gets the fieldoffice of this WellHeaderData.  # noqa: E501


        :return: The fieldoffice of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._fieldoffice

    @fieldoffice.setter
    def fieldoffice(self, fieldoffice):
        """Sets the fieldoffice of this WellHeaderData.


        :param fieldoffice: The fieldoffice of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._fieldoffice = fieldoffice

    @property
    def fieldofficecode(self):
        """Gets the fieldofficecode of this WellHeaderData.  # noqa: E501


        :return: The fieldofficecode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._fieldofficecode

    @fieldofficecode.setter
    def fieldofficecode(self, fieldofficecode):
        """Sets the fieldofficecode of this WellHeaderData.


        :param fieldofficecode: The fieldofficecode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._fieldofficecode = fieldofficecode

    @property
    def govauthority(self):
        """Gets the govauthority of this WellHeaderData.  # noqa: E501


        :return: The govauthority of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._govauthority

    @govauthority.setter
    def govauthority(self, govauthority):
        """Sets the govauthority of this WellHeaderData.


        :param govauthority: The govauthority of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._govauthority = govauthority

    @property
    def hih2s(self):
        """Gets the hih2s of this WellHeaderData.  # noqa: E501


        :return: The hih2s of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._hih2s

    @hih2s.setter
    def hih2s(self, hih2s):
        """Sets the hih2s of this WellHeaderData.


        :param hih2s: The hih2s of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._hih2s = hih2s

    @property
    def hisitp(self):
        """Gets the hisitp of this WellHeaderData.  # noqa: E501


        :return: The hisitp of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._hisitp

    @hisitp.setter
    def hisitp(self, hisitp):
        """Sets the hisitp of this WellHeaderData.


        :param hisitp: The hisitp of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._hisitp = hisitp

    @property
    def idrecelvhistory(self):
        """Gets the idrecelvhistory of this WellHeaderData.  # noqa: E501


        :return: The idrecelvhistory of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._idrecelvhistory

    @idrecelvhistory.setter
    def idrecelvhistory(self, idrecelvhistory):
        """Sets the idrecelvhistory of this WellHeaderData.


        :param idrecelvhistory: The idrecelvhistory of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._idrecelvhistory = idrecelvhistory

    @property
    def idwell(self):
        """Gets the idwell of this WellHeaderData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellHeaderData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellHeaderData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def latitude(self):
        """Gets the latitude of this WellHeaderData.  # noqa: E501


        :return: The latitude of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this WellHeaderData.


        :param latitude: The latitude of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def latlongdatum(self):
        """Gets the latlongdatum of this WellHeaderData.  # noqa: E501


        :return: The latlongdatum of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._latlongdatum

    @latlongdatum.setter
    def latlongdatum(self, latlongdatum):
        """Sets the latlongdatum of this WellHeaderData.


        :param latlongdatum: The latlongdatum of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._latlongdatum = latlongdatum

    @property
    def latlongsource(self):
        """Gets the latlongsource of this WellHeaderData.  # noqa: E501


        :return: The latlongsource of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._latlongsource

    @latlongsource.setter
    def latlongsource(self, latlongsource):
        """Sets the latlongsource of this WellHeaderData.


        :param latlongsource: The latlongsource of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._latlongsource = latlongsource

    @property
    def lease(self):
        """Gets the lease of this WellHeaderData.  # noqa: E501


        :return: The lease of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this WellHeaderData.


        :param lease: The lease of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._lease = lease

    @property
    def leasecode(self):
        """Gets the leasecode of this WellHeaderData.  # noqa: E501


        :return: The leasecode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._leasecode

    @leasecode.setter
    def leasecode(self, leasecode):
        """Sets the leasecode of this WellHeaderData.


        :param leasecode: The leasecode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._leasecode = leasecode

    @property
    def legalsurveyloc(self):
        """Gets the legalsurveyloc of this WellHeaderData.  # noqa: E501


        :return: The legalsurveyloc of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveyloc

    @legalsurveyloc.setter
    def legalsurveyloc(self, legalsurveyloc):
        """Sets the legalsurveyloc of this WellHeaderData.


        :param legalsurveyloc: The legalsurveyloc of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._legalsurveyloc = legalsurveyloc

    @property
    def legalsurveysubtyp(self):
        """Gets the legalsurveysubtyp of this WellHeaderData.  # noqa: E501


        :return: The legalsurveysubtyp of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveysubtyp

    @legalsurveysubtyp.setter
    def legalsurveysubtyp(self, legalsurveysubtyp):
        """Sets the legalsurveysubtyp of this WellHeaderData.


        :param legalsurveysubtyp: The legalsurveysubtyp of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._legalsurveysubtyp = legalsurveysubtyp

    @property
    def legalsurveytyp(self):
        """Gets the legalsurveytyp of this WellHeaderData.  # noqa: E501


        :return: The legalsurveytyp of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._legalsurveytyp

    @legalsurveytyp.setter
    def legalsurveytyp(self, legalsurveytyp):
        """Sets the legalsurveytyp of this WellHeaderData.


        :param legalsurveytyp: The legalsurveytyp of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._legalsurveytyp = legalsurveytyp

    @property
    def localtimezone(self):
        """Gets the localtimezone of this WellHeaderData.  # noqa: E501


        :return: The localtimezone of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._localtimezone

    @localtimezone.setter
    def localtimezone(self, localtimezone):
        """Sets the localtimezone of this WellHeaderData.


        :param localtimezone: The localtimezone of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._localtimezone = localtimezone

    @property
    def locationnote(self):
        """Gets the locationnote of this WellHeaderData.  # noqa: E501


        :return: The locationnote of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._locationnote

    @locationnote.setter
    def locationnote(self, locationnote):
        """Sets the locationnote of this WellHeaderData.


        :param locationnote: The locationnote of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._locationnote = locationnote

    @property
    def locationref(self):
        """Gets the locationref of this WellHeaderData.  # noqa: E501


        :return: The locationref of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._locationref

    @locationref.setter
    def locationref(self, locationref):
        """Sets the locationref of this WellHeaderData.


        :param locationref: The locationref of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._locationref = locationref

    @property
    def locationsensitive(self):
        """Gets the locationsensitive of this WellHeaderData.  # noqa: E501


        :return: The locationsensitive of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._locationsensitive

    @locationsensitive.setter
    def locationsensitive(self, locationsensitive):
        """Sets the locationsensitive of this WellHeaderData.


        :param locationsensitive: The locationsensitive of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._locationsensitive = locationsensitive

    @property
    def locationtyp(self):
        """Gets the locationtyp of this WellHeaderData.  # noqa: E501


        :return: The locationtyp of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._locationtyp

    @locationtyp.setter
    def locationtyp(self, locationtyp):
        """Sets the locationtyp of this WellHeaderData.


        :param locationtyp: The locationtyp of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._locationtyp = locationtyp

    @property
    def longitude(self):
        """Gets the longitude of this WellHeaderData.  # noqa: E501


        :return: The longitude of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this WellHeaderData.


        :param longitude: The longitude of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def nsdist(self):
        """Gets the nsdist of this WellHeaderData.  # noqa: E501


        :return: The nsdist of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._nsdist

    @nsdist.setter
    def nsdist(self, nsdist):
        """Sets the nsdist of this WellHeaderData.


        :param nsdist: The nsdist of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._nsdist = nsdist

    @property
    def nsflag(self):
        """Gets the nsflag of this WellHeaderData.  # noqa: E501


        :return: The nsflag of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._nsflag

    @nsflag.setter
    def nsflag(self, nsflag):
        """Sets the nsflag of this WellHeaderData.


        :param nsflag: The nsflag of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._nsflag = nsflag

    @property
    def operated(self):
        """Gets the operated of this WellHeaderData.  # noqa: E501


        :return: The operated of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._operated

    @operated.setter
    def operated(self, operated):
        """Sets the operated of this WellHeaderData.


        :param operated: The operated of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._operated = operated

    @property
    def operator(self):
        """Gets the operator of this WellHeaderData.  # noqa: E501


        :return: The operator of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this WellHeaderData.


        :param operator: The operator of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._operator = operator

    @property
    def operatorcode(self):
        """Gets the operatorcode of this WellHeaderData.  # noqa: E501


        :return: The operatorcode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._operatorcode

    @operatorcode.setter
    def operatorcode(self, operatorcode):
        """Sets the operatorcode of this WellHeaderData.


        :param operatorcode: The operatorcode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._operatorcode = operatorcode

    @property
    def padcode(self):
        """Gets the padcode of this WellHeaderData.  # noqa: E501


        :return: The padcode of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._padcode

    @padcode.setter
    def padcode(self, padcode):
        """Sets the padcode of this WellHeaderData.


        :param padcode: The padcode of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._padcode = padcode

    @property
    def padname(self):
        """Gets the padname of this WellHeaderData.  # noqa: E501


        :return: The padname of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._padname

    @padname.setter
    def padname(self, padname):
        """Sets the padname of this WellHeaderData.


        :param padname: The padname of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._padname = padname

    @property
    def platform(self):
        """Gets the platform of this WellHeaderData.  # noqa: E501


        :return: The platform of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this WellHeaderData.


        :param platform: The platform of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def primaryfluiddes(self):
        """Gets the primaryfluiddes of this WellHeaderData.  # noqa: E501


        :return: The primaryfluiddes of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._primaryfluiddes

    @primaryfluiddes.setter
    def primaryfluiddes(self, primaryfluiddes):
        """Sets the primaryfluiddes of this WellHeaderData.


        :param primaryfluiddes: The primaryfluiddes of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._primaryfluiddes = primaryfluiddes

    @property
    def problemflag(self):
        """Gets the problemflag of this WellHeaderData.  # noqa: E501


        :return: The problemflag of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._problemflag

    @problemflag.setter
    def problemflag(self, problemflag):
        """Sets the problemflag of this WellHeaderData.


        :param problemflag: The problemflag of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._problemflag = problemflag

    @property
    def riskclass(self):
        """Gets the riskclass of this WellHeaderData.  # noqa: E501


        :return: The riskclass of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._riskclass

    @riskclass.setter
    def riskclass(self, riskclass):
        """Sets the riskclass of this WellHeaderData.


        :param riskclass: The riskclass of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._riskclass = riskclass

    @property
    def slot(self):
        """Gets the slot of this WellHeaderData.  # noqa: E501


        :return: The slot of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._slot

    @slot.setter
    def slot(self, slot):
        """Sets the slot of this WellHeaderData.


        :param slot: The slot of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._slot = slot

    @property
    def stateprov(self):
        """Gets the stateprov of this WellHeaderData.  # noqa: E501


        :return: The stateprov of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._stateprov

    @stateprov.setter
    def stateprov(self, stateprov):
        """Sets the stateprov of this WellHeaderData.


        :param stateprov: The stateprov of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._stateprov = stateprov

    @property
    def surfacerights(self):
        """Gets the surfacerights of this WellHeaderData.  # noqa: E501


        :return: The surfacerights of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._surfacerights

    @surfacerights.setter
    def surfacerights(self, surfacerights):
        """Sets the surfacerights of this WellHeaderData.


        :param surfacerights: The surfacerights of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._surfacerights = surfacerights

    @property
    def towndist(self):
        """Gets the towndist of this WellHeaderData.  # noqa: E501


        :return: The towndist of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._towndist

    @towndist.setter
    def towndist(self, towndist):
        """Sets the towndist of this WellHeaderData.


        :param towndist: The towndist of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._towndist = towndist

    @property
    def townflag(self):
        """Gets the townflag of this WellHeaderData.  # noqa: E501


        :return: The townflag of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._townflag

    @townflag.setter
    def townflag(self, townflag):
        """Sets the townflag of this WellHeaderData.


        :param townflag: The townflag of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._townflag = townflag

    @property
    def townname(self):
        """Gets the townname of this WellHeaderData.  # noqa: E501


        :return: The townname of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._townname

    @townname.setter
    def townname(self, townname):
        """Sets the townname of this WellHeaderData.


        :param townname: The townname of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._townname = townname

    @property
    def townstateprov(self):
        """Gets the townstateprov of this WellHeaderData.  # noqa: E501


        :return: The townstateprov of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._townstateprov

    @townstateprov.setter
    def townstateprov(self, townstateprov):
        """Sets the townstateprov of this WellHeaderData.


        :param townstateprov: The townstateprov of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._townstateprov = townstateprov

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this WellHeaderData.  # noqa: E501


        :return: The userboolean1 of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this WellHeaderData.


        :param userboolean1: The userboolean1 of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._userboolean1 = userboolean1

    @property
    def userboolean2(self):
        """Gets the userboolean2 of this WellHeaderData.  # noqa: E501


        :return: The userboolean2 of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean2

    @userboolean2.setter
    def userboolean2(self, userboolean2):
        """Sets the userboolean2 of this WellHeaderData.


        :param userboolean2: The userboolean2 of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._userboolean2 = userboolean2

    @property
    def userboolean3(self):
        """Gets the userboolean3 of this WellHeaderData.  # noqa: E501


        :return: The userboolean3 of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean3

    @userboolean3.setter
    def userboolean3(self, userboolean3):
        """Sets the userboolean3 of this WellHeaderData.


        :param userboolean3: The userboolean3 of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._userboolean3 = userboolean3

    @property
    def userboolean4(self):
        """Gets the userboolean4 of this WellHeaderData.  # noqa: E501


        :return: The userboolean4 of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean4

    @userboolean4.setter
    def userboolean4(self, userboolean4):
        """Sets the userboolean4 of this WellHeaderData.


        :param userboolean4: The userboolean4 of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._userboolean4 = userboolean4

    @property
    def userboolean5(self):
        """Gets the userboolean5 of this WellHeaderData.  # noqa: E501


        :return: The userboolean5 of this WellHeaderData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean5

    @userboolean5.setter
    def userboolean5(self, userboolean5):
        """Sets the userboolean5 of this WellHeaderData.


        :param userboolean5: The userboolean5 of this WellHeaderData.  # noqa: E501
        :type: bool
        """

        self._userboolean5 = userboolean5

    @property
    def userdttm1(self):
        """Gets the userdttm1 of this WellHeaderData.  # noqa: E501


        :return: The userdttm1 of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm1

    @userdttm1.setter
    def userdttm1(self, userdttm1):
        """Sets the userdttm1 of this WellHeaderData.


        :param userdttm1: The userdttm1 of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._userdttm1 = userdttm1

    @property
    def userdttm2(self):
        """Gets the userdttm2 of this WellHeaderData.  # noqa: E501


        :return: The userdttm2 of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm2

    @userdttm2.setter
    def userdttm2(self, userdttm2):
        """Sets the userdttm2 of this WellHeaderData.


        :param userdttm2: The userdttm2 of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._userdttm2 = userdttm2

    @property
    def userdttm3(self):
        """Gets the userdttm3 of this WellHeaderData.  # noqa: E501


        :return: The userdttm3 of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm3

    @userdttm3.setter
    def userdttm3(self, userdttm3):
        """Sets the userdttm3 of this WellHeaderData.


        :param userdttm3: The userdttm3 of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._userdttm3 = userdttm3

    @property
    def userdttm4(self):
        """Gets the userdttm4 of this WellHeaderData.  # noqa: E501


        :return: The userdttm4 of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm4

    @userdttm4.setter
    def userdttm4(self, userdttm4):
        """Sets the userdttm4 of this WellHeaderData.


        :param userdttm4: The userdttm4 of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._userdttm4 = userdttm4

    @property
    def userdttm5(self):
        """Gets the userdttm5 of this WellHeaderData.  # noqa: E501


        :return: The userdttm5 of this WellHeaderData.  # noqa: E501
        :rtype: datetime
        """
        return self._userdttm5

    @userdttm5.setter
    def userdttm5(self, userdttm5):
        """Sets the userdttm5 of this WellHeaderData.


        :param userdttm5: The userdttm5 of this WellHeaderData.  # noqa: E501
        :type: datetime
        """

        self._userdttm5 = userdttm5

    @property
    def usernum1(self):
        """Gets the usernum1 of this WellHeaderData.  # noqa: E501


        :return: The usernum1 of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this WellHeaderData.


        :param usernum1: The usernum1 of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this WellHeaderData.  # noqa: E501


        :return: The usernum2 of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this WellHeaderData.


        :param usernum2: The usernum2 of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this WellHeaderData.  # noqa: E501


        :return: The usernum3 of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this WellHeaderData.


        :param usernum3: The usernum3 of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def usernum4(self):
        """Gets the usernum4 of this WellHeaderData.  # noqa: E501


        :return: The usernum4 of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._usernum4

    @usernum4.setter
    def usernum4(self, usernum4):
        """Sets the usernum4 of this WellHeaderData.


        :param usernum4: The usernum4 of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._usernum4 = usernum4

    @property
    def usernum5(self):
        """Gets the usernum5 of this WellHeaderData.  # noqa: E501


        :return: The usernum5 of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._usernum5

    @usernum5.setter
    def usernum5(self, usernum5):
        """Sets the usernum5 of this WellHeaderData.


        :param usernum5: The usernum5 of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._usernum5 = usernum5

    @property
    def usernum6(self):
        """Gets the usernum6 of this WellHeaderData.  # noqa: E501


        :return: The usernum6 of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._usernum6

    @usernum6.setter
    def usernum6(self, usernum6):
        """Sets the usernum6 of this WellHeaderData.


        :param usernum6: The usernum6 of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._usernum6 = usernum6

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this WellHeaderData.  # noqa: E501


        :return: The usertxt1 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this WellHeaderData.


        :param usertxt1: The usertxt1 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt10(self):
        """Gets the usertxt10 of this WellHeaderData.  # noqa: E501


        :return: The usertxt10 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt10

    @usertxt10.setter
    def usertxt10(self, usertxt10):
        """Sets the usertxt10 of this WellHeaderData.


        :param usertxt10: The usertxt10 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt10 = usertxt10

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this WellHeaderData.  # noqa: E501


        :return: The usertxt2 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this WellHeaderData.


        :param usertxt2: The usertxt2 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this WellHeaderData.  # noqa: E501


        :return: The usertxt3 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this WellHeaderData.


        :param usertxt3: The usertxt3 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def usertxt4(self):
        """Gets the usertxt4 of this WellHeaderData.  # noqa: E501


        :return: The usertxt4 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt4

    @usertxt4.setter
    def usertxt4(self, usertxt4):
        """Sets the usertxt4 of this WellHeaderData.


        :param usertxt4: The usertxt4 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt4 = usertxt4

    @property
    def usertxt5(self):
        """Gets the usertxt5 of this WellHeaderData.  # noqa: E501


        :return: The usertxt5 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt5

    @usertxt5.setter
    def usertxt5(self, usertxt5):
        """Sets the usertxt5 of this WellHeaderData.


        :param usertxt5: The usertxt5 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt5 = usertxt5

    @property
    def usertxt6(self):
        """Gets the usertxt6 of this WellHeaderData.  # noqa: E501


        :return: The usertxt6 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt6

    @usertxt6.setter
    def usertxt6(self, usertxt6):
        """Sets the usertxt6 of this WellHeaderData.


        :param usertxt6: The usertxt6 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt6 = usertxt6

    @property
    def usertxt7(self):
        """Gets the usertxt7 of this WellHeaderData.  # noqa: E501


        :return: The usertxt7 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt7

    @usertxt7.setter
    def usertxt7(self, usertxt7):
        """Sets the usertxt7 of this WellHeaderData.


        :param usertxt7: The usertxt7 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt7 = usertxt7

    @property
    def usertxt8(self):
        """Gets the usertxt8 of this WellHeaderData.  # noqa: E501


        :return: The usertxt8 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt8

    @usertxt8.setter
    def usertxt8(self, usertxt8):
        """Sets the usertxt8 of this WellHeaderData.


        :param usertxt8: The usertxt8 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt8 = usertxt8

    @property
    def usertxt9(self):
        """Gets the usertxt9 of this WellHeaderData.  # noqa: E501


        :return: The usertxt9 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt9

    @usertxt9.setter
    def usertxt9(self, usertxt9):
        """Sets the usertxt9 of this WellHeaderData.


        :param usertxt9: The usertxt9 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._usertxt9 = usertxt9

    @property
    def utmgridzone(self):
        """Gets the utmgridzone of this WellHeaderData.  # noqa: E501


        :return: The utmgridzone of this WellHeaderData.  # noqa: E501
        :rtype: int
        """
        return self._utmgridzone

    @utmgridzone.setter
    def utmgridzone(self, utmgridzone):
        """Sets the utmgridzone of this WellHeaderData.


        :param utmgridzone: The utmgridzone of this WellHeaderData.  # noqa: E501
        :type: int
        """

        self._utmgridzone = utmgridzone

    @property
    def utmsource(self):
        """Gets the utmsource of this WellHeaderData.  # noqa: E501


        :return: The utmsource of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._utmsource

    @utmsource.setter
    def utmsource(self, utmsource):
        """Sets the utmsource of this WellHeaderData.


        :param utmsource: The utmsource of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._utmsource = utmsource

    @property
    def utmx(self):
        """Gets the utmx of this WellHeaderData.  # noqa: E501


        :return: The utmx of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._utmx

    @utmx.setter
    def utmx(self, utmx):
        """Sets the utmx of this WellHeaderData.


        :param utmx: The utmx of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._utmx = utmx

    @property
    def utmy(self):
        """Gets the utmy of this WellHeaderData.  # noqa: E501


        :return: The utmy of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._utmy

    @utmy.setter
    def utmy(self, utmy):
        """Sets the utmy of this WellHeaderData.


        :param utmy: The utmy of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._utmy = utmy

    @property
    def waterdepth(self):
        """Gets the waterdepth of this WellHeaderData.  # noqa: E501


        :return: The waterdepth of this WellHeaderData.  # noqa: E501
        :rtype: float
        """
        return self._waterdepth

    @waterdepth.setter
    def waterdepth(self, waterdepth):
        """Sets the waterdepth of this WellHeaderData.


        :param waterdepth: The waterdepth of this WellHeaderData.  # noqa: E501
        :type: float
        """

        self._waterdepth = waterdepth

    @property
    def waterdepthref(self):
        """Gets the waterdepthref of this WellHeaderData.  # noqa: E501


        :return: The waterdepthref of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._waterdepthref

    @waterdepthref.setter
    def waterdepthref(self, waterdepthref):
        """Sets the waterdepthref of this WellHeaderData.


        :param waterdepthref: The waterdepthref of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._waterdepthref = waterdepthref

    @property
    def wellclass(self):
        """Gets the wellclass of this WellHeaderData.  # noqa: E501


        :return: The wellclass of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellclass

    @wellclass.setter
    def wellclass(self, wellclass):
        """Sets the wellclass of this WellHeaderData.


        :param wellclass: The wellclass of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellclass = wellclass

    @property
    def wellconfig(self):
        """Gets the wellconfig of this WellHeaderData.  # noqa: E501


        :return: The wellconfig of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellconfig

    @wellconfig.setter
    def wellconfig(self, wellconfig):
        """Sets the wellconfig of this WellHeaderData.


        :param wellconfig: The wellconfig of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellconfig = wellconfig

    @property
    def wellida(self):
        """Gets the wellida of this WellHeaderData.  # noqa: E501


        :return: The wellida of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellida

    @wellida.setter
    def wellida(self, wellida):
        """Sets the wellida of this WellHeaderData.


        :param wellida: The wellida of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellida = wellida

    @property
    def wellidb(self):
        """Gets the wellidb of this WellHeaderData.  # noqa: E501


        :return: The wellidb of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellidb

    @wellidb.setter
    def wellidb(self, wellidb):
        """Sets the wellidb of this WellHeaderData.


        :param wellidb: The wellidb of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellidb = wellidb

    @property
    def wellidc(self):
        """Gets the wellidc of this WellHeaderData.  # noqa: E501


        :return: The wellidc of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellidc

    @wellidc.setter
    def wellidc(self, wellidc):
        """Sets the wellidc of this WellHeaderData.


        :param wellidc: The wellidc of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellidc = wellidc

    @property
    def wellidd(self):
        """Gets the wellidd of this WellHeaderData.  # noqa: E501


        :return: The wellidd of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellidd

    @wellidd.setter
    def wellidd(self, wellidd):
        """Sets the wellidd of this WellHeaderData.


        :param wellidd: The wellidd of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellidd = wellidd

    @property
    def wellide(self):
        """Gets the wellide of this WellHeaderData.  # noqa: E501


        :return: The wellide of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellide

    @wellide.setter
    def wellide(self, wellide):
        """Sets the wellide of this WellHeaderData.


        :param wellide: The wellide of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellide = wellide

    @property
    def welllicensee(self):
        """Gets the welllicensee of this WellHeaderData.  # noqa: E501


        :return: The welllicensee of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._welllicensee

    @welllicensee.setter
    def welllicensee(self, welllicensee):
        """Sets the welllicensee of this WellHeaderData.


        :param welllicensee: The welllicensee of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._welllicensee = welllicensee

    @property
    def welllicenseno(self):
        """Gets the welllicenseno of this WellHeaderData.  # noqa: E501


        :return: The welllicenseno of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._welllicenseno

    @welllicenseno.setter
    def welllicenseno(self, welllicenseno):
        """Sets the welllicenseno of this WellHeaderData.


        :param welllicenseno: The welllicenseno of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._welllicenseno = welllicenseno

    @property
    def wellname(self):
        """Gets the wellname of this WellHeaderData.  # noqa: E501


        :return: The wellname of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._wellname

    @wellname.setter
    def wellname(self, wellname):
        """Sets the wellname of this WellHeaderData.


        :param wellname: The wellname of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._wellname = wellname

    @property
    def welltyp1(self):
        """Gets the welltyp1 of this WellHeaderData.  # noqa: E501


        :return: The welltyp1 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._welltyp1

    @welltyp1.setter
    def welltyp1(self, welltyp1):
        """Sets the welltyp1 of this WellHeaderData.


        :param welltyp1: The welltyp1 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._welltyp1 = welltyp1

    @property
    def welltyp2(self):
        """Gets the welltyp2 of this WellHeaderData.  # noqa: E501


        :return: The welltyp2 of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._welltyp2

    @welltyp2.setter
    def welltyp2(self, welltyp2):
        """Sets the welltyp2 of this WellHeaderData.


        :param welltyp2: The welltyp2 of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._welltyp2 = welltyp2

    @property
    def systag(self):
        """Gets the systag of this WellHeaderData.  # noqa: E501


        :return: The systag of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellHeaderData.


        :param systag: The systag of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._systag = systag
        
    @property
    def syssecuritytyp(self):
        """Gets the syssecuritytyp of this WellHeaderData.  # noqa: E501


        :return: The syssecuritytyp of this WellHeaderData.  # noqa: E501
        :rtype: str
        """
        return self._syssecuritytyp

    @syssecuritytyp.setter
    def syssecuritytyp(self, syssecuritytyp):
        """Sets the syssecuritytyp of this WellHeaderData.


        :param syssecuritytyp: The syssecuritytyp of this WellHeaderData.  # noqa: E501
        :type: str
        """

        self._syssecuritytyp = syssecuritytyp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellHeaderData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellHeaderData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
