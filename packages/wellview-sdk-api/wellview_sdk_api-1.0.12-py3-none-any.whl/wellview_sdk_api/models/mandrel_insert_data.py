# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MandrelInsertData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttmpull': 'datetime',
        'dttmrun': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'latchmaterial': 'str',
        'latchtyp': 'str',
        'make': 'str',
        'model': 'str',
        'orificematerial': 'str',
        'pressurfgaugeclose': 'float',
        'pressurfgaugeopen': 'float',
        'pullreason': 'str',
        'refid': 'str',
        'retrievemeth': 'str',
        'service': 'str',
        'sn': 'str',
        'szod': 'float',
        'szport': 'float',
        'temp': 'float',
        'tropull': 'float',
        'trorun': 'float',
        'valvematerial': 'str',
        'valvepacking': 'str',
        'valvetyp': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttmpull': 'dttmpull',
        'dttmrun': 'dttmrun',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'latchmaterial': 'latchmaterial',
        'latchtyp': 'latchtyp',
        'make': 'make',
        'model': 'model',
        'orificematerial': 'orificematerial',
        'pressurfgaugeclose': 'pressurfgaugeclose',
        'pressurfgaugeopen': 'pressurfgaugeopen',
        'pullreason': 'pullreason',
        'refid': 'refid',
        'retrievemeth': 'retrievemeth',
        'service': 'service',
        'sn': 'sn',
        'szod': 'szod',
        'szport': 'szport',
        'temp': 'temp',
        'tropull': 'tropull',
        'trorun': 'trorun',
        'valvematerial': 'valvematerial',
        'valvepacking': 'valvepacking',
        'valvetyp': 'valvetyp',
        'systag': 'systag'
    }

    def __init__(self, com=None, dttmpull=None, dttmrun=None, idrec=None, idrecparent=None, idwell=None, latchmaterial=None, latchtyp=None, make=None, model=None, orificematerial=None, pressurfgaugeclose=None, pressurfgaugeopen=None, pullreason=None, refid=None, retrievemeth=None, service=None, sn=None, szod=None, szport=None, temp=None, tropull=None, trorun=None, valvematerial=None, valvepacking=None, valvetyp=None, systag=None):  # noqa: E501
        """MandrelInsertData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttmpull = None
        self._dttmrun = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._latchmaterial = None
        self._latchtyp = None
        self._make = None
        self._model = None
        self._orificematerial = None
        self._pressurfgaugeclose = None
        self._pressurfgaugeopen = None
        self._pullreason = None
        self._refid = None
        self._retrievemeth = None
        self._service = None
        self._sn = None
        self._szod = None
        self._szport = None
        self._temp = None
        self._tropull = None
        self._trorun = None
        self._valvematerial = None
        self._valvepacking = None
        self._valvetyp = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttmpull is not None:
            self.dttmpull = dttmpull
        if dttmrun is not None:
            self.dttmrun = dttmrun
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if latchmaterial is not None:
            self.latchmaterial = latchmaterial
        if latchtyp is not None:
            self.latchtyp = latchtyp
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if orificematerial is not None:
            self.orificematerial = orificematerial
        if pressurfgaugeclose is not None:
            self.pressurfgaugeclose = pressurfgaugeclose
        if pressurfgaugeopen is not None:
            self.pressurfgaugeopen = pressurfgaugeopen
        if pullreason is not None:
            self.pullreason = pullreason
        if refid is not None:
            self.refid = refid
        if retrievemeth is not None:
            self.retrievemeth = retrievemeth
        if service is not None:
            self.service = service
        if sn is not None:
            self.sn = sn
        if szod is not None:
            self.szod = szod
        if szport is not None:
            self.szport = szport
        if temp is not None:
            self.temp = temp
        if tropull is not None:
            self.tropull = tropull
        if trorun is not None:
            self.trorun = trorun
        if valvematerial is not None:
            self.valvematerial = valvematerial
        if valvepacking is not None:
            self.valvepacking = valvepacking
        if valvetyp is not None:
            self.valvetyp = valvetyp
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this MandrelInsertData.  # noqa: E501


        :return: The com of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this MandrelInsertData.


        :param com: The com of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttmpull(self):
        """Gets the dttmpull of this MandrelInsertData.  # noqa: E501


        :return: The dttmpull of this MandrelInsertData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmpull

    @dttmpull.setter
    def dttmpull(self, dttmpull):
        """Sets the dttmpull of this MandrelInsertData.


        :param dttmpull: The dttmpull of this MandrelInsertData.  # noqa: E501
        :type: datetime
        """

        self._dttmpull = dttmpull

    @property
    def dttmrun(self):
        """Gets the dttmrun of this MandrelInsertData.  # noqa: E501


        :return: The dttmrun of this MandrelInsertData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrun

    @dttmrun.setter
    def dttmrun(self, dttmrun):
        """Sets the dttmrun of this MandrelInsertData.


        :param dttmrun: The dttmrun of this MandrelInsertData.  # noqa: E501
        :type: datetime
        """

        self._dttmrun = dttmrun

    @property
    def idrec(self):
        """Gets the idrec of this MandrelInsertData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this MandrelInsertData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this MandrelInsertData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this MandrelInsertData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this MandrelInsertData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this MandrelInsertData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this MandrelInsertData.

        id of well  # noqa: E501

        :param idwell: The idwell of this MandrelInsertData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def latchmaterial(self):
        """Gets the latchmaterial of this MandrelInsertData.  # noqa: E501


        :return: The latchmaterial of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._latchmaterial

    @latchmaterial.setter
    def latchmaterial(self, latchmaterial):
        """Sets the latchmaterial of this MandrelInsertData.


        :param latchmaterial: The latchmaterial of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._latchmaterial = latchmaterial

    @property
    def latchtyp(self):
        """Gets the latchtyp of this MandrelInsertData.  # noqa: E501


        :return: The latchtyp of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._latchtyp

    @latchtyp.setter
    def latchtyp(self, latchtyp):
        """Sets the latchtyp of this MandrelInsertData.


        :param latchtyp: The latchtyp of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._latchtyp = latchtyp

    @property
    def make(self):
        """Gets the make of this MandrelInsertData.  # noqa: E501


        :return: The make of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this MandrelInsertData.


        :param make: The make of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this MandrelInsertData.  # noqa: E501


        :return: The model of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this MandrelInsertData.


        :param model: The model of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def orificematerial(self):
        """Gets the orificematerial of this MandrelInsertData.  # noqa: E501


        :return: The orificematerial of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._orificematerial

    @orificematerial.setter
    def orificematerial(self, orificematerial):
        """Sets the orificematerial of this MandrelInsertData.


        :param orificematerial: The orificematerial of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._orificematerial = orificematerial

    @property
    def pressurfgaugeclose(self):
        """Gets the pressurfgaugeclose of this MandrelInsertData.  # noqa: E501


        :return: The pressurfgaugeclose of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._pressurfgaugeclose

    @pressurfgaugeclose.setter
    def pressurfgaugeclose(self, pressurfgaugeclose):
        """Sets the pressurfgaugeclose of this MandrelInsertData.


        :param pressurfgaugeclose: The pressurfgaugeclose of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._pressurfgaugeclose = pressurfgaugeclose

    @property
    def pressurfgaugeopen(self):
        """Gets the pressurfgaugeopen of this MandrelInsertData.  # noqa: E501


        :return: The pressurfgaugeopen of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._pressurfgaugeopen

    @pressurfgaugeopen.setter
    def pressurfgaugeopen(self, pressurfgaugeopen):
        """Sets the pressurfgaugeopen of this MandrelInsertData.


        :param pressurfgaugeopen: The pressurfgaugeopen of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._pressurfgaugeopen = pressurfgaugeopen

    @property
    def pullreason(self):
        """Gets the pullreason of this MandrelInsertData.  # noqa: E501


        :return: The pullreason of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._pullreason

    @pullreason.setter
    def pullreason(self, pullreason):
        """Sets the pullreason of this MandrelInsertData.


        :param pullreason: The pullreason of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._pullreason = pullreason

    @property
    def refid(self):
        """Gets the refid of this MandrelInsertData.  # noqa: E501


        :return: The refid of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this MandrelInsertData.


        :param refid: The refid of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def retrievemeth(self):
        """Gets the retrievemeth of this MandrelInsertData.  # noqa: E501


        :return: The retrievemeth of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._retrievemeth

    @retrievemeth.setter
    def retrievemeth(self, retrievemeth):
        """Sets the retrievemeth of this MandrelInsertData.


        :param retrievemeth: The retrievemeth of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._retrievemeth = retrievemeth

    @property
    def service(self):
        """Gets the service of this MandrelInsertData.  # noqa: E501


        :return: The service of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MandrelInsertData.


        :param service: The service of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def sn(self):
        """Gets the sn of this MandrelInsertData.  # noqa: E501


        :return: The sn of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this MandrelInsertData.


        :param sn: The sn of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def szod(self):
        """Gets the szod of this MandrelInsertData.  # noqa: E501


        :return: The szod of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._szod

    @szod.setter
    def szod(self, szod):
        """Sets the szod of this MandrelInsertData.


        :param szod: The szod of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._szod = szod

    @property
    def szport(self):
        """Gets the szport of this MandrelInsertData.  # noqa: E501


        :return: The szport of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._szport

    @szport.setter
    def szport(self, szport):
        """Sets the szport of this MandrelInsertData.


        :param szport: The szport of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._szport = szport

    @property
    def temp(self):
        """Gets the temp of this MandrelInsertData.  # noqa: E501


        :return: The temp of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this MandrelInsertData.


        :param temp: The temp of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def tropull(self):
        """Gets the tropull of this MandrelInsertData.  # noqa: E501


        :return: The tropull of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._tropull

    @tropull.setter
    def tropull(self, tropull):
        """Sets the tropull of this MandrelInsertData.


        :param tropull: The tropull of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._tropull = tropull

    @property
    def trorun(self):
        """Gets the trorun of this MandrelInsertData.  # noqa: E501


        :return: The trorun of this MandrelInsertData.  # noqa: E501
        :rtype: float
        """
        return self._trorun

    @trorun.setter
    def trorun(self, trorun):
        """Sets the trorun of this MandrelInsertData.


        :param trorun: The trorun of this MandrelInsertData.  # noqa: E501
        :type: float
        """

        self._trorun = trorun

    @property
    def valvematerial(self):
        """Gets the valvematerial of this MandrelInsertData.  # noqa: E501


        :return: The valvematerial of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._valvematerial

    @valvematerial.setter
    def valvematerial(self, valvematerial):
        """Sets the valvematerial of this MandrelInsertData.


        :param valvematerial: The valvematerial of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._valvematerial = valvematerial

    @property
    def valvepacking(self):
        """Gets the valvepacking of this MandrelInsertData.  # noqa: E501


        :return: The valvepacking of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._valvepacking

    @valvepacking.setter
    def valvepacking(self, valvepacking):
        """Sets the valvepacking of this MandrelInsertData.


        :param valvepacking: The valvepacking of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._valvepacking = valvepacking

    @property
    def valvetyp(self):
        """Gets the valvetyp of this MandrelInsertData.  # noqa: E501


        :return: The valvetyp of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._valvetyp

    @valvetyp.setter
    def valvetyp(self, valvetyp):
        """Sets the valvetyp of this MandrelInsertData.


        :param valvetyp: The valvetyp of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._valvetyp = valvetyp

    @property
    def systag(self):
        """Gets the systag of this MandrelInsertData.  # noqa: E501


        :return: The systag of this MandrelInsertData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this MandrelInsertData.


        :param systag: The systag of this MandrelInsertData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MandrelInsertData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MandrelInsertData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
