# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class STOPCardsAndJSAData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actiontyp': 'str',
        'com': 'str',
        'company': 'str',
        'companytyp': 'str',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'employeename': 'str',
        'employeetyp': 'str',
        'hazardida': 'str',
        'hazardidb': 'str',
        'hazardidc': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'norpt': 'int',
        'potentialseverity': 'str',
        'refno': 'str',
        'severity': 'str',
        'solution': 'str',
        'status': 'str',
        'tour': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actiontyp': 'actiontyp',
        'com': 'com',
        'company': 'company',
        'companytyp': 'companytyp',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'employeename': 'employeename',
        'employeetyp': 'employeetyp',
        'hazardida': 'hazardida',
        'hazardidb': 'hazardidb',
        'hazardidc': 'hazardidc',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'norpt': 'norpt',
        'potentialseverity': 'potentialseverity',
        'refno': 'refno',
        'severity': 'severity',
        'solution': 'solution',
        'status': 'status',
        'tour': 'tour',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, actiontyp=None, com=None, company=None, companytyp=None, des=None, dttmend=None, dttmstart=None, employeename=None, employeetyp=None, hazardida=None, hazardidb=None, hazardidc=None, idrec=None, idrecparent=None, idwell=None, norpt=None, potentialseverity=None, refno=None, severity=None, solution=None, status=None, tour=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """STOPCardsAndJSAData - a model defined in Swagger"""  # noqa: E501
        self._actiontyp = None
        self._com = None
        self._company = None
        self._companytyp = None
        self._des = None
        self._dttmend = None
        self._dttmstart = None
        self._employeename = None
        self._employeetyp = None
        self._hazardida = None
        self._hazardidb = None
        self._hazardidc = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._norpt = None
        self._potentialseverity = None
        self._refno = None
        self._severity = None
        self._solution = None
        self._status = None
        self._tour = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if actiontyp is not None:
            self.actiontyp = actiontyp
        if com is not None:
            self.com = com
        if company is not None:
            self.company = company
        if companytyp is not None:
            self.companytyp = companytyp
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if employeename is not None:
            self.employeename = employeename
        if employeetyp is not None:
            self.employeetyp = employeetyp
        if hazardida is not None:
            self.hazardida = hazardida
        if hazardidb is not None:
            self.hazardidb = hazardidb
        if hazardidc is not None:
            self.hazardidc = hazardidc
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if norpt is not None:
            self.norpt = norpt
        if potentialseverity is not None:
            self.potentialseverity = potentialseverity
        if refno is not None:
            self.refno = refno
        if severity is not None:
            self.severity = severity
        if solution is not None:
            self.solution = solution
        if status is not None:
            self.status = status
        if tour is not None:
            self.tour = tour
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def actiontyp(self):
        """Gets the actiontyp of this STOPCardsAndJSAData.  # noqa: E501


        :return: The actiontyp of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._actiontyp

    @actiontyp.setter
    def actiontyp(self, actiontyp):
        """Sets the actiontyp of this STOPCardsAndJSAData.


        :param actiontyp: The actiontyp of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._actiontyp = actiontyp

    @property
    def com(self):
        """Gets the com of this STOPCardsAndJSAData.  # noqa: E501


        :return: The com of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this STOPCardsAndJSAData.


        :param com: The com of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def company(self):
        """Gets the company of this STOPCardsAndJSAData.  # noqa: E501


        :return: The company of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this STOPCardsAndJSAData.


        :param company: The company of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def companytyp(self):
        """Gets the companytyp of this STOPCardsAndJSAData.  # noqa: E501


        :return: The companytyp of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._companytyp

    @companytyp.setter
    def companytyp(self, companytyp):
        """Sets the companytyp of this STOPCardsAndJSAData.


        :param companytyp: The companytyp of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._companytyp = companytyp

    @property
    def des(self):
        """Gets the des of this STOPCardsAndJSAData.  # noqa: E501


        :return: The des of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this STOPCardsAndJSAData.


        :param des: The des of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this STOPCardsAndJSAData.  # noqa: E501


        :return: The dttmend of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this STOPCardsAndJSAData.


        :param dttmend: The dttmend of this STOPCardsAndJSAData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this STOPCardsAndJSAData.  # noqa: E501


        :return: The dttmstart of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this STOPCardsAndJSAData.


        :param dttmstart: The dttmstart of this STOPCardsAndJSAData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def employeename(self):
        """Gets the employeename of this STOPCardsAndJSAData.  # noqa: E501


        :return: The employeename of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._employeename

    @employeename.setter
    def employeename(self, employeename):
        """Sets the employeename of this STOPCardsAndJSAData.


        :param employeename: The employeename of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._employeename = employeename

    @property
    def employeetyp(self):
        """Gets the employeetyp of this STOPCardsAndJSAData.  # noqa: E501


        :return: The employeetyp of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._employeetyp

    @employeetyp.setter
    def employeetyp(self, employeetyp):
        """Sets the employeetyp of this STOPCardsAndJSAData.


        :param employeetyp: The employeetyp of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._employeetyp = employeetyp

    @property
    def hazardida(self):
        """Gets the hazardida of this STOPCardsAndJSAData.  # noqa: E501


        :return: The hazardida of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._hazardida

    @hazardida.setter
    def hazardida(self, hazardida):
        """Sets the hazardida of this STOPCardsAndJSAData.


        :param hazardida: The hazardida of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._hazardida = hazardida

    @property
    def hazardidb(self):
        """Gets the hazardidb of this STOPCardsAndJSAData.  # noqa: E501


        :return: The hazardidb of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._hazardidb

    @hazardidb.setter
    def hazardidb(self, hazardidb):
        """Sets the hazardidb of this STOPCardsAndJSAData.


        :param hazardidb: The hazardidb of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._hazardidb = hazardidb

    @property
    def hazardidc(self):
        """Gets the hazardidc of this STOPCardsAndJSAData.  # noqa: E501


        :return: The hazardidc of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._hazardidc

    @hazardidc.setter
    def hazardidc(self, hazardidc):
        """Sets the hazardidc of this STOPCardsAndJSAData.


        :param hazardidc: The hazardidc of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._hazardidc = hazardidc

    @property
    def idrec(self):
        """Gets the idrec of this STOPCardsAndJSAData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this STOPCardsAndJSAData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this STOPCardsAndJSAData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this STOPCardsAndJSAData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this STOPCardsAndJSAData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this STOPCardsAndJSAData.

        id of well  # noqa: E501

        :param idwell: The idwell of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def norpt(self):
        """Gets the norpt of this STOPCardsAndJSAData.  # noqa: E501


        :return: The norpt of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: int
        """
        return self._norpt

    @norpt.setter
    def norpt(self, norpt):
        """Sets the norpt of this STOPCardsAndJSAData.


        :param norpt: The norpt of this STOPCardsAndJSAData.  # noqa: E501
        :type: int
        """

        self._norpt = norpt

    @property
    def potentialseverity(self):
        """Gets the potentialseverity of this STOPCardsAndJSAData.  # noqa: E501


        :return: The potentialseverity of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._potentialseverity

    @potentialseverity.setter
    def potentialseverity(self, potentialseverity):
        """Sets the potentialseverity of this STOPCardsAndJSAData.


        :param potentialseverity: The potentialseverity of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._potentialseverity = potentialseverity

    @property
    def refno(self):
        """Gets the refno of this STOPCardsAndJSAData.  # noqa: E501


        :return: The refno of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this STOPCardsAndJSAData.


        :param refno: The refno of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def severity(self):
        """Gets the severity of this STOPCardsAndJSAData.  # noqa: E501


        :return: The severity of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this STOPCardsAndJSAData.


        :param severity: The severity of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def solution(self):
        """Gets the solution of this STOPCardsAndJSAData.  # noqa: E501


        :return: The solution of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._solution

    @solution.setter
    def solution(self, solution):
        """Sets the solution of this STOPCardsAndJSAData.


        :param solution: The solution of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._solution = solution

    @property
    def status(self):
        """Gets the status of this STOPCardsAndJSAData.  # noqa: E501


        :return: The status of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this STOPCardsAndJSAData.


        :param status: The status of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tour(self):
        """Gets the tour of this STOPCardsAndJSAData.  # noqa: E501


        :return: The tour of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._tour

    @tour.setter
    def tour(self, tour):
        """Sets the tour of this STOPCardsAndJSAData.


        :param tour: The tour of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._tour = tour

    @property
    def typ1(self):
        """Gets the typ1 of this STOPCardsAndJSAData.  # noqa: E501


        :return: The typ1 of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this STOPCardsAndJSAData.


        :param typ1: The typ1 of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this STOPCardsAndJSAData.  # noqa: E501


        :return: The typ2 of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this STOPCardsAndJSAData.


        :param typ2: The typ2 of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this STOPCardsAndJSAData.  # noqa: E501


        :return: The systag of this STOPCardsAndJSAData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this STOPCardsAndJSAData.


        :param systag: The systag of this STOPCardsAndJSAData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(STOPCardsAndJSAData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, STOPCardsAndJSAData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
