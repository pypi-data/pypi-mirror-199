# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SensorDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connecttyp': 'str',
        'dttmlastcal': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lengthwire': 'float',
        'make': 'str',
        'model': 'str',
        'presaccuracy': 'float',
        'presmax': 'float',
        'purpose': 'str',
        'refid': 'str',
        'sn': 'str',
        'tempaccuracy': 'float',
        'tempmax': 'float',
        'typ': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'connecttyp': 'connecttyp',
        'dttmlastcal': 'dttmlastcal',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lengthwire': 'lengthwire',
        'make': 'make',
        'model': 'model',
        'presaccuracy': 'presaccuracy',
        'presmax': 'presmax',
        'purpose': 'purpose',
        'refid': 'refid',
        'sn': 'sn',
        'tempaccuracy': 'tempaccuracy',
        'tempmax': 'tempmax',
        'typ': 'typ',
        'systag': 'systag'
    }

    def __init__(self, connecttyp=None, dttmlastcal=None, idrec=None, idrecparent=None, idwell=None, lengthwire=None, make=None, model=None, presaccuracy=None, presmax=None, purpose=None, refid=None, sn=None, tempaccuracy=None, tempmax=None, typ=None, systag=None):  # noqa: E501
        """SensorDetailData - a model defined in Swagger"""  # noqa: E501
        self._connecttyp = None
        self._dttmlastcal = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lengthwire = None
        self._make = None
        self._model = None
        self._presaccuracy = None
        self._presmax = None
        self._purpose = None
        self._refid = None
        self._sn = None
        self._tempaccuracy = None
        self._tempmax = None
        self._typ = None
        self._systag = None
        self.discriminator = None
        if connecttyp is not None:
            self.connecttyp = connecttyp
        if dttmlastcal is not None:
            self.dttmlastcal = dttmlastcal
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if lengthwire is not None:
            self.lengthwire = lengthwire
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if presaccuracy is not None:
            self.presaccuracy = presaccuracy
        if presmax is not None:
            self.presmax = presmax
        if purpose is not None:
            self.purpose = purpose
        if refid is not None:
            self.refid = refid
        if sn is not None:
            self.sn = sn
        if tempaccuracy is not None:
            self.tempaccuracy = tempaccuracy
        if tempmax is not None:
            self.tempmax = tempmax
        if typ is not None:
            self.typ = typ
        if systag is not None:
            self.systag = systag

    @property
    def connecttyp(self):
        """Gets the connecttyp of this SensorDetailData.  # noqa: E501


        :return: The connecttyp of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._connecttyp

    @connecttyp.setter
    def connecttyp(self, connecttyp):
        """Sets the connecttyp of this SensorDetailData.


        :param connecttyp: The connecttyp of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._connecttyp = connecttyp

    @property
    def dttmlastcal(self):
        """Gets the dttmlastcal of this SensorDetailData.  # noqa: E501


        :return: The dttmlastcal of this SensorDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmlastcal

    @dttmlastcal.setter
    def dttmlastcal(self, dttmlastcal):
        """Sets the dttmlastcal of this SensorDetailData.


        :param dttmlastcal: The dttmlastcal of this SensorDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttmlastcal = dttmlastcal

    @property
    def idrec(self):
        """Gets the idrec of this SensorDetailData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SensorDetailData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this SensorDetailData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this SensorDetailData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this SensorDetailData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this SensorDetailData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SensorDetailData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SensorDetailData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lengthwire(self):
        """Gets the lengthwire of this SensorDetailData.  # noqa: E501


        :return: The lengthwire of this SensorDetailData.  # noqa: E501
        :rtype: float
        """
        return self._lengthwire

    @lengthwire.setter
    def lengthwire(self, lengthwire):
        """Sets the lengthwire of this SensorDetailData.


        :param lengthwire: The lengthwire of this SensorDetailData.  # noqa: E501
        :type: float
        """

        self._lengthwire = lengthwire

    @property
    def make(self):
        """Gets the make of this SensorDetailData.  # noqa: E501


        :return: The make of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this SensorDetailData.


        :param make: The make of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this SensorDetailData.  # noqa: E501


        :return: The model of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SensorDetailData.


        :param model: The model of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def presaccuracy(self):
        """Gets the presaccuracy of this SensorDetailData.  # noqa: E501


        :return: The presaccuracy of this SensorDetailData.  # noqa: E501
        :rtype: float
        """
        return self._presaccuracy

    @presaccuracy.setter
    def presaccuracy(self, presaccuracy):
        """Sets the presaccuracy of this SensorDetailData.


        :param presaccuracy: The presaccuracy of this SensorDetailData.  # noqa: E501
        :type: float
        """

        self._presaccuracy = presaccuracy

    @property
    def presmax(self):
        """Gets the presmax of this SensorDetailData.  # noqa: E501


        :return: The presmax of this SensorDetailData.  # noqa: E501
        :rtype: float
        """
        return self._presmax

    @presmax.setter
    def presmax(self, presmax):
        """Sets the presmax of this SensorDetailData.


        :param presmax: The presmax of this SensorDetailData.  # noqa: E501
        :type: float
        """

        self._presmax = presmax

    @property
    def purpose(self):
        """Gets the purpose of this SensorDetailData.  # noqa: E501


        :return: The purpose of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this SensorDetailData.


        :param purpose: The purpose of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def refid(self):
        """Gets the refid of this SensorDetailData.  # noqa: E501


        :return: The refid of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this SensorDetailData.


        :param refid: The refid of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def sn(self):
        """Gets the sn of this SensorDetailData.  # noqa: E501


        :return: The sn of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this SensorDetailData.


        :param sn: The sn of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def tempaccuracy(self):
        """Gets the tempaccuracy of this SensorDetailData.  # noqa: E501


        :return: The tempaccuracy of this SensorDetailData.  # noqa: E501
        :rtype: float
        """
        return self._tempaccuracy

    @tempaccuracy.setter
    def tempaccuracy(self, tempaccuracy):
        """Sets the tempaccuracy of this SensorDetailData.


        :param tempaccuracy: The tempaccuracy of this SensorDetailData.  # noqa: E501
        :type: float
        """

        self._tempaccuracy = tempaccuracy

    @property
    def tempmax(self):
        """Gets the tempmax of this SensorDetailData.  # noqa: E501


        :return: The tempmax of this SensorDetailData.  # noqa: E501
        :rtype: float
        """
        return self._tempmax

    @tempmax.setter
    def tempmax(self, tempmax):
        """Sets the tempmax of this SensorDetailData.


        :param tempmax: The tempmax of this SensorDetailData.  # noqa: E501
        :type: float
        """

        self._tempmax = tempmax

    @property
    def typ(self):
        """Gets the typ of this SensorDetailData.  # noqa: E501


        :return: The typ of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this SensorDetailData.


        :param typ: The typ of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def systag(self):
        """Gets the systag of this SensorDetailData.  # noqa: E501


        :return: The systag of this SensorDetailData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SensorDetailData.


        :param systag: The systag of this SensorDetailData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SensorDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
