# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actioncom': 'str',
        'actioncomplete': 'bool',
        'assigntodept': 'str',
        'assigntoemail': 'str',
        'assigntoname': 'str',
        'des': 'str',
        'dttmactionrqd': 'datetime',
        'dttmassigned': 'datetime',
        'dttmcomplete': 'datetime',
        'dttmrequest': 'datetime',
        'idrec': 'str',
        'idrecitem': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'priority': 'str',
        'requestbydept': 'str',
        'requestbyemail': 'str',
        'requestbyname': 'str',
        'requestcom': 'str',
        'status': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actioncom': 'actioncom',
        'actioncomplete': 'actioncomplete',
        'assigntodept': 'assigntodept',
        'assigntoemail': 'assigntoemail',
        'assigntoname': 'assigntoname',
        'des': 'des',
        'dttmactionrqd': 'dttmactionrqd',
        'dttmassigned': 'dttmassigned',
        'dttmcomplete': 'dttmcomplete',
        'dttmrequest': 'dttmrequest',
        'idrec': 'idrec',
        'idrecitem': 'idrecitem',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'priority': 'priority',
        'requestbydept': 'requestbydept',
        'requestbyemail': 'requestbyemail',
        'requestbyname': 'requestbyname',
        'requestcom': 'requestcom',
        'status': 'status',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'systag': 'systag'
    }

    def __init__(self, actioncom=None, actioncomplete=None, assigntodept=None, assigntoemail=None, assigntoname=None, des=None, dttmactionrqd=None, dttmassigned=None, dttmcomplete=None, dttmrequest=None, idrec=None, idrecitem=None, idrecparent=None, idwell=None, priority=None, requestbydept=None, requestbyemail=None, requestbyname=None, requestcom=None, status=None, typ1=None, typ2=None, usertxt1=None, usertxt2=None, systag=None):  # noqa: E501
        """TaskDetailData - a model defined in Swagger"""  # noqa: E501
        self._actioncom = None
        self._actioncomplete = None
        self._assigntodept = None
        self._assigntoemail = None
        self._assigntoname = None
        self._des = None
        self._dttmactionrqd = None
        self._dttmassigned = None
        self._dttmcomplete = None
        self._dttmrequest = None
        self._idrec = None
        self._idrecitem = None
        self._idrecparent = None
        self._idwell = None
        self._priority = None
        self._requestbydept = None
        self._requestbyemail = None
        self._requestbyname = None
        self._requestcom = None
        self._status = None
        self._typ1 = None
        self._typ2 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._systag = None
        self.discriminator = None
        if actioncom is not None:
            self.actioncom = actioncom
        if actioncomplete is not None:
            self.actioncomplete = actioncomplete
        if assigntodept is not None:
            self.assigntodept = assigntodept
        if assigntoemail is not None:
            self.assigntoemail = assigntoemail
        if assigntoname is not None:
            self.assigntoname = assigntoname
        if des is not None:
            self.des = des
        if dttmactionrqd is not None:
            self.dttmactionrqd = dttmactionrqd
        if dttmassigned is not None:
            self.dttmassigned = dttmassigned
        if dttmcomplete is not None:
            self.dttmcomplete = dttmcomplete
        if dttmrequest is not None:
            self.dttmrequest = dttmrequest
        if idrec is not None:
            self.idrec = idrec
        if idrecitem is not None:
            self.idrecitem = idrecitem
        self.idrecparent = idrecparent
        self.idwell = idwell
        if priority is not None:
            self.priority = priority
        if requestbydept is not None:
            self.requestbydept = requestbydept
        if requestbyemail is not None:
            self.requestbyemail = requestbyemail
        if requestbyname is not None:
            self.requestbyname = requestbyname
        if requestcom is not None:
            self.requestcom = requestcom
        if status is not None:
            self.status = status
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if systag is not None:
            self.systag = systag

    @property
    def actioncom(self):
        """Gets the actioncom of this TaskDetailData.  # noqa: E501


        :return: The actioncom of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._actioncom

    @actioncom.setter
    def actioncom(self, actioncom):
        """Sets the actioncom of this TaskDetailData.


        :param actioncom: The actioncom of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._actioncom = actioncom

    @property
    def actioncomplete(self):
        """Gets the actioncomplete of this TaskDetailData.  # noqa: E501


        :return: The actioncomplete of this TaskDetailData.  # noqa: E501
        :rtype: bool
        """
        return self._actioncomplete

    @actioncomplete.setter
    def actioncomplete(self, actioncomplete):
        """Sets the actioncomplete of this TaskDetailData.


        :param actioncomplete: The actioncomplete of this TaskDetailData.  # noqa: E501
        :type: bool
        """

        self._actioncomplete = actioncomplete

    @property
    def assigntodept(self):
        """Gets the assigntodept of this TaskDetailData.  # noqa: E501


        :return: The assigntodept of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._assigntodept

    @assigntodept.setter
    def assigntodept(self, assigntodept):
        """Sets the assigntodept of this TaskDetailData.


        :param assigntodept: The assigntodept of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._assigntodept = assigntodept

    @property
    def assigntoemail(self):
        """Gets the assigntoemail of this TaskDetailData.  # noqa: E501


        :return: The assigntoemail of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._assigntoemail

    @assigntoemail.setter
    def assigntoemail(self, assigntoemail):
        """Sets the assigntoemail of this TaskDetailData.


        :param assigntoemail: The assigntoemail of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._assigntoemail = assigntoemail

    @property
    def assigntoname(self):
        """Gets the assigntoname of this TaskDetailData.  # noqa: E501


        :return: The assigntoname of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._assigntoname

    @assigntoname.setter
    def assigntoname(self, assigntoname):
        """Sets the assigntoname of this TaskDetailData.


        :param assigntoname: The assigntoname of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._assigntoname = assigntoname

    @property
    def des(self):
        """Gets the des of this TaskDetailData.  # noqa: E501


        :return: The des of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this TaskDetailData.


        :param des: The des of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmactionrqd(self):
        """Gets the dttmactionrqd of this TaskDetailData.  # noqa: E501


        :return: The dttmactionrqd of this TaskDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmactionrqd

    @dttmactionrqd.setter
    def dttmactionrqd(self, dttmactionrqd):
        """Sets the dttmactionrqd of this TaskDetailData.


        :param dttmactionrqd: The dttmactionrqd of this TaskDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttmactionrqd = dttmactionrqd

    @property
    def dttmassigned(self):
        """Gets the dttmassigned of this TaskDetailData.  # noqa: E501


        :return: The dttmassigned of this TaskDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmassigned

    @dttmassigned.setter
    def dttmassigned(self, dttmassigned):
        """Sets the dttmassigned of this TaskDetailData.


        :param dttmassigned: The dttmassigned of this TaskDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttmassigned = dttmassigned

    @property
    def dttmcomplete(self):
        """Gets the dttmcomplete of this TaskDetailData.  # noqa: E501


        :return: The dttmcomplete of this TaskDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmcomplete

    @dttmcomplete.setter
    def dttmcomplete(self, dttmcomplete):
        """Sets the dttmcomplete of this TaskDetailData.


        :param dttmcomplete: The dttmcomplete of this TaskDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttmcomplete = dttmcomplete

    @property
    def dttmrequest(self):
        """Gets the dttmrequest of this TaskDetailData.  # noqa: E501


        :return: The dttmrequest of this TaskDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmrequest

    @dttmrequest.setter
    def dttmrequest(self, dttmrequest):
        """Sets the dttmrequest of this TaskDetailData.


        :param dttmrequest: The dttmrequest of this TaskDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttmrequest = dttmrequest

    @property
    def idrec(self):
        """Gets the idrec of this TaskDetailData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this TaskDetailData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecitem(self):
        """Gets the idrecitem of this TaskDetailData.  # noqa: E501


        :return: The idrecitem of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecitem

    @idrecitem.setter
    def idrecitem(self, idrecitem):
        """Sets the idrecitem of this TaskDetailData.


        :param idrecitem: The idrecitem of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._idrecitem = idrecitem

    @property
    def idrecparent(self):
        """Gets the idrecparent of this TaskDetailData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this TaskDetailData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this TaskDetailData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this TaskDetailData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this TaskDetailData.

        id of well  # noqa: E501

        :param idwell: The idwell of this TaskDetailData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def priority(self):
        """Gets the priority of this TaskDetailData.  # noqa: E501


        :return: The priority of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskDetailData.


        :param priority: The priority of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def requestbydept(self):
        """Gets the requestbydept of this TaskDetailData.  # noqa: E501


        :return: The requestbydept of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._requestbydept

    @requestbydept.setter
    def requestbydept(self, requestbydept):
        """Sets the requestbydept of this TaskDetailData.


        :param requestbydept: The requestbydept of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._requestbydept = requestbydept

    @property
    def requestbyemail(self):
        """Gets the requestbyemail of this TaskDetailData.  # noqa: E501


        :return: The requestbyemail of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._requestbyemail

    @requestbyemail.setter
    def requestbyemail(self, requestbyemail):
        """Sets the requestbyemail of this TaskDetailData.


        :param requestbyemail: The requestbyemail of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._requestbyemail = requestbyemail

    @property
    def requestbyname(self):
        """Gets the requestbyname of this TaskDetailData.  # noqa: E501


        :return: The requestbyname of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._requestbyname

    @requestbyname.setter
    def requestbyname(self, requestbyname):
        """Sets the requestbyname of this TaskDetailData.


        :param requestbyname: The requestbyname of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._requestbyname = requestbyname

    @property
    def requestcom(self):
        """Gets the requestcom of this TaskDetailData.  # noqa: E501


        :return: The requestcom of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._requestcom

    @requestcom.setter
    def requestcom(self, requestcom):
        """Sets the requestcom of this TaskDetailData.


        :param requestcom: The requestcom of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._requestcom = requestcom

    @property
    def status(self):
        """Gets the status of this TaskDetailData.  # noqa: E501


        :return: The status of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskDetailData.


        :param status: The status of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def typ1(self):
        """Gets the typ1 of this TaskDetailData.  # noqa: E501


        :return: The typ1 of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this TaskDetailData.


        :param typ1: The typ1 of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this TaskDetailData.  # noqa: E501


        :return: The typ2 of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this TaskDetailData.


        :param typ2: The typ2 of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this TaskDetailData.  # noqa: E501


        :return: The usertxt1 of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this TaskDetailData.


        :param usertxt1: The usertxt1 of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this TaskDetailData.  # noqa: E501


        :return: The usertxt2 of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this TaskDetailData.


        :param usertxt2: The usertxt2 of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def systag(self):
        """Gets the systag of this TaskDetailData.  # noqa: E501


        :return: The systag of this TaskDetailData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this TaskDetailData.


        :param systag: The systag of this TaskDetailData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
