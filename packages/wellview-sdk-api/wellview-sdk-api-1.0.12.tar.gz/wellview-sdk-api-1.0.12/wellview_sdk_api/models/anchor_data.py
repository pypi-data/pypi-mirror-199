# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnchorData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchordes': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'length': 'float',
        'note': 'str',
        'syscarryfwdp': 'bool',
        'tensionavg': 'float',
        'tensionmax': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'anchordes': 'anchordes',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'length': 'length',
        'note': 'note',
        'syscarryfwdp': 'syscarryfwdp',
        'tensionavg': 'tensionavg',
        'tensionmax': 'tensionmax',
        'systag': 'systag'
    }

    def __init__(self, anchordes=None, idrec=None, idrecparent=None, idwell=None, length=None, note=None, syscarryfwdp=None, tensionavg=None, tensionmax=None, systag=None):  # noqa: E501
        """AnchorData - a model defined in Swagger"""  # noqa: E501
        self._anchordes = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._length = None
        self._note = None
        self._syscarryfwdp = None
        self._tensionavg = None
        self._tensionmax = None
        self._systag = None
        self.discriminator = None
        if anchordes is not None:
            self.anchordes = anchordes
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if length is not None:
            self.length = length
        if note is not None:
            self.note = note
        if syscarryfwdp is not None:
            self.syscarryfwdp = syscarryfwdp
        if tensionavg is not None:
            self.tensionavg = tensionavg
        if tensionmax is not None:
            self.tensionmax = tensionmax
        if systag is not None:
            self.systag = systag

    @property
    def anchordes(self):
        """Gets the anchordes of this AnchorData.  # noqa: E501


        :return: The anchordes of this AnchorData.  # noqa: E501
        :rtype: str
        """
        return self._anchordes

    @anchordes.setter
    def anchordes(self, anchordes):
        """Sets the anchordes of this AnchorData.


        :param anchordes: The anchordes of this AnchorData.  # noqa: E501
        :type: str
        """

        self._anchordes = anchordes

    @property
    def idrec(self):
        """Gets the idrec of this AnchorData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this AnchorData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this AnchorData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this AnchorData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this AnchorData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this AnchorData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this AnchorData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this AnchorData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this AnchorData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this AnchorData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this AnchorData.

        id of well  # noqa: E501

        :param idwell: The idwell of this AnchorData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def length(self):
        """Gets the length of this AnchorData.  # noqa: E501


        :return: The length of this AnchorData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this AnchorData.


        :param length: The length of this AnchorData.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def note(self):
        """Gets the note of this AnchorData.  # noqa: E501


        :return: The note of this AnchorData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AnchorData.


        :param note: The note of this AnchorData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def syscarryfwdp(self):
        """Gets the syscarryfwdp of this AnchorData.  # noqa: E501


        :return: The syscarryfwdp of this AnchorData.  # noqa: E501
        :rtype: bool
        """
        return self._syscarryfwdp

    @syscarryfwdp.setter
    def syscarryfwdp(self, syscarryfwdp):
        """Sets the syscarryfwdp of this AnchorData.


        :param syscarryfwdp: The syscarryfwdp of this AnchorData.  # noqa: E501
        :type: bool
        """

        self._syscarryfwdp = syscarryfwdp

    @property
    def tensionavg(self):
        """Gets the tensionavg of this AnchorData.  # noqa: E501


        :return: The tensionavg of this AnchorData.  # noqa: E501
        :rtype: float
        """
        return self._tensionavg

    @tensionavg.setter
    def tensionavg(self, tensionavg):
        """Sets the tensionavg of this AnchorData.


        :param tensionavg: The tensionavg of this AnchorData.  # noqa: E501
        :type: float
        """

        self._tensionavg = tensionavg

    @property
    def tensionmax(self):
        """Gets the tensionmax of this AnchorData.  # noqa: E501


        :return: The tensionmax of this AnchorData.  # noqa: E501
        :rtype: float
        """
        return self._tensionmax

    @tensionmax.setter
    def tensionmax(self, tensionmax):
        """Sets the tensionmax of this AnchorData.


        :param tensionmax: The tensionmax of this AnchorData.  # noqa: E501
        :type: float
        """

        self._tensionmax = tensionmax

    @property
    def systag(self):
        """Gets the systag of this AnchorData.  # noqa: E501


        :return: The systag of this AnchorData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this AnchorData.


        :param systag: The systag of this AnchorData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnchorData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnchorData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
