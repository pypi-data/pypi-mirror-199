# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SafetyIncidentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affectonline': 'str',
        'category': 'str',
        'cause': 'str',
        'com': 'str',
        'des': 'str',
        'dttm': 'datetime',
        'estcost': 'float',
        'idrec': 'str',
        'idrecjobcontact': 'str',
        'idrecjobservicecontract': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'incidentid1': 'str',
        'incidentid2': 'str',
        'incidentid3': 'str',
        'losttime': 'bool',
        'opsfunction': 'str',
        'potentialseverity': 'str',
        'reportable': 'bool',
        'reportedby': 'str',
        'severity': 'str',
        'tour': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'userboolean1': 'bool',
        'userboolean2': 'bool',
        'userboolean3': 'bool',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'witness': 'str',
        'witnesscontact': 'str',
        'witnesstyp': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'affectonline': 'affectonline',
        'category': 'category',
        'cause': 'cause',
        'com': 'com',
        'des': 'des',
        'dttm': 'dttm',
        'estcost': 'estcost',
        'idrec': 'idrec',
        'idrecjobcontact': 'idrecjobcontact',
        'idrecjobservicecontract': 'idrecjobservicecontract',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'incidentid1': 'incidentid1',
        'incidentid2': 'incidentid2',
        'incidentid3': 'incidentid3',
        'losttime': 'losttime',
        'opsfunction': 'opsfunction',
        'potentialseverity': 'potentialseverity',
        'reportable': 'reportable',
        'reportedby': 'reportedby',
        'severity': 'severity',
        'tour': 'tour',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'userboolean1': 'userboolean1',
        'userboolean2': 'userboolean2',
        'userboolean3': 'userboolean3',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'witness': 'witness',
        'witnesscontact': 'witnesscontact',
        'witnesstyp': 'witnesstyp',
        'systag': 'systag'
    }

    def __init__(self, affectonline=None, category=None, cause=None, com=None, des=None, dttm=None, estcost=None, idrec=None, idrecjobcontact=None, idrecjobservicecontract=None, idrecparent=None, idwell=None, incidentid1=None, incidentid2=None, incidentid3=None, losttime=None, opsfunction=None, potentialseverity=None, reportable=None, reportedby=None, severity=None, tour=None, typ1=None, typ2=None, userboolean1=None, userboolean2=None, userboolean3=None, usernum1=None, usernum2=None, usernum3=None, usertxt1=None, usertxt2=None, usertxt3=None, witness=None, witnesscontact=None, witnesstyp=None, systag=None):  # noqa: E501
        """SafetyIncidentData - a model defined in Swagger"""  # noqa: E501
        self._affectonline = None
        self._category = None
        self._cause = None
        self._com = None
        self._des = None
        self._dttm = None
        self._estcost = None
        self._idrec = None
        self._idrecjobcontact = None
        self._idrecjobservicecontract = None
        self._idrecparent = None
        self._idwell = None
        self._incidentid1 = None
        self._incidentid2 = None
        self._incidentid3 = None
        self._losttime = None
        self._opsfunction = None
        self._potentialseverity = None
        self._reportable = None
        self._reportedby = None
        self._severity = None
        self._tour = None
        self._typ1 = None
        self._typ2 = None
        self._userboolean1 = None
        self._userboolean2 = None
        self._userboolean3 = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._witness = None
        self._witnesscontact = None
        self._witnesstyp = None
        self._systag = None
        self.discriminator = None
        if affectonline is not None:
            self.affectonline = affectonline
        if category is not None:
            self.category = category
        if cause is not None:
            self.cause = cause
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if estcost is not None:
            self.estcost = estcost
        if idrec is not None:
            self.idrec = idrec
        if idrecjobcontact is not None:
            self.idrecjobcontact = idrecjobcontact
        if idrecjobservicecontract is not None:
            self.idrecjobservicecontract = idrecjobservicecontract
        self.idrecparent = idrecparent
        self.idwell = idwell
        if incidentid1 is not None:
            self.incidentid1 = incidentid1
        if incidentid2 is not None:
            self.incidentid2 = incidentid2
        if incidentid3 is not None:
            self.incidentid3 = incidentid3
        if losttime is not None:
            self.losttime = losttime
        if opsfunction is not None:
            self.opsfunction = opsfunction
        if potentialseverity is not None:
            self.potentialseverity = potentialseverity
        if reportable is not None:
            self.reportable = reportable
        if reportedby is not None:
            self.reportedby = reportedby
        if severity is not None:
            self.severity = severity
        if tour is not None:
            self.tour = tour
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if userboolean1 is not None:
            self.userboolean1 = userboolean1
        if userboolean2 is not None:
            self.userboolean2 = userboolean2
        if userboolean3 is not None:
            self.userboolean3 = userboolean3
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if witness is not None:
            self.witness = witness
        if witnesscontact is not None:
            self.witnesscontact = witnesscontact
        if witnesstyp is not None:
            self.witnesstyp = witnesstyp
        if systag is not None:
            self.systag = systag

    @property
    def affectonline(self):
        """Gets the affectonline of this SafetyIncidentData.  # noqa: E501


        :return: The affectonline of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._affectonline

    @affectonline.setter
    def affectonline(self, affectonline):
        """Sets the affectonline of this SafetyIncidentData.


        :param affectonline: The affectonline of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._affectonline = affectonline

    @property
    def category(self):
        """Gets the category of this SafetyIncidentData.  # noqa: E501


        :return: The category of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SafetyIncidentData.


        :param category: The category of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def cause(self):
        """Gets the cause of this SafetyIncidentData.  # noqa: E501


        :return: The cause of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this SafetyIncidentData.


        :param cause: The cause of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def com(self):
        """Gets the com of this SafetyIncidentData.  # noqa: E501


        :return: The com of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SafetyIncidentData.


        :param com: The com of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this SafetyIncidentData.  # noqa: E501


        :return: The des of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this SafetyIncidentData.


        :param des: The des of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this SafetyIncidentData.  # noqa: E501


        :return: The dttm of this SafetyIncidentData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this SafetyIncidentData.


        :param dttm: The dttm of this SafetyIncidentData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def estcost(self):
        """Gets the estcost of this SafetyIncidentData.  # noqa: E501


        :return: The estcost of this SafetyIncidentData.  # noqa: E501
        :rtype: float
        """
        return self._estcost

    @estcost.setter
    def estcost(self, estcost):
        """Sets the estcost of this SafetyIncidentData.


        :param estcost: The estcost of this SafetyIncidentData.  # noqa: E501
        :type: float
        """

        self._estcost = estcost

    @property
    def idrec(self):
        """Gets the idrec of this SafetyIncidentData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SafetyIncidentData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjobcontact(self):
        """Gets the idrecjobcontact of this SafetyIncidentData.  # noqa: E501


        :return: The idrecjobcontact of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobcontact

    @idrecjobcontact.setter
    def idrecjobcontact(self, idrecjobcontact):
        """Sets the idrecjobcontact of this SafetyIncidentData.


        :param idrecjobcontact: The idrecjobcontact of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._idrecjobcontact = idrecjobcontact

    @property
    def idrecjobservicecontract(self):
        """Gets the idrecjobservicecontract of this SafetyIncidentData.  # noqa: E501


        :return: The idrecjobservicecontract of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjobservicecontract

    @idrecjobservicecontract.setter
    def idrecjobservicecontract(self, idrecjobservicecontract):
        """Sets the idrecjobservicecontract of this SafetyIncidentData.


        :param idrecjobservicecontract: The idrecjobservicecontract of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._idrecjobservicecontract = idrecjobservicecontract

    @property
    def idrecparent(self):
        """Gets the idrecparent of this SafetyIncidentData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this SafetyIncidentData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this SafetyIncidentData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this SafetyIncidentData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SafetyIncidentData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SafetyIncidentData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def incidentid1(self):
        """Gets the incidentid1 of this SafetyIncidentData.  # noqa: E501


        :return: The incidentid1 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._incidentid1

    @incidentid1.setter
    def incidentid1(self, incidentid1):
        """Sets the incidentid1 of this SafetyIncidentData.


        :param incidentid1: The incidentid1 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._incidentid1 = incidentid1

    @property
    def incidentid2(self):
        """Gets the incidentid2 of this SafetyIncidentData.  # noqa: E501


        :return: The incidentid2 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._incidentid2

    @incidentid2.setter
    def incidentid2(self, incidentid2):
        """Sets the incidentid2 of this SafetyIncidentData.


        :param incidentid2: The incidentid2 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._incidentid2 = incidentid2

    @property
    def incidentid3(self):
        """Gets the incidentid3 of this SafetyIncidentData.  # noqa: E501


        :return: The incidentid3 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._incidentid3

    @incidentid3.setter
    def incidentid3(self, incidentid3):
        """Sets the incidentid3 of this SafetyIncidentData.


        :param incidentid3: The incidentid3 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._incidentid3 = incidentid3

    @property
    def losttime(self):
        """Gets the losttime of this SafetyIncidentData.  # noqa: E501


        :return: The losttime of this SafetyIncidentData.  # noqa: E501
        :rtype: bool
        """
        return self._losttime

    @losttime.setter
    def losttime(self, losttime):
        """Sets the losttime of this SafetyIncidentData.


        :param losttime: The losttime of this SafetyIncidentData.  # noqa: E501
        :type: bool
        """

        self._losttime = losttime

    @property
    def opsfunction(self):
        """Gets the opsfunction of this SafetyIncidentData.  # noqa: E501


        :return: The opsfunction of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._opsfunction

    @opsfunction.setter
    def opsfunction(self, opsfunction):
        """Sets the opsfunction of this SafetyIncidentData.


        :param opsfunction: The opsfunction of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._opsfunction = opsfunction

    @property
    def potentialseverity(self):
        """Gets the potentialseverity of this SafetyIncidentData.  # noqa: E501


        :return: The potentialseverity of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._potentialseverity

    @potentialseverity.setter
    def potentialseverity(self, potentialseverity):
        """Sets the potentialseverity of this SafetyIncidentData.


        :param potentialseverity: The potentialseverity of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._potentialseverity = potentialseverity

    @property
    def reportable(self):
        """Gets the reportable of this SafetyIncidentData.  # noqa: E501


        :return: The reportable of this SafetyIncidentData.  # noqa: E501
        :rtype: bool
        """
        return self._reportable

    @reportable.setter
    def reportable(self, reportable):
        """Sets the reportable of this SafetyIncidentData.


        :param reportable: The reportable of this SafetyIncidentData.  # noqa: E501
        :type: bool
        """

        self._reportable = reportable

    @property
    def reportedby(self):
        """Gets the reportedby of this SafetyIncidentData.  # noqa: E501


        :return: The reportedby of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._reportedby

    @reportedby.setter
    def reportedby(self, reportedby):
        """Sets the reportedby of this SafetyIncidentData.


        :param reportedby: The reportedby of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._reportedby = reportedby

    @property
    def severity(self):
        """Gets the severity of this SafetyIncidentData.  # noqa: E501


        :return: The severity of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this SafetyIncidentData.


        :param severity: The severity of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def tour(self):
        """Gets the tour of this SafetyIncidentData.  # noqa: E501


        :return: The tour of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._tour

    @tour.setter
    def tour(self, tour):
        """Sets the tour of this SafetyIncidentData.


        :param tour: The tour of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._tour = tour

    @property
    def typ1(self):
        """Gets the typ1 of this SafetyIncidentData.  # noqa: E501


        :return: The typ1 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this SafetyIncidentData.


        :param typ1: The typ1 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this SafetyIncidentData.  # noqa: E501


        :return: The typ2 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this SafetyIncidentData.


        :param typ2: The typ2 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def userboolean1(self):
        """Gets the userboolean1 of this SafetyIncidentData.  # noqa: E501


        :return: The userboolean1 of this SafetyIncidentData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean1

    @userboolean1.setter
    def userboolean1(self, userboolean1):
        """Sets the userboolean1 of this SafetyIncidentData.


        :param userboolean1: The userboolean1 of this SafetyIncidentData.  # noqa: E501
        :type: bool
        """

        self._userboolean1 = userboolean1

    @property
    def userboolean2(self):
        """Gets the userboolean2 of this SafetyIncidentData.  # noqa: E501


        :return: The userboolean2 of this SafetyIncidentData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean2

    @userboolean2.setter
    def userboolean2(self, userboolean2):
        """Sets the userboolean2 of this SafetyIncidentData.


        :param userboolean2: The userboolean2 of this SafetyIncidentData.  # noqa: E501
        :type: bool
        """

        self._userboolean2 = userboolean2

    @property
    def userboolean3(self):
        """Gets the userboolean3 of this SafetyIncidentData.  # noqa: E501


        :return: The userboolean3 of this SafetyIncidentData.  # noqa: E501
        :rtype: bool
        """
        return self._userboolean3

    @userboolean3.setter
    def userboolean3(self, userboolean3):
        """Sets the userboolean3 of this SafetyIncidentData.


        :param userboolean3: The userboolean3 of this SafetyIncidentData.  # noqa: E501
        :type: bool
        """

        self._userboolean3 = userboolean3

    @property
    def usernum1(self):
        """Gets the usernum1 of this SafetyIncidentData.  # noqa: E501


        :return: The usernum1 of this SafetyIncidentData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this SafetyIncidentData.


        :param usernum1: The usernum1 of this SafetyIncidentData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this SafetyIncidentData.  # noqa: E501


        :return: The usernum2 of this SafetyIncidentData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this SafetyIncidentData.


        :param usernum2: The usernum2 of this SafetyIncidentData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this SafetyIncidentData.  # noqa: E501


        :return: The usernum3 of this SafetyIncidentData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this SafetyIncidentData.


        :param usernum3: The usernum3 of this SafetyIncidentData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this SafetyIncidentData.  # noqa: E501


        :return: The usertxt1 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this SafetyIncidentData.


        :param usertxt1: The usertxt1 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this SafetyIncidentData.  # noqa: E501


        :return: The usertxt2 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this SafetyIncidentData.


        :param usertxt2: The usertxt2 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this SafetyIncidentData.  # noqa: E501


        :return: The usertxt3 of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this SafetyIncidentData.


        :param usertxt3: The usertxt3 of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def witness(self):
        """Gets the witness of this SafetyIncidentData.  # noqa: E501


        :return: The witness of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._witness

    @witness.setter
    def witness(self, witness):
        """Sets the witness of this SafetyIncidentData.


        :param witness: The witness of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._witness = witness

    @property
    def witnesscontact(self):
        """Gets the witnesscontact of this SafetyIncidentData.  # noqa: E501


        :return: The witnesscontact of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._witnesscontact

    @witnesscontact.setter
    def witnesscontact(self, witnesscontact):
        """Sets the witnesscontact of this SafetyIncidentData.


        :param witnesscontact: The witnesscontact of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._witnesscontact = witnesscontact

    @property
    def witnesstyp(self):
        """Gets the witnesstyp of this SafetyIncidentData.  # noqa: E501


        :return: The witnesstyp of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._witnesstyp

    @witnesstyp.setter
    def witnesstyp(self, witnesstyp):
        """Sets the witnesstyp of this SafetyIncidentData.


        :param witnesstyp: The witnesstyp of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._witnesstyp = witnesstyp

    @property
    def systag(self):
        """Gets the systag of this SafetyIncidentData.  # noqa: E501


        :return: The systag of this SafetyIncidentData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SafetyIncidentData.


        :param systag: The systag of this SafetyIncidentData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SafetyIncidentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SafetyIncidentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
