# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SSSVTestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'correctactrqd': 'bool',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecitem': 'str',
        'idrecjob': 'str',
        'idwell': 'str',
        'presctrlln': 'float',
        'presctrllnbldup': 'float',
        'presctrllnbleeddwn': 'float',
        'presmaxdiff': 'float',
        'prestubingbldup': 'float',
        'prestubingbleeddwn': 'float',
        'preswhsensortrip': 'float',
        'rateleakoff': 'float',
        'tmctrllnbldup': 'float',
        'tmtubingbldup': 'float',
        'volvoid': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'correctactrqd': 'correctactrqd',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecitem': 'idrecitem',
        'idrecjob': 'idrecjob',
        'idwell': 'idwell',
        'presctrlln': 'presctrlln',
        'presctrllnbldup': 'presctrllnbldup',
        'presctrllnbleeddwn': 'presctrllnbleeddwn',
        'presmaxdiff': 'presmaxdiff',
        'prestubingbldup': 'prestubingbldup',
        'prestubingbleeddwn': 'prestubingbleeddwn',
        'preswhsensortrip': 'preswhsensortrip',
        'rateleakoff': 'rateleakoff',
        'tmctrllnbldup': 'tmctrllnbldup',
        'tmtubingbldup': 'tmtubingbldup',
        'volvoid': 'volvoid',
        'systag': 'systag'
    }

    def __init__(self, com=None, correctactrqd=None, dttm=None, idrec=None, idrecitem=None, idrecjob=None, idwell=None, presctrlln=None, presctrllnbldup=None, presctrllnbleeddwn=None, presmaxdiff=None, prestubingbldup=None, prestubingbleeddwn=None, preswhsensortrip=None, rateleakoff=None, tmctrllnbldup=None, tmtubingbldup=None, volvoid=None, systag=None):  # noqa: E501
        """SSSVTestData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._correctactrqd = None
        self._dttm = None
        self._idrec = None
        self._idrecitem = None
        self._idrecjob = None
        self._idwell = None
        self._presctrlln = None
        self._presctrllnbldup = None
        self._presctrllnbleeddwn = None
        self._presmaxdiff = None
        self._prestubingbldup = None
        self._prestubingbleeddwn = None
        self._preswhsensortrip = None
        self._rateleakoff = None
        self._tmctrllnbldup = None
        self._tmtubingbldup = None
        self._volvoid = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if correctactrqd is not None:
            self.correctactrqd = correctactrqd
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecitem is not None:
            self.idrecitem = idrecitem
        if idrecjob is not None:
            self.idrecjob = idrecjob
        self.idwell = idwell
        if presctrlln is not None:
            self.presctrlln = presctrlln
        if presctrllnbldup is not None:
            self.presctrllnbldup = presctrllnbldup
        if presctrllnbleeddwn is not None:
            self.presctrllnbleeddwn = presctrllnbleeddwn
        if presmaxdiff is not None:
            self.presmaxdiff = presmaxdiff
        if prestubingbldup is not None:
            self.prestubingbldup = prestubingbldup
        if prestubingbleeddwn is not None:
            self.prestubingbleeddwn = prestubingbleeddwn
        if preswhsensortrip is not None:
            self.preswhsensortrip = preswhsensortrip
        if rateleakoff is not None:
            self.rateleakoff = rateleakoff
        if tmctrllnbldup is not None:
            self.tmctrllnbldup = tmctrllnbldup
        if tmtubingbldup is not None:
            self.tmtubingbldup = tmtubingbldup
        if volvoid is not None:
            self.volvoid = volvoid
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this SSSVTestData.  # noqa: E501


        :return: The com of this SSSVTestData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this SSSVTestData.


        :param com: The com of this SSSVTestData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def correctactrqd(self):
        """Gets the correctactrqd of this SSSVTestData.  # noqa: E501


        :return: The correctactrqd of this SSSVTestData.  # noqa: E501
        :rtype: bool
        """
        return self._correctactrqd

    @correctactrqd.setter
    def correctactrqd(self, correctactrqd):
        """Sets the correctactrqd of this SSSVTestData.


        :param correctactrqd: The correctactrqd of this SSSVTestData.  # noqa: E501
        :type: bool
        """

        self._correctactrqd = correctactrqd

    @property
    def dttm(self):
        """Gets the dttm of this SSSVTestData.  # noqa: E501


        :return: The dttm of this SSSVTestData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this SSSVTestData.


        :param dttm: The dttm of this SSSVTestData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this SSSVTestData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this SSSVTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this SSSVTestData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this SSSVTestData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecitem(self):
        """Gets the idrecitem of this SSSVTestData.  # noqa: E501


        :return: The idrecitem of this SSSVTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecitem

    @idrecitem.setter
    def idrecitem(self, idrecitem):
        """Sets the idrecitem of this SSSVTestData.


        :param idrecitem: The idrecitem of this SSSVTestData.  # noqa: E501
        :type: str
        """

        self._idrecitem = idrecitem

    @property
    def idrecjob(self):
        """Gets the idrecjob of this SSSVTestData.  # noqa: E501


        :return: The idrecjob of this SSSVTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this SSSVTestData.


        :param idrecjob: The idrecjob of this SSSVTestData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idwell(self):
        """Gets the idwell of this SSSVTestData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this SSSVTestData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this SSSVTestData.

        id of well  # noqa: E501

        :param idwell: The idwell of this SSSVTestData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def presctrlln(self):
        """Gets the presctrlln of this SSSVTestData.  # noqa: E501


        :return: The presctrlln of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._presctrlln

    @presctrlln.setter
    def presctrlln(self, presctrlln):
        """Sets the presctrlln of this SSSVTestData.


        :param presctrlln: The presctrlln of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._presctrlln = presctrlln

    @property
    def presctrllnbldup(self):
        """Gets the presctrllnbldup of this SSSVTestData.  # noqa: E501


        :return: The presctrllnbldup of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._presctrllnbldup

    @presctrllnbldup.setter
    def presctrllnbldup(self, presctrllnbldup):
        """Sets the presctrllnbldup of this SSSVTestData.


        :param presctrllnbldup: The presctrllnbldup of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._presctrllnbldup = presctrllnbldup

    @property
    def presctrllnbleeddwn(self):
        """Gets the presctrllnbleeddwn of this SSSVTestData.  # noqa: E501


        :return: The presctrllnbleeddwn of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._presctrllnbleeddwn

    @presctrllnbleeddwn.setter
    def presctrllnbleeddwn(self, presctrllnbleeddwn):
        """Sets the presctrllnbleeddwn of this SSSVTestData.


        :param presctrllnbleeddwn: The presctrllnbleeddwn of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._presctrllnbleeddwn = presctrllnbleeddwn

    @property
    def presmaxdiff(self):
        """Gets the presmaxdiff of this SSSVTestData.  # noqa: E501


        :return: The presmaxdiff of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._presmaxdiff

    @presmaxdiff.setter
    def presmaxdiff(self, presmaxdiff):
        """Sets the presmaxdiff of this SSSVTestData.


        :param presmaxdiff: The presmaxdiff of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._presmaxdiff = presmaxdiff

    @property
    def prestubingbldup(self):
        """Gets the prestubingbldup of this SSSVTestData.  # noqa: E501


        :return: The prestubingbldup of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._prestubingbldup

    @prestubingbldup.setter
    def prestubingbldup(self, prestubingbldup):
        """Sets the prestubingbldup of this SSSVTestData.


        :param prestubingbldup: The prestubingbldup of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._prestubingbldup = prestubingbldup

    @property
    def prestubingbleeddwn(self):
        """Gets the prestubingbleeddwn of this SSSVTestData.  # noqa: E501


        :return: The prestubingbleeddwn of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._prestubingbleeddwn

    @prestubingbleeddwn.setter
    def prestubingbleeddwn(self, prestubingbleeddwn):
        """Sets the prestubingbleeddwn of this SSSVTestData.


        :param prestubingbleeddwn: The prestubingbleeddwn of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._prestubingbleeddwn = prestubingbleeddwn

    @property
    def preswhsensortrip(self):
        """Gets the preswhsensortrip of this SSSVTestData.  # noqa: E501


        :return: The preswhsensortrip of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._preswhsensortrip

    @preswhsensortrip.setter
    def preswhsensortrip(self, preswhsensortrip):
        """Sets the preswhsensortrip of this SSSVTestData.


        :param preswhsensortrip: The preswhsensortrip of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._preswhsensortrip = preswhsensortrip

    @property
    def rateleakoff(self):
        """Gets the rateleakoff of this SSSVTestData.  # noqa: E501


        :return: The rateleakoff of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._rateleakoff

    @rateleakoff.setter
    def rateleakoff(self, rateleakoff):
        """Sets the rateleakoff of this SSSVTestData.


        :param rateleakoff: The rateleakoff of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._rateleakoff = rateleakoff

    @property
    def tmctrllnbldup(self):
        """Gets the tmctrllnbldup of this SSSVTestData.  # noqa: E501


        :return: The tmctrllnbldup of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._tmctrllnbldup

    @tmctrllnbldup.setter
    def tmctrllnbldup(self, tmctrllnbldup):
        """Sets the tmctrllnbldup of this SSSVTestData.


        :param tmctrllnbldup: The tmctrllnbldup of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._tmctrllnbldup = tmctrllnbldup

    @property
    def tmtubingbldup(self):
        """Gets the tmtubingbldup of this SSSVTestData.  # noqa: E501


        :return: The tmtubingbldup of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._tmtubingbldup

    @tmtubingbldup.setter
    def tmtubingbldup(self, tmtubingbldup):
        """Sets the tmtubingbldup of this SSSVTestData.


        :param tmtubingbldup: The tmtubingbldup of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._tmtubingbldup = tmtubingbldup

    @property
    def volvoid(self):
        """Gets the volvoid of this SSSVTestData.  # noqa: E501


        :return: The volvoid of this SSSVTestData.  # noqa: E501
        :rtype: float
        """
        return self._volvoid

    @volvoid.setter
    def volvoid(self, volvoid):
        """Sets the volvoid of this SSSVTestData.


        :param volvoid: The volvoid of this SSSVTestData.  # noqa: E501
        :type: float
        """

        self._volvoid = volvoid

    @property
    def systag(self):
        """Gets the systag of this SSSVTestData.  # noqa: E501


        :return: The systag of this SSSVTestData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this SSSVTestData.


        :param systag: The systag of this SSSVTestData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSSVTestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSSVTestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
