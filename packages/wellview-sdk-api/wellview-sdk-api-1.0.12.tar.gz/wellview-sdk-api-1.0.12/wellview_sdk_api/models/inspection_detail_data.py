# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InspectionDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actionreqdcom': 'str',
        'actiontakencom': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'inspectedbycompany': 'str',
        'inspectedbyname': 'str',
        'status': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actionreqdcom': 'actionreqdcom',
        'actiontakencom': 'actiontakencom',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'inspectedbycompany': 'inspectedbycompany',
        'inspectedbyname': 'inspectedbyname',
        'status': 'status',
        'systag': 'systag'
    }

    def __init__(self, actionreqdcom=None, actiontakencom=None, dttm=None, idrec=None, idrecparent=None, idwell=None, inspectedbycompany=None, inspectedbyname=None, status=None, systag=None):  # noqa: E501
        """InspectionDetailData - a model defined in Swagger"""  # noqa: E501
        self._actionreqdcom = None
        self._actiontakencom = None
        self._dttm = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._inspectedbycompany = None
        self._inspectedbyname = None
        self._status = None
        self._systag = None
        self.discriminator = None
        if actionreqdcom is not None:
            self.actionreqdcom = actionreqdcom
        if actiontakencom is not None:
            self.actiontakencom = actiontakencom
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if inspectedbycompany is not None:
            self.inspectedbycompany = inspectedbycompany
        if inspectedbyname is not None:
            self.inspectedbyname = inspectedbyname
        if status is not None:
            self.status = status
        if systag is not None:
            self.systag = systag

    @property
    def actionreqdcom(self):
        """Gets the actionreqdcom of this InspectionDetailData.  # noqa: E501


        :return: The actionreqdcom of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._actionreqdcom

    @actionreqdcom.setter
    def actionreqdcom(self, actionreqdcom):
        """Sets the actionreqdcom of this InspectionDetailData.


        :param actionreqdcom: The actionreqdcom of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._actionreqdcom = actionreqdcom

    @property
    def actiontakencom(self):
        """Gets the actiontakencom of this InspectionDetailData.  # noqa: E501


        :return: The actiontakencom of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._actiontakencom

    @actiontakencom.setter
    def actiontakencom(self, actiontakencom):
        """Sets the actiontakencom of this InspectionDetailData.


        :param actiontakencom: The actiontakencom of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._actiontakencom = actiontakencom

    @property
    def dttm(self):
        """Gets the dttm of this InspectionDetailData.  # noqa: E501


        :return: The dttm of this InspectionDetailData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this InspectionDetailData.


        :param dttm: The dttm of this InspectionDetailData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this InspectionDetailData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this InspectionDetailData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this InspectionDetailData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this InspectionDetailData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this InspectionDetailData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this InspectionDetailData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this InspectionDetailData.

        id of well  # noqa: E501

        :param idwell: The idwell of this InspectionDetailData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def inspectedbycompany(self):
        """Gets the inspectedbycompany of this InspectionDetailData.  # noqa: E501


        :return: The inspectedbycompany of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._inspectedbycompany

    @inspectedbycompany.setter
    def inspectedbycompany(self, inspectedbycompany):
        """Sets the inspectedbycompany of this InspectionDetailData.


        :param inspectedbycompany: The inspectedbycompany of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._inspectedbycompany = inspectedbycompany

    @property
    def inspectedbyname(self):
        """Gets the inspectedbyname of this InspectionDetailData.  # noqa: E501


        :return: The inspectedbyname of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._inspectedbyname

    @inspectedbyname.setter
    def inspectedbyname(self, inspectedbyname):
        """Sets the inspectedbyname of this InspectionDetailData.


        :param inspectedbyname: The inspectedbyname of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._inspectedbyname = inspectedbyname

    @property
    def status(self):
        """Gets the status of this InspectionDetailData.  # noqa: E501


        :return: The status of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InspectionDetailData.


        :param status: The status of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def systag(self):
        """Gets the systag of this InspectionDetailData.  # noqa: E501


        :return: The systag of this InspectionDetailData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this InspectionDetailData.


        :param systag: The systag of this InspectionDetailData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InspectionDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InspectionDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
