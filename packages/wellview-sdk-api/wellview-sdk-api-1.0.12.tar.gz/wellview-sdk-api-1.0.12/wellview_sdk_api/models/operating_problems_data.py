# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OperatingProblemsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actiontaken': 'str',
        'cause': 'str',
        'causecom': 'str',
        'causedetail': 'str',
        'com': 'str',
        'des': 'str',
        'dttmaction': 'datetime',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'estcost': 'float',
        'estreservelosscond': 'float',
        'estreservelossgas': 'float',
        'estreservelossoil': 'float',
        'estreservelosswater': 'float',
        'failuresymptom': 'str',
        'failuresystem': 'str',
        'idrec': 'str',
        'idrecjob': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'performanceaffect': 'bool',
        'priority': 'str',
        'ratefailcond': 'float',
        'ratefailgas': 'float',
        'ratefailoil': 'float',
        'ratefailwater': 'float',
        'rateoptimumcond': 'float',
        'rateoptimumgas': 'float',
        'rateoptimumoil': 'float',
        'rateoptimumwater': 'float',
        'regulatoryissue': 'bool',
        'reportto': 'str',
        'status1': 'str',
        'status2': 'str',
        'typ': 'str',
        'typdetail': 'str',
        'usernum1': 'float',
        'usernum2': 'float',
        'usertxt1': 'str',
        'usertxt2': 'str',
        'usertxt3': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actiontaken': 'actiontaken',
        'cause': 'cause',
        'causecom': 'causecom',
        'causedetail': 'causedetail',
        'com': 'com',
        'des': 'des',
        'dttmaction': 'dttmaction',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'estcost': 'estcost',
        'estreservelosscond': 'estreservelosscond',
        'estreservelossgas': 'estreservelossgas',
        'estreservelossoil': 'estreservelossoil',
        'estreservelosswater': 'estreservelosswater',
        'failuresymptom': 'failuresymptom',
        'failuresystem': 'failuresystem',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'performanceaffect': 'performanceaffect',
        'priority': 'priority',
        'ratefailcond': 'ratefailcond',
        'ratefailgas': 'ratefailgas',
        'ratefailoil': 'ratefailoil',
        'ratefailwater': 'ratefailwater',
        'rateoptimumcond': 'rateoptimumcond',
        'rateoptimumgas': 'rateoptimumgas',
        'rateoptimumoil': 'rateoptimumoil',
        'rateoptimumwater': 'rateoptimumwater',
        'regulatoryissue': 'regulatoryissue',
        'reportto': 'reportto',
        'status1': 'status1',
        'status2': 'status2',
        'typ': 'typ',
        'typdetail': 'typdetail',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usertxt1': 'usertxt1',
        'usertxt2': 'usertxt2',
        'usertxt3': 'usertxt3',
        'systag': 'systag'
    }

    def __init__(self, actiontaken=None, cause=None, causecom=None, causedetail=None, com=None, des=None, dttmaction=None, dttmend=None, dttmstart=None, estcost=None, estreservelosscond=None, estreservelossgas=None, estreservelossoil=None, estreservelosswater=None, failuresymptom=None, failuresystem=None, idrec=None, idrecjob=None, idreczonecompletion=None, idwell=None, performanceaffect=None, priority=None, ratefailcond=None, ratefailgas=None, ratefailoil=None, ratefailwater=None, rateoptimumcond=None, rateoptimumgas=None, rateoptimumoil=None, rateoptimumwater=None, regulatoryissue=None, reportto=None, status1=None, status2=None, typ=None, typdetail=None, usernum1=None, usernum2=None, usertxt1=None, usertxt2=None, usertxt3=None, systag=None):  # noqa: E501
        """OperatingProblemsData - a model defined in Swagger"""  # noqa: E501
        self._actiontaken = None
        self._cause = None
        self._causecom = None
        self._causedetail = None
        self._com = None
        self._des = None
        self._dttmaction = None
        self._dttmend = None
        self._dttmstart = None
        self._estcost = None
        self._estreservelosscond = None
        self._estreservelossgas = None
        self._estreservelossoil = None
        self._estreservelosswater = None
        self._failuresymptom = None
        self._failuresystem = None
        self._idrec = None
        self._idrecjob = None
        self._idreczonecompletion = None
        self._idwell = None
        self._performanceaffect = None
        self._priority = None
        self._ratefailcond = None
        self._ratefailgas = None
        self._ratefailoil = None
        self._ratefailwater = None
        self._rateoptimumcond = None
        self._rateoptimumgas = None
        self._rateoptimumoil = None
        self._rateoptimumwater = None
        self._regulatoryissue = None
        self._reportto = None
        self._status1 = None
        self._status2 = None
        self._typ = None
        self._typdetail = None
        self._usernum1 = None
        self._usernum2 = None
        self._usertxt1 = None
        self._usertxt2 = None
        self._usertxt3 = None
        self._systag = None
        self.discriminator = None
        if actiontaken is not None:
            self.actiontaken = actiontaken
        if cause is not None:
            self.cause = cause
        if causecom is not None:
            self.causecom = causecom
        if causedetail is not None:
            self.causedetail = causedetail
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dttmaction is not None:
            self.dttmaction = dttmaction
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if estcost is not None:
            self.estcost = estcost
        if estreservelosscond is not None:
            self.estreservelosscond = estreservelosscond
        if estreservelossgas is not None:
            self.estreservelossgas = estreservelossgas
        if estreservelossoil is not None:
            self.estreservelossoil = estreservelossoil
        if estreservelosswater is not None:
            self.estreservelosswater = estreservelosswater
        if failuresymptom is not None:
            self.failuresymptom = failuresymptom
        if failuresystem is not None:
            self.failuresystem = failuresystem
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if performanceaffect is not None:
            self.performanceaffect = performanceaffect
        if priority is not None:
            self.priority = priority
        if ratefailcond is not None:
            self.ratefailcond = ratefailcond
        if ratefailgas is not None:
            self.ratefailgas = ratefailgas
        if ratefailoil is not None:
            self.ratefailoil = ratefailoil
        if ratefailwater is not None:
            self.ratefailwater = ratefailwater
        if rateoptimumcond is not None:
            self.rateoptimumcond = rateoptimumcond
        if rateoptimumgas is not None:
            self.rateoptimumgas = rateoptimumgas
        if rateoptimumoil is not None:
            self.rateoptimumoil = rateoptimumoil
        if rateoptimumwater is not None:
            self.rateoptimumwater = rateoptimumwater
        if regulatoryissue is not None:
            self.regulatoryissue = regulatoryissue
        if reportto is not None:
            self.reportto = reportto
        if status1 is not None:
            self.status1 = status1
        if status2 is not None:
            self.status2 = status2
        if typ is not None:
            self.typ = typ
        if typdetail is not None:
            self.typdetail = typdetail
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if usertxt2 is not None:
            self.usertxt2 = usertxt2
        if usertxt3 is not None:
            self.usertxt3 = usertxt3
        if systag is not None:
            self.systag = systag

    @property
    def actiontaken(self):
        """Gets the actiontaken of this OperatingProblemsData.  # noqa: E501


        :return: The actiontaken of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._actiontaken

    @actiontaken.setter
    def actiontaken(self, actiontaken):
        """Sets the actiontaken of this OperatingProblemsData.


        :param actiontaken: The actiontaken of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._actiontaken = actiontaken

    @property
    def cause(self):
        """Gets the cause of this OperatingProblemsData.  # noqa: E501


        :return: The cause of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """Sets the cause of this OperatingProblemsData.


        :param cause: The cause of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._cause = cause

    @property
    def causecom(self):
        """Gets the causecom of this OperatingProblemsData.  # noqa: E501


        :return: The causecom of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._causecom

    @causecom.setter
    def causecom(self, causecom):
        """Sets the causecom of this OperatingProblemsData.


        :param causecom: The causecom of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._causecom = causecom

    @property
    def causedetail(self):
        """Gets the causedetail of this OperatingProblemsData.  # noqa: E501


        :return: The causedetail of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._causedetail

    @causedetail.setter
    def causedetail(self, causedetail):
        """Sets the causedetail of this OperatingProblemsData.


        :param causedetail: The causedetail of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._causedetail = causedetail

    @property
    def com(self):
        """Gets the com of this OperatingProblemsData.  # noqa: E501


        :return: The com of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this OperatingProblemsData.


        :param com: The com of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this OperatingProblemsData.  # noqa: E501


        :return: The des of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this OperatingProblemsData.


        :param des: The des of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmaction(self):
        """Gets the dttmaction of this OperatingProblemsData.  # noqa: E501


        :return: The dttmaction of this OperatingProblemsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmaction

    @dttmaction.setter
    def dttmaction(self, dttmaction):
        """Sets the dttmaction of this OperatingProblemsData.


        :param dttmaction: The dttmaction of this OperatingProblemsData.  # noqa: E501
        :type: datetime
        """

        self._dttmaction = dttmaction

    @property
    def dttmend(self):
        """Gets the dttmend of this OperatingProblemsData.  # noqa: E501


        :return: The dttmend of this OperatingProblemsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this OperatingProblemsData.


        :param dttmend: The dttmend of this OperatingProblemsData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this OperatingProblemsData.  # noqa: E501


        :return: The dttmstart of this OperatingProblemsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this OperatingProblemsData.


        :param dttmstart: The dttmstart of this OperatingProblemsData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def estcost(self):
        """Gets the estcost of this OperatingProblemsData.  # noqa: E501


        :return: The estcost of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._estcost

    @estcost.setter
    def estcost(self, estcost):
        """Sets the estcost of this OperatingProblemsData.


        :param estcost: The estcost of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._estcost = estcost

    @property
    def estreservelosscond(self):
        """Gets the estreservelosscond of this OperatingProblemsData.  # noqa: E501


        :return: The estreservelosscond of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._estreservelosscond

    @estreservelosscond.setter
    def estreservelosscond(self, estreservelosscond):
        """Sets the estreservelosscond of this OperatingProblemsData.


        :param estreservelosscond: The estreservelosscond of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._estreservelosscond = estreservelosscond

    @property
    def estreservelossgas(self):
        """Gets the estreservelossgas of this OperatingProblemsData.  # noqa: E501


        :return: The estreservelossgas of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._estreservelossgas

    @estreservelossgas.setter
    def estreservelossgas(self, estreservelossgas):
        """Sets the estreservelossgas of this OperatingProblemsData.


        :param estreservelossgas: The estreservelossgas of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._estreservelossgas = estreservelossgas

    @property
    def estreservelossoil(self):
        """Gets the estreservelossoil of this OperatingProblemsData.  # noqa: E501


        :return: The estreservelossoil of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._estreservelossoil

    @estreservelossoil.setter
    def estreservelossoil(self, estreservelossoil):
        """Sets the estreservelossoil of this OperatingProblemsData.


        :param estreservelossoil: The estreservelossoil of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._estreservelossoil = estreservelossoil

    @property
    def estreservelosswater(self):
        """Gets the estreservelosswater of this OperatingProblemsData.  # noqa: E501


        :return: The estreservelosswater of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._estreservelosswater

    @estreservelosswater.setter
    def estreservelosswater(self, estreservelosswater):
        """Sets the estreservelosswater of this OperatingProblemsData.


        :param estreservelosswater: The estreservelosswater of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._estreservelosswater = estreservelosswater

    @property
    def failuresymptom(self):
        """Gets the failuresymptom of this OperatingProblemsData.  # noqa: E501


        :return: The failuresymptom of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._failuresymptom

    @failuresymptom.setter
    def failuresymptom(self, failuresymptom):
        """Sets the failuresymptom of this OperatingProblemsData.


        :param failuresymptom: The failuresymptom of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._failuresymptom = failuresymptom

    @property
    def failuresystem(self):
        """Gets the failuresystem of this OperatingProblemsData.  # noqa: E501


        :return: The failuresystem of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._failuresystem

    @failuresystem.setter
    def failuresystem(self, failuresystem):
        """Sets the failuresystem of this OperatingProblemsData.


        :param failuresystem: The failuresystem of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._failuresystem = failuresystem

    @property
    def idrec(self):
        """Gets the idrec of this OperatingProblemsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this OperatingProblemsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this OperatingProblemsData.  # noqa: E501


        :return: The idrecjob of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this OperatingProblemsData.


        :param idrecjob: The idrecjob of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this OperatingProblemsData.  # noqa: E501


        :return: The idreczonecompletion of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this OperatingProblemsData.


        :param idreczonecompletion: The idreczonecompletion of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this OperatingProblemsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this OperatingProblemsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this OperatingProblemsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def performanceaffect(self):
        """Gets the performanceaffect of this OperatingProblemsData.  # noqa: E501


        :return: The performanceaffect of this OperatingProblemsData.  # noqa: E501
        :rtype: bool
        """
        return self._performanceaffect

    @performanceaffect.setter
    def performanceaffect(self, performanceaffect):
        """Sets the performanceaffect of this OperatingProblemsData.


        :param performanceaffect: The performanceaffect of this OperatingProblemsData.  # noqa: E501
        :type: bool
        """

        self._performanceaffect = performanceaffect

    @property
    def priority(self):
        """Gets the priority of this OperatingProblemsData.  # noqa: E501


        :return: The priority of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this OperatingProblemsData.


        :param priority: The priority of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def ratefailcond(self):
        """Gets the ratefailcond of this OperatingProblemsData.  # noqa: E501


        :return: The ratefailcond of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._ratefailcond

    @ratefailcond.setter
    def ratefailcond(self, ratefailcond):
        """Sets the ratefailcond of this OperatingProblemsData.


        :param ratefailcond: The ratefailcond of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._ratefailcond = ratefailcond

    @property
    def ratefailgas(self):
        """Gets the ratefailgas of this OperatingProblemsData.  # noqa: E501


        :return: The ratefailgas of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._ratefailgas

    @ratefailgas.setter
    def ratefailgas(self, ratefailgas):
        """Sets the ratefailgas of this OperatingProblemsData.


        :param ratefailgas: The ratefailgas of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._ratefailgas = ratefailgas

    @property
    def ratefailoil(self):
        """Gets the ratefailoil of this OperatingProblemsData.  # noqa: E501


        :return: The ratefailoil of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._ratefailoil

    @ratefailoil.setter
    def ratefailoil(self, ratefailoil):
        """Sets the ratefailoil of this OperatingProblemsData.


        :param ratefailoil: The ratefailoil of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._ratefailoil = ratefailoil

    @property
    def ratefailwater(self):
        """Gets the ratefailwater of this OperatingProblemsData.  # noqa: E501


        :return: The ratefailwater of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._ratefailwater

    @ratefailwater.setter
    def ratefailwater(self, ratefailwater):
        """Sets the ratefailwater of this OperatingProblemsData.


        :param ratefailwater: The ratefailwater of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._ratefailwater = ratefailwater

    @property
    def rateoptimumcond(self):
        """Gets the rateoptimumcond of this OperatingProblemsData.  # noqa: E501


        :return: The rateoptimumcond of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumcond

    @rateoptimumcond.setter
    def rateoptimumcond(self, rateoptimumcond):
        """Sets the rateoptimumcond of this OperatingProblemsData.


        :param rateoptimumcond: The rateoptimumcond of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._rateoptimumcond = rateoptimumcond

    @property
    def rateoptimumgas(self):
        """Gets the rateoptimumgas of this OperatingProblemsData.  # noqa: E501


        :return: The rateoptimumgas of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumgas

    @rateoptimumgas.setter
    def rateoptimumgas(self, rateoptimumgas):
        """Sets the rateoptimumgas of this OperatingProblemsData.


        :param rateoptimumgas: The rateoptimumgas of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._rateoptimumgas = rateoptimumgas

    @property
    def rateoptimumoil(self):
        """Gets the rateoptimumoil of this OperatingProblemsData.  # noqa: E501


        :return: The rateoptimumoil of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumoil

    @rateoptimumoil.setter
    def rateoptimumoil(self, rateoptimumoil):
        """Sets the rateoptimumoil of this OperatingProblemsData.


        :param rateoptimumoil: The rateoptimumoil of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._rateoptimumoil = rateoptimumoil

    @property
    def rateoptimumwater(self):
        """Gets the rateoptimumwater of this OperatingProblemsData.  # noqa: E501


        :return: The rateoptimumwater of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._rateoptimumwater

    @rateoptimumwater.setter
    def rateoptimumwater(self, rateoptimumwater):
        """Sets the rateoptimumwater of this OperatingProblemsData.


        :param rateoptimumwater: The rateoptimumwater of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._rateoptimumwater = rateoptimumwater

    @property
    def regulatoryissue(self):
        """Gets the regulatoryissue of this OperatingProblemsData.  # noqa: E501


        :return: The regulatoryissue of this OperatingProblemsData.  # noqa: E501
        :rtype: bool
        """
        return self._regulatoryissue

    @regulatoryissue.setter
    def regulatoryissue(self, regulatoryissue):
        """Sets the regulatoryissue of this OperatingProblemsData.


        :param regulatoryissue: The regulatoryissue of this OperatingProblemsData.  # noqa: E501
        :type: bool
        """

        self._regulatoryissue = regulatoryissue

    @property
    def reportto(self):
        """Gets the reportto of this OperatingProblemsData.  # noqa: E501


        :return: The reportto of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._reportto

    @reportto.setter
    def reportto(self, reportto):
        """Sets the reportto of this OperatingProblemsData.


        :param reportto: The reportto of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._reportto = reportto

    @property
    def status1(self):
        """Gets the status1 of this OperatingProblemsData.  # noqa: E501


        :return: The status1 of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._status1

    @status1.setter
    def status1(self, status1):
        """Sets the status1 of this OperatingProblemsData.


        :param status1: The status1 of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._status1 = status1

    @property
    def status2(self):
        """Gets the status2 of this OperatingProblemsData.  # noqa: E501


        :return: The status2 of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._status2

    @status2.setter
    def status2(self, status2):
        """Sets the status2 of this OperatingProblemsData.


        :param status2: The status2 of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._status2 = status2

    @property
    def typ(self):
        """Gets the typ of this OperatingProblemsData.  # noqa: E501


        :return: The typ of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this OperatingProblemsData.


        :param typ: The typ of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def typdetail(self):
        """Gets the typdetail of this OperatingProblemsData.  # noqa: E501


        :return: The typdetail of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._typdetail

    @typdetail.setter
    def typdetail(self, typdetail):
        """Sets the typdetail of this OperatingProblemsData.


        :param typdetail: The typdetail of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._typdetail = typdetail

    @property
    def usernum1(self):
        """Gets the usernum1 of this OperatingProblemsData.  # noqa: E501


        :return: The usernum1 of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this OperatingProblemsData.


        :param usernum1: The usernum1 of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this OperatingProblemsData.  # noqa: E501


        :return: The usernum2 of this OperatingProblemsData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this OperatingProblemsData.


        :param usernum2: The usernum2 of this OperatingProblemsData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this OperatingProblemsData.  # noqa: E501


        :return: The usertxt1 of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this OperatingProblemsData.


        :param usertxt1: The usertxt1 of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def usertxt2(self):
        """Gets the usertxt2 of this OperatingProblemsData.  # noqa: E501


        :return: The usertxt2 of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt2

    @usertxt2.setter
    def usertxt2(self, usertxt2):
        """Sets the usertxt2 of this OperatingProblemsData.


        :param usertxt2: The usertxt2 of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._usertxt2 = usertxt2

    @property
    def usertxt3(self):
        """Gets the usertxt3 of this OperatingProblemsData.  # noqa: E501


        :return: The usertxt3 of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt3

    @usertxt3.setter
    def usertxt3(self, usertxt3):
        """Sets the usertxt3 of this OperatingProblemsData.


        :param usertxt3: The usertxt3 of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._usertxt3 = usertxt3

    @property
    def systag(self):
        """Gets the systag of this OperatingProblemsData.  # noqa: E501


        :return: The systag of this OperatingProblemsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this OperatingProblemsData.


        :param systag: The systag of this OperatingProblemsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OperatingProblemsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperatingProblemsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
