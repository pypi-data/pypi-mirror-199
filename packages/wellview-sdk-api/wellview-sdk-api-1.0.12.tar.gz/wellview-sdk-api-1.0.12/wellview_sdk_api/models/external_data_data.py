# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExternalDataData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribvalue': 'str',
        'excludefromexport': 'bool',
        'extdatablob': 'str',
        'idrec': 'str',
        'idwell': 'str',
        'key1': 'str',
        'key2': 'str',
        'key3': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'attribvalue': 'attribvalue',
        'excludefromexport': 'excludefromexport',
        'extdatablob': 'extdatablob',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'key1': 'key1',
        'key2': 'key2',
        'key3': 'key3',
        'systag': 'systag'
    }

    def __init__(self, attribvalue=None, excludefromexport=None, extdatablob=None, idrec=None, idwell=None, key1=None, key2=None, key3=None, systag=None):  # noqa: E501
        """ExternalDataData - a model defined in Swagger"""  # noqa: E501
        self._attribvalue = None
        self._excludefromexport = None
        self._extdatablob = None
        self._idrec = None
        self._idwell = None
        self._key1 = None
        self._key2 = None
        self._key3 = None
        self._systag = None
        self.discriminator = None
        if attribvalue is not None:
            self.attribvalue = attribvalue
        if excludefromexport is not None:
            self.excludefromexport = excludefromexport
        if extdatablob is not None:
            self.extdatablob = extdatablob
        if idrec is not None:
            self.idrec = idrec
        self.idwell = idwell
        if key1 is not None:
            self.key1 = key1
        if key2 is not None:
            self.key2 = key2
        if key3 is not None:
            self.key3 = key3
        if systag is not None:
            self.systag = systag

    @property
    def attribvalue(self):
        """Gets the attribvalue of this ExternalDataData.  # noqa: E501


        :return: The attribvalue of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._attribvalue

    @attribvalue.setter
    def attribvalue(self, attribvalue):
        """Sets the attribvalue of this ExternalDataData.


        :param attribvalue: The attribvalue of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._attribvalue = attribvalue

    @property
    def excludefromexport(self):
        """Gets the excludefromexport of this ExternalDataData.  # noqa: E501


        :return: The excludefromexport of this ExternalDataData.  # noqa: E501
        :rtype: bool
        """
        return self._excludefromexport

    @excludefromexport.setter
    def excludefromexport(self, excludefromexport):
        """Sets the excludefromexport of this ExternalDataData.


        :param excludefromexport: The excludefromexport of this ExternalDataData.  # noqa: E501
        :type: bool
        """

        self._excludefromexport = excludefromexport

    @property
    def extdatablob(self):
        """Gets the extdatablob of this ExternalDataData.  # noqa: E501


        :return: The extdatablob of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._extdatablob

    @extdatablob.setter
    def extdatablob(self, extdatablob):
        """Sets the extdatablob of this ExternalDataData.


        :param extdatablob: The extdatablob of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._extdatablob = extdatablob

    @property
    def idrec(self):
        """Gets the idrec of this ExternalDataData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ExternalDataData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this ExternalDataData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ExternalDataData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ExternalDataData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def key1(self):
        """Gets the key1 of this ExternalDataData.  # noqa: E501


        :return: The key1 of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._key1

    @key1.setter
    def key1(self, key1):
        """Sets the key1 of this ExternalDataData.


        :param key1: The key1 of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._key1 = key1

    @property
    def key2(self):
        """Gets the key2 of this ExternalDataData.  # noqa: E501


        :return: The key2 of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._key2

    @key2.setter
    def key2(self, key2):
        """Sets the key2 of this ExternalDataData.


        :param key2: The key2 of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._key2 = key2

    @property
    def key3(self):
        """Gets the key3 of this ExternalDataData.  # noqa: E501


        :return: The key3 of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._key3

    @key3.setter
    def key3(self, key3):
        """Sets the key3 of this ExternalDataData.


        :param key3: The key3 of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._key3 = key3

    @property
    def systag(self):
        """Gets the systag of this ExternalDataData.  # noqa: E501


        :return: The systag of this ExternalDataData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ExternalDataData.


        :param systag: The systag of this ExternalDataData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalDataData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalDataData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
