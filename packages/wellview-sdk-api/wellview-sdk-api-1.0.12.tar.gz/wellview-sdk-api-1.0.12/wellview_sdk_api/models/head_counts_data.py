# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HeadCountsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company': 'str',
        'companytyp': 'str',
        'durationworkot': 'float',
        'durationworkreg': 'float',
        'employeename': 'str',
        'employeetyp': 'str',
        'exclude': 'bool',
        'headcount': 'int',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'note': 'str',
        'refderrick': 'str',
        'syscarryfwdp': 'bool',
        'systag': 'str',
        'sysseq': 'int'
    }

    attribute_map = {
        'company': 'company',
        'companytyp': 'companytyp',
        'durationworkot': 'durationworkot',
        'durationworkreg': 'durationworkreg',
        'employeename': 'employeename',
        'employeetyp': 'employeetyp',
        'exclude': 'exclude',
        'headcount': 'headcount',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'note': 'note',
        'refderrick': 'refderrick',
        'syscarryfwdp': 'syscarryfwdp',
        'systag': 'systag',
        'sysseq': 'sysseq'
    }

    def __init__(self, company=None, companytyp=None, durationworkot=None, durationworkreg=None, employeename=None, employeetyp=None, exclude=None, headcount=None, idrec=None, idrecparent=None, idwell=None, note=None, refderrick=None, syscarryfwdp=None, systag=None, sysseq=None):  # noqa: E501
        """HeadCountsData - a model defined in Swagger"""  # noqa: E501
        self._company = None
        self._companytyp = None
        self._durationworkot = None
        self._durationworkreg = None
        self._employeename = None
        self._employeetyp = None
        self._exclude = None
        self._headcount = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._note = None
        self._refderrick = None
        self._syscarryfwdp = None
        self._systag = None
        self._sysseq = None
        self.discriminator = None
        if company is not None:
            self.company = company
        if companytyp is not None:
            self.companytyp = companytyp
        if durationworkot is not None:
            self.durationworkot = durationworkot
        if durationworkreg is not None:
            self.durationworkreg = durationworkreg
        if employeename is not None:
            self.employeename = employeename
        if employeetyp is not None:
            self.employeetyp = employeetyp
        if exclude is not None:
            self.exclude = exclude
        if headcount is not None:
            self.headcount = headcount
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if note is not None:
            self.note = note
        if refderrick is not None:
            self.refderrick = refderrick
        if syscarryfwdp is not None:
            self.syscarryfwdp = syscarryfwdp
        if systag is not None:
            self.systag = systag
        if sysseq is not None:
            self.sysseq = sysseq

    @property
    def company(self):
        """Gets the company of this HeadCountsData.  # noqa: E501


        :return: The company of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this HeadCountsData.


        :param company: The company of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def companytyp(self):
        """Gets the companytyp of this HeadCountsData.  # noqa: E501


        :return: The companytyp of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._companytyp

    @companytyp.setter
    def companytyp(self, companytyp):
        """Sets the companytyp of this HeadCountsData.


        :param companytyp: The companytyp of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._companytyp = companytyp

    @property
    def durationworkot(self):
        """Gets the durationworkot of this HeadCountsData.  # noqa: E501


        :return: The durationworkot of this HeadCountsData.  # noqa: E501
        :rtype: float
        """
        return self._durationworkot

    @durationworkot.setter
    def durationworkot(self, durationworkot):
        """Sets the durationworkot of this HeadCountsData.


        :param durationworkot: The durationworkot of this HeadCountsData.  # noqa: E501
        :type: float
        """

        self._durationworkot = durationworkot

    @property
    def durationworkreg(self):
        """Gets the durationworkreg of this HeadCountsData.  # noqa: E501


        :return: The durationworkreg of this HeadCountsData.  # noqa: E501
        :rtype: float
        """
        return self._durationworkreg

    @durationworkreg.setter
    def durationworkreg(self, durationworkreg):
        """Sets the durationworkreg of this HeadCountsData.


        :param durationworkreg: The durationworkreg of this HeadCountsData.  # noqa: E501
        :type: float
        """

        self._durationworkreg = durationworkreg

    @property
    def employeename(self):
        """Gets the employeename of this HeadCountsData.  # noqa: E501


        :return: The employeename of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._employeename

    @employeename.setter
    def employeename(self, employeename):
        """Sets the employeename of this HeadCountsData.


        :param employeename: The employeename of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._employeename = employeename

    @property
    def employeetyp(self):
        """Gets the employeetyp of this HeadCountsData.  # noqa: E501


        :return: The employeetyp of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._employeetyp

    @employeetyp.setter
    def employeetyp(self, employeetyp):
        """Sets the employeetyp of this HeadCountsData.


        :param employeetyp: The employeetyp of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._employeetyp = employeetyp

    @property
    def exclude(self):
        """Gets the exclude of this HeadCountsData.  # noqa: E501


        :return: The exclude of this HeadCountsData.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this HeadCountsData.


        :param exclude: The exclude of this HeadCountsData.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def headcount(self):
        """Gets the headcount of this HeadCountsData.  # noqa: E501


        :return: The headcount of this HeadCountsData.  # noqa: E501
        :rtype: int
        """
        return self._headcount

    @headcount.setter
    def headcount(self, headcount):
        """Sets the headcount of this HeadCountsData.


        :param headcount: The headcount of this HeadCountsData.  # noqa: E501
        :type: int
        """

        self._headcount = headcount

    @property
    def idrec(self):
        """Gets the idrec of this HeadCountsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this HeadCountsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this HeadCountsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this HeadCountsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this HeadCountsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this HeadCountsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this HeadCountsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this HeadCountsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this HeadCountsData.  # noqa: E501


        :return: The note of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this HeadCountsData.


        :param note: The note of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def refderrick(self):
        """Gets the refderrick of this HeadCountsData.  # noqa: E501


        :return: The refderrick of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._refderrick

    @refderrick.setter
    def refderrick(self, refderrick):
        """Sets the refderrick of this HeadCountsData.


        :param refderrick: The refderrick of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._refderrick = refderrick

    @property
    def syscarryfwdp(self):
        """Gets the syscarryfwdp of this HeadCountsData.  # noqa: E501


        :return: The syscarryfwdp of this HeadCountsData.  # noqa: E501
        :rtype: bool
        """
        return self._syscarryfwdp

    @syscarryfwdp.setter
    def syscarryfwdp(self, syscarryfwdp):
        """Sets the syscarryfwdp of this HeadCountsData.


        :param syscarryfwdp: The syscarryfwdp of this HeadCountsData.  # noqa: E501
        :type: bool
        """

        self._syscarryfwdp = syscarryfwdp

    @property
    def systag(self):
        """Gets the systag of this HeadCountsData.  # noqa: E501


        :return: The systag of this HeadCountsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this HeadCountsData.


        :param systag: The systag of this HeadCountsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    @property
    def sysseq(self):
        """Gets the sysseq of this HeadCountsData.  # noqa: E501


        :return: The sysseq of this HeadCountsData.  # noqa: E501
        :rtype: int
        """
        return self._sysseq

    @sysseq.setter
    def sysseq(self, sysseq):
        """Sets the sysseq of this HeadCountsData.


        :param sysseq: The sysseq of this HeadCountsData.  # noqa: E501
        :type: int
        """

        self._sysseq = sysseq

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HeadCountsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HeadCountsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
