# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobPhasesData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code1': 'str',
        'code2': 'str',
        'code3': 'str',
        'code4': 'str',
        'costmax': 'float',
        'costmin': 'float',
        'costml': 'float',
        'costtechlimit': 'float',
        'definitive': 'bool',
        'depthendplan': 'float',
        'depthstartplan': 'float',
        'des': 'str',
        'dttmendactual': 'datetime',
        'dttmstartactual': 'datetime',
        'durationmax': 'float',
        'durationmin': 'float',
        'durationml': 'float',
        'durationtechlimit': 'float',
        'exclude': 'bool',
        'hazards': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'methodtyp1': 'str',
        'methodtyp2': 'str',
        'planchange': 'bool',
        'planphase': 'str',
        'source': 'str',
        'summary': 'str',
        'usertxt1': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'code1': 'code1',
        'code2': 'code2',
        'code3': 'code3',
        'code4': 'code4',
        'costmax': 'costmax',
        'costmin': 'costmin',
        'costml': 'costml',
        'costtechlimit': 'costtechlimit',
        'definitive': 'definitive',
        'depthendplan': 'depthendplan',
        'depthstartplan': 'depthstartplan',
        'des': 'des',
        'dttmendactual': 'dttmendactual',
        'dttmstartactual': 'dttmstartactual',
        'durationmax': 'durationmax',
        'durationmin': 'durationmin',
        'durationml': 'durationml',
        'durationtechlimit': 'durationtechlimit',
        'exclude': 'exclude',
        'hazards': 'hazards',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'methodtyp1': 'methodtyp1',
        'methodtyp2': 'methodtyp2',
        'planchange': 'planchange',
        'planphase': 'planphase',
        'source': 'source',
        'summary': 'summary',
        'usertxt1': 'usertxt1',
        'systag': 'systag'
    }

    def __init__(self, code1=None, code2=None, code3=None, code4=None, costmax=None, costmin=None, costml=None, costtechlimit=None, definitive=None, depthendplan=None, depthstartplan=None, des=None, dttmendactual=None, dttmstartactual=None, durationmax=None, durationmin=None, durationml=None, durationtechlimit=None, exclude=None, hazards=None, idrec=None, idrecparent=None, idrecwellbore=None, idwell=None, methodtyp1=None, methodtyp2=None, planchange=None, planphase=None, source=None, summary=None, usertxt1=None, systag=None):  # noqa: E501
        """JobPhasesData - a model defined in Swagger"""  # noqa: E501
        self._code1 = None
        self._code2 = None
        self._code3 = None
        self._code4 = None
        self._costmax = None
        self._costmin = None
        self._costml = None
        self._costtechlimit = None
        self._definitive = None
        self._depthendplan = None
        self._depthstartplan = None
        self._des = None
        self._dttmendactual = None
        self._dttmstartactual = None
        self._durationmax = None
        self._durationmin = None
        self._durationml = None
        self._durationtechlimit = None
        self._exclude = None
        self._hazards = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._methodtyp1 = None
        self._methodtyp2 = None
        self._planchange = None
        self._planphase = None
        self._source = None
        self._summary = None
        self._usertxt1 = None
        self._systag = None
        self.discriminator = None
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if code3 is not None:
            self.code3 = code3
        if code4 is not None:
            self.code4 = code4
        if costmax is not None:
            self.costmax = costmax
        if costmin is not None:
            self.costmin = costmin
        if costml is not None:
            self.costml = costml
        if costtechlimit is not None:
            self.costtechlimit = costtechlimit
        if definitive is not None:
            self.definitive = definitive
        if depthendplan is not None:
            self.depthendplan = depthendplan
        if depthstartplan is not None:
            self.depthstartplan = depthstartplan
        if des is not None:
            self.des = des
        if dttmendactual is not None:
            self.dttmendactual = dttmendactual
        if dttmstartactual is not None:
            self.dttmstartactual = dttmstartactual
        if durationmax is not None:
            self.durationmax = durationmax
        if durationmin is not None:
            self.durationmin = durationmin
        if durationml is not None:
            self.durationml = durationml
        if durationtechlimit is not None:
            self.durationtechlimit = durationtechlimit
        if exclude is not None:
            self.exclude = exclude
        if hazards is not None:
            self.hazards = hazards
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if methodtyp1 is not None:
            self.methodtyp1 = methodtyp1
        if methodtyp2 is not None:
            self.methodtyp2 = methodtyp2
        if planchange is not None:
            self.planchange = planchange
        if planphase is not None:
            self.planphase = planphase
        if source is not None:
            self.source = source
        if summary is not None:
            self.summary = summary
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if systag is not None:
            self.systag = systag

    @property
    def code1(self):
        """Gets the code1 of this JobPhasesData.  # noqa: E501


        :return: The code1 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this JobPhasesData.


        :param code1: The code1 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this JobPhasesData.  # noqa: E501


        :return: The code2 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this JobPhasesData.


        :param code2: The code2 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this JobPhasesData.  # noqa: E501


        :return: The code3 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this JobPhasesData.


        :param code3: The code3 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._code3 = code3

    @property
    def code4(self):
        """Gets the code4 of this JobPhasesData.  # noqa: E501


        :return: The code4 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._code4

    @code4.setter
    def code4(self, code4):
        """Sets the code4 of this JobPhasesData.


        :param code4: The code4 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._code4 = code4

    @property
    def costmax(self):
        """Gets the costmax of this JobPhasesData.  # noqa: E501


        :return: The costmax of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._costmax

    @costmax.setter
    def costmax(self, costmax):
        """Sets the costmax of this JobPhasesData.


        :param costmax: The costmax of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._costmax = costmax

    @property
    def costmin(self):
        """Gets the costmin of this JobPhasesData.  # noqa: E501


        :return: The costmin of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._costmin

    @costmin.setter
    def costmin(self, costmin):
        """Sets the costmin of this JobPhasesData.


        :param costmin: The costmin of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._costmin = costmin

    @property
    def costml(self):
        """Gets the costml of this JobPhasesData.  # noqa: E501


        :return: The costml of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._costml

    @costml.setter
    def costml(self, costml):
        """Sets the costml of this JobPhasesData.


        :param costml: The costml of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._costml = costml

    @property
    def costtechlimit(self):
        """Gets the costtechlimit of this JobPhasesData.  # noqa: E501


        :return: The costtechlimit of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._costtechlimit

    @costtechlimit.setter
    def costtechlimit(self, costtechlimit):
        """Sets the costtechlimit of this JobPhasesData.


        :param costtechlimit: The costtechlimit of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._costtechlimit = costtechlimit

    @property
    def definitive(self):
        """Gets the definitive of this JobPhasesData.  # noqa: E501


        :return: The definitive of this JobPhasesData.  # noqa: E501
        :rtype: bool
        """
        return self._definitive

    @definitive.setter
    def definitive(self, definitive):
        """Sets the definitive of this JobPhasesData.


        :param definitive: The definitive of this JobPhasesData.  # noqa: E501
        :type: bool
        """

        self._definitive = definitive

    @property
    def depthendplan(self):
        """Gets the depthendplan of this JobPhasesData.  # noqa: E501


        :return: The depthendplan of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._depthendplan

    @depthendplan.setter
    def depthendplan(self, depthendplan):
        """Sets the depthendplan of this JobPhasesData.


        :param depthendplan: The depthendplan of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._depthendplan = depthendplan

    @property
    def depthstartplan(self):
        """Gets the depthstartplan of this JobPhasesData.  # noqa: E501


        :return: The depthstartplan of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._depthstartplan

    @depthstartplan.setter
    def depthstartplan(self, depthstartplan):
        """Sets the depthstartplan of this JobPhasesData.


        :param depthstartplan: The depthstartplan of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._depthstartplan = depthstartplan

    @property
    def des(self):
        """Gets the des of this JobPhasesData.  # noqa: E501


        :return: The des of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this JobPhasesData.


        :param des: The des of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmendactual(self):
        """Gets the dttmendactual of this JobPhasesData.  # noqa: E501


        :return: The dttmendactual of this JobPhasesData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmendactual

    @dttmendactual.setter
    def dttmendactual(self, dttmendactual):
        """Sets the dttmendactual of this JobPhasesData.


        :param dttmendactual: The dttmendactual of this JobPhasesData.  # noqa: E501
        :type: datetime
        """

        self._dttmendactual = dttmendactual

    @property
    def dttmstartactual(self):
        """Gets the dttmstartactual of this JobPhasesData.  # noqa: E501


        :return: The dttmstartactual of this JobPhasesData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstartactual

    @dttmstartactual.setter
    def dttmstartactual(self, dttmstartactual):
        """Sets the dttmstartactual of this JobPhasesData.


        :param dttmstartactual: The dttmstartactual of this JobPhasesData.  # noqa: E501
        :type: datetime
        """

        self._dttmstartactual = dttmstartactual

    @property
    def durationmax(self):
        """Gets the durationmax of this JobPhasesData.  # noqa: E501


        :return: The durationmax of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._durationmax

    @durationmax.setter
    def durationmax(self, durationmax):
        """Sets the durationmax of this JobPhasesData.


        :param durationmax: The durationmax of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._durationmax = durationmax

    @property
    def durationmin(self):
        """Gets the durationmin of this JobPhasesData.  # noqa: E501


        :return: The durationmin of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._durationmin

    @durationmin.setter
    def durationmin(self, durationmin):
        """Sets the durationmin of this JobPhasesData.


        :param durationmin: The durationmin of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._durationmin = durationmin

    @property
    def durationml(self):
        """Gets the durationml of this JobPhasesData.  # noqa: E501


        :return: The durationml of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._durationml

    @durationml.setter
    def durationml(self, durationml):
        """Sets the durationml of this JobPhasesData.


        :param durationml: The durationml of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._durationml = durationml

    @property
    def durationtechlimit(self):
        """Gets the durationtechlimit of this JobPhasesData.  # noqa: E501


        :return: The durationtechlimit of this JobPhasesData.  # noqa: E501
        :rtype: float
        """
        return self._durationtechlimit

    @durationtechlimit.setter
    def durationtechlimit(self, durationtechlimit):
        """Sets the durationtechlimit of this JobPhasesData.


        :param durationtechlimit: The durationtechlimit of this JobPhasesData.  # noqa: E501
        :type: float
        """

        self._durationtechlimit = durationtechlimit

    @property
    def exclude(self):
        """Gets the exclude of this JobPhasesData.  # noqa: E501


        :return: The exclude of this JobPhasesData.  # noqa: E501
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this JobPhasesData.


        :param exclude: The exclude of this JobPhasesData.  # noqa: E501
        :type: bool
        """

        self._exclude = exclude

    @property
    def hazards(self):
        """Gets the hazards of this JobPhasesData.  # noqa: E501


        :return: The hazards of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._hazards

    @hazards.setter
    def hazards(self, hazards):
        """Sets the hazards of this JobPhasesData.


        :param hazards: The hazards of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._hazards = hazards

    @property
    def idrec(self):
        """Gets the idrec of this JobPhasesData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this JobPhasesData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this JobPhasesData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this JobPhasesData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this JobPhasesData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this JobPhasesData.  # noqa: E501


        :return: The idrecwellbore of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this JobPhasesData.


        :param idrecwellbore: The idrecwellbore of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this JobPhasesData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this JobPhasesData.

        id of well  # noqa: E501

        :param idwell: The idwell of this JobPhasesData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def methodtyp1(self):
        """Gets the methodtyp1 of this JobPhasesData.  # noqa: E501


        :return: The methodtyp1 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._methodtyp1

    @methodtyp1.setter
    def methodtyp1(self, methodtyp1):
        """Sets the methodtyp1 of this JobPhasesData.


        :param methodtyp1: The methodtyp1 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._methodtyp1 = methodtyp1

    @property
    def methodtyp2(self):
        """Gets the methodtyp2 of this JobPhasesData.  # noqa: E501


        :return: The methodtyp2 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._methodtyp2

    @methodtyp2.setter
    def methodtyp2(self, methodtyp2):
        """Sets the methodtyp2 of this JobPhasesData.


        :param methodtyp2: The methodtyp2 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._methodtyp2 = methodtyp2

    @property
    def planchange(self):
        """Gets the planchange of this JobPhasesData.  # noqa: E501


        :return: The planchange of this JobPhasesData.  # noqa: E501
        :rtype: bool
        """
        return self._planchange

    @planchange.setter
    def planchange(self, planchange):
        """Sets the planchange of this JobPhasesData.


        :param planchange: The planchange of this JobPhasesData.  # noqa: E501
        :type: bool
        """

        self._planchange = planchange

    @property
    def planphase(self):
        """Gets the planphase of this JobPhasesData.  # noqa: E501


        :return: The planphase of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._planphase

    @planphase.setter
    def planphase(self, planphase):
        """Sets the planphase of this JobPhasesData.


        :param planphase: The planphase of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._planphase = planphase

    @property
    def source(self):
        """Gets the source of this JobPhasesData.  # noqa: E501


        :return: The source of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this JobPhasesData.


        :param source: The source of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def summary(self):
        """Gets the summary of this JobPhasesData.  # noqa: E501


        :return: The summary of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this JobPhasesData.


        :param summary: The summary of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this JobPhasesData.  # noqa: E501


        :return: The usertxt1 of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this JobPhasesData.


        :param usertxt1: The usertxt1 of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def systag(self):
        """Gets the systag of this JobPhasesData.  # noqa: E501


        :return: The systag of this JobPhasesData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this JobPhasesData.


        :param systag: The systag of this JobPhasesData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobPhasesData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPhasesData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
