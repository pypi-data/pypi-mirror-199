# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GasShowDataData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acetyleneavg': 'float',
        'acetylenemax': 'float',
        'acetylenemin': 'float',
        'c1avg': 'float',
        'c1max': 'float',
        'c1min': 'float',
        'c2avg': 'float',
        'c2max': 'float',
        'c2min': 'float',
        'c3avg': 'float',
        'c3max': 'float',
        'c3min': 'float',
        'chromatographcycletime': 'float',
        'chromatographgasunit': 'str',
        'chromatographintrpttime': 'float',
        'chromatographtyp': 'str',
        'co2avg': 'float',
        'co2max': 'float',
        'co2min': 'float',
        'com': 'str',
        'depthbtm': 'float',
        'depthtop': 'float',
        'dttmreport': 'datetime',
        'dttmsample': 'datetime',
        'ec5avg': 'float',
        'ec5max': 'float',
        'ec5min': 'float',
        'gastraptyp': 'str',
        'h2savg': 'float',
        'h2smax': 'float',
        'h2smin': 'float',
        'ic4avg': 'float',
        'ic4max': 'float',
        'ic4min': 'float',
        'ic5avg': 'float',
        'ic5max': 'float',
        'ic5min': 'float',
        'ic6avg': 'float',
        'ic6max': 'float',
        'ic6min': 'float',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'nc4avg': 'float',
        'nc4max': 'float',
        'nc4min': 'float',
        'nc5avg': 'float',
        'nc5max': 'float',
        'nc5min': 'float',
        'nc6avg': 'float',
        'nc6max': 'float',
        'nc6min': 'float',
        'showtyp': 'str',
        'totalgasavg': 'float',
        'totalgasmax': 'float',
        'totalgasmin': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'acetyleneavg': 'acetyleneavg',
        'acetylenemax': 'acetylenemax',
        'acetylenemin': 'acetylenemin',
        'c1avg': 'c1avg',
        'c1max': 'c1max',
        'c1min': 'c1min',
        'c2avg': 'c2avg',
        'c2max': 'c2max',
        'c2min': 'c2min',
        'c3avg': 'c3avg',
        'c3max': 'c3max',
        'c3min': 'c3min',
        'chromatographcycletime': 'chromatographcycletime',
        'chromatographgasunit': 'chromatographgasunit',
        'chromatographintrpttime': 'chromatographintrpttime',
        'chromatographtyp': 'chromatographtyp',
        'co2avg': 'co2avg',
        'co2max': 'co2max',
        'co2min': 'co2min',
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'dttmreport': 'dttmreport',
        'dttmsample': 'dttmsample',
        'ec5avg': 'ec5avg',
        'ec5max': 'ec5max',
        'ec5min': 'ec5min',
        'gastraptyp': 'gastraptyp',
        'h2savg': 'h2savg',
        'h2smax': 'h2smax',
        'h2smin': 'h2smin',
        'ic4avg': 'ic4avg',
        'ic4max': 'ic4max',
        'ic4min': 'ic4min',
        'ic5avg': 'ic5avg',
        'ic5max': 'ic5max',
        'ic5min': 'ic5min',
        'ic6avg': 'ic6avg',
        'ic6max': 'ic6max',
        'ic6min': 'ic6min',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'nc4avg': 'nc4avg',
        'nc4max': 'nc4max',
        'nc4min': 'nc4min',
        'nc5avg': 'nc5avg',
        'nc5max': 'nc5max',
        'nc5min': 'nc5min',
        'nc6avg': 'nc6avg',
        'nc6max': 'nc6max',
        'nc6min': 'nc6min',
        'showtyp': 'showtyp',
        'totalgasavg': 'totalgasavg',
        'totalgasmax': 'totalgasmax',
        'totalgasmin': 'totalgasmin',
        'systag': 'systag'
    }

    def __init__(self, acetyleneavg=None, acetylenemax=None, acetylenemin=None, c1avg=None, c1max=None, c1min=None, c2avg=None, c2max=None, c2min=None, c3avg=None, c3max=None, c3min=None, chromatographcycletime=None, chromatographgasunit=None, chromatographintrpttime=None, chromatographtyp=None, co2avg=None, co2max=None, co2min=None, com=None, depthbtm=None, depthtop=None, dttmreport=None, dttmsample=None, ec5avg=None, ec5max=None, ec5min=None, gastraptyp=None, h2savg=None, h2smax=None, h2smin=None, ic4avg=None, ic4max=None, ic4min=None, ic5avg=None, ic5max=None, ic5min=None, ic6avg=None, ic6max=None, ic6min=None, iconname=None, idrec=None, idrecparent=None, idwell=None, nc4avg=None, nc4max=None, nc4min=None, nc5avg=None, nc5max=None, nc5min=None, nc6avg=None, nc6max=None, nc6min=None, showtyp=None, totalgasavg=None, totalgasmax=None, totalgasmin=None, systag=None):  # noqa: E501
        """GasShowDataData - a model defined in Swagger"""  # noqa: E501
        self._acetyleneavg = None
        self._acetylenemax = None
        self._acetylenemin = None
        self._c1avg = None
        self._c1max = None
        self._c1min = None
        self._c2avg = None
        self._c2max = None
        self._c2min = None
        self._c3avg = None
        self._c3max = None
        self._c3min = None
        self._chromatographcycletime = None
        self._chromatographgasunit = None
        self._chromatographintrpttime = None
        self._chromatographtyp = None
        self._co2avg = None
        self._co2max = None
        self._co2min = None
        self._com = None
        self._depthbtm = None
        self._depthtop = None
        self._dttmreport = None
        self._dttmsample = None
        self._ec5avg = None
        self._ec5max = None
        self._ec5min = None
        self._gastraptyp = None
        self._h2savg = None
        self._h2smax = None
        self._h2smin = None
        self._ic4avg = None
        self._ic4max = None
        self._ic4min = None
        self._ic5avg = None
        self._ic5max = None
        self._ic5min = None
        self._ic6avg = None
        self._ic6max = None
        self._ic6min = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._nc4avg = None
        self._nc4max = None
        self._nc4min = None
        self._nc5avg = None
        self._nc5max = None
        self._nc5min = None
        self._nc6avg = None
        self._nc6max = None
        self._nc6min = None
        self._showtyp = None
        self._totalgasavg = None
        self._totalgasmax = None
        self._totalgasmin = None
        self._systag = None
        self.discriminator = None
        if acetyleneavg is not None:
            self.acetyleneavg = acetyleneavg
        if acetylenemax is not None:
            self.acetylenemax = acetylenemax
        if acetylenemin is not None:
            self.acetylenemin = acetylenemin
        if c1avg is not None:
            self.c1avg = c1avg
        if c1max is not None:
            self.c1max = c1max
        if c1min is not None:
            self.c1min = c1min
        if c2avg is not None:
            self.c2avg = c2avg
        if c2max is not None:
            self.c2max = c2max
        if c2min is not None:
            self.c2min = c2min
        if c3avg is not None:
            self.c3avg = c3avg
        if c3max is not None:
            self.c3max = c3max
        if c3min is not None:
            self.c3min = c3min
        if chromatographcycletime is not None:
            self.chromatographcycletime = chromatographcycletime
        if chromatographgasunit is not None:
            self.chromatographgasunit = chromatographgasunit
        if chromatographintrpttime is not None:
            self.chromatographintrpttime = chromatographintrpttime
        if chromatographtyp is not None:
            self.chromatographtyp = chromatographtyp
        if co2avg is not None:
            self.co2avg = co2avg
        if co2max is not None:
            self.co2max = co2max
        if co2min is not None:
            self.co2min = co2min
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if dttmreport is not None:
            self.dttmreport = dttmreport
        if dttmsample is not None:
            self.dttmsample = dttmsample
        if ec5avg is not None:
            self.ec5avg = ec5avg
        if ec5max is not None:
            self.ec5max = ec5max
        if ec5min is not None:
            self.ec5min = ec5min
        if gastraptyp is not None:
            self.gastraptyp = gastraptyp
        if h2savg is not None:
            self.h2savg = h2savg
        if h2smax is not None:
            self.h2smax = h2smax
        if h2smin is not None:
            self.h2smin = h2smin
        if ic4avg is not None:
            self.ic4avg = ic4avg
        if ic4max is not None:
            self.ic4max = ic4max
        if ic4min is not None:
            self.ic4min = ic4min
        if ic5avg is not None:
            self.ic5avg = ic5avg
        if ic5max is not None:
            self.ic5max = ic5max
        if ic5min is not None:
            self.ic5min = ic5min
        if ic6avg is not None:
            self.ic6avg = ic6avg
        if ic6max is not None:
            self.ic6max = ic6max
        if ic6min is not None:
            self.ic6min = ic6min
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if nc4avg is not None:
            self.nc4avg = nc4avg
        if nc4max is not None:
            self.nc4max = nc4max
        if nc4min is not None:
            self.nc4min = nc4min
        if nc5avg is not None:
            self.nc5avg = nc5avg
        if nc5max is not None:
            self.nc5max = nc5max
        if nc5min is not None:
            self.nc5min = nc5min
        if nc6avg is not None:
            self.nc6avg = nc6avg
        if nc6max is not None:
            self.nc6max = nc6max
        if nc6min is not None:
            self.nc6min = nc6min
        if showtyp is not None:
            self.showtyp = showtyp
        if totalgasavg is not None:
            self.totalgasavg = totalgasavg
        if totalgasmax is not None:
            self.totalgasmax = totalgasmax
        if totalgasmin is not None:
            self.totalgasmin = totalgasmin
        if systag is not None:
            self.systag = systag

    @property
    def acetyleneavg(self):
        """Gets the acetyleneavg of this GasShowDataData.  # noqa: E501


        :return: The acetyleneavg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._acetyleneavg

    @acetyleneavg.setter
    def acetyleneavg(self, acetyleneavg):
        """Sets the acetyleneavg of this GasShowDataData.


        :param acetyleneavg: The acetyleneavg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._acetyleneavg = acetyleneavg

    @property
    def acetylenemax(self):
        """Gets the acetylenemax of this GasShowDataData.  # noqa: E501


        :return: The acetylenemax of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._acetylenemax

    @acetylenemax.setter
    def acetylenemax(self, acetylenemax):
        """Sets the acetylenemax of this GasShowDataData.


        :param acetylenemax: The acetylenemax of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._acetylenemax = acetylenemax

    @property
    def acetylenemin(self):
        """Gets the acetylenemin of this GasShowDataData.  # noqa: E501


        :return: The acetylenemin of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._acetylenemin

    @acetylenemin.setter
    def acetylenemin(self, acetylenemin):
        """Sets the acetylenemin of this GasShowDataData.


        :param acetylenemin: The acetylenemin of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._acetylenemin = acetylenemin

    @property
    def c1avg(self):
        """Gets the c1avg of this GasShowDataData.  # noqa: E501


        :return: The c1avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c1avg

    @c1avg.setter
    def c1avg(self, c1avg):
        """Sets the c1avg of this GasShowDataData.


        :param c1avg: The c1avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c1avg = c1avg

    @property
    def c1max(self):
        """Gets the c1max of this GasShowDataData.  # noqa: E501


        :return: The c1max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c1max

    @c1max.setter
    def c1max(self, c1max):
        """Sets the c1max of this GasShowDataData.


        :param c1max: The c1max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c1max = c1max

    @property
    def c1min(self):
        """Gets the c1min of this GasShowDataData.  # noqa: E501


        :return: The c1min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c1min

    @c1min.setter
    def c1min(self, c1min):
        """Sets the c1min of this GasShowDataData.


        :param c1min: The c1min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c1min = c1min

    @property
    def c2avg(self):
        """Gets the c2avg of this GasShowDataData.  # noqa: E501


        :return: The c2avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c2avg

    @c2avg.setter
    def c2avg(self, c2avg):
        """Sets the c2avg of this GasShowDataData.


        :param c2avg: The c2avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c2avg = c2avg

    @property
    def c2max(self):
        """Gets the c2max of this GasShowDataData.  # noqa: E501


        :return: The c2max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c2max

    @c2max.setter
    def c2max(self, c2max):
        """Sets the c2max of this GasShowDataData.


        :param c2max: The c2max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c2max = c2max

    @property
    def c2min(self):
        """Gets the c2min of this GasShowDataData.  # noqa: E501


        :return: The c2min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c2min

    @c2min.setter
    def c2min(self, c2min):
        """Sets the c2min of this GasShowDataData.


        :param c2min: The c2min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c2min = c2min

    @property
    def c3avg(self):
        """Gets the c3avg of this GasShowDataData.  # noqa: E501


        :return: The c3avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c3avg

    @c3avg.setter
    def c3avg(self, c3avg):
        """Sets the c3avg of this GasShowDataData.


        :param c3avg: The c3avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c3avg = c3avg

    @property
    def c3max(self):
        """Gets the c3max of this GasShowDataData.  # noqa: E501


        :return: The c3max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c3max

    @c3max.setter
    def c3max(self, c3max):
        """Sets the c3max of this GasShowDataData.


        :param c3max: The c3max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c3max = c3max

    @property
    def c3min(self):
        """Gets the c3min of this GasShowDataData.  # noqa: E501


        :return: The c3min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._c3min

    @c3min.setter
    def c3min(self, c3min):
        """Sets the c3min of this GasShowDataData.


        :param c3min: The c3min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._c3min = c3min

    @property
    def chromatographcycletime(self):
        """Gets the chromatographcycletime of this GasShowDataData.  # noqa: E501


        :return: The chromatographcycletime of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._chromatographcycletime

    @chromatographcycletime.setter
    def chromatographcycletime(self, chromatographcycletime):
        """Sets the chromatographcycletime of this GasShowDataData.


        :param chromatographcycletime: The chromatographcycletime of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._chromatographcycletime = chromatographcycletime

    @property
    def chromatographgasunit(self):
        """Gets the chromatographgasunit of this GasShowDataData.  # noqa: E501


        :return: The chromatographgasunit of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._chromatographgasunit

    @chromatographgasunit.setter
    def chromatographgasunit(self, chromatographgasunit):
        """Sets the chromatographgasunit of this GasShowDataData.


        :param chromatographgasunit: The chromatographgasunit of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._chromatographgasunit = chromatographgasunit

    @property
    def chromatographintrpttime(self):
        """Gets the chromatographintrpttime of this GasShowDataData.  # noqa: E501


        :return: The chromatographintrpttime of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._chromatographintrpttime

    @chromatographintrpttime.setter
    def chromatographintrpttime(self, chromatographintrpttime):
        """Sets the chromatographintrpttime of this GasShowDataData.


        :param chromatographintrpttime: The chromatographintrpttime of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._chromatographintrpttime = chromatographintrpttime

    @property
    def chromatographtyp(self):
        """Gets the chromatographtyp of this GasShowDataData.  # noqa: E501


        :return: The chromatographtyp of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._chromatographtyp

    @chromatographtyp.setter
    def chromatographtyp(self, chromatographtyp):
        """Sets the chromatographtyp of this GasShowDataData.


        :param chromatographtyp: The chromatographtyp of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._chromatographtyp = chromatographtyp

    @property
    def co2avg(self):
        """Gets the co2avg of this GasShowDataData.  # noqa: E501


        :return: The co2avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._co2avg

    @co2avg.setter
    def co2avg(self, co2avg):
        """Sets the co2avg of this GasShowDataData.


        :param co2avg: The co2avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._co2avg = co2avg

    @property
    def co2max(self):
        """Gets the co2max of this GasShowDataData.  # noqa: E501


        :return: The co2max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._co2max

    @co2max.setter
    def co2max(self, co2max):
        """Sets the co2max of this GasShowDataData.


        :param co2max: The co2max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._co2max = co2max

    @property
    def co2min(self):
        """Gets the co2min of this GasShowDataData.  # noqa: E501


        :return: The co2min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._co2min

    @co2min.setter
    def co2min(self, co2min):
        """Sets the co2min of this GasShowDataData.


        :param co2min: The co2min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._co2min = co2min

    @property
    def com(self):
        """Gets the com of this GasShowDataData.  # noqa: E501


        :return: The com of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this GasShowDataData.


        :param com: The com of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this GasShowDataData.  # noqa: E501


        :return: The depthbtm of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this GasShowDataData.


        :param depthbtm: The depthbtm of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this GasShowDataData.  # noqa: E501


        :return: The depthtop of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this GasShowDataData.


        :param depthtop: The depthtop of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def dttmreport(self):
        """Gets the dttmreport of this GasShowDataData.  # noqa: E501


        :return: The dttmreport of this GasShowDataData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmreport

    @dttmreport.setter
    def dttmreport(self, dttmreport):
        """Sets the dttmreport of this GasShowDataData.


        :param dttmreport: The dttmreport of this GasShowDataData.  # noqa: E501
        :type: datetime
        """

        self._dttmreport = dttmreport

    @property
    def dttmsample(self):
        """Gets the dttmsample of this GasShowDataData.  # noqa: E501


        :return: The dttmsample of this GasShowDataData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmsample

    @dttmsample.setter
    def dttmsample(self, dttmsample):
        """Sets the dttmsample of this GasShowDataData.


        :param dttmsample: The dttmsample of this GasShowDataData.  # noqa: E501
        :type: datetime
        """

        self._dttmsample = dttmsample

    @property
    def ec5avg(self):
        """Gets the ec5avg of this GasShowDataData.  # noqa: E501


        :return: The ec5avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ec5avg

    @ec5avg.setter
    def ec5avg(self, ec5avg):
        """Sets the ec5avg of this GasShowDataData.


        :param ec5avg: The ec5avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ec5avg = ec5avg

    @property
    def ec5max(self):
        """Gets the ec5max of this GasShowDataData.  # noqa: E501


        :return: The ec5max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ec5max

    @ec5max.setter
    def ec5max(self, ec5max):
        """Sets the ec5max of this GasShowDataData.


        :param ec5max: The ec5max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ec5max = ec5max

    @property
    def ec5min(self):
        """Gets the ec5min of this GasShowDataData.  # noqa: E501


        :return: The ec5min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ec5min

    @ec5min.setter
    def ec5min(self, ec5min):
        """Sets the ec5min of this GasShowDataData.


        :param ec5min: The ec5min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ec5min = ec5min

    @property
    def gastraptyp(self):
        """Gets the gastraptyp of this GasShowDataData.  # noqa: E501


        :return: The gastraptyp of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._gastraptyp

    @gastraptyp.setter
    def gastraptyp(self, gastraptyp):
        """Sets the gastraptyp of this GasShowDataData.


        :param gastraptyp: The gastraptyp of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._gastraptyp = gastraptyp

    @property
    def h2savg(self):
        """Gets the h2savg of this GasShowDataData.  # noqa: E501


        :return: The h2savg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._h2savg

    @h2savg.setter
    def h2savg(self, h2savg):
        """Sets the h2savg of this GasShowDataData.


        :param h2savg: The h2savg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._h2savg = h2savg

    @property
    def h2smax(self):
        """Gets the h2smax of this GasShowDataData.  # noqa: E501


        :return: The h2smax of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._h2smax

    @h2smax.setter
    def h2smax(self, h2smax):
        """Sets the h2smax of this GasShowDataData.


        :param h2smax: The h2smax of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._h2smax = h2smax

    @property
    def h2smin(self):
        """Gets the h2smin of this GasShowDataData.  # noqa: E501


        :return: The h2smin of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._h2smin

    @h2smin.setter
    def h2smin(self, h2smin):
        """Sets the h2smin of this GasShowDataData.


        :param h2smin: The h2smin of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._h2smin = h2smin

    @property
    def ic4avg(self):
        """Gets the ic4avg of this GasShowDataData.  # noqa: E501


        :return: The ic4avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic4avg

    @ic4avg.setter
    def ic4avg(self, ic4avg):
        """Sets the ic4avg of this GasShowDataData.


        :param ic4avg: The ic4avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic4avg = ic4avg

    @property
    def ic4max(self):
        """Gets the ic4max of this GasShowDataData.  # noqa: E501


        :return: The ic4max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic4max

    @ic4max.setter
    def ic4max(self, ic4max):
        """Sets the ic4max of this GasShowDataData.


        :param ic4max: The ic4max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic4max = ic4max

    @property
    def ic4min(self):
        """Gets the ic4min of this GasShowDataData.  # noqa: E501


        :return: The ic4min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic4min

    @ic4min.setter
    def ic4min(self, ic4min):
        """Sets the ic4min of this GasShowDataData.


        :param ic4min: The ic4min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic4min = ic4min

    @property
    def ic5avg(self):
        """Gets the ic5avg of this GasShowDataData.  # noqa: E501


        :return: The ic5avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic5avg

    @ic5avg.setter
    def ic5avg(self, ic5avg):
        """Sets the ic5avg of this GasShowDataData.


        :param ic5avg: The ic5avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic5avg = ic5avg

    @property
    def ic5max(self):
        """Gets the ic5max of this GasShowDataData.  # noqa: E501


        :return: The ic5max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic5max

    @ic5max.setter
    def ic5max(self, ic5max):
        """Sets the ic5max of this GasShowDataData.


        :param ic5max: The ic5max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic5max = ic5max

    @property
    def ic5min(self):
        """Gets the ic5min of this GasShowDataData.  # noqa: E501


        :return: The ic5min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic5min

    @ic5min.setter
    def ic5min(self, ic5min):
        """Sets the ic5min of this GasShowDataData.


        :param ic5min: The ic5min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic5min = ic5min

    @property
    def ic6avg(self):
        """Gets the ic6avg of this GasShowDataData.  # noqa: E501


        :return: The ic6avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic6avg

    @ic6avg.setter
    def ic6avg(self, ic6avg):
        """Sets the ic6avg of this GasShowDataData.


        :param ic6avg: The ic6avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic6avg = ic6avg

    @property
    def ic6max(self):
        """Gets the ic6max of this GasShowDataData.  # noqa: E501


        :return: The ic6max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic6max

    @ic6max.setter
    def ic6max(self, ic6max):
        """Sets the ic6max of this GasShowDataData.


        :param ic6max: The ic6max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic6max = ic6max

    @property
    def ic6min(self):
        """Gets the ic6min of this GasShowDataData.  # noqa: E501


        :return: The ic6min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._ic6min

    @ic6min.setter
    def ic6min(self, ic6min):
        """Sets the ic6min of this GasShowDataData.


        :param ic6min: The ic6min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._ic6min = ic6min

    @property
    def iconname(self):
        """Gets the iconname of this GasShowDataData.  # noqa: E501


        :return: The iconname of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this GasShowDataData.


        :param iconname: The iconname of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this GasShowDataData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this GasShowDataData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this GasShowDataData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this GasShowDataData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this GasShowDataData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this GasShowDataData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this GasShowDataData.

        id of well  # noqa: E501

        :param idwell: The idwell of this GasShowDataData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def nc4avg(self):
        """Gets the nc4avg of this GasShowDataData.  # noqa: E501


        :return: The nc4avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc4avg

    @nc4avg.setter
    def nc4avg(self, nc4avg):
        """Sets the nc4avg of this GasShowDataData.


        :param nc4avg: The nc4avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc4avg = nc4avg

    @property
    def nc4max(self):
        """Gets the nc4max of this GasShowDataData.  # noqa: E501


        :return: The nc4max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc4max

    @nc4max.setter
    def nc4max(self, nc4max):
        """Sets the nc4max of this GasShowDataData.


        :param nc4max: The nc4max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc4max = nc4max

    @property
    def nc4min(self):
        """Gets the nc4min of this GasShowDataData.  # noqa: E501


        :return: The nc4min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc4min

    @nc4min.setter
    def nc4min(self, nc4min):
        """Sets the nc4min of this GasShowDataData.


        :param nc4min: The nc4min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc4min = nc4min

    @property
    def nc5avg(self):
        """Gets the nc5avg of this GasShowDataData.  # noqa: E501


        :return: The nc5avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc5avg

    @nc5avg.setter
    def nc5avg(self, nc5avg):
        """Sets the nc5avg of this GasShowDataData.


        :param nc5avg: The nc5avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc5avg = nc5avg

    @property
    def nc5max(self):
        """Gets the nc5max of this GasShowDataData.  # noqa: E501


        :return: The nc5max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc5max

    @nc5max.setter
    def nc5max(self, nc5max):
        """Sets the nc5max of this GasShowDataData.


        :param nc5max: The nc5max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc5max = nc5max

    @property
    def nc5min(self):
        """Gets the nc5min of this GasShowDataData.  # noqa: E501


        :return: The nc5min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc5min

    @nc5min.setter
    def nc5min(self, nc5min):
        """Sets the nc5min of this GasShowDataData.


        :param nc5min: The nc5min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc5min = nc5min

    @property
    def nc6avg(self):
        """Gets the nc6avg of this GasShowDataData.  # noqa: E501


        :return: The nc6avg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc6avg

    @nc6avg.setter
    def nc6avg(self, nc6avg):
        """Sets the nc6avg of this GasShowDataData.


        :param nc6avg: The nc6avg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc6avg = nc6avg

    @property
    def nc6max(self):
        """Gets the nc6max of this GasShowDataData.  # noqa: E501


        :return: The nc6max of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc6max

    @nc6max.setter
    def nc6max(self, nc6max):
        """Sets the nc6max of this GasShowDataData.


        :param nc6max: The nc6max of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc6max = nc6max

    @property
    def nc6min(self):
        """Gets the nc6min of this GasShowDataData.  # noqa: E501


        :return: The nc6min of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._nc6min

    @nc6min.setter
    def nc6min(self, nc6min):
        """Sets the nc6min of this GasShowDataData.


        :param nc6min: The nc6min of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._nc6min = nc6min

    @property
    def showtyp(self):
        """Gets the showtyp of this GasShowDataData.  # noqa: E501


        :return: The showtyp of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._showtyp

    @showtyp.setter
    def showtyp(self, showtyp):
        """Sets the showtyp of this GasShowDataData.


        :param showtyp: The showtyp of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._showtyp = showtyp

    @property
    def totalgasavg(self):
        """Gets the totalgasavg of this GasShowDataData.  # noqa: E501


        :return: The totalgasavg of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._totalgasavg

    @totalgasavg.setter
    def totalgasavg(self, totalgasavg):
        """Sets the totalgasavg of this GasShowDataData.


        :param totalgasavg: The totalgasavg of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._totalgasavg = totalgasavg

    @property
    def totalgasmax(self):
        """Gets the totalgasmax of this GasShowDataData.  # noqa: E501


        :return: The totalgasmax of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._totalgasmax

    @totalgasmax.setter
    def totalgasmax(self, totalgasmax):
        """Sets the totalgasmax of this GasShowDataData.


        :param totalgasmax: The totalgasmax of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._totalgasmax = totalgasmax

    @property
    def totalgasmin(self):
        """Gets the totalgasmin of this GasShowDataData.  # noqa: E501


        :return: The totalgasmin of this GasShowDataData.  # noqa: E501
        :rtype: float
        """
        return self._totalgasmin

    @totalgasmin.setter
    def totalgasmin(self, totalgasmin):
        """Sets the totalgasmin of this GasShowDataData.


        :param totalgasmin: The totalgasmin of this GasShowDataData.  # noqa: E501
        :type: float
        """

        self._totalgasmin = totalgasmin

    @property
    def systag(self):
        """Gets the systag of this GasShowDataData.  # noqa: E501


        :return: The systag of this GasShowDataData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this GasShowDataData.


        :param systag: The systag of this GasShowDataData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GasShowDataData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GasShowDataData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
