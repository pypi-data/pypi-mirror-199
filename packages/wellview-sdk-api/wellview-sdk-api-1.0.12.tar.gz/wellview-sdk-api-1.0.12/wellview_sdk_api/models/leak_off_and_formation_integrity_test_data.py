# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeakOffAndFormationIntegrityTestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'densityfluid': 'float',
        'depth': 'float',
        'dttm': 'datetime',
        'fluidtyp': 'str',
        'idrec': 'str',
        'idreccas': 'str',
        'idrecfrm': 'str',
        'idwell': 'str',
        'leakoffoccurred': 'bool',
        'leakoffpres': 'float',
        'testtyp': 'str',
        'volpumped': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'densityfluid': 'densityfluid',
        'depth': 'depth',
        'dttm': 'dttm',
        'fluidtyp': 'fluidtyp',
        'idrec': 'idrec',
        'idreccas': 'idreccas',
        'idrecfrm': 'idrecfrm',
        'idwell': 'idwell',
        'leakoffoccurred': 'leakoffoccurred',
        'leakoffpres': 'leakoffpres',
        'testtyp': 'testtyp',
        'volpumped': 'volpumped',
        'systag': 'systag'
    }

    def __init__(self, com=None, densityfluid=None, depth=None, dttm=None, fluidtyp=None, idrec=None, idreccas=None, idrecfrm=None, idwell=None, leakoffoccurred=None, leakoffpres=None, testtyp=None, volpumped=None, systag=None):  # noqa: E501
        """LeakOffAndFormationIntegrityTestData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._densityfluid = None
        self._depth = None
        self._dttm = None
        self._fluidtyp = None
        self._idrec = None
        self._idreccas = None
        self._idrecfrm = None
        self._idwell = None
        self._leakoffoccurred = None
        self._leakoffpres = None
        self._testtyp = None
        self._volpumped = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if densityfluid is not None:
            self.densityfluid = densityfluid
        if depth is not None:
            self.depth = depth
        if dttm is not None:
            self.dttm = dttm
        if fluidtyp is not None:
            self.fluidtyp = fluidtyp
        if idrec is not None:
            self.idrec = idrec
        if idreccas is not None:
            self.idreccas = idreccas
        if idrecfrm is not None:
            self.idrecfrm = idrecfrm
        self.idwell = idwell
        if leakoffoccurred is not None:
            self.leakoffoccurred = leakoffoccurred
        if leakoffpres is not None:
            self.leakoffpres = leakoffpres
        if testtyp is not None:
            self.testtyp = testtyp
        if volpumped is not None:
            self.volpumped = volpumped
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The com of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this LeakOffAndFormationIntegrityTestData.


        :param com: The com of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densityfluid(self):
        """Gets the densityfluid of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The densityfluid of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: float
        """
        return self._densityfluid

    @densityfluid.setter
    def densityfluid(self, densityfluid):
        """Sets the densityfluid of this LeakOffAndFormationIntegrityTestData.


        :param densityfluid: The densityfluid of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: float
        """

        self._densityfluid = densityfluid

    @property
    def depth(self):
        """Gets the depth of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The depth of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this LeakOffAndFormationIntegrityTestData.


        :param depth: The depth of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def dttm(self):
        """Gets the dttm of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The dttm of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this LeakOffAndFormationIntegrityTestData.


        :param dttm: The dttm of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def fluidtyp(self):
        """Gets the fluidtyp of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The fluidtyp of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._fluidtyp

    @fluidtyp.setter
    def fluidtyp(self, fluidtyp):
        """Sets the fluidtyp of this LeakOffAndFormationIntegrityTestData.


        :param fluidtyp: The fluidtyp of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._fluidtyp = fluidtyp

    @property
    def idrec(self):
        """Gets the idrec of this LeakOffAndFormationIntegrityTestData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this LeakOffAndFormationIntegrityTestData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idreccas(self):
        """Gets the idreccas of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The idreccas of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idreccas

    @idreccas.setter
    def idreccas(self, idreccas):
        """Sets the idreccas of this LeakOffAndFormationIntegrityTestData.


        :param idreccas: The idreccas of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._idreccas = idreccas

    @property
    def idrecfrm(self):
        """Gets the idrecfrm of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The idrecfrm of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecfrm

    @idrecfrm.setter
    def idrecfrm(self, idrecfrm):
        """Sets the idrecfrm of this LeakOffAndFormationIntegrityTestData.


        :param idrecfrm: The idrecfrm of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._idrecfrm = idrecfrm

    @property
    def idwell(self):
        """Gets the idwell of this LeakOffAndFormationIntegrityTestData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this LeakOffAndFormationIntegrityTestData.

        id of well  # noqa: E501

        :param idwell: The idwell of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def leakoffoccurred(self):
        """Gets the leakoffoccurred of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The leakoffoccurred of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: bool
        """
        return self._leakoffoccurred

    @leakoffoccurred.setter
    def leakoffoccurred(self, leakoffoccurred):
        """Sets the leakoffoccurred of this LeakOffAndFormationIntegrityTestData.


        :param leakoffoccurred: The leakoffoccurred of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: bool
        """

        self._leakoffoccurred = leakoffoccurred

    @property
    def leakoffpres(self):
        """Gets the leakoffpres of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The leakoffpres of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: float
        """
        return self._leakoffpres

    @leakoffpres.setter
    def leakoffpres(self, leakoffpres):
        """Sets the leakoffpres of this LeakOffAndFormationIntegrityTestData.


        :param leakoffpres: The leakoffpres of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: float
        """

        self._leakoffpres = leakoffpres

    @property
    def testtyp(self):
        """Gets the testtyp of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The testtyp of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._testtyp

    @testtyp.setter
    def testtyp(self, testtyp):
        """Sets the testtyp of this LeakOffAndFormationIntegrityTestData.


        :param testtyp: The testtyp of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._testtyp = testtyp

    @property
    def volpumped(self):
        """Gets the volpumped of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The volpumped of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: float
        """
        return self._volpumped

    @volpumped.setter
    def volpumped(self, volpumped):
        """Sets the volpumped of this LeakOffAndFormationIntegrityTestData.


        :param volpumped: The volpumped of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: float
        """

        self._volpumped = volpumped

    @property
    def systag(self):
        """Gets the systag of this LeakOffAndFormationIntegrityTestData.  # noqa: E501


        :return: The systag of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this LeakOffAndFormationIntegrityTestData.


        :param systag: The systag of this LeakOffAndFormationIntegrityTestData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeakOffAndFormationIntegrityTestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeakOffAndFormationIntegrityTestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
