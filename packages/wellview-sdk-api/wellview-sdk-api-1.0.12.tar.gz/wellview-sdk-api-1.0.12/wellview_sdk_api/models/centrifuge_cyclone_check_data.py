# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CentrifugeCycloneCheckData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'densityfeed': 'float',
        'densityof': 'float',
        'densityuf': 'float',
        'dischargepoint': 'str',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'note': 'str',
        'oil': 'float',
        'ratefeed': 'float',
        'rateof': 'float',
        'rateuf': 'float',
        'rpm': 'int',
        'runhours': 'float',
        'suctionpoint': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'densityfeed': 'densityfeed',
        'densityof': 'densityof',
        'densityuf': 'densityuf',
        'dischargepoint': 'dischargepoint',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'note': 'note',
        'oil': 'oil',
        'ratefeed': 'ratefeed',
        'rateof': 'rateof',
        'rateuf': 'rateuf',
        'rpm': 'rpm',
        'runhours': 'runhours',
        'suctionpoint': 'suctionpoint',
        'systag': 'systag'
    }

    def __init__(self, densityfeed=None, densityof=None, densityuf=None, dischargepoint=None, dttm=None, idrec=None, idrecparent=None, idwell=None, note=None, oil=None, ratefeed=None, rateof=None, rateuf=None, rpm=None, runhours=None, suctionpoint=None, systag=None):  # noqa: E501
        """CentrifugeCycloneCheckData - a model defined in Swagger"""  # noqa: E501
        self._densityfeed = None
        self._densityof = None
        self._densityuf = None
        self._dischargepoint = None
        self._dttm = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._note = None
        self._oil = None
        self._ratefeed = None
        self._rateof = None
        self._rateuf = None
        self._rpm = None
        self._runhours = None
        self._suctionpoint = None
        self._systag = None
        self.discriminator = None
        if densityfeed is not None:
            self.densityfeed = densityfeed
        if densityof is not None:
            self.densityof = densityof
        if densityuf is not None:
            self.densityuf = densityuf
        if dischargepoint is not None:
            self.dischargepoint = dischargepoint
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if note is not None:
            self.note = note
        if oil is not None:
            self.oil = oil
        if ratefeed is not None:
            self.ratefeed = ratefeed
        if rateof is not None:
            self.rateof = rateof
        if rateuf is not None:
            self.rateuf = rateuf
        if rpm is not None:
            self.rpm = rpm
        if runhours is not None:
            self.runhours = runhours
        if suctionpoint is not None:
            self.suctionpoint = suctionpoint
        if systag is not None:
            self.systag = systag

    @property
    def densityfeed(self):
        """Gets the densityfeed of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The densityfeed of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._densityfeed

    @densityfeed.setter
    def densityfeed(self, densityfeed):
        """Sets the densityfeed of this CentrifugeCycloneCheckData.


        :param densityfeed: The densityfeed of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._densityfeed = densityfeed

    @property
    def densityof(self):
        """Gets the densityof of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The densityof of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._densityof

    @densityof.setter
    def densityof(self, densityof):
        """Sets the densityof of this CentrifugeCycloneCheckData.


        :param densityof: The densityof of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._densityof = densityof

    @property
    def densityuf(self):
        """Gets the densityuf of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The densityuf of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._densityuf

    @densityuf.setter
    def densityuf(self, densityuf):
        """Sets the densityuf of this CentrifugeCycloneCheckData.


        :param densityuf: The densityuf of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._densityuf = densityuf

    @property
    def dischargepoint(self):
        """Gets the dischargepoint of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The dischargepoint of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._dischargepoint

    @dischargepoint.setter
    def dischargepoint(self, dischargepoint):
        """Sets the dischargepoint of this CentrifugeCycloneCheckData.


        :param dischargepoint: The dischargepoint of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """

        self._dischargepoint = dischargepoint

    @property
    def dttm(self):
        """Gets the dttm of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The dttm of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this CentrifugeCycloneCheckData.


        :param dttm: The dttm of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this CentrifugeCycloneCheckData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CentrifugeCycloneCheckData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CentrifugeCycloneCheckData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CentrifugeCycloneCheckData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CentrifugeCycloneCheckData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CentrifugeCycloneCheckData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def note(self):
        """Gets the note of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The note of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CentrifugeCycloneCheckData.


        :param note: The note of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def oil(self):
        """Gets the oil of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The oil of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._oil

    @oil.setter
    def oil(self, oil):
        """Sets the oil of this CentrifugeCycloneCheckData.


        :param oil: The oil of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._oil = oil

    @property
    def ratefeed(self):
        """Gets the ratefeed of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The ratefeed of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._ratefeed

    @ratefeed.setter
    def ratefeed(self, ratefeed):
        """Sets the ratefeed of this CentrifugeCycloneCheckData.


        :param ratefeed: The ratefeed of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._ratefeed = ratefeed

    @property
    def rateof(self):
        """Gets the rateof of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The rateof of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._rateof

    @rateof.setter
    def rateof(self, rateof):
        """Sets the rateof of this CentrifugeCycloneCheckData.


        :param rateof: The rateof of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._rateof = rateof

    @property
    def rateuf(self):
        """Gets the rateuf of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The rateuf of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._rateuf

    @rateuf.setter
    def rateuf(self, rateuf):
        """Sets the rateuf of this CentrifugeCycloneCheckData.


        :param rateuf: The rateuf of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._rateuf = rateuf

    @property
    def rpm(self):
        """Gets the rpm of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The rpm of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: int
        """
        return self._rpm

    @rpm.setter
    def rpm(self, rpm):
        """Sets the rpm of this CentrifugeCycloneCheckData.


        :param rpm: The rpm of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: int
        """

        self._rpm = rpm

    @property
    def runhours(self):
        """Gets the runhours of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The runhours of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: float
        """
        return self._runhours

    @runhours.setter
    def runhours(self, runhours):
        """Sets the runhours of this CentrifugeCycloneCheckData.


        :param runhours: The runhours of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: float
        """

        self._runhours = runhours

    @property
    def suctionpoint(self):
        """Gets the suctionpoint of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The suctionpoint of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._suctionpoint

    @suctionpoint.setter
    def suctionpoint(self, suctionpoint):
        """Sets the suctionpoint of this CentrifugeCycloneCheckData.


        :param suctionpoint: The suctionpoint of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """

        self._suctionpoint = suctionpoint

    @property
    def systag(self):
        """Gets the systag of this CentrifugeCycloneCheckData.  # noqa: E501


        :return: The systag of this CentrifugeCycloneCheckData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CentrifugeCycloneCheckData.


        :param systag: The systag of this CentrifugeCycloneCheckData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CentrifugeCycloneCheckData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CentrifugeCycloneCheckData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
