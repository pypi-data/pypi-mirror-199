# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CarterLocationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'irregularsection': 'bool',
        'note': 'str',
        'quadranglemin': 'float',
        'quadranglename': 'str',
        'quarter1': 'str',
        'quarter2': 'str',
        'quarter3': 'str',
        'quarter4': 'str',
        'range': 'float',
        'rangedir': 'str',
        'section': 'float',
        'source': 'str',
        'township': 'str',
        'townshipdir': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'irregularsection': 'irregularsection',
        'note': 'note',
        'quadranglemin': 'quadranglemin',
        'quadranglename': 'quadranglename',
        'quarter1': 'quarter1',
        'quarter2': 'quarter2',
        'quarter3': 'quarter3',
        'quarter4': 'quarter4',
        'range': 'range',
        'rangedir': 'rangedir',
        'section': 'section',
        'source': 'source',
        'township': 'township',
        'townshipdir': 'townshipdir',
        'systag': 'systag'
    }

    def __init__(self, idrec=None, idrecparent=None, idwell=None, irregularsection=None, note=None, quadranglemin=None, quadranglename=None, quarter1=None, quarter2=None, quarter3=None, quarter4=None, range=None, rangedir=None, section=None, source=None, township=None, townshipdir=None, systag=None):  # noqa: E501
        """CarterLocationData - a model defined in Swagger"""  # noqa: E501
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._irregularsection = None
        self._note = None
        self._quadranglemin = None
        self._quadranglename = None
        self._quarter1 = None
        self._quarter2 = None
        self._quarter3 = None
        self._quarter4 = None
        self._range = None
        self._rangedir = None
        self._section = None
        self._source = None
        self._township = None
        self._townshipdir = None
        self._systag = None
        self.discriminator = None
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if irregularsection is not None:
            self.irregularsection = irregularsection
        if note is not None:
            self.note = note
        if quadranglemin is not None:
            self.quadranglemin = quadranglemin
        if quadranglename is not None:
            self.quadranglename = quadranglename
        if quarter1 is not None:
            self.quarter1 = quarter1
        if quarter2 is not None:
            self.quarter2 = quarter2
        if quarter3 is not None:
            self.quarter3 = quarter3
        if quarter4 is not None:
            self.quarter4 = quarter4
        if range is not None:
            self.range = range
        if rangedir is not None:
            self.rangedir = rangedir
        if section is not None:
            self.section = section
        if source is not None:
            self.source = source
        if township is not None:
            self.township = township
        if townshipdir is not None:
            self.townshipdir = townshipdir
        if systag is not None:
            self.systag = systag

    @property
    def idrec(self):
        """Gets the idrec of this CarterLocationData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CarterLocationData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this CarterLocationData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this CarterLocationData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this CarterLocationData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this CarterLocationData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CarterLocationData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CarterLocationData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def irregularsection(self):
        """Gets the irregularsection of this CarterLocationData.  # noqa: E501


        :return: The irregularsection of this CarterLocationData.  # noqa: E501
        :rtype: bool
        """
        return self._irregularsection

    @irregularsection.setter
    def irregularsection(self, irregularsection):
        """Sets the irregularsection of this CarterLocationData.


        :param irregularsection: The irregularsection of this CarterLocationData.  # noqa: E501
        :type: bool
        """

        self._irregularsection = irregularsection

    @property
    def note(self):
        """Gets the note of this CarterLocationData.  # noqa: E501


        :return: The note of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CarterLocationData.


        :param note: The note of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def quadranglemin(self):
        """Gets the quadranglemin of this CarterLocationData.  # noqa: E501


        :return: The quadranglemin of this CarterLocationData.  # noqa: E501
        :rtype: float
        """
        return self._quadranglemin

    @quadranglemin.setter
    def quadranglemin(self, quadranglemin):
        """Sets the quadranglemin of this CarterLocationData.


        :param quadranglemin: The quadranglemin of this CarterLocationData.  # noqa: E501
        :type: float
        """

        self._quadranglemin = quadranglemin

    @property
    def quadranglename(self):
        """Gets the quadranglename of this CarterLocationData.  # noqa: E501


        :return: The quadranglename of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._quadranglename

    @quadranglename.setter
    def quadranglename(self, quadranglename):
        """Sets the quadranglename of this CarterLocationData.


        :param quadranglename: The quadranglename of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._quadranglename = quadranglename

    @property
    def quarter1(self):
        """Gets the quarter1 of this CarterLocationData.  # noqa: E501


        :return: The quarter1 of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._quarter1

    @quarter1.setter
    def quarter1(self, quarter1):
        """Sets the quarter1 of this CarterLocationData.


        :param quarter1: The quarter1 of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._quarter1 = quarter1

    @property
    def quarter2(self):
        """Gets the quarter2 of this CarterLocationData.  # noqa: E501


        :return: The quarter2 of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._quarter2

    @quarter2.setter
    def quarter2(self, quarter2):
        """Sets the quarter2 of this CarterLocationData.


        :param quarter2: The quarter2 of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._quarter2 = quarter2

    @property
    def quarter3(self):
        """Gets the quarter3 of this CarterLocationData.  # noqa: E501


        :return: The quarter3 of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._quarter3

    @quarter3.setter
    def quarter3(self, quarter3):
        """Sets the quarter3 of this CarterLocationData.


        :param quarter3: The quarter3 of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._quarter3 = quarter3

    @property
    def quarter4(self):
        """Gets the quarter4 of this CarterLocationData.  # noqa: E501


        :return: The quarter4 of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._quarter4

    @quarter4.setter
    def quarter4(self, quarter4):
        """Sets the quarter4 of this CarterLocationData.


        :param quarter4: The quarter4 of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._quarter4 = quarter4

    @property
    def range(self):
        """Gets the range of this CarterLocationData.  # noqa: E501


        :return: The range of this CarterLocationData.  # noqa: E501
        :rtype: float
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this CarterLocationData.


        :param range: The range of this CarterLocationData.  # noqa: E501
        :type: float
        """

        self._range = range

    @property
    def rangedir(self):
        """Gets the rangedir of this CarterLocationData.  # noqa: E501


        :return: The rangedir of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._rangedir

    @rangedir.setter
    def rangedir(self, rangedir):
        """Sets the rangedir of this CarterLocationData.


        :param rangedir: The rangedir of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._rangedir = rangedir

    @property
    def section(self):
        """Gets the section of this CarterLocationData.  # noqa: E501


        :return: The section of this CarterLocationData.  # noqa: E501
        :rtype: float
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this CarterLocationData.


        :param section: The section of this CarterLocationData.  # noqa: E501
        :type: float
        """

        self._section = section

    @property
    def source(self):
        """Gets the source of this CarterLocationData.  # noqa: E501


        :return: The source of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CarterLocationData.


        :param source: The source of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def township(self):
        """Gets the township of this CarterLocationData.  # noqa: E501


        :return: The township of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._township

    @township.setter
    def township(self, township):
        """Sets the township of this CarterLocationData.


        :param township: The township of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._township = township

    @property
    def townshipdir(self):
        """Gets the townshipdir of this CarterLocationData.  # noqa: E501


        :return: The townshipdir of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._townshipdir

    @townshipdir.setter
    def townshipdir(self, townshipdir):
        """Sets the townshipdir of this CarterLocationData.


        :param townshipdir: The townshipdir of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._townshipdir = townshipdir

    @property
    def systag(self):
        """Gets the systag of this CarterLocationData.  # noqa: E501


        :return: The systag of this CarterLocationData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CarterLocationData.


        :param systag: The systag of this CarterLocationData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CarterLocationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CarterLocationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
