# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CementData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cementsubtyp': 'str',
        'cementtyp': 'str',
        'com': 'str',
        'contractor': 'str',
        'contractsupt': 'str',
        'des': 'str',
        'deseval': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'evalmethod': 'str',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecstring': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'objective': 'str',
        'proposed': 'bool',
        'resulttechnical': 'str',
        'resulttechnicaldetail': 'str',
        'resulttechnicalnote': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'cementsubtyp': 'cementsubtyp',
        'cementtyp': 'cementtyp',
        'com': 'com',
        'contractor': 'contractor',
        'contractsupt': 'contractsupt',
        'des': 'des',
        'deseval': 'deseval',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'evalmethod': 'evalmethod',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecstring': 'idrecstring',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'objective': 'objective',
        'proposed': 'proposed',
        'resulttechnical': 'resulttechnical',
        'resulttechnicaldetail': 'resulttechnicaldetail',
        'resulttechnicalnote': 'resulttechnicalnote',
        'systag': 'systag'
    }

    def __init__(self, cementsubtyp=None, cementtyp=None, com=None, contractor=None, contractsupt=None, des=None, deseval=None, dttmend=None, dttmstart=None, evalmethod=None, idrec=None, idrecjob=None, idrecstring=None, idrecwellbore=None, idwell=None, objective=None, proposed=None, resulttechnical=None, resulttechnicaldetail=None, resulttechnicalnote=None, systag=None):  # noqa: E501
        """CementData - a model defined in Swagger"""  # noqa: E501
        self._cementsubtyp = None
        self._cementtyp = None
        self._com = None
        self._contractor = None
        self._contractsupt = None
        self._des = None
        self._deseval = None
        self._dttmend = None
        self._dttmstart = None
        self._evalmethod = None
        self._idrec = None
        self._idrecjob = None
        self._idrecstring = None
        self._idrecwellbore = None
        self._idwell = None
        self._objective = None
        self._proposed = None
        self._resulttechnical = None
        self._resulttechnicaldetail = None
        self._resulttechnicalnote = None
        self._systag = None
        self.discriminator = None
        if cementsubtyp is not None:
            self.cementsubtyp = cementsubtyp
        if cementtyp is not None:
            self.cementtyp = cementtyp
        if com is not None:
            self.com = com
        if contractor is not None:
            self.contractor = contractor
        if contractsupt is not None:
            self.contractsupt = contractsupt
        if des is not None:
            self.des = des
        if deseval is not None:
            self.deseval = deseval
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if evalmethod is not None:
            self.evalmethod = evalmethod
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecstring is not None:
            self.idrecstring = idrecstring
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if objective is not None:
            self.objective = objective
        if proposed is not None:
            self.proposed = proposed
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if resulttechnicaldetail is not None:
            self.resulttechnicaldetail = resulttechnicaldetail
        if resulttechnicalnote is not None:
            self.resulttechnicalnote = resulttechnicalnote
        if systag is not None:
            self.systag = systag

    @property
    def cementsubtyp(self):
        """Gets the cementsubtyp of this CementData.  # noqa: E501


        :return: The cementsubtyp of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._cementsubtyp

    @cementsubtyp.setter
    def cementsubtyp(self, cementsubtyp):
        """Sets the cementsubtyp of this CementData.


        :param cementsubtyp: The cementsubtyp of this CementData.  # noqa: E501
        :type: str
        """

        self._cementsubtyp = cementsubtyp

    @property
    def cementtyp(self):
        """Gets the cementtyp of this CementData.  # noqa: E501


        :return: The cementtyp of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._cementtyp

    @cementtyp.setter
    def cementtyp(self, cementtyp):
        """Sets the cementtyp of this CementData.


        :param cementtyp: The cementtyp of this CementData.  # noqa: E501
        :type: str
        """

        self._cementtyp = cementtyp

    @property
    def com(self):
        """Gets the com of this CementData.  # noqa: E501


        :return: The com of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this CementData.


        :param com: The com of this CementData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def contractor(self):
        """Gets the contractor of this CementData.  # noqa: E501


        :return: The contractor of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._contractor

    @contractor.setter
    def contractor(self, contractor):
        """Sets the contractor of this CementData.


        :param contractor: The contractor of this CementData.  # noqa: E501
        :type: str
        """

        self._contractor = contractor

    @property
    def contractsupt(self):
        """Gets the contractsupt of this CementData.  # noqa: E501


        :return: The contractsupt of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._contractsupt

    @contractsupt.setter
    def contractsupt(self, contractsupt):
        """Sets the contractsupt of this CementData.


        :param contractsupt: The contractsupt of this CementData.  # noqa: E501
        :type: str
        """

        self._contractsupt = contractsupt

    @property
    def des(self):
        """Gets the des of this CementData.  # noqa: E501


        :return: The des of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this CementData.


        :param des: The des of this CementData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def deseval(self):
        """Gets the deseval of this CementData.  # noqa: E501


        :return: The deseval of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._deseval

    @deseval.setter
    def deseval(self, deseval):
        """Sets the deseval of this CementData.


        :param deseval: The deseval of this CementData.  # noqa: E501
        :type: str
        """

        self._deseval = deseval

    @property
    def dttmend(self):
        """Gets the dttmend of this CementData.  # noqa: E501


        :return: The dttmend of this CementData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this CementData.


        :param dttmend: The dttmend of this CementData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this CementData.  # noqa: E501


        :return: The dttmstart of this CementData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this CementData.


        :param dttmstart: The dttmstart of this CementData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def evalmethod(self):
        """Gets the evalmethod of this CementData.  # noqa: E501


        :return: The evalmethod of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._evalmethod

    @evalmethod.setter
    def evalmethod(self, evalmethod):
        """Sets the evalmethod of this CementData.


        :param evalmethod: The evalmethod of this CementData.  # noqa: E501
        :type: str
        """

        self._evalmethod = evalmethod

    @property
    def idrec(self):
        """Gets the idrec of this CementData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this CementData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this CementData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this CementData.  # noqa: E501


        :return: The idrecjob of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this CementData.


        :param idrecjob: The idrecjob of this CementData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecstring(self):
        """Gets the idrecstring of this CementData.  # noqa: E501


        :return: The idrecstring of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._idrecstring

    @idrecstring.setter
    def idrecstring(self, idrecstring):
        """Sets the idrecstring of this CementData.


        :param idrecstring: The idrecstring of this CementData.  # noqa: E501
        :type: str
        """

        self._idrecstring = idrecstring

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this CementData.  # noqa: E501


        :return: The idrecwellbore of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this CementData.


        :param idrecwellbore: The idrecwellbore of this CementData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this CementData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this CementData.

        id of well  # noqa: E501

        :param idwell: The idwell of this CementData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def objective(self):
        """Gets the objective of this CementData.  # noqa: E501


        :return: The objective of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this CementData.


        :param objective: The objective of this CementData.  # noqa: E501
        :type: str
        """

        self._objective = objective

    @property
    def proposed(self):
        """Gets the proposed of this CementData.  # noqa: E501


        :return: The proposed of this CementData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this CementData.


        :param proposed: The proposed of this CementData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this CementData.  # noqa: E501


        :return: The resulttechnical of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this CementData.


        :param resulttechnical: The resulttechnical of this CementData.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def resulttechnicaldetail(self):
        """Gets the resulttechnicaldetail of this CementData.  # noqa: E501


        :return: The resulttechnicaldetail of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicaldetail

    @resulttechnicaldetail.setter
    def resulttechnicaldetail(self, resulttechnicaldetail):
        """Sets the resulttechnicaldetail of this CementData.


        :param resulttechnicaldetail: The resulttechnicaldetail of this CementData.  # noqa: E501
        :type: str
        """

        self._resulttechnicaldetail = resulttechnicaldetail

    @property
    def resulttechnicalnote(self):
        """Gets the resulttechnicalnote of this CementData.  # noqa: E501


        :return: The resulttechnicalnote of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicalnote

    @resulttechnicalnote.setter
    def resulttechnicalnote(self, resulttechnicalnote):
        """Sets the resulttechnicalnote of this CementData.


        :param resulttechnicalnote: The resulttechnicalnote of this CementData.  # noqa: E501
        :type: str
        """

        self._resulttechnicalnote = resulttechnicalnote

    @property
    def systag(self):
        """Gets the systag of this CementData.  # noqa: E501


        :return: The systag of this CementData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this CementData.


        :param systag: The systag of this CementData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CementData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CementData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
