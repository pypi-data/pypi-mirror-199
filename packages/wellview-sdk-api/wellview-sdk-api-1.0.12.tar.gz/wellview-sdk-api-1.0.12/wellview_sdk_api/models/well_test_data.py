# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WellTestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'depthbtm': 'float',
        'depthtop': 'float',
        'des': 'str',
        'displayflag': 'bool',
        'dttm': 'datetime',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecwellbore': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'loadfluidtyp': 'str',
        'phasesepmethod': 'str',
        'porosity': 'float',
        'porositysource': 'str',
        'producedto': 'str',
        'subtyp': 'str',
        'surfacetestequip': 'str',
        'testedby': 'str',
        'typ': 'str',
        'volloadfluid': 'float',
        'volloadfluidunrecov': 'float',
        'volumemethod': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'displayflag': 'displayflag',
        'dttm': 'dttm',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecwellbore': 'idrecwellbore',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'loadfluidtyp': 'loadfluidtyp',
        'phasesepmethod': 'phasesepmethod',
        'porosity': 'porosity',
        'porositysource': 'porositysource',
        'producedto': 'producedto',
        'subtyp': 'subtyp',
        'surfacetestequip': 'surfacetestequip',
        'testedby': 'testedby',
        'typ': 'typ',
        'volloadfluid': 'volloadfluid',
        'volloadfluidunrecov': 'volloadfluidunrecov',
        'volumemethod': 'volumemethod',
        'systag': 'systag'
    }

    def __init__(self, com=None, depthbtm=None, depthtop=None, des=None, displayflag=None, dttm=None, idrec=None, idrecjob=None, idrecwellbore=None, idreczonecompletion=None, idwell=None, loadfluidtyp=None, phasesepmethod=None, porosity=None, porositysource=None, producedto=None, subtyp=None, surfacetestequip=None, testedby=None, typ=None, volloadfluid=None, volloadfluidunrecov=None, volumemethod=None, systag=None):  # noqa: E501
        """WellTestData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._displayflag = None
        self._dttm = None
        self._idrec = None
        self._idrecjob = None
        self._idrecwellbore = None
        self._idreczonecompletion = None
        self._idwell = None
        self._loadfluidtyp = None
        self._phasesepmethod = None
        self._porosity = None
        self._porositysource = None
        self._producedto = None
        self._subtyp = None
        self._surfacetestequip = None
        self._testedby = None
        self._typ = None
        self._volloadfluid = None
        self._volloadfluidunrecov = None
        self._volumemethod = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if displayflag is not None:
            self.displayflag = displayflag
        if dttm is not None:
            self.dttm = dttm
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if loadfluidtyp is not None:
            self.loadfluidtyp = loadfluidtyp
        if phasesepmethod is not None:
            self.phasesepmethod = phasesepmethod
        if porosity is not None:
            self.porosity = porosity
        if porositysource is not None:
            self.porositysource = porositysource
        if producedto is not None:
            self.producedto = producedto
        if subtyp is not None:
            self.subtyp = subtyp
        if surfacetestequip is not None:
            self.surfacetestequip = surfacetestequip
        if testedby is not None:
            self.testedby = testedby
        if typ is not None:
            self.typ = typ
        if volloadfluid is not None:
            self.volloadfluid = volloadfluid
        if volloadfluidunrecov is not None:
            self.volloadfluidunrecov = volloadfluidunrecov
        if volumemethod is not None:
            self.volumemethod = volumemethod
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this WellTestData.  # noqa: E501


        :return: The com of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this WellTestData.


        :param com: The com of this WellTestData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this WellTestData.  # noqa: E501


        :return: The depthbtm of this WellTestData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this WellTestData.


        :param depthbtm: The depthbtm of this WellTestData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this WellTestData.  # noqa: E501


        :return: The depthtop of this WellTestData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this WellTestData.


        :param depthtop: The depthtop of this WellTestData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this WellTestData.  # noqa: E501


        :return: The des of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this WellTestData.


        :param des: The des of this WellTestData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def displayflag(self):
        """Gets the displayflag of this WellTestData.  # noqa: E501


        :return: The displayflag of this WellTestData.  # noqa: E501
        :rtype: bool
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this WellTestData.


        :param displayflag: The displayflag of this WellTestData.  # noqa: E501
        :type: bool
        """

        self._displayflag = displayflag

    @property
    def dttm(self):
        """Gets the dttm of this WellTestData.  # noqa: E501


        :return: The dttm of this WellTestData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this WellTestData.


        :param dttm: The dttm of this WellTestData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def idrec(self):
        """Gets the idrec of this WellTestData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this WellTestData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this WellTestData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this WellTestData.  # noqa: E501


        :return: The idrecjob of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this WellTestData.


        :param idrecjob: The idrecjob of this WellTestData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this WellTestData.  # noqa: E501


        :return: The idrecwellbore of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this WellTestData.


        :param idrecwellbore: The idrecwellbore of this WellTestData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this WellTestData.  # noqa: E501


        :return: The idreczonecompletion of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this WellTestData.


        :param idreczonecompletion: The idreczonecompletion of this WellTestData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this WellTestData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this WellTestData.

        id of well  # noqa: E501

        :param idwell: The idwell of this WellTestData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def loadfluidtyp(self):
        """Gets the loadfluidtyp of this WellTestData.  # noqa: E501


        :return: The loadfluidtyp of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._loadfluidtyp

    @loadfluidtyp.setter
    def loadfluidtyp(self, loadfluidtyp):
        """Sets the loadfluidtyp of this WellTestData.


        :param loadfluidtyp: The loadfluidtyp of this WellTestData.  # noqa: E501
        :type: str
        """

        self._loadfluidtyp = loadfluidtyp

    @property
    def phasesepmethod(self):
        """Gets the phasesepmethod of this WellTestData.  # noqa: E501


        :return: The phasesepmethod of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._phasesepmethod

    @phasesepmethod.setter
    def phasesepmethod(self, phasesepmethod):
        """Sets the phasesepmethod of this WellTestData.


        :param phasesepmethod: The phasesepmethod of this WellTestData.  # noqa: E501
        :type: str
        """

        self._phasesepmethod = phasesepmethod

    @property
    def porosity(self):
        """Gets the porosity of this WellTestData.  # noqa: E501


        :return: The porosity of this WellTestData.  # noqa: E501
        :rtype: float
        """
        return self._porosity

    @porosity.setter
    def porosity(self, porosity):
        """Sets the porosity of this WellTestData.


        :param porosity: The porosity of this WellTestData.  # noqa: E501
        :type: float
        """

        self._porosity = porosity

    @property
    def porositysource(self):
        """Gets the porositysource of this WellTestData.  # noqa: E501


        :return: The porositysource of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._porositysource

    @porositysource.setter
    def porositysource(self, porositysource):
        """Sets the porositysource of this WellTestData.


        :param porositysource: The porositysource of this WellTestData.  # noqa: E501
        :type: str
        """

        self._porositysource = porositysource

    @property
    def producedto(self):
        """Gets the producedto of this WellTestData.  # noqa: E501


        :return: The producedto of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._producedto

    @producedto.setter
    def producedto(self, producedto):
        """Sets the producedto of this WellTestData.


        :param producedto: The producedto of this WellTestData.  # noqa: E501
        :type: str
        """

        self._producedto = producedto

    @property
    def subtyp(self):
        """Gets the subtyp of this WellTestData.  # noqa: E501


        :return: The subtyp of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._subtyp

    @subtyp.setter
    def subtyp(self, subtyp):
        """Sets the subtyp of this WellTestData.


        :param subtyp: The subtyp of this WellTestData.  # noqa: E501
        :type: str
        """

        self._subtyp = subtyp

    @property
    def surfacetestequip(self):
        """Gets the surfacetestequip of this WellTestData.  # noqa: E501


        :return: The surfacetestequip of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._surfacetestequip

    @surfacetestequip.setter
    def surfacetestequip(self, surfacetestequip):
        """Sets the surfacetestequip of this WellTestData.


        :param surfacetestequip: The surfacetestequip of this WellTestData.  # noqa: E501
        :type: str
        """

        self._surfacetestequip = surfacetestequip

    @property
    def testedby(self):
        """Gets the testedby of this WellTestData.  # noqa: E501


        :return: The testedby of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this WellTestData.


        :param testedby: The testedby of this WellTestData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typ(self):
        """Gets the typ of this WellTestData.  # noqa: E501


        :return: The typ of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this WellTestData.


        :param typ: The typ of this WellTestData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def volloadfluid(self):
        """Gets the volloadfluid of this WellTestData.  # noqa: E501


        :return: The volloadfluid of this WellTestData.  # noqa: E501
        :rtype: float
        """
        return self._volloadfluid

    @volloadfluid.setter
    def volloadfluid(self, volloadfluid):
        """Sets the volloadfluid of this WellTestData.


        :param volloadfluid: The volloadfluid of this WellTestData.  # noqa: E501
        :type: float
        """

        self._volloadfluid = volloadfluid

    @property
    def volloadfluidunrecov(self):
        """Gets the volloadfluidunrecov of this WellTestData.  # noqa: E501


        :return: The volloadfluidunrecov of this WellTestData.  # noqa: E501
        :rtype: float
        """
        return self._volloadfluidunrecov

    @volloadfluidunrecov.setter
    def volloadfluidunrecov(self, volloadfluidunrecov):
        """Sets the volloadfluidunrecov of this WellTestData.


        :param volloadfluidunrecov: The volloadfluidunrecov of this WellTestData.  # noqa: E501
        :type: float
        """

        self._volloadfluidunrecov = volloadfluidunrecov

    @property
    def volumemethod(self):
        """Gets the volumemethod of this WellTestData.  # noqa: E501


        :return: The volumemethod of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._volumemethod

    @volumemethod.setter
    def volumemethod(self, volumemethod):
        """Sets the volumemethod of this WellTestData.


        :param volumemethod: The volumemethod of this WellTestData.  # noqa: E501
        :type: str
        """

        self._volumemethod = volumemethod

    @property
    def systag(self):
        """Gets the systag of this WellTestData.  # noqa: E501


        :return: The systag of this WellTestData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this WellTestData.


        :param systag: The systag of this WellTestData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WellTestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WellTestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
