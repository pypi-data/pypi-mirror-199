# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InjectivityTestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'conccuttings': 'float',
        'datasource': 'str',
        'densitygas': 'float',
        'displayflag': 'bool',
        'dttmstart': 'datetime',
        'duration': 'float',
        'fractionoil': 'float',
        'idrec': 'str',
        'idrecjob': 'str',
        'idreczonecompletion': 'str',
        'idwell': 'str',
        'prescas': 'float',
        'presinject': 'float',
        'purpose': 'str',
        'qualitysteam': 'float',
        'rateinjectgas': 'float',
        'rateinjectliquid': 'float',
        'salinity': 'float',
        'tempinject': 'float',
        'testedby': 'str',
        'typproduct': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'conccuttings': 'conccuttings',
        'datasource': 'datasource',
        'densitygas': 'densitygas',
        'displayflag': 'displayflag',
        'dttmstart': 'dttmstart',
        'duration': 'duration',
        'fractionoil': 'fractionoil',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idreczonecompletion': 'idreczonecompletion',
        'idwell': 'idwell',
        'prescas': 'prescas',
        'presinject': 'presinject',
        'purpose': 'purpose',
        'qualitysteam': 'qualitysteam',
        'rateinjectgas': 'rateinjectgas',
        'rateinjectliquid': 'rateinjectliquid',
        'salinity': 'salinity',
        'tempinject': 'tempinject',
        'testedby': 'testedby',
        'typproduct': 'typproduct',
        'systag': 'systag'
    }

    def __init__(self, com=None, conccuttings=None, datasource=None, densitygas=None, displayflag=None, dttmstart=None, duration=None, fractionoil=None, idrec=None, idrecjob=None, idreczonecompletion=None, idwell=None, prescas=None, presinject=None, purpose=None, qualitysteam=None, rateinjectgas=None, rateinjectliquid=None, salinity=None, tempinject=None, testedby=None, typproduct=None, systag=None):  # noqa: E501
        """InjectivityTestData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._conccuttings = None
        self._datasource = None
        self._densitygas = None
        self._displayflag = None
        self._dttmstart = None
        self._duration = None
        self._fractionoil = None
        self._idrec = None
        self._idrecjob = None
        self._idreczonecompletion = None
        self._idwell = None
        self._prescas = None
        self._presinject = None
        self._purpose = None
        self._qualitysteam = None
        self._rateinjectgas = None
        self._rateinjectliquid = None
        self._salinity = None
        self._tempinject = None
        self._testedby = None
        self._typproduct = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if conccuttings is not None:
            self.conccuttings = conccuttings
        if datasource is not None:
            self.datasource = datasource
        if densitygas is not None:
            self.densitygas = densitygas
        if displayflag is not None:
            self.displayflag = displayflag
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if duration is not None:
            self.duration = duration
        if fractionoil is not None:
            self.fractionoil = fractionoil
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idreczonecompletion is not None:
            self.idreczonecompletion = idreczonecompletion
        self.idwell = idwell
        if prescas is not None:
            self.prescas = prescas
        if presinject is not None:
            self.presinject = presinject
        if purpose is not None:
            self.purpose = purpose
        if qualitysteam is not None:
            self.qualitysteam = qualitysteam
        if rateinjectgas is not None:
            self.rateinjectgas = rateinjectgas
        if rateinjectliquid is not None:
            self.rateinjectliquid = rateinjectliquid
        if salinity is not None:
            self.salinity = salinity
        if tempinject is not None:
            self.tempinject = tempinject
        if testedby is not None:
            self.testedby = testedby
        if typproduct is not None:
            self.typproduct = typproduct
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this InjectivityTestData.  # noqa: E501


        :return: The com of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this InjectivityTestData.


        :param com: The com of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conccuttings(self):
        """Gets the conccuttings of this InjectivityTestData.  # noqa: E501


        :return: The conccuttings of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._conccuttings

    @conccuttings.setter
    def conccuttings(self, conccuttings):
        """Sets the conccuttings of this InjectivityTestData.


        :param conccuttings: The conccuttings of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._conccuttings = conccuttings

    @property
    def datasource(self):
        """Gets the datasource of this InjectivityTestData.  # noqa: E501


        :return: The datasource of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._datasource

    @datasource.setter
    def datasource(self, datasource):
        """Sets the datasource of this InjectivityTestData.


        :param datasource: The datasource of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._datasource = datasource

    @property
    def densitygas(self):
        """Gets the densitygas of this InjectivityTestData.  # noqa: E501


        :return: The densitygas of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._densitygas

    @densitygas.setter
    def densitygas(self, densitygas):
        """Sets the densitygas of this InjectivityTestData.


        :param densitygas: The densitygas of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._densitygas = densitygas

    @property
    def displayflag(self):
        """Gets the displayflag of this InjectivityTestData.  # noqa: E501


        :return: The displayflag of this InjectivityTestData.  # noqa: E501
        :rtype: bool
        """
        return self._displayflag

    @displayflag.setter
    def displayflag(self, displayflag):
        """Sets the displayflag of this InjectivityTestData.


        :param displayflag: The displayflag of this InjectivityTestData.  # noqa: E501
        :type: bool
        """

        self._displayflag = displayflag

    @property
    def dttmstart(self):
        """Gets the dttmstart of this InjectivityTestData.  # noqa: E501


        :return: The dttmstart of this InjectivityTestData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this InjectivityTestData.


        :param dttmstart: The dttmstart of this InjectivityTestData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def duration(self):
        """Gets the duration of this InjectivityTestData.  # noqa: E501


        :return: The duration of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InjectivityTestData.


        :param duration: The duration of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def fractionoil(self):
        """Gets the fractionoil of this InjectivityTestData.  # noqa: E501


        :return: The fractionoil of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._fractionoil

    @fractionoil.setter
    def fractionoil(self, fractionoil):
        """Sets the fractionoil of this InjectivityTestData.


        :param fractionoil: The fractionoil of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._fractionoil = fractionoil

    @property
    def idrec(self):
        """Gets the idrec of this InjectivityTestData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this InjectivityTestData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this InjectivityTestData.  # noqa: E501


        :return: The idrecjob of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this InjectivityTestData.


        :param idrecjob: The idrecjob of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idreczonecompletion(self):
        """Gets the idreczonecompletion of this InjectivityTestData.  # noqa: E501


        :return: The idreczonecompletion of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idreczonecompletion

    @idreczonecompletion.setter
    def idreczonecompletion(self, idreczonecompletion):
        """Sets the idreczonecompletion of this InjectivityTestData.


        :param idreczonecompletion: The idreczonecompletion of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._idreczonecompletion = idreczonecompletion

    @property
    def idwell(self):
        """Gets the idwell of this InjectivityTestData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this InjectivityTestData.

        id of well  # noqa: E501

        :param idwell: The idwell of this InjectivityTestData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def prescas(self):
        """Gets the prescas of this InjectivityTestData.  # noqa: E501


        :return: The prescas of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._prescas

    @prescas.setter
    def prescas(self, prescas):
        """Sets the prescas of this InjectivityTestData.


        :param prescas: The prescas of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._prescas = prescas

    @property
    def presinject(self):
        """Gets the presinject of this InjectivityTestData.  # noqa: E501


        :return: The presinject of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._presinject

    @presinject.setter
    def presinject(self, presinject):
        """Sets the presinject of this InjectivityTestData.


        :param presinject: The presinject of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._presinject = presinject

    @property
    def purpose(self):
        """Gets the purpose of this InjectivityTestData.  # noqa: E501


        :return: The purpose of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this InjectivityTestData.


        :param purpose: The purpose of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def qualitysteam(self):
        """Gets the qualitysteam of this InjectivityTestData.  # noqa: E501


        :return: The qualitysteam of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._qualitysteam

    @qualitysteam.setter
    def qualitysteam(self, qualitysteam):
        """Sets the qualitysteam of this InjectivityTestData.


        :param qualitysteam: The qualitysteam of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._qualitysteam = qualitysteam

    @property
    def rateinjectgas(self):
        """Gets the rateinjectgas of this InjectivityTestData.  # noqa: E501


        :return: The rateinjectgas of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._rateinjectgas

    @rateinjectgas.setter
    def rateinjectgas(self, rateinjectgas):
        """Sets the rateinjectgas of this InjectivityTestData.


        :param rateinjectgas: The rateinjectgas of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._rateinjectgas = rateinjectgas

    @property
    def rateinjectliquid(self):
        """Gets the rateinjectliquid of this InjectivityTestData.  # noqa: E501


        :return: The rateinjectliquid of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._rateinjectliquid

    @rateinjectliquid.setter
    def rateinjectliquid(self, rateinjectliquid):
        """Sets the rateinjectliquid of this InjectivityTestData.


        :param rateinjectliquid: The rateinjectliquid of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._rateinjectliquid = rateinjectliquid

    @property
    def salinity(self):
        """Gets the salinity of this InjectivityTestData.  # noqa: E501


        :return: The salinity of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._salinity

    @salinity.setter
    def salinity(self, salinity):
        """Sets the salinity of this InjectivityTestData.


        :param salinity: The salinity of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._salinity = salinity

    @property
    def tempinject(self):
        """Gets the tempinject of this InjectivityTestData.  # noqa: E501


        :return: The tempinject of this InjectivityTestData.  # noqa: E501
        :rtype: float
        """
        return self._tempinject

    @tempinject.setter
    def tempinject(self, tempinject):
        """Sets the tempinject of this InjectivityTestData.


        :param tempinject: The tempinject of this InjectivityTestData.  # noqa: E501
        :type: float
        """

        self._tempinject = tempinject

    @property
    def testedby(self):
        """Gets the testedby of this InjectivityTestData.  # noqa: E501


        :return: The testedby of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this InjectivityTestData.


        :param testedby: The testedby of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typproduct(self):
        """Gets the typproduct of this InjectivityTestData.  # noqa: E501


        :return: The typproduct of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._typproduct

    @typproduct.setter
    def typproduct(self, typproduct):
        """Sets the typproduct of this InjectivityTestData.


        :param typproduct: The typproduct of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._typproduct = typproduct

    @property
    def systag(self):
        """Gets the systag of this InjectivityTestData.  # noqa: E501


        :return: The systag of this InjectivityTestData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this InjectivityTestData.


        :param systag: The systag of this InjectivityTestData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InjectivityTestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InjectivityTestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
