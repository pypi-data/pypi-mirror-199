# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LithologyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'str',
        'codetyp': 'str',
        'color': 'str',
        'com': 'str',
        'depthbtm': 'float',
        'depthtop': 'float',
        'des': 'str',
        'dunhamclass': 'str',
        'grainsizenote': 'str',
        'graintyp': 'str',
        'hardness': 'str',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'matrixcement': 'str',
        'permcat': 'str',
        'permhzntl': 'float',
        'permnote': 'str',
        'permvert': 'float',
        'porosity': 'float',
        'porositytyp': 'str',
        'refno': 'str',
        'roundness': 'str',
        'shaledes': 'str',
        'sorting': 'str',
        'texture': 'str',
        'typ': 'str',
        'volpercent': 'float',
        'volpercentca': 'float',
        'volpercentmax': 'float',
        'volpercentmg': 'float',
        'volpercentmin': 'float',
        'systag': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'codetyp': 'codetyp',
        'color': 'color',
        'com': 'com',
        'depthbtm': 'depthbtm',
        'depthtop': 'depthtop',
        'des': 'des',
        'dunhamclass': 'dunhamclass',
        'grainsizenote': 'grainsizenote',
        'graintyp': 'graintyp',
        'hardness': 'hardness',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'matrixcement': 'matrixcement',
        'permcat': 'permcat',
        'permhzntl': 'permhzntl',
        'permnote': 'permnote',
        'permvert': 'permvert',
        'porosity': 'porosity',
        'porositytyp': 'porositytyp',
        'refno': 'refno',
        'roundness': 'roundness',
        'shaledes': 'shaledes',
        'sorting': 'sorting',
        'texture': 'texture',
        'typ': 'typ',
        'volpercent': 'volpercent',
        'volpercentca': 'volpercentca',
        'volpercentmax': 'volpercentmax',
        'volpercentmg': 'volpercentmg',
        'volpercentmin': 'volpercentmin',
        'systag': 'systag'
    }

    def __init__(self, _class=None, codetyp=None, color=None, com=None, depthbtm=None, depthtop=None, des=None, dunhamclass=None, grainsizenote=None, graintyp=None, hardness=None, iconname=None, idrec=None, idrecparent=None, idwell=None, matrixcement=None, permcat=None, permhzntl=None, permnote=None, permvert=None, porosity=None, porositytyp=None, refno=None, roundness=None, shaledes=None, sorting=None, texture=None, typ=None, volpercent=None, volpercentca=None, volpercentmax=None, volpercentmg=None, volpercentmin=None, systag=None):  # noqa: E501
        """LithologyData - a model defined in Swagger"""  # noqa: E501
        self.__class = None
        self._codetyp = None
        self._color = None
        self._com = None
        self._depthbtm = None
        self._depthtop = None
        self._des = None
        self._dunhamclass = None
        self._grainsizenote = None
        self._graintyp = None
        self._hardness = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._matrixcement = None
        self._permcat = None
        self._permhzntl = None
        self._permnote = None
        self._permvert = None
        self._porosity = None
        self._porositytyp = None
        self._refno = None
        self._roundness = None
        self._shaledes = None
        self._sorting = None
        self._texture = None
        self._typ = None
        self._volpercent = None
        self._volpercentca = None
        self._volpercentmax = None
        self._volpercentmg = None
        self._volpercentmin = None
        self._systag = None
        self.discriminator = None
        if _class is not None:
            self._class = _class
        if codetyp is not None:
            self.codetyp = codetyp
        if color is not None:
            self.color = color
        if com is not None:
            self.com = com
        if depthbtm is not None:
            self.depthbtm = depthbtm
        if depthtop is not None:
            self.depthtop = depthtop
        if des is not None:
            self.des = des
        if dunhamclass is not None:
            self.dunhamclass = dunhamclass
        if grainsizenote is not None:
            self.grainsizenote = grainsizenote
        if graintyp is not None:
            self.graintyp = graintyp
        if hardness is not None:
            self.hardness = hardness
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if matrixcement is not None:
            self.matrixcement = matrixcement
        if permcat is not None:
            self.permcat = permcat
        if permhzntl is not None:
            self.permhzntl = permhzntl
        if permnote is not None:
            self.permnote = permnote
        if permvert is not None:
            self.permvert = permvert
        if porosity is not None:
            self.porosity = porosity
        if porositytyp is not None:
            self.porositytyp = porositytyp
        if refno is not None:
            self.refno = refno
        if roundness is not None:
            self.roundness = roundness
        if shaledes is not None:
            self.shaledes = shaledes
        if sorting is not None:
            self.sorting = sorting
        if texture is not None:
            self.texture = texture
        if typ is not None:
            self.typ = typ
        if volpercent is not None:
            self.volpercent = volpercent
        if volpercentca is not None:
            self.volpercentca = volpercentca
        if volpercentmax is not None:
            self.volpercentmax = volpercentmax
        if volpercentmg is not None:
            self.volpercentmg = volpercentmg
        if volpercentmin is not None:
            self.volpercentmin = volpercentmin
        if systag is not None:
            self.systag = systag

    @property
    def _class(self):
        """Gets the _class of this LithologyData.  # noqa: E501


        :return: The _class of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this LithologyData.


        :param _class: The _class of this LithologyData.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def codetyp(self):
        """Gets the codetyp of this LithologyData.  # noqa: E501


        :return: The codetyp of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._codetyp

    @codetyp.setter
    def codetyp(self, codetyp):
        """Sets the codetyp of this LithologyData.


        :param codetyp: The codetyp of this LithologyData.  # noqa: E501
        :type: str
        """

        self._codetyp = codetyp

    @property
    def color(self):
        """Gets the color of this LithologyData.  # noqa: E501


        :return: The color of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this LithologyData.


        :param color: The color of this LithologyData.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def com(self):
        """Gets the com of this LithologyData.  # noqa: E501


        :return: The com of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this LithologyData.


        :param com: The com of this LithologyData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthbtm(self):
        """Gets the depthbtm of this LithologyData.  # noqa: E501


        :return: The depthbtm of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._depthbtm

    @depthbtm.setter
    def depthbtm(self, depthbtm):
        """Sets the depthbtm of this LithologyData.


        :param depthbtm: The depthbtm of this LithologyData.  # noqa: E501
        :type: float
        """

        self._depthbtm = depthbtm

    @property
    def depthtop(self):
        """Gets the depthtop of this LithologyData.  # noqa: E501


        :return: The depthtop of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._depthtop

    @depthtop.setter
    def depthtop(self, depthtop):
        """Sets the depthtop of this LithologyData.


        :param depthtop: The depthtop of this LithologyData.  # noqa: E501
        :type: float
        """

        self._depthtop = depthtop

    @property
    def des(self):
        """Gets the des of this LithologyData.  # noqa: E501


        :return: The des of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this LithologyData.


        :param des: The des of this LithologyData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dunhamclass(self):
        """Gets the dunhamclass of this LithologyData.  # noqa: E501


        :return: The dunhamclass of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._dunhamclass

    @dunhamclass.setter
    def dunhamclass(self, dunhamclass):
        """Sets the dunhamclass of this LithologyData.


        :param dunhamclass: The dunhamclass of this LithologyData.  # noqa: E501
        :type: str
        """

        self._dunhamclass = dunhamclass

    @property
    def grainsizenote(self):
        """Gets the grainsizenote of this LithologyData.  # noqa: E501


        :return: The grainsizenote of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._grainsizenote

    @grainsizenote.setter
    def grainsizenote(self, grainsizenote):
        """Sets the grainsizenote of this LithologyData.


        :param grainsizenote: The grainsizenote of this LithologyData.  # noqa: E501
        :type: str
        """

        self._grainsizenote = grainsizenote

    @property
    def graintyp(self):
        """Gets the graintyp of this LithologyData.  # noqa: E501


        :return: The graintyp of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._graintyp

    @graintyp.setter
    def graintyp(self, graintyp):
        """Sets the graintyp of this LithologyData.


        :param graintyp: The graintyp of this LithologyData.  # noqa: E501
        :type: str
        """

        self._graintyp = graintyp

    @property
    def hardness(self):
        """Gets the hardness of this LithologyData.  # noqa: E501


        :return: The hardness of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._hardness

    @hardness.setter
    def hardness(self, hardness):
        """Sets the hardness of this LithologyData.


        :param hardness: The hardness of this LithologyData.  # noqa: E501
        :type: str
        """

        self._hardness = hardness

    @property
    def iconname(self):
        """Gets the iconname of this LithologyData.  # noqa: E501


        :return: The iconname of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this LithologyData.


        :param iconname: The iconname of this LithologyData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this LithologyData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this LithologyData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this LithologyData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this LithologyData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this LithologyData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this LithologyData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this LithologyData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this LithologyData.

        id of well  # noqa: E501

        :param idwell: The idwell of this LithologyData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def matrixcement(self):
        """Gets the matrixcement of this LithologyData.  # noqa: E501


        :return: The matrixcement of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._matrixcement

    @matrixcement.setter
    def matrixcement(self, matrixcement):
        """Sets the matrixcement of this LithologyData.


        :param matrixcement: The matrixcement of this LithologyData.  # noqa: E501
        :type: str
        """

        self._matrixcement = matrixcement

    @property
    def permcat(self):
        """Gets the permcat of this LithologyData.  # noqa: E501


        :return: The permcat of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._permcat

    @permcat.setter
    def permcat(self, permcat):
        """Sets the permcat of this LithologyData.


        :param permcat: The permcat of this LithologyData.  # noqa: E501
        :type: str
        """

        self._permcat = permcat

    @property
    def permhzntl(self):
        """Gets the permhzntl of this LithologyData.  # noqa: E501


        :return: The permhzntl of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._permhzntl

    @permhzntl.setter
    def permhzntl(self, permhzntl):
        """Sets the permhzntl of this LithologyData.


        :param permhzntl: The permhzntl of this LithologyData.  # noqa: E501
        :type: float
        """

        self._permhzntl = permhzntl

    @property
    def permnote(self):
        """Gets the permnote of this LithologyData.  # noqa: E501


        :return: The permnote of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._permnote

    @permnote.setter
    def permnote(self, permnote):
        """Sets the permnote of this LithologyData.


        :param permnote: The permnote of this LithologyData.  # noqa: E501
        :type: str
        """

        self._permnote = permnote

    @property
    def permvert(self):
        """Gets the permvert of this LithologyData.  # noqa: E501


        :return: The permvert of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._permvert

    @permvert.setter
    def permvert(self, permvert):
        """Sets the permvert of this LithologyData.


        :param permvert: The permvert of this LithologyData.  # noqa: E501
        :type: float
        """

        self._permvert = permvert

    @property
    def porosity(self):
        """Gets the porosity of this LithologyData.  # noqa: E501


        :return: The porosity of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._porosity

    @porosity.setter
    def porosity(self, porosity):
        """Sets the porosity of this LithologyData.


        :param porosity: The porosity of this LithologyData.  # noqa: E501
        :type: float
        """

        self._porosity = porosity

    @property
    def porositytyp(self):
        """Gets the porositytyp of this LithologyData.  # noqa: E501


        :return: The porositytyp of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._porositytyp

    @porositytyp.setter
    def porositytyp(self, porositytyp):
        """Sets the porositytyp of this LithologyData.


        :param porositytyp: The porositytyp of this LithologyData.  # noqa: E501
        :type: str
        """

        self._porositytyp = porositytyp

    @property
    def refno(self):
        """Gets the refno of this LithologyData.  # noqa: E501


        :return: The refno of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this LithologyData.


        :param refno: The refno of this LithologyData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def roundness(self):
        """Gets the roundness of this LithologyData.  # noqa: E501


        :return: The roundness of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._roundness

    @roundness.setter
    def roundness(self, roundness):
        """Sets the roundness of this LithologyData.


        :param roundness: The roundness of this LithologyData.  # noqa: E501
        :type: str
        """

        self._roundness = roundness

    @property
    def shaledes(self):
        """Gets the shaledes of this LithologyData.  # noqa: E501


        :return: The shaledes of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._shaledes

    @shaledes.setter
    def shaledes(self, shaledes):
        """Sets the shaledes of this LithologyData.


        :param shaledes: The shaledes of this LithologyData.  # noqa: E501
        :type: str
        """

        self._shaledes = shaledes

    @property
    def sorting(self):
        """Gets the sorting of this LithologyData.  # noqa: E501


        :return: The sorting of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._sorting

    @sorting.setter
    def sorting(self, sorting):
        """Sets the sorting of this LithologyData.


        :param sorting: The sorting of this LithologyData.  # noqa: E501
        :type: str
        """

        self._sorting = sorting

    @property
    def texture(self):
        """Gets the texture of this LithologyData.  # noqa: E501


        :return: The texture of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._texture

    @texture.setter
    def texture(self, texture):
        """Sets the texture of this LithologyData.


        :param texture: The texture of this LithologyData.  # noqa: E501
        :type: str
        """

        self._texture = texture

    @property
    def typ(self):
        """Gets the typ of this LithologyData.  # noqa: E501


        :return: The typ of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this LithologyData.


        :param typ: The typ of this LithologyData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def volpercent(self):
        """Gets the volpercent of this LithologyData.  # noqa: E501


        :return: The volpercent of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._volpercent

    @volpercent.setter
    def volpercent(self, volpercent):
        """Sets the volpercent of this LithologyData.


        :param volpercent: The volpercent of this LithologyData.  # noqa: E501
        :type: float
        """

        self._volpercent = volpercent

    @property
    def volpercentca(self):
        """Gets the volpercentca of this LithologyData.  # noqa: E501


        :return: The volpercentca of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._volpercentca

    @volpercentca.setter
    def volpercentca(self, volpercentca):
        """Sets the volpercentca of this LithologyData.


        :param volpercentca: The volpercentca of this LithologyData.  # noqa: E501
        :type: float
        """

        self._volpercentca = volpercentca

    @property
    def volpercentmax(self):
        """Gets the volpercentmax of this LithologyData.  # noqa: E501


        :return: The volpercentmax of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._volpercentmax

    @volpercentmax.setter
    def volpercentmax(self, volpercentmax):
        """Sets the volpercentmax of this LithologyData.


        :param volpercentmax: The volpercentmax of this LithologyData.  # noqa: E501
        :type: float
        """

        self._volpercentmax = volpercentmax

    @property
    def volpercentmg(self):
        """Gets the volpercentmg of this LithologyData.  # noqa: E501


        :return: The volpercentmg of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._volpercentmg

    @volpercentmg.setter
    def volpercentmg(self, volpercentmg):
        """Sets the volpercentmg of this LithologyData.


        :param volpercentmg: The volpercentmg of this LithologyData.  # noqa: E501
        :type: float
        """

        self._volpercentmg = volpercentmg

    @property
    def volpercentmin(self):
        """Gets the volpercentmin of this LithologyData.  # noqa: E501


        :return: The volpercentmin of this LithologyData.  # noqa: E501
        :rtype: float
        """
        return self._volpercentmin

    @volpercentmin.setter
    def volpercentmin(self, volpercentmin):
        """Sets the volpercentmin of this LithologyData.


        :param volpercentmin: The volpercentmin of this LithologyData.  # noqa: E501
        :type: float
        """

        self._volpercentmin = volpercentmin

    @property
    def systag(self):
        """Gets the systag of this LithologyData.  # noqa: E501


        :return: The systag of this LithologyData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this LithologyData.


        :param systag: The systag of this LithologyData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LithologyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LithologyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
