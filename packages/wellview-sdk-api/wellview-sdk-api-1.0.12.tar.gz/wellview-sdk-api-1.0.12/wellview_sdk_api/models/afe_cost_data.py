# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AFECostData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'afenumbersupprev': 'str',
        'amount': 'float',
        'amountsupp': 'float',
        'amountsuppdttm': 'datetime',
        'code1': 'str',
        'code2': 'str',
        'code3': 'str',
        'code4': 'str',
        'code5': 'str',
        'code6': 'str',
        'des': 'str',
        'dttmforecast': 'datetime',
        'dttmforecastspend': 'datetime',
        'forecast': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecphasecustom': 'str',
        'idwell': 'str',
        'justification': 'str',
        'note': 'str',
        'syscarryfwdp': 'bool',
        'systag': 'str'
    }

    attribute_map = {
        'afenumbersupprev': 'afenumbersupprev',
        'amount': 'amount',
        'amountsupp': 'amountsupp',
        'amountsuppdttm': 'amountsuppdttm',
        'code1': 'code1',
        'code2': 'code2',
        'code3': 'code3',
        'code4': 'code4',
        'code5': 'code5',
        'code6': 'code6',
        'des': 'des',
        'dttmforecast': 'dttmforecast',
        'dttmforecastspend': 'dttmforecastspend',
        'forecast': 'forecast',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecphasecustom': 'idrecphasecustom',
        'idwell': 'idwell',
        'justification': 'justification',
        'note': 'note',
        'syscarryfwdp': 'syscarryfwdp',
        'systag': 'systag'
    }

    def __init__(self, afenumbersupprev=None, amount=None, amountsupp=None, amountsuppdttm=None, code1=None, code2=None, code3=None, code4=None, code5=None, code6=None, des=None, dttmforecast=None, dttmforecastspend=None, forecast=None, idrec=None, idrecparent=None, idrecphasecustom=None, idwell=None, justification=None, note=None, syscarryfwdp=None, systag=None):  # noqa: E501
        """AFECostData - a model defined in Swagger"""  # noqa: E501
        self._afenumbersupprev = None
        self._amount = None
        self._amountsupp = None
        self._amountsuppdttm = None
        self._code1 = None
        self._code2 = None
        self._code3 = None
        self._code4 = None
        self._code5 = None
        self._code6 = None
        self._des = None
        self._dttmforecast = None
        self._dttmforecastspend = None
        self._forecast = None
        self._idrec = None
        self._idrecparent = None
        self._idrecphasecustom = None
        self._idwell = None
        self._justification = None
        self._note = None
        self._syscarryfwdp = None
        self._systag = None
        self.discriminator = None
        if afenumbersupprev is not None:
            self.afenumbersupprev = afenumbersupprev
        if amount is not None:
            self.amount = amount
        if amountsupp is not None:
            self.amountsupp = amountsupp
        if amountsuppdttm is not None:
            self.amountsuppdttm = amountsuppdttm
        if code1 is not None:
            self.code1 = code1
        if code2 is not None:
            self.code2 = code2
        if code3 is not None:
            self.code3 = code3
        if code4 is not None:
            self.code4 = code4
        if code5 is not None:
            self.code5 = code5
        if code6 is not None:
            self.code6 = code6
        if des is not None:
            self.des = des
        if dttmforecast is not None:
            self.dttmforecast = dttmforecast
        if dttmforecastspend is not None:
            self.dttmforecastspend = dttmforecastspend
        if forecast is not None:
            self.forecast = forecast
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecphasecustom is not None:
            self.idrecphasecustom = idrecphasecustom
        self.idwell = idwell
        if justification is not None:
            self.justification = justification
        if note is not None:
            self.note = note
        if syscarryfwdp is not None:
            self.syscarryfwdp = syscarryfwdp
        if systag is not None:
            self.systag = systag

    @property
    def afenumbersupprev(self):
        """Gets the afenumbersupprev of this AFECostData.  # noqa: E501


        :return: The afenumbersupprev of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._afenumbersupprev

    @afenumbersupprev.setter
    def afenumbersupprev(self, afenumbersupprev):
        """Sets the afenumbersupprev of this AFECostData.


        :param afenumbersupprev: The afenumbersupprev of this AFECostData.  # noqa: E501
        :type: str
        """

        self._afenumbersupprev = afenumbersupprev

    @property
    def amount(self):
        """Gets the amount of this AFECostData.  # noqa: E501


        :return: The amount of this AFECostData.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AFECostData.


        :param amount: The amount of this AFECostData.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amountsupp(self):
        """Gets the amountsupp of this AFECostData.  # noqa: E501


        :return: The amountsupp of this AFECostData.  # noqa: E501
        :rtype: float
        """
        return self._amountsupp

    @amountsupp.setter
    def amountsupp(self, amountsupp):
        """Sets the amountsupp of this AFECostData.


        :param amountsupp: The amountsupp of this AFECostData.  # noqa: E501
        :type: float
        """

        self._amountsupp = amountsupp

    @property
    def amountsuppdttm(self):
        """Gets the amountsuppdttm of this AFECostData.  # noqa: E501


        :return: The amountsuppdttm of this AFECostData.  # noqa: E501
        :rtype: datetime
        """
        return self._amountsuppdttm

    @amountsuppdttm.setter
    def amountsuppdttm(self, amountsuppdttm):
        """Sets the amountsuppdttm of this AFECostData.


        :param amountsuppdttm: The amountsuppdttm of this AFECostData.  # noqa: E501
        :type: datetime
        """

        self._amountsuppdttm = amountsuppdttm

    @property
    def code1(self):
        """Gets the code1 of this AFECostData.  # noqa: E501


        :return: The code1 of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._code1

    @code1.setter
    def code1(self, code1):
        """Sets the code1 of this AFECostData.


        :param code1: The code1 of this AFECostData.  # noqa: E501
        :type: str
        """

        self._code1 = code1

    @property
    def code2(self):
        """Gets the code2 of this AFECostData.  # noqa: E501


        :return: The code2 of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this AFECostData.


        :param code2: The code2 of this AFECostData.  # noqa: E501
        :type: str
        """

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this AFECostData.  # noqa: E501


        :return: The code3 of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this AFECostData.


        :param code3: The code3 of this AFECostData.  # noqa: E501
        :type: str
        """

        self._code3 = code3

    @property
    def code4(self):
        """Gets the code4 of this AFECostData.  # noqa: E501


        :return: The code4 of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._code4

    @code4.setter
    def code4(self, code4):
        """Sets the code4 of this AFECostData.


        :param code4: The code4 of this AFECostData.  # noqa: E501
        :type: str
        """

        self._code4 = code4

    @property
    def code5(self):
        """Gets the code5 of this AFECostData.  # noqa: E501


        :return: The code5 of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._code5

    @code5.setter
    def code5(self, code5):
        """Sets the code5 of this AFECostData.


        :param code5: The code5 of this AFECostData.  # noqa: E501
        :type: str
        """

        self._code5 = code5

    @property
    def code6(self):
        """Gets the code6 of this AFECostData.  # noqa: E501


        :return: The code6 of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._code6

    @code6.setter
    def code6(self, code6):
        """Sets the code6 of this AFECostData.


        :param code6: The code6 of this AFECostData.  # noqa: E501
        :type: str
        """

        self._code6 = code6

    @property
    def des(self):
        """Gets the des of this AFECostData.  # noqa: E501


        :return: The des of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this AFECostData.


        :param des: The des of this AFECostData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmforecast(self):
        """Gets the dttmforecast of this AFECostData.  # noqa: E501


        :return: The dttmforecast of this AFECostData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmforecast

    @dttmforecast.setter
    def dttmforecast(self, dttmforecast):
        """Sets the dttmforecast of this AFECostData.


        :param dttmforecast: The dttmforecast of this AFECostData.  # noqa: E501
        :type: datetime
        """

        self._dttmforecast = dttmforecast

    @property
    def dttmforecastspend(self):
        """Gets the dttmforecastspend of this AFECostData.  # noqa: E501


        :return: The dttmforecastspend of this AFECostData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmforecastspend

    @dttmforecastspend.setter
    def dttmforecastspend(self, dttmforecastspend):
        """Sets the dttmforecastspend of this AFECostData.


        :param dttmforecastspend: The dttmforecastspend of this AFECostData.  # noqa: E501
        :type: datetime
        """

        self._dttmforecastspend = dttmforecastspend

    @property
    def forecast(self):
        """Gets the forecast of this AFECostData.  # noqa: E501


        :return: The forecast of this AFECostData.  # noqa: E501
        :rtype: float
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this AFECostData.


        :param forecast: The forecast of this AFECostData.  # noqa: E501
        :type: float
        """

        self._forecast = forecast

    @property
    def idrec(self):
        """Gets the idrec of this AFECostData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this AFECostData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this AFECostData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this AFECostData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this AFECostData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this AFECostData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecphasecustom(self):
        """Gets the idrecphasecustom of this AFECostData.  # noqa: E501


        :return: The idrecphasecustom of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._idrecphasecustom

    @idrecphasecustom.setter
    def idrecphasecustom(self, idrecphasecustom):
        """Sets the idrecphasecustom of this AFECostData.


        :param idrecphasecustom: The idrecphasecustom of this AFECostData.  # noqa: E501
        :type: str
        """

        self._idrecphasecustom = idrecphasecustom

    @property
    def idwell(self):
        """Gets the idwell of this AFECostData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this AFECostData.

        id of well  # noqa: E501

        :param idwell: The idwell of this AFECostData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def justification(self):
        """Gets the justification of this AFECostData.  # noqa: E501


        :return: The justification of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification):
        """Sets the justification of this AFECostData.


        :param justification: The justification of this AFECostData.  # noqa: E501
        :type: str
        """

        self._justification = justification

    @property
    def note(self):
        """Gets the note of this AFECostData.  # noqa: E501


        :return: The note of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AFECostData.


        :param note: The note of this AFECostData.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def syscarryfwdp(self):
        """Gets the syscarryfwdp of this AFECostData.  # noqa: E501


        :return: The syscarryfwdp of this AFECostData.  # noqa: E501
        :rtype: bool
        """
        return self._syscarryfwdp

    @syscarryfwdp.setter
    def syscarryfwdp(self, syscarryfwdp):
        """Sets the syscarryfwdp of this AFECostData.


        :param syscarryfwdp: The syscarryfwdp of this AFECostData.  # noqa: E501
        :type: bool
        """

        self._syscarryfwdp = syscarryfwdp

    @property
    def systag(self):
        """Gets the systag of this AFECostData.  # noqa: E501


        :return: The systag of this AFECostData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this AFECostData.


        :param systag: The systag of this AFECostData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AFECostData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AFECostData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
