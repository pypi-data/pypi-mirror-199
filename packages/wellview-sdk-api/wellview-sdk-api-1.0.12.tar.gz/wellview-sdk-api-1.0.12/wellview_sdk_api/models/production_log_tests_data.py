# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductionLogTestsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'analyst': 'str',
        'com': 'str',
        'density': 'float',
        'des': 'str',
        'dttm': 'datetime',
        'durshutin': 'float',
        'fluidlevel': 'float',
        'idrec': 'str',
        'idrecjob': 'str',
        'idreclog': 'str',
        'idwell': 'str',
        'orificesz': 'float',
        'presflowingsurf': 'float',
        'presshutin': 'float',
        'ratecondsurf': 'float',
        'rategassurf': 'float',
        'rateoilsurf': 'float',
        'ratewatersurf': 'float',
        'testedby': 'str',
        'tooldes': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'analyst': 'analyst',
        'com': 'com',
        'density': 'density',
        'des': 'des',
        'dttm': 'dttm',
        'durshutin': 'durshutin',
        'fluidlevel': 'fluidlevel',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idreclog': 'idreclog',
        'idwell': 'idwell',
        'orificesz': 'orificesz',
        'presflowingsurf': 'presflowingsurf',
        'presshutin': 'presshutin',
        'ratecondsurf': 'ratecondsurf',
        'rategassurf': 'rategassurf',
        'rateoilsurf': 'rateoilsurf',
        'ratewatersurf': 'ratewatersurf',
        'testedby': 'testedby',
        'tooldes': 'tooldes',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, analyst=None, com=None, density=None, des=None, dttm=None, durshutin=None, fluidlevel=None, idrec=None, idrecjob=None, idreclog=None, idwell=None, orificesz=None, presflowingsurf=None, presshutin=None, ratecondsurf=None, rategassurf=None, rateoilsurf=None, ratewatersurf=None, testedby=None, tooldes=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """ProductionLogTestsData - a model defined in Swagger"""  # noqa: E501
        self._analyst = None
        self._com = None
        self._density = None
        self._des = None
        self._dttm = None
        self._durshutin = None
        self._fluidlevel = None
        self._idrec = None
        self._idrecjob = None
        self._idreclog = None
        self._idwell = None
        self._orificesz = None
        self._presflowingsurf = None
        self._presshutin = None
        self._ratecondsurf = None
        self._rategassurf = None
        self._rateoilsurf = None
        self._ratewatersurf = None
        self._testedby = None
        self._tooldes = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if analyst is not None:
            self.analyst = analyst
        if com is not None:
            self.com = com
        if density is not None:
            self.density = density
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if durshutin is not None:
            self.durshutin = durshutin
        if fluidlevel is not None:
            self.fluidlevel = fluidlevel
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idreclog is not None:
            self.idreclog = idreclog
        self.idwell = idwell
        if orificesz is not None:
            self.orificesz = orificesz
        if presflowingsurf is not None:
            self.presflowingsurf = presflowingsurf
        if presshutin is not None:
            self.presshutin = presshutin
        if ratecondsurf is not None:
            self.ratecondsurf = ratecondsurf
        if rategassurf is not None:
            self.rategassurf = rategassurf
        if rateoilsurf is not None:
            self.rateoilsurf = rateoilsurf
        if ratewatersurf is not None:
            self.ratewatersurf = ratewatersurf
        if testedby is not None:
            self.testedby = testedby
        if tooldes is not None:
            self.tooldes = tooldes
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def analyst(self):
        """Gets the analyst of this ProductionLogTestsData.  # noqa: E501


        :return: The analyst of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._analyst

    @analyst.setter
    def analyst(self, analyst):
        """Sets the analyst of this ProductionLogTestsData.


        :param analyst: The analyst of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._analyst = analyst

    @property
    def com(self):
        """Gets the com of this ProductionLogTestsData.  # noqa: E501


        :return: The com of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this ProductionLogTestsData.


        :param com: The com of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def density(self):
        """Gets the density of this ProductionLogTestsData.  # noqa: E501


        :return: The density of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this ProductionLogTestsData.


        :param density: The density of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._density = density

    @property
    def des(self):
        """Gets the des of this ProductionLogTestsData.  # noqa: E501


        :return: The des of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this ProductionLogTestsData.


        :param des: The des of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this ProductionLogTestsData.  # noqa: E501


        :return: The dttm of this ProductionLogTestsData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this ProductionLogTestsData.


        :param dttm: The dttm of this ProductionLogTestsData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def durshutin(self):
        """Gets the durshutin of this ProductionLogTestsData.  # noqa: E501


        :return: The durshutin of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._durshutin

    @durshutin.setter
    def durshutin(self, durshutin):
        """Sets the durshutin of this ProductionLogTestsData.


        :param durshutin: The durshutin of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._durshutin = durshutin

    @property
    def fluidlevel(self):
        """Gets the fluidlevel of this ProductionLogTestsData.  # noqa: E501


        :return: The fluidlevel of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._fluidlevel

    @fluidlevel.setter
    def fluidlevel(self, fluidlevel):
        """Sets the fluidlevel of this ProductionLogTestsData.


        :param fluidlevel: The fluidlevel of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._fluidlevel = fluidlevel

    @property
    def idrec(self):
        """Gets the idrec of this ProductionLogTestsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ProductionLogTestsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this ProductionLogTestsData.  # noqa: E501


        :return: The idrecjob of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this ProductionLogTestsData.


        :param idrecjob: The idrecjob of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idreclog(self):
        """Gets the idreclog of this ProductionLogTestsData.  # noqa: E501


        :return: The idreclog of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idreclog

    @idreclog.setter
    def idreclog(self, idreclog):
        """Sets the idreclog of this ProductionLogTestsData.


        :param idreclog: The idreclog of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._idreclog = idreclog

    @property
    def idwell(self):
        """Gets the idwell of this ProductionLogTestsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ProductionLogTestsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def orificesz(self):
        """Gets the orificesz of this ProductionLogTestsData.  # noqa: E501


        :return: The orificesz of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._orificesz

    @orificesz.setter
    def orificesz(self, orificesz):
        """Sets the orificesz of this ProductionLogTestsData.


        :param orificesz: The orificesz of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._orificesz = orificesz

    @property
    def presflowingsurf(self):
        """Gets the presflowingsurf of this ProductionLogTestsData.  # noqa: E501


        :return: The presflowingsurf of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._presflowingsurf

    @presflowingsurf.setter
    def presflowingsurf(self, presflowingsurf):
        """Sets the presflowingsurf of this ProductionLogTestsData.


        :param presflowingsurf: The presflowingsurf of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._presflowingsurf = presflowingsurf

    @property
    def presshutin(self):
        """Gets the presshutin of this ProductionLogTestsData.  # noqa: E501


        :return: The presshutin of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._presshutin

    @presshutin.setter
    def presshutin(self, presshutin):
        """Sets the presshutin of this ProductionLogTestsData.


        :param presshutin: The presshutin of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._presshutin = presshutin

    @property
    def ratecondsurf(self):
        """Gets the ratecondsurf of this ProductionLogTestsData.  # noqa: E501


        :return: The ratecondsurf of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._ratecondsurf

    @ratecondsurf.setter
    def ratecondsurf(self, ratecondsurf):
        """Sets the ratecondsurf of this ProductionLogTestsData.


        :param ratecondsurf: The ratecondsurf of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._ratecondsurf = ratecondsurf

    @property
    def rategassurf(self):
        """Gets the rategassurf of this ProductionLogTestsData.  # noqa: E501


        :return: The rategassurf of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._rategassurf

    @rategassurf.setter
    def rategassurf(self, rategassurf):
        """Sets the rategassurf of this ProductionLogTestsData.


        :param rategassurf: The rategassurf of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._rategassurf = rategassurf

    @property
    def rateoilsurf(self):
        """Gets the rateoilsurf of this ProductionLogTestsData.  # noqa: E501


        :return: The rateoilsurf of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._rateoilsurf

    @rateoilsurf.setter
    def rateoilsurf(self, rateoilsurf):
        """Sets the rateoilsurf of this ProductionLogTestsData.


        :param rateoilsurf: The rateoilsurf of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._rateoilsurf = rateoilsurf

    @property
    def ratewatersurf(self):
        """Gets the ratewatersurf of this ProductionLogTestsData.  # noqa: E501


        :return: The ratewatersurf of this ProductionLogTestsData.  # noqa: E501
        :rtype: float
        """
        return self._ratewatersurf

    @ratewatersurf.setter
    def ratewatersurf(self, ratewatersurf):
        """Sets the ratewatersurf of this ProductionLogTestsData.


        :param ratewatersurf: The ratewatersurf of this ProductionLogTestsData.  # noqa: E501
        :type: float
        """

        self._ratewatersurf = ratewatersurf

    @property
    def testedby(self):
        """Gets the testedby of this ProductionLogTestsData.  # noqa: E501


        :return: The testedby of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this ProductionLogTestsData.


        :param testedby: The testedby of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def tooldes(self):
        """Gets the tooldes of this ProductionLogTestsData.  # noqa: E501


        :return: The tooldes of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._tooldes

    @tooldes.setter
    def tooldes(self, tooldes):
        """Sets the tooldes of this ProductionLogTestsData.


        :param tooldes: The tooldes of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._tooldes = tooldes

    @property
    def typ1(self):
        """Gets the typ1 of this ProductionLogTestsData.  # noqa: E501


        :return: The typ1 of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this ProductionLogTestsData.


        :param typ1: The typ1 of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this ProductionLogTestsData.  # noqa: E501


        :return: The typ2 of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this ProductionLogTestsData.


        :param typ2: The typ2 of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this ProductionLogTestsData.  # noqa: E501


        :return: The systag of this ProductionLogTestsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ProductionLogTestsData.


        :param systag: The systag of this ProductionLogTestsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductionLogTestsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductionLogTestsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
