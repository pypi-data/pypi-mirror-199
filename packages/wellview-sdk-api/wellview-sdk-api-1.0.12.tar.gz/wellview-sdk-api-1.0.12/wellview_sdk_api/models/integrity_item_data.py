# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrityItemData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actiontyp': 'str',
        'com': 'str',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'recurfrequency': 'float',
        'recurnote': 'str',
        'requiredby': 'str',
        'requiredbyreg': 'bool',
        'responsibleperson': 'str',
        'riskdes': 'str',
        'risklevel': 'str',
        'riskmitigationcom': 'str',
        'risktyp1': 'str',
        'risktyp2': 'str',
        'sensorida': 'str',
        'sensoridb': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'typ3': 'str',
        'typ4': 'str',
        'valuename': 'str',
        'valueunitlabel': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'actiontyp': 'actiontyp',
        'com': 'com',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'recurfrequency': 'recurfrequency',
        'recurnote': 'recurnote',
        'requiredby': 'requiredby',
        'requiredbyreg': 'requiredbyreg',
        'responsibleperson': 'responsibleperson',
        'riskdes': 'riskdes',
        'risklevel': 'risklevel',
        'riskmitigationcom': 'riskmitigationcom',
        'risktyp1': 'risktyp1',
        'risktyp2': 'risktyp2',
        'sensorida': 'sensorida',
        'sensoridb': 'sensoridb',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'typ3': 'typ3',
        'typ4': 'typ4',
        'valuename': 'valuename',
        'valueunitlabel': 'valueunitlabel',
        'systag': 'systag'
    }

    def __init__(self, actiontyp=None, com=None, des=None, dttmend=None, dttmstart=None, idrec=None, idrecparent=None, idwell=None, recurfrequency=None, recurnote=None, requiredby=None, requiredbyreg=None, responsibleperson=None, riskdes=None, risklevel=None, riskmitigationcom=None, risktyp1=None, risktyp2=None, sensorida=None, sensoridb=None, typ1=None, typ2=None, typ3=None, typ4=None, valuename=None, valueunitlabel=None, systag=None):  # noqa: E501
        """IntegrityItemData - a model defined in Swagger"""  # noqa: E501
        self._actiontyp = None
        self._com = None
        self._des = None
        self._dttmend = None
        self._dttmstart = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._recurfrequency = None
        self._recurnote = None
        self._requiredby = None
        self._requiredbyreg = None
        self._responsibleperson = None
        self._riskdes = None
        self._risklevel = None
        self._riskmitigationcom = None
        self._risktyp1 = None
        self._risktyp2 = None
        self._sensorida = None
        self._sensoridb = None
        self._typ1 = None
        self._typ2 = None
        self._typ3 = None
        self._typ4 = None
        self._valuename = None
        self._valueunitlabel = None
        self._systag = None
        self.discriminator = None
        if actiontyp is not None:
            self.actiontyp = actiontyp
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if recurfrequency is not None:
            self.recurfrequency = recurfrequency
        if recurnote is not None:
            self.recurnote = recurnote
        if requiredby is not None:
            self.requiredby = requiredby
        if requiredbyreg is not None:
            self.requiredbyreg = requiredbyreg
        if responsibleperson is not None:
            self.responsibleperson = responsibleperson
        if riskdes is not None:
            self.riskdes = riskdes
        if risklevel is not None:
            self.risklevel = risklevel
        if riskmitigationcom is not None:
            self.riskmitigationcom = riskmitigationcom
        if risktyp1 is not None:
            self.risktyp1 = risktyp1
        if risktyp2 is not None:
            self.risktyp2 = risktyp2
        if sensorida is not None:
            self.sensorida = sensorida
        if sensoridb is not None:
            self.sensoridb = sensoridb
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if typ3 is not None:
            self.typ3 = typ3
        if typ4 is not None:
            self.typ4 = typ4
        if valuename is not None:
            self.valuename = valuename
        if valueunitlabel is not None:
            self.valueunitlabel = valueunitlabel
        if systag is not None:
            self.systag = systag

    @property
    def actiontyp(self):
        """Gets the actiontyp of this IntegrityItemData.  # noqa: E501


        :return: The actiontyp of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._actiontyp

    @actiontyp.setter
    def actiontyp(self, actiontyp):
        """Sets the actiontyp of this IntegrityItemData.


        :param actiontyp: The actiontyp of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._actiontyp = actiontyp

    @property
    def com(self):
        """Gets the com of this IntegrityItemData.  # noqa: E501


        :return: The com of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this IntegrityItemData.


        :param com: The com of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this IntegrityItemData.  # noqa: E501


        :return: The des of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this IntegrityItemData.


        :param des: The des of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this IntegrityItemData.  # noqa: E501


        :return: The dttmend of this IntegrityItemData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this IntegrityItemData.


        :param dttmend: The dttmend of this IntegrityItemData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this IntegrityItemData.  # noqa: E501


        :return: The dttmstart of this IntegrityItemData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this IntegrityItemData.


        :param dttmstart: The dttmstart of this IntegrityItemData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def idrec(self):
        """Gets the idrec of this IntegrityItemData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this IntegrityItemData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this IntegrityItemData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this IntegrityItemData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this IntegrityItemData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this IntegrityItemData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this IntegrityItemData.

        id of well  # noqa: E501

        :param idwell: The idwell of this IntegrityItemData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def recurfrequency(self):
        """Gets the recurfrequency of this IntegrityItemData.  # noqa: E501


        :return: The recurfrequency of this IntegrityItemData.  # noqa: E501
        :rtype: float
        """
        return self._recurfrequency

    @recurfrequency.setter
    def recurfrequency(self, recurfrequency):
        """Sets the recurfrequency of this IntegrityItemData.


        :param recurfrequency: The recurfrequency of this IntegrityItemData.  # noqa: E501
        :type: float
        """

        self._recurfrequency = recurfrequency

    @property
    def recurnote(self):
        """Gets the recurnote of this IntegrityItemData.  # noqa: E501


        :return: The recurnote of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._recurnote

    @recurnote.setter
    def recurnote(self, recurnote):
        """Sets the recurnote of this IntegrityItemData.


        :param recurnote: The recurnote of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._recurnote = recurnote

    @property
    def requiredby(self):
        """Gets the requiredby of this IntegrityItemData.  # noqa: E501


        :return: The requiredby of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._requiredby

    @requiredby.setter
    def requiredby(self, requiredby):
        """Sets the requiredby of this IntegrityItemData.


        :param requiredby: The requiredby of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._requiredby = requiredby

    @property
    def requiredbyreg(self):
        """Gets the requiredbyreg of this IntegrityItemData.  # noqa: E501


        :return: The requiredbyreg of this IntegrityItemData.  # noqa: E501
        :rtype: bool
        """
        return self._requiredbyreg

    @requiredbyreg.setter
    def requiredbyreg(self, requiredbyreg):
        """Sets the requiredbyreg of this IntegrityItemData.


        :param requiredbyreg: The requiredbyreg of this IntegrityItemData.  # noqa: E501
        :type: bool
        """

        self._requiredbyreg = requiredbyreg

    @property
    def responsibleperson(self):
        """Gets the responsibleperson of this IntegrityItemData.  # noqa: E501


        :return: The responsibleperson of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._responsibleperson

    @responsibleperson.setter
    def responsibleperson(self, responsibleperson):
        """Sets the responsibleperson of this IntegrityItemData.


        :param responsibleperson: The responsibleperson of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._responsibleperson = responsibleperson

    @property
    def riskdes(self):
        """Gets the riskdes of this IntegrityItemData.  # noqa: E501


        :return: The riskdes of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._riskdes

    @riskdes.setter
    def riskdes(self, riskdes):
        """Sets the riskdes of this IntegrityItemData.


        :param riskdes: The riskdes of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._riskdes = riskdes

    @property
    def risklevel(self):
        """Gets the risklevel of this IntegrityItemData.  # noqa: E501


        :return: The risklevel of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._risklevel

    @risklevel.setter
    def risklevel(self, risklevel):
        """Sets the risklevel of this IntegrityItemData.


        :param risklevel: The risklevel of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._risklevel = risklevel

    @property
    def riskmitigationcom(self):
        """Gets the riskmitigationcom of this IntegrityItemData.  # noqa: E501


        :return: The riskmitigationcom of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._riskmitigationcom

    @riskmitigationcom.setter
    def riskmitigationcom(self, riskmitigationcom):
        """Sets the riskmitigationcom of this IntegrityItemData.


        :param riskmitigationcom: The riskmitigationcom of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._riskmitigationcom = riskmitigationcom

    @property
    def risktyp1(self):
        """Gets the risktyp1 of this IntegrityItemData.  # noqa: E501


        :return: The risktyp1 of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._risktyp1

    @risktyp1.setter
    def risktyp1(self, risktyp1):
        """Sets the risktyp1 of this IntegrityItemData.


        :param risktyp1: The risktyp1 of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._risktyp1 = risktyp1

    @property
    def risktyp2(self):
        """Gets the risktyp2 of this IntegrityItemData.  # noqa: E501


        :return: The risktyp2 of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._risktyp2

    @risktyp2.setter
    def risktyp2(self, risktyp2):
        """Sets the risktyp2 of this IntegrityItemData.


        :param risktyp2: The risktyp2 of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._risktyp2 = risktyp2

    @property
    def sensorida(self):
        """Gets the sensorida of this IntegrityItemData.  # noqa: E501


        :return: The sensorida of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._sensorida

    @sensorida.setter
    def sensorida(self, sensorida):
        """Sets the sensorida of this IntegrityItemData.


        :param sensorida: The sensorida of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._sensorida = sensorida

    @property
    def sensoridb(self):
        """Gets the sensoridb of this IntegrityItemData.  # noqa: E501


        :return: The sensoridb of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._sensoridb

    @sensoridb.setter
    def sensoridb(self, sensoridb):
        """Sets the sensoridb of this IntegrityItemData.


        :param sensoridb: The sensoridb of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._sensoridb = sensoridb

    @property
    def typ1(self):
        """Gets the typ1 of this IntegrityItemData.  # noqa: E501


        :return: The typ1 of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this IntegrityItemData.


        :param typ1: The typ1 of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this IntegrityItemData.  # noqa: E501


        :return: The typ2 of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this IntegrityItemData.


        :param typ2: The typ2 of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def typ3(self):
        """Gets the typ3 of this IntegrityItemData.  # noqa: E501


        :return: The typ3 of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._typ3

    @typ3.setter
    def typ3(self, typ3):
        """Sets the typ3 of this IntegrityItemData.


        :param typ3: The typ3 of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._typ3 = typ3

    @property
    def typ4(self):
        """Gets the typ4 of this IntegrityItemData.  # noqa: E501


        :return: The typ4 of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._typ4

    @typ4.setter
    def typ4(self, typ4):
        """Sets the typ4 of this IntegrityItemData.


        :param typ4: The typ4 of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._typ4 = typ4

    @property
    def valuename(self):
        """Gets the valuename of this IntegrityItemData.  # noqa: E501


        :return: The valuename of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._valuename

    @valuename.setter
    def valuename(self, valuename):
        """Sets the valuename of this IntegrityItemData.


        :param valuename: The valuename of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._valuename = valuename

    @property
    def valueunitlabel(self):
        """Gets the valueunitlabel of this IntegrityItemData.  # noqa: E501


        :return: The valueunitlabel of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._valueunitlabel

    @valueunitlabel.setter
    def valueunitlabel(self, valueunitlabel):
        """Sets the valueunitlabel of this IntegrityItemData.


        :param valueunitlabel: The valueunitlabel of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._valueunitlabel = valueunitlabel

    @property
    def systag(self):
        """Gets the systag of this IntegrityItemData.  # noqa: E501


        :return: The systag of this IntegrityItemData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this IntegrityItemData.


        :param systag: The systag of this IntegrityItemData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrityItemData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrityItemData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
