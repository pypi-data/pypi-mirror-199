# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FluidSystemData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'des': 'str',
        'environmenttyp': 'str',
        'evalmethod': 'str',
        'filtersz': 'float',
        'fluiddensity': 'float',
        'fluidname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'masstotal': 'float',
        'ph': 'float',
        'presvapor': 'float',
        'purpose': 'str',
        'source': 'str',
        'tempref': 'float',
        'typ1': 'str',
        'typ2': 'str',
        'usernum1': 'float',
        'usertxt1': 'str',
        'vendor': 'str',
        'vendorcode': 'str',
        'vendorfluidname': 'str',
        'viscosity': 'float',
        'volume': 'float',
        'volumedesign': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'des': 'des',
        'environmenttyp': 'environmenttyp',
        'evalmethod': 'evalmethod',
        'filtersz': 'filtersz',
        'fluiddensity': 'fluiddensity',
        'fluidname': 'fluidname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'masstotal': 'masstotal',
        'ph': 'ph',
        'presvapor': 'presvapor',
        'purpose': 'purpose',
        'source': 'source',
        'tempref': 'tempref',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'usernum1': 'usernum1',
        'usertxt1': 'usertxt1',
        'vendor': 'vendor',
        'vendorcode': 'vendorcode',
        'vendorfluidname': 'vendorfluidname',
        'viscosity': 'viscosity',
        'volume': 'volume',
        'volumedesign': 'volumedesign',
        'systag': 'systag'
    }

    def __init__(self, com=None, des=None, environmenttyp=None, evalmethod=None, filtersz=None, fluiddensity=None, fluidname=None, idrec=None, idrecparent=None, idwell=None, masstotal=None, ph=None, presvapor=None, purpose=None, source=None, tempref=None, typ1=None, typ2=None, usernum1=None, usertxt1=None, vendor=None, vendorcode=None, vendorfluidname=None, viscosity=None, volume=None, volumedesign=None, systag=None):  # noqa: E501
        """FluidSystemData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._des = None
        self._environmenttyp = None
        self._evalmethod = None
        self._filtersz = None
        self._fluiddensity = None
        self._fluidname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._masstotal = None
        self._ph = None
        self._presvapor = None
        self._purpose = None
        self._source = None
        self._tempref = None
        self._typ1 = None
        self._typ2 = None
        self._usernum1 = None
        self._usertxt1 = None
        self._vendor = None
        self._vendorcode = None
        self._vendorfluidname = None
        self._viscosity = None
        self._volume = None
        self._volumedesign = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if des is not None:
            self.des = des
        if environmenttyp is not None:
            self.environmenttyp = environmenttyp
        if evalmethod is not None:
            self.evalmethod = evalmethod
        if filtersz is not None:
            self.filtersz = filtersz
        if fluiddensity is not None:
            self.fluiddensity = fluiddensity
        if fluidname is not None:
            self.fluidname = fluidname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if masstotal is not None:
            self.masstotal = masstotal
        if ph is not None:
            self.ph = ph
        if presvapor is not None:
            self.presvapor = presvapor
        if purpose is not None:
            self.purpose = purpose
        if source is not None:
            self.source = source
        if tempref is not None:
            self.tempref = tempref
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usertxt1 is not None:
            self.usertxt1 = usertxt1
        if vendor is not None:
            self.vendor = vendor
        if vendorcode is not None:
            self.vendorcode = vendorcode
        if vendorfluidname is not None:
            self.vendorfluidname = vendorfluidname
        if viscosity is not None:
            self.viscosity = viscosity
        if volume is not None:
            self.volume = volume
        if volumedesign is not None:
            self.volumedesign = volumedesign
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this FluidSystemData.  # noqa: E501


        :return: The com of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FluidSystemData.


        :param com: The com of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def des(self):
        """Gets the des of this FluidSystemData.  # noqa: E501


        :return: The des of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this FluidSystemData.


        :param des: The des of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def environmenttyp(self):
        """Gets the environmenttyp of this FluidSystemData.  # noqa: E501


        :return: The environmenttyp of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._environmenttyp

    @environmenttyp.setter
    def environmenttyp(self, environmenttyp):
        """Sets the environmenttyp of this FluidSystemData.


        :param environmenttyp: The environmenttyp of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._environmenttyp = environmenttyp

    @property
    def evalmethod(self):
        """Gets the evalmethod of this FluidSystemData.  # noqa: E501


        :return: The evalmethod of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._evalmethod

    @evalmethod.setter
    def evalmethod(self, evalmethod):
        """Sets the evalmethod of this FluidSystemData.


        :param evalmethod: The evalmethod of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._evalmethod = evalmethod

    @property
    def filtersz(self):
        """Gets the filtersz of this FluidSystemData.  # noqa: E501


        :return: The filtersz of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._filtersz

    @filtersz.setter
    def filtersz(self, filtersz):
        """Sets the filtersz of this FluidSystemData.


        :param filtersz: The filtersz of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._filtersz = filtersz

    @property
    def fluiddensity(self):
        """Gets the fluiddensity of this FluidSystemData.  # noqa: E501


        :return: The fluiddensity of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._fluiddensity

    @fluiddensity.setter
    def fluiddensity(self, fluiddensity):
        """Sets the fluiddensity of this FluidSystemData.


        :param fluiddensity: The fluiddensity of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._fluiddensity = fluiddensity

    @property
    def fluidname(self):
        """Gets the fluidname of this FluidSystemData.  # noqa: E501


        :return: The fluidname of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._fluidname

    @fluidname.setter
    def fluidname(self, fluidname):
        """Sets the fluidname of this FluidSystemData.


        :param fluidname: The fluidname of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._fluidname = fluidname

    @property
    def idrec(self):
        """Gets the idrec of this FluidSystemData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FluidSystemData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this FluidSystemData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this FluidSystemData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this FluidSystemData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this FluidSystemData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FluidSystemData.

        id of well  # noqa: E501

        :param idwell: The idwell of this FluidSystemData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def masstotal(self):
        """Gets the masstotal of this FluidSystemData.  # noqa: E501


        :return: The masstotal of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._masstotal

    @masstotal.setter
    def masstotal(self, masstotal):
        """Sets the masstotal of this FluidSystemData.


        :param masstotal: The masstotal of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._masstotal = masstotal

    @property
    def ph(self):
        """Gets the ph of this FluidSystemData.  # noqa: E501


        :return: The ph of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._ph

    @ph.setter
    def ph(self, ph):
        """Sets the ph of this FluidSystemData.


        :param ph: The ph of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._ph = ph

    @property
    def presvapor(self):
        """Gets the presvapor of this FluidSystemData.  # noqa: E501


        :return: The presvapor of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._presvapor

    @presvapor.setter
    def presvapor(self, presvapor):
        """Sets the presvapor of this FluidSystemData.


        :param presvapor: The presvapor of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._presvapor = presvapor

    @property
    def purpose(self):
        """Gets the purpose of this FluidSystemData.  # noqa: E501


        :return: The purpose of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this FluidSystemData.


        :param purpose: The purpose of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def source(self):
        """Gets the source of this FluidSystemData.  # noqa: E501


        :return: The source of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FluidSystemData.


        :param source: The source of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def tempref(self):
        """Gets the tempref of this FluidSystemData.  # noqa: E501


        :return: The tempref of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._tempref

    @tempref.setter
    def tempref(self, tempref):
        """Sets the tempref of this FluidSystemData.


        :param tempref: The tempref of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._tempref = tempref

    @property
    def typ1(self):
        """Gets the typ1 of this FluidSystemData.  # noqa: E501


        :return: The typ1 of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this FluidSystemData.


        :param typ1: The typ1 of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this FluidSystemData.  # noqa: E501


        :return: The typ2 of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this FluidSystemData.


        :param typ2: The typ2 of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def usernum1(self):
        """Gets the usernum1 of this FluidSystemData.  # noqa: E501


        :return: The usernum1 of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this FluidSystemData.


        :param usernum1: The usernum1 of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usertxt1(self):
        """Gets the usertxt1 of this FluidSystemData.  # noqa: E501


        :return: The usertxt1 of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._usertxt1

    @usertxt1.setter
    def usertxt1(self, usertxt1):
        """Sets the usertxt1 of this FluidSystemData.


        :param usertxt1: The usertxt1 of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._usertxt1 = usertxt1

    @property
    def vendor(self):
        """Gets the vendor of this FluidSystemData.  # noqa: E501


        :return: The vendor of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this FluidSystemData.


        :param vendor: The vendor of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def vendorcode(self):
        """Gets the vendorcode of this FluidSystemData.  # noqa: E501


        :return: The vendorcode of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._vendorcode

    @vendorcode.setter
    def vendorcode(self, vendorcode):
        """Sets the vendorcode of this FluidSystemData.


        :param vendorcode: The vendorcode of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._vendorcode = vendorcode

    @property
    def vendorfluidname(self):
        """Gets the vendorfluidname of this FluidSystemData.  # noqa: E501


        :return: The vendorfluidname of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._vendorfluidname

    @vendorfluidname.setter
    def vendorfluidname(self, vendorfluidname):
        """Sets the vendorfluidname of this FluidSystemData.


        :param vendorfluidname: The vendorfluidname of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._vendorfluidname = vendorfluidname

    @property
    def viscosity(self):
        """Gets the viscosity of this FluidSystemData.  # noqa: E501


        :return: The viscosity of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._viscosity

    @viscosity.setter
    def viscosity(self, viscosity):
        """Sets the viscosity of this FluidSystemData.


        :param viscosity: The viscosity of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._viscosity = viscosity

    @property
    def volume(self):
        """Gets the volume of this FluidSystemData.  # noqa: E501


        :return: The volume of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this FluidSystemData.


        :param volume: The volume of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def volumedesign(self):
        """Gets the volumedesign of this FluidSystemData.  # noqa: E501


        :return: The volumedesign of this FluidSystemData.  # noqa: E501
        :rtype: float
        """
        return self._volumedesign

    @volumedesign.setter
    def volumedesign(self, volumedesign):
        """Sets the volumedesign of this FluidSystemData.


        :param volumedesign: The volumedesign of this FluidSystemData.  # noqa: E501
        :type: float
        """

        self._volumedesign = volumedesign

    @property
    def systag(self):
        """Gets the systag of this FluidSystemData.  # noqa: E501


        :return: The systag of this FluidSystemData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FluidSystemData.


        :param systag: The systag of this FluidSystemData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FluidSystemData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FluidSystemData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
