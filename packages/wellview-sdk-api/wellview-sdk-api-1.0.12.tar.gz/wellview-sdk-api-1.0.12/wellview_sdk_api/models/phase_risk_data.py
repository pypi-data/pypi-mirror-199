# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhaseRiskData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'costmax': 'float',
        'costmin': 'float',
        'costml': 'float',
        'depthend': 'float',
        'depthstart': 'float',
        'des': 'str',
        'durationmax': 'float',
        'durationmin': 'float',
        'durationml': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'typ': 'str',
        'typdetail': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'costmax': 'costmax',
        'costmin': 'costmin',
        'costml': 'costml',
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'des': 'des',
        'durationmax': 'durationmax',
        'durationmin': 'durationmin',
        'durationml': 'durationml',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'typ': 'typ',
        'typdetail': 'typdetail',
        'systag': 'systag'
    }

    def __init__(self, com=None, costmax=None, costmin=None, costml=None, depthend=None, depthstart=None, des=None, durationmax=None, durationmin=None, durationml=None, idrec=None, idrecparent=None, idwell=None, typ=None, typdetail=None, systag=None):  # noqa: E501
        """PhaseRiskData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._costmax = None
        self._costmin = None
        self._costml = None
        self._depthend = None
        self._depthstart = None
        self._des = None
        self._durationmax = None
        self._durationmin = None
        self._durationml = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._typ = None
        self._typdetail = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if costmax is not None:
            self.costmax = costmax
        if costmin is not None:
            self.costmin = costmin
        if costml is not None:
            self.costml = costml
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if des is not None:
            self.des = des
        if durationmax is not None:
            self.durationmax = durationmax
        if durationmin is not None:
            self.durationmin = durationmin
        if durationml is not None:
            self.durationml = durationml
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if typ is not None:
            self.typ = typ
        if typdetail is not None:
            self.typdetail = typdetail
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this PhaseRiskData.  # noqa: E501


        :return: The com of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this PhaseRiskData.


        :param com: The com of this PhaseRiskData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def costmax(self):
        """Gets the costmax of this PhaseRiskData.  # noqa: E501


        :return: The costmax of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._costmax

    @costmax.setter
    def costmax(self, costmax):
        """Sets the costmax of this PhaseRiskData.


        :param costmax: The costmax of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._costmax = costmax

    @property
    def costmin(self):
        """Gets the costmin of this PhaseRiskData.  # noqa: E501


        :return: The costmin of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._costmin

    @costmin.setter
    def costmin(self, costmin):
        """Sets the costmin of this PhaseRiskData.


        :param costmin: The costmin of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._costmin = costmin

    @property
    def costml(self):
        """Gets the costml of this PhaseRiskData.  # noqa: E501


        :return: The costml of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._costml

    @costml.setter
    def costml(self, costml):
        """Sets the costml of this PhaseRiskData.


        :param costml: The costml of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._costml = costml

    @property
    def depthend(self):
        """Gets the depthend of this PhaseRiskData.  # noqa: E501


        :return: The depthend of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this PhaseRiskData.


        :param depthend: The depthend of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this PhaseRiskData.  # noqa: E501


        :return: The depthstart of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this PhaseRiskData.


        :param depthstart: The depthstart of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._depthstart = depthstart

    @property
    def des(self):
        """Gets the des of this PhaseRiskData.  # noqa: E501


        :return: The des of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this PhaseRiskData.


        :param des: The des of this PhaseRiskData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def durationmax(self):
        """Gets the durationmax of this PhaseRiskData.  # noqa: E501


        :return: The durationmax of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._durationmax

    @durationmax.setter
    def durationmax(self, durationmax):
        """Sets the durationmax of this PhaseRiskData.


        :param durationmax: The durationmax of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._durationmax = durationmax

    @property
    def durationmin(self):
        """Gets the durationmin of this PhaseRiskData.  # noqa: E501


        :return: The durationmin of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._durationmin

    @durationmin.setter
    def durationmin(self, durationmin):
        """Sets the durationmin of this PhaseRiskData.


        :param durationmin: The durationmin of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._durationmin = durationmin

    @property
    def durationml(self):
        """Gets the durationml of this PhaseRiskData.  # noqa: E501


        :return: The durationml of this PhaseRiskData.  # noqa: E501
        :rtype: float
        """
        return self._durationml

    @durationml.setter
    def durationml(self, durationml):
        """Sets the durationml of this PhaseRiskData.


        :param durationml: The durationml of this PhaseRiskData.  # noqa: E501
        :type: float
        """

        self._durationml = durationml

    @property
    def idrec(self):
        """Gets the idrec of this PhaseRiskData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this PhaseRiskData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this PhaseRiskData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this PhaseRiskData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this PhaseRiskData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this PhaseRiskData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this PhaseRiskData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this PhaseRiskData.

        id of well  # noqa: E501

        :param idwell: The idwell of this PhaseRiskData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def typ(self):
        """Gets the typ of this PhaseRiskData.  # noqa: E501


        :return: The typ of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this PhaseRiskData.


        :param typ: The typ of this PhaseRiskData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def typdetail(self):
        """Gets the typdetail of this PhaseRiskData.  # noqa: E501


        :return: The typdetail of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._typdetail

    @typdetail.setter
    def typdetail(self, typdetail):
        """Sets the typdetail of this PhaseRiskData.


        :param typdetail: The typdetail of this PhaseRiskData.  # noqa: E501
        :type: str
        """

        self._typdetail = typdetail

    @property
    def systag(self):
        """Gets the systag of this PhaseRiskData.  # noqa: E501


        :return: The systag of this PhaseRiskData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this PhaseRiskData.


        :param systag: The systag of this PhaseRiskData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhaseRiskData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhaseRiskData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
