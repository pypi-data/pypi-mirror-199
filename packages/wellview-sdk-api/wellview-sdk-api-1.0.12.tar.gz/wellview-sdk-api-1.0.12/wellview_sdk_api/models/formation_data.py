# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collapsepres': 'float',
        'com': 'str',
        'depthdrillingbtm': 'float',
        'depthdrillingsource': 'str',
        'depthdrillingtop': 'float',
        'depthfinalbtm': 'float',
        'depthfinalsource': 'str',
        'depthfinaltop': 'float',
        'depthgasoil': 'float',
        'depthgaswater': 'float',
        'depthmdprogbtm': 'float',
        'depthmdprogtop': 'float',
        'depthoilwater': 'float',
        'depthssprogbtm': 'float',
        'depthssprogtop': 'float',
        'deschro': 'str',
        'desfluid': 'str',
        'deslithology': 'str',
        'dipangle': 'float',
        'dipazimuth': 'float',
        'drillingconsid': 'str',
        'elementtyp': 'str',
        'formationida': 'str',
        'formationidb': 'str',
        'formationidc': 'str',
        'formcode': 'str',
        'formname': 'str',
        'fracpres': 'float',
        'geologicage': 'str',
        'grosspay': 'float',
        'h2sconc': 'float',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'integrityconsid': 'str',
        'kh90': 'float',
        'kmax': 'float',
        'kv': 'float',
        'layername': 'str',
        'mudconsid': 'str',
        'netpay': 'float',
        'noteothergas': 'str',
        'porepres': 'float',
        'porosity': 'float',
        'ropinterpreted': 'float',
        'stress': 'float',
        'temp': 'float',
        'usernum1': 'float',
        'usernum2': 'float',
        'usernum3': 'float',
        'watersat': 'float',
        'weightbitumen': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'collapsepres': 'collapsepres',
        'com': 'com',
        'depthdrillingbtm': 'depthdrillingbtm',
        'depthdrillingsource': 'depthdrillingsource',
        'depthdrillingtop': 'depthdrillingtop',
        'depthfinalbtm': 'depthfinalbtm',
        'depthfinalsource': 'depthfinalsource',
        'depthfinaltop': 'depthfinaltop',
        'depthgasoil': 'depthgasoil',
        'depthgaswater': 'depthgaswater',
        'depthmdprogbtm': 'depthmdprogbtm',
        'depthmdprogtop': 'depthmdprogtop',
        'depthoilwater': 'depthoilwater',
        'depthssprogbtm': 'depthssprogbtm',
        'depthssprogtop': 'depthssprogtop',
        'deschro': 'deschro',
        'desfluid': 'desfluid',
        'deslithology': 'deslithology',
        'dipangle': 'dipangle',
        'dipazimuth': 'dipazimuth',
        'drillingconsid': 'drillingconsid',
        'elementtyp': 'elementtyp',
        'formationida': 'formationida',
        'formationidb': 'formationidb',
        'formationidc': 'formationidc',
        'formcode': 'formcode',
        'formname': 'formname',
        'fracpres': 'fracpres',
        'geologicage': 'geologicage',
        'grosspay': 'grosspay',
        'h2sconc': 'h2sconc',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'integrityconsid': 'integrityconsid',
        'kh90': 'kh90',
        'kmax': 'kmax',
        'kv': 'kv',
        'layername': 'layername',
        'mudconsid': 'mudconsid',
        'netpay': 'netpay',
        'noteothergas': 'noteothergas',
        'porepres': 'porepres',
        'porosity': 'porosity',
        'ropinterpreted': 'ropinterpreted',
        'stress': 'stress',
        'temp': 'temp',
        'usernum1': 'usernum1',
        'usernum2': 'usernum2',
        'usernum3': 'usernum3',
        'watersat': 'watersat',
        'weightbitumen': 'weightbitumen',
        'systag': 'systag'
    }

    def __init__(self, collapsepres=None, com=None, depthdrillingbtm=None, depthdrillingsource=None, depthdrillingtop=None, depthfinalbtm=None, depthfinalsource=None, depthfinaltop=None, depthgasoil=None, depthgaswater=None, depthmdprogbtm=None, depthmdprogtop=None, depthoilwater=None, depthssprogbtm=None, depthssprogtop=None, deschro=None, desfluid=None, deslithology=None, dipangle=None, dipazimuth=None, drillingconsid=None, elementtyp=None, formationida=None, formationidb=None, formationidc=None, formcode=None, formname=None, fracpres=None, geologicage=None, grosspay=None, h2sconc=None, iconname=None, idrec=None, idrecparent=None, idwell=None, integrityconsid=None, kh90=None, kmax=None, kv=None, layername=None, mudconsid=None, netpay=None, noteothergas=None, porepres=None, porosity=None, ropinterpreted=None, stress=None, temp=None, usernum1=None, usernum2=None, usernum3=None, watersat=None, weightbitumen=None, systag=None):  # noqa: E501
        """FormationData - a model defined in Swagger"""  # noqa: E501
        self._collapsepres = None
        self._com = None
        self._depthdrillingbtm = None
        self._depthdrillingsource = None
        self._depthdrillingtop = None
        self._depthfinalbtm = None
        self._depthfinalsource = None
        self._depthfinaltop = None
        self._depthgasoil = None
        self._depthgaswater = None
        self._depthmdprogbtm = None
        self._depthmdprogtop = None
        self._depthoilwater = None
        self._depthssprogbtm = None
        self._depthssprogtop = None
        self._deschro = None
        self._desfluid = None
        self._deslithology = None
        self._dipangle = None
        self._dipazimuth = None
        self._drillingconsid = None
        self._elementtyp = None
        self._formationida = None
        self._formationidb = None
        self._formationidc = None
        self._formcode = None
        self._formname = None
        self._fracpres = None
        self._geologicage = None
        self._grosspay = None
        self._h2sconc = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._integrityconsid = None
        self._kh90 = None
        self._kmax = None
        self._kv = None
        self._layername = None
        self._mudconsid = None
        self._netpay = None
        self._noteothergas = None
        self._porepres = None
        self._porosity = None
        self._ropinterpreted = None
        self._stress = None
        self._temp = None
        self._usernum1 = None
        self._usernum2 = None
        self._usernum3 = None
        self._watersat = None
        self._weightbitumen = None
        self._systag = None
        self.discriminator = None
        if collapsepres is not None:
            self.collapsepres = collapsepres
        if com is not None:
            self.com = com
        if depthdrillingbtm is not None:
            self.depthdrillingbtm = depthdrillingbtm
        if depthdrillingsource is not None:
            self.depthdrillingsource = depthdrillingsource
        if depthdrillingtop is not None:
            self.depthdrillingtop = depthdrillingtop
        if depthfinalbtm is not None:
            self.depthfinalbtm = depthfinalbtm
        if depthfinalsource is not None:
            self.depthfinalsource = depthfinalsource
        if depthfinaltop is not None:
            self.depthfinaltop = depthfinaltop
        if depthgasoil is not None:
            self.depthgasoil = depthgasoil
        if depthgaswater is not None:
            self.depthgaswater = depthgaswater
        if depthmdprogbtm is not None:
            self.depthmdprogbtm = depthmdprogbtm
        if depthmdprogtop is not None:
            self.depthmdprogtop = depthmdprogtop
        if depthoilwater is not None:
            self.depthoilwater = depthoilwater
        if depthssprogbtm is not None:
            self.depthssprogbtm = depthssprogbtm
        if depthssprogtop is not None:
            self.depthssprogtop = depthssprogtop
        if deschro is not None:
            self.deschro = deschro
        if desfluid is not None:
            self.desfluid = desfluid
        if deslithology is not None:
            self.deslithology = deslithology
        if dipangle is not None:
            self.dipangle = dipangle
        if dipazimuth is not None:
            self.dipazimuth = dipazimuth
        if drillingconsid is not None:
            self.drillingconsid = drillingconsid
        if elementtyp is not None:
            self.elementtyp = elementtyp
        if formationida is not None:
            self.formationida = formationida
        if formationidb is not None:
            self.formationidb = formationidb
        if formationidc is not None:
            self.formationidc = formationidc
        if formcode is not None:
            self.formcode = formcode
        if formname is not None:
            self.formname = formname
        if fracpres is not None:
            self.fracpres = fracpres
        if geologicage is not None:
            self.geologicage = geologicage
        if grosspay is not None:
            self.grosspay = grosspay
        if h2sconc is not None:
            self.h2sconc = h2sconc
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if integrityconsid is not None:
            self.integrityconsid = integrityconsid
        if kh90 is not None:
            self.kh90 = kh90
        if kmax is not None:
            self.kmax = kmax
        if kv is not None:
            self.kv = kv
        if layername is not None:
            self.layername = layername
        if mudconsid is not None:
            self.mudconsid = mudconsid
        if netpay is not None:
            self.netpay = netpay
        if noteothergas is not None:
            self.noteothergas = noteothergas
        if porepres is not None:
            self.porepres = porepres
        if porosity is not None:
            self.porosity = porosity
        if ropinterpreted is not None:
            self.ropinterpreted = ropinterpreted
        if stress is not None:
            self.stress = stress
        if temp is not None:
            self.temp = temp
        if usernum1 is not None:
            self.usernum1 = usernum1
        if usernum2 is not None:
            self.usernum2 = usernum2
        if usernum3 is not None:
            self.usernum3 = usernum3
        if watersat is not None:
            self.watersat = watersat
        if weightbitumen is not None:
            self.weightbitumen = weightbitumen
        if systag is not None:
            self.systag = systag

    @property
    def collapsepres(self):
        """Gets the collapsepres of this FormationData.  # noqa: E501


        :return: The collapsepres of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._collapsepres

    @collapsepres.setter
    def collapsepres(self, collapsepres):
        """Sets the collapsepres of this FormationData.


        :param collapsepres: The collapsepres of this FormationData.  # noqa: E501
        :type: float
        """

        self._collapsepres = collapsepres

    @property
    def com(self):
        """Gets the com of this FormationData.  # noqa: E501


        :return: The com of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FormationData.


        :param com: The com of this FormationData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthdrillingbtm(self):
        """Gets the depthdrillingbtm of this FormationData.  # noqa: E501


        :return: The depthdrillingbtm of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthdrillingbtm

    @depthdrillingbtm.setter
    def depthdrillingbtm(self, depthdrillingbtm):
        """Sets the depthdrillingbtm of this FormationData.


        :param depthdrillingbtm: The depthdrillingbtm of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthdrillingbtm = depthdrillingbtm

    @property
    def depthdrillingsource(self):
        """Gets the depthdrillingsource of this FormationData.  # noqa: E501


        :return: The depthdrillingsource of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._depthdrillingsource

    @depthdrillingsource.setter
    def depthdrillingsource(self, depthdrillingsource):
        """Sets the depthdrillingsource of this FormationData.


        :param depthdrillingsource: The depthdrillingsource of this FormationData.  # noqa: E501
        :type: str
        """

        self._depthdrillingsource = depthdrillingsource

    @property
    def depthdrillingtop(self):
        """Gets the depthdrillingtop of this FormationData.  # noqa: E501


        :return: The depthdrillingtop of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthdrillingtop

    @depthdrillingtop.setter
    def depthdrillingtop(self, depthdrillingtop):
        """Sets the depthdrillingtop of this FormationData.


        :param depthdrillingtop: The depthdrillingtop of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthdrillingtop = depthdrillingtop

    @property
    def depthfinalbtm(self):
        """Gets the depthfinalbtm of this FormationData.  # noqa: E501


        :return: The depthfinalbtm of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthfinalbtm

    @depthfinalbtm.setter
    def depthfinalbtm(self, depthfinalbtm):
        """Sets the depthfinalbtm of this FormationData.


        :param depthfinalbtm: The depthfinalbtm of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthfinalbtm = depthfinalbtm

    @property
    def depthfinalsource(self):
        """Gets the depthfinalsource of this FormationData.  # noqa: E501


        :return: The depthfinalsource of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._depthfinalsource

    @depthfinalsource.setter
    def depthfinalsource(self, depthfinalsource):
        """Sets the depthfinalsource of this FormationData.


        :param depthfinalsource: The depthfinalsource of this FormationData.  # noqa: E501
        :type: str
        """

        self._depthfinalsource = depthfinalsource

    @property
    def depthfinaltop(self):
        """Gets the depthfinaltop of this FormationData.  # noqa: E501


        :return: The depthfinaltop of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthfinaltop

    @depthfinaltop.setter
    def depthfinaltop(self, depthfinaltop):
        """Sets the depthfinaltop of this FormationData.


        :param depthfinaltop: The depthfinaltop of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthfinaltop = depthfinaltop

    @property
    def depthgasoil(self):
        """Gets the depthgasoil of this FormationData.  # noqa: E501


        :return: The depthgasoil of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthgasoil

    @depthgasoil.setter
    def depthgasoil(self, depthgasoil):
        """Sets the depthgasoil of this FormationData.


        :param depthgasoil: The depthgasoil of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthgasoil = depthgasoil

    @property
    def depthgaswater(self):
        """Gets the depthgaswater of this FormationData.  # noqa: E501


        :return: The depthgaswater of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthgaswater

    @depthgaswater.setter
    def depthgaswater(self, depthgaswater):
        """Sets the depthgaswater of this FormationData.


        :param depthgaswater: The depthgaswater of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthgaswater = depthgaswater

    @property
    def depthmdprogbtm(self):
        """Gets the depthmdprogbtm of this FormationData.  # noqa: E501


        :return: The depthmdprogbtm of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthmdprogbtm

    @depthmdprogbtm.setter
    def depthmdprogbtm(self, depthmdprogbtm):
        """Sets the depthmdprogbtm of this FormationData.


        :param depthmdprogbtm: The depthmdprogbtm of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthmdprogbtm = depthmdprogbtm

    @property
    def depthmdprogtop(self):
        """Gets the depthmdprogtop of this FormationData.  # noqa: E501


        :return: The depthmdprogtop of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthmdprogtop

    @depthmdprogtop.setter
    def depthmdprogtop(self, depthmdprogtop):
        """Sets the depthmdprogtop of this FormationData.


        :param depthmdprogtop: The depthmdprogtop of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthmdprogtop = depthmdprogtop

    @property
    def depthoilwater(self):
        """Gets the depthoilwater of this FormationData.  # noqa: E501


        :return: The depthoilwater of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthoilwater

    @depthoilwater.setter
    def depthoilwater(self, depthoilwater):
        """Sets the depthoilwater of this FormationData.


        :param depthoilwater: The depthoilwater of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthoilwater = depthoilwater

    @property
    def depthssprogbtm(self):
        """Gets the depthssprogbtm of this FormationData.  # noqa: E501


        :return: The depthssprogbtm of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthssprogbtm

    @depthssprogbtm.setter
    def depthssprogbtm(self, depthssprogbtm):
        """Sets the depthssprogbtm of this FormationData.


        :param depthssprogbtm: The depthssprogbtm of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthssprogbtm = depthssprogbtm

    @property
    def depthssprogtop(self):
        """Gets the depthssprogtop of this FormationData.  # noqa: E501


        :return: The depthssprogtop of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._depthssprogtop

    @depthssprogtop.setter
    def depthssprogtop(self, depthssprogtop):
        """Sets the depthssprogtop of this FormationData.


        :param depthssprogtop: The depthssprogtop of this FormationData.  # noqa: E501
        :type: float
        """

        self._depthssprogtop = depthssprogtop

    @property
    def deschro(self):
        """Gets the deschro of this FormationData.  # noqa: E501


        :return: The deschro of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._deschro

    @deschro.setter
    def deschro(self, deschro):
        """Sets the deschro of this FormationData.


        :param deschro: The deschro of this FormationData.  # noqa: E501
        :type: str
        """

        self._deschro = deschro

    @property
    def desfluid(self):
        """Gets the desfluid of this FormationData.  # noqa: E501


        :return: The desfluid of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._desfluid

    @desfluid.setter
    def desfluid(self, desfluid):
        """Sets the desfluid of this FormationData.


        :param desfluid: The desfluid of this FormationData.  # noqa: E501
        :type: str
        """

        self._desfluid = desfluid

    @property
    def deslithology(self):
        """Gets the deslithology of this FormationData.  # noqa: E501


        :return: The deslithology of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._deslithology

    @deslithology.setter
    def deslithology(self, deslithology):
        """Sets the deslithology of this FormationData.


        :param deslithology: The deslithology of this FormationData.  # noqa: E501
        :type: str
        """

        self._deslithology = deslithology

    @property
    def dipangle(self):
        """Gets the dipangle of this FormationData.  # noqa: E501


        :return: The dipangle of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._dipangle

    @dipangle.setter
    def dipangle(self, dipangle):
        """Sets the dipangle of this FormationData.


        :param dipangle: The dipangle of this FormationData.  # noqa: E501
        :type: float
        """

        self._dipangle = dipangle

    @property
    def dipazimuth(self):
        """Gets the dipazimuth of this FormationData.  # noqa: E501


        :return: The dipazimuth of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._dipazimuth

    @dipazimuth.setter
    def dipazimuth(self, dipazimuth):
        """Sets the dipazimuth of this FormationData.


        :param dipazimuth: The dipazimuth of this FormationData.  # noqa: E501
        :type: float
        """

        self._dipazimuth = dipazimuth

    @property
    def drillingconsid(self):
        """Gets the drillingconsid of this FormationData.  # noqa: E501


        :return: The drillingconsid of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._drillingconsid

    @drillingconsid.setter
    def drillingconsid(self, drillingconsid):
        """Sets the drillingconsid of this FormationData.


        :param drillingconsid: The drillingconsid of this FormationData.  # noqa: E501
        :type: str
        """

        self._drillingconsid = drillingconsid

    @property
    def elementtyp(self):
        """Gets the elementtyp of this FormationData.  # noqa: E501


        :return: The elementtyp of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._elementtyp

    @elementtyp.setter
    def elementtyp(self, elementtyp):
        """Sets the elementtyp of this FormationData.


        :param elementtyp: The elementtyp of this FormationData.  # noqa: E501
        :type: str
        """

        self._elementtyp = elementtyp

    @property
    def formationida(self):
        """Gets the formationida of this FormationData.  # noqa: E501


        :return: The formationida of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._formationida

    @formationida.setter
    def formationida(self, formationida):
        """Sets the formationida of this FormationData.


        :param formationida: The formationida of this FormationData.  # noqa: E501
        :type: str
        """

        self._formationida = formationida

    @property
    def formationidb(self):
        """Gets the formationidb of this FormationData.  # noqa: E501


        :return: The formationidb of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._formationidb

    @formationidb.setter
    def formationidb(self, formationidb):
        """Sets the formationidb of this FormationData.


        :param formationidb: The formationidb of this FormationData.  # noqa: E501
        :type: str
        """

        self._formationidb = formationidb

    @property
    def formationidc(self):
        """Gets the formationidc of this FormationData.  # noqa: E501


        :return: The formationidc of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._formationidc

    @formationidc.setter
    def formationidc(self, formationidc):
        """Sets the formationidc of this FormationData.


        :param formationidc: The formationidc of this FormationData.  # noqa: E501
        :type: str
        """

        self._formationidc = formationidc

    @property
    def formcode(self):
        """Gets the formcode of this FormationData.  # noqa: E501


        :return: The formcode of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._formcode

    @formcode.setter
    def formcode(self, formcode):
        """Sets the formcode of this FormationData.


        :param formcode: The formcode of this FormationData.  # noqa: E501
        :type: str
        """

        self._formcode = formcode

    @property
    def formname(self):
        """Gets the formname of this FormationData.  # noqa: E501


        :return: The formname of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._formname

    @formname.setter
    def formname(self, formname):
        """Sets the formname of this FormationData.


        :param formname: The formname of this FormationData.  # noqa: E501
        :type: str
        """

        self._formname = formname

    @property
    def fracpres(self):
        """Gets the fracpres of this FormationData.  # noqa: E501


        :return: The fracpres of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._fracpres

    @fracpres.setter
    def fracpres(self, fracpres):
        """Sets the fracpres of this FormationData.


        :param fracpres: The fracpres of this FormationData.  # noqa: E501
        :type: float
        """

        self._fracpres = fracpres

    @property
    def geologicage(self):
        """Gets the geologicage of this FormationData.  # noqa: E501


        :return: The geologicage of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._geologicage

    @geologicage.setter
    def geologicage(self, geologicage):
        """Sets the geologicage of this FormationData.


        :param geologicage: The geologicage of this FormationData.  # noqa: E501
        :type: str
        """

        self._geologicage = geologicage

    @property
    def grosspay(self):
        """Gets the grosspay of this FormationData.  # noqa: E501


        :return: The grosspay of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._grosspay

    @grosspay.setter
    def grosspay(self, grosspay):
        """Sets the grosspay of this FormationData.


        :param grosspay: The grosspay of this FormationData.  # noqa: E501
        :type: float
        """

        self._grosspay = grosspay

    @property
    def h2sconc(self):
        """Gets the h2sconc of this FormationData.  # noqa: E501


        :return: The h2sconc of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._h2sconc

    @h2sconc.setter
    def h2sconc(self, h2sconc):
        """Sets the h2sconc of this FormationData.


        :param h2sconc: The h2sconc of this FormationData.  # noqa: E501
        :type: float
        """

        self._h2sconc = h2sconc

    @property
    def iconname(self):
        """Gets the iconname of this FormationData.  # noqa: E501


        :return: The iconname of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this FormationData.


        :param iconname: The iconname of this FormationData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this FormationData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FormationData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this FormationData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this FormationData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this FormationData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this FormationData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this FormationData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FormationData.

        id of well  # noqa: E501

        :param idwell: The idwell of this FormationData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def integrityconsid(self):
        """Gets the integrityconsid of this FormationData.  # noqa: E501


        :return: The integrityconsid of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._integrityconsid

    @integrityconsid.setter
    def integrityconsid(self, integrityconsid):
        """Sets the integrityconsid of this FormationData.


        :param integrityconsid: The integrityconsid of this FormationData.  # noqa: E501
        :type: str
        """

        self._integrityconsid = integrityconsid

    @property
    def kh90(self):
        """Gets the kh90 of this FormationData.  # noqa: E501


        :return: The kh90 of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._kh90

    @kh90.setter
    def kh90(self, kh90):
        """Sets the kh90 of this FormationData.


        :param kh90: The kh90 of this FormationData.  # noqa: E501
        :type: float
        """

        self._kh90 = kh90

    @property
    def kmax(self):
        """Gets the kmax of this FormationData.  # noqa: E501


        :return: The kmax of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._kmax

    @kmax.setter
    def kmax(self, kmax):
        """Sets the kmax of this FormationData.


        :param kmax: The kmax of this FormationData.  # noqa: E501
        :type: float
        """

        self._kmax = kmax

    @property
    def kv(self):
        """Gets the kv of this FormationData.  # noqa: E501


        :return: The kv of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._kv

    @kv.setter
    def kv(self, kv):
        """Sets the kv of this FormationData.


        :param kv: The kv of this FormationData.  # noqa: E501
        :type: float
        """

        self._kv = kv

    @property
    def layername(self):
        """Gets the layername of this FormationData.  # noqa: E501


        :return: The layername of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._layername

    @layername.setter
    def layername(self, layername):
        """Sets the layername of this FormationData.


        :param layername: The layername of this FormationData.  # noqa: E501
        :type: str
        """

        self._layername = layername

    @property
    def mudconsid(self):
        """Gets the mudconsid of this FormationData.  # noqa: E501


        :return: The mudconsid of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._mudconsid

    @mudconsid.setter
    def mudconsid(self, mudconsid):
        """Sets the mudconsid of this FormationData.


        :param mudconsid: The mudconsid of this FormationData.  # noqa: E501
        :type: str
        """

        self._mudconsid = mudconsid

    @property
    def netpay(self):
        """Gets the netpay of this FormationData.  # noqa: E501


        :return: The netpay of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._netpay

    @netpay.setter
    def netpay(self, netpay):
        """Sets the netpay of this FormationData.


        :param netpay: The netpay of this FormationData.  # noqa: E501
        :type: float
        """

        self._netpay = netpay

    @property
    def noteothergas(self):
        """Gets the noteothergas of this FormationData.  # noqa: E501


        :return: The noteothergas of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._noteothergas

    @noteothergas.setter
    def noteothergas(self, noteothergas):
        """Sets the noteothergas of this FormationData.


        :param noteothergas: The noteothergas of this FormationData.  # noqa: E501
        :type: str
        """

        self._noteothergas = noteothergas

    @property
    def porepres(self):
        """Gets the porepres of this FormationData.  # noqa: E501


        :return: The porepres of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._porepres

    @porepres.setter
    def porepres(self, porepres):
        """Sets the porepres of this FormationData.


        :param porepres: The porepres of this FormationData.  # noqa: E501
        :type: float
        """

        self._porepres = porepres

    @property
    def porosity(self):
        """Gets the porosity of this FormationData.  # noqa: E501


        :return: The porosity of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._porosity

    @porosity.setter
    def porosity(self, porosity):
        """Sets the porosity of this FormationData.


        :param porosity: The porosity of this FormationData.  # noqa: E501
        :type: float
        """

        self._porosity = porosity

    @property
    def ropinterpreted(self):
        """Gets the ropinterpreted of this FormationData.  # noqa: E501


        :return: The ropinterpreted of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._ropinterpreted

    @ropinterpreted.setter
    def ropinterpreted(self, ropinterpreted):
        """Sets the ropinterpreted of this FormationData.


        :param ropinterpreted: The ropinterpreted of this FormationData.  # noqa: E501
        :type: float
        """

        self._ropinterpreted = ropinterpreted

    @property
    def stress(self):
        """Gets the stress of this FormationData.  # noqa: E501


        :return: The stress of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._stress

    @stress.setter
    def stress(self, stress):
        """Sets the stress of this FormationData.


        :param stress: The stress of this FormationData.  # noqa: E501
        :type: float
        """

        self._stress = stress

    @property
    def temp(self):
        """Gets the temp of this FormationData.  # noqa: E501


        :return: The temp of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this FormationData.


        :param temp: The temp of this FormationData.  # noqa: E501
        :type: float
        """

        self._temp = temp

    @property
    def usernum1(self):
        """Gets the usernum1 of this FormationData.  # noqa: E501


        :return: The usernum1 of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum1

    @usernum1.setter
    def usernum1(self, usernum1):
        """Sets the usernum1 of this FormationData.


        :param usernum1: The usernum1 of this FormationData.  # noqa: E501
        :type: float
        """

        self._usernum1 = usernum1

    @property
    def usernum2(self):
        """Gets the usernum2 of this FormationData.  # noqa: E501


        :return: The usernum2 of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum2

    @usernum2.setter
    def usernum2(self, usernum2):
        """Sets the usernum2 of this FormationData.


        :param usernum2: The usernum2 of this FormationData.  # noqa: E501
        :type: float
        """

        self._usernum2 = usernum2

    @property
    def usernum3(self):
        """Gets the usernum3 of this FormationData.  # noqa: E501


        :return: The usernum3 of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._usernum3

    @usernum3.setter
    def usernum3(self, usernum3):
        """Sets the usernum3 of this FormationData.


        :param usernum3: The usernum3 of this FormationData.  # noqa: E501
        :type: float
        """

        self._usernum3 = usernum3

    @property
    def watersat(self):
        """Gets the watersat of this FormationData.  # noqa: E501


        :return: The watersat of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._watersat

    @watersat.setter
    def watersat(self, watersat):
        """Sets the watersat of this FormationData.


        :param watersat: The watersat of this FormationData.  # noqa: E501
        :type: float
        """

        self._watersat = watersat

    @property
    def weightbitumen(self):
        """Gets the weightbitumen of this FormationData.  # noqa: E501


        :return: The weightbitumen of this FormationData.  # noqa: E501
        :rtype: float
        """
        return self._weightbitumen

    @weightbitumen.setter
    def weightbitumen(self, weightbitumen):
        """Sets the weightbitumen of this FormationData.


        :param weightbitumen: The weightbitumen of this FormationData.  # noqa: E501
        :type: float
        """

        self._weightbitumen = weightbitumen

    @property
    def systag(self):
        """Gets the systag of this FormationData.  # noqa: E501


        :return: The systag of this FormationData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FormationData.


        :param systag: The systag of this FormationData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
