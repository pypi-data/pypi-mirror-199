# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviationSurveyData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'azimuthcorrection': 'str',
        'azimuthnorthtyp': 'str',
        'azimuthtiein': 'float',
        'com': 'str',
        'convergence': 'float',
        'declination': 'float',
        'definitive': 'bool',
        'depthcorrection': 'str',
        'des': 'str',
        'dttm': 'datetime',
        'ewtiein': 'float',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'inclinationtiein': 'float',
        'mdtiein': 'float',
        'notecorrection': 'str',
        'nstiein': 'float',
        'proposed': 'bool',
        'tvdtiein': 'float',
        'validatedbycompany': 'str',
        'validatedbyname': 'str',
        'validateddttm': 'datetime',
        'systag': 'str'
    }

    attribute_map = {
        'azimuthcorrection': 'azimuthcorrection',
        'azimuthnorthtyp': 'azimuthnorthtyp',
        'azimuthtiein': 'azimuthtiein',
        'com': 'com',
        'convergence': 'convergence',
        'declination': 'declination',
        'definitive': 'definitive',
        'depthcorrection': 'depthcorrection',
        'des': 'des',
        'dttm': 'dttm',
        'ewtiein': 'ewtiein',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'inclinationtiein': 'inclinationtiein',
        'mdtiein': 'mdtiein',
        'notecorrection': 'notecorrection',
        'nstiein': 'nstiein',
        'proposed': 'proposed',
        'tvdtiein': 'tvdtiein',
        'validatedbycompany': 'validatedbycompany',
        'validatedbyname': 'validatedbyname',
        'validateddttm': 'validateddttm',
        'systag': 'systag'
    }

    def __init__(self, azimuthcorrection=None, azimuthnorthtyp=None, azimuthtiein=None, com=None, convergence=None, declination=None, definitive=None, depthcorrection=None, des=None, dttm=None, ewtiein=None, idrec=None, idrecjob=None, idrecparent=None, idwell=None, inclinationtiein=None, mdtiein=None, notecorrection=None, nstiein=None, proposed=None, tvdtiein=None, validatedbycompany=None, validatedbyname=None, validateddttm=None, systag=None):  # noqa: E501
        """DeviationSurveyData - a model defined in Swagger"""  # noqa: E501
        self._azimuthcorrection = None
        self._azimuthnorthtyp = None
        self._azimuthtiein = None
        self._com = None
        self._convergence = None
        self._declination = None
        self._definitive = None
        self._depthcorrection = None
        self._des = None
        self._dttm = None
        self._ewtiein = None
        self._idrec = None
        self._idrecjob = None
        self._idrecparent = None
        self._idwell = None
        self._inclinationtiein = None
        self._mdtiein = None
        self._notecorrection = None
        self._nstiein = None
        self._proposed = None
        self._tvdtiein = None
        self._validatedbycompany = None
        self._validatedbyname = None
        self._validateddttm = None
        self._systag = None
        self.discriminator = None
        if azimuthcorrection is not None:
            self.azimuthcorrection = azimuthcorrection
        if azimuthnorthtyp is not None:
            self.azimuthnorthtyp = azimuthnorthtyp
        if azimuthtiein is not None:
            self.azimuthtiein = azimuthtiein
        if com is not None:
            self.com = com
        if convergence is not None:
            self.convergence = convergence
        if declination is not None:
            self.declination = declination
        if definitive is not None:
            self.definitive = definitive
        if depthcorrection is not None:
            self.depthcorrection = depthcorrection
        if des is not None:
            self.des = des
        if dttm is not None:
            self.dttm = dttm
        if ewtiein is not None:
            self.ewtiein = ewtiein
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        self.idrecparent = idrecparent
        self.idwell = idwell
        if inclinationtiein is not None:
            self.inclinationtiein = inclinationtiein
        if mdtiein is not None:
            self.mdtiein = mdtiein
        if notecorrection is not None:
            self.notecorrection = notecorrection
        if nstiein is not None:
            self.nstiein = nstiein
        if proposed is not None:
            self.proposed = proposed
        if tvdtiein is not None:
            self.tvdtiein = tvdtiein
        if validatedbycompany is not None:
            self.validatedbycompany = validatedbycompany
        if validatedbyname is not None:
            self.validatedbyname = validatedbyname
        if validateddttm is not None:
            self.validateddttm = validateddttm
        if systag is not None:
            self.systag = systag

    @property
    def azimuthcorrection(self):
        """Gets the azimuthcorrection of this DeviationSurveyData.  # noqa: E501


        :return: The azimuthcorrection of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._azimuthcorrection

    @azimuthcorrection.setter
    def azimuthcorrection(self, azimuthcorrection):
        """Sets the azimuthcorrection of this DeviationSurveyData.


        :param azimuthcorrection: The azimuthcorrection of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._azimuthcorrection = azimuthcorrection

    @property
    def azimuthnorthtyp(self):
        """Gets the azimuthnorthtyp of this DeviationSurveyData.  # noqa: E501


        :return: The azimuthnorthtyp of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._azimuthnorthtyp

    @azimuthnorthtyp.setter
    def azimuthnorthtyp(self, azimuthnorthtyp):
        """Sets the azimuthnorthtyp of this DeviationSurveyData.


        :param azimuthnorthtyp: The azimuthnorthtyp of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._azimuthnorthtyp = azimuthnorthtyp

    @property
    def azimuthtiein(self):
        """Gets the azimuthtiein of this DeviationSurveyData.  # noqa: E501


        :return: The azimuthtiein of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._azimuthtiein

    @azimuthtiein.setter
    def azimuthtiein(self, azimuthtiein):
        """Sets the azimuthtiein of this DeviationSurveyData.


        :param azimuthtiein: The azimuthtiein of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._azimuthtiein = azimuthtiein

    @property
    def com(self):
        """Gets the com of this DeviationSurveyData.  # noqa: E501


        :return: The com of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this DeviationSurveyData.


        :param com: The com of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def convergence(self):
        """Gets the convergence of this DeviationSurveyData.  # noqa: E501


        :return: The convergence of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._convergence

    @convergence.setter
    def convergence(self, convergence):
        """Sets the convergence of this DeviationSurveyData.


        :param convergence: The convergence of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._convergence = convergence

    @property
    def declination(self):
        """Gets the declination of this DeviationSurveyData.  # noqa: E501


        :return: The declination of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._declination

    @declination.setter
    def declination(self, declination):
        """Sets the declination of this DeviationSurveyData.


        :param declination: The declination of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._declination = declination

    @property
    def definitive(self):
        """Gets the definitive of this DeviationSurveyData.  # noqa: E501


        :return: The definitive of this DeviationSurveyData.  # noqa: E501
        :rtype: bool
        """
        return self._definitive

    @definitive.setter
    def definitive(self, definitive):
        """Sets the definitive of this DeviationSurveyData.


        :param definitive: The definitive of this DeviationSurveyData.  # noqa: E501
        :type: bool
        """

        self._definitive = definitive

    @property
    def depthcorrection(self):
        """Gets the depthcorrection of this DeviationSurveyData.  # noqa: E501


        :return: The depthcorrection of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._depthcorrection

    @depthcorrection.setter
    def depthcorrection(self, depthcorrection):
        """Sets the depthcorrection of this DeviationSurveyData.


        :param depthcorrection: The depthcorrection of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._depthcorrection = depthcorrection

    @property
    def des(self):
        """Gets the des of this DeviationSurveyData.  # noqa: E501


        :return: The des of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this DeviationSurveyData.


        :param des: The des of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttm(self):
        """Gets the dttm of this DeviationSurveyData.  # noqa: E501


        :return: The dttm of this DeviationSurveyData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this DeviationSurveyData.


        :param dttm: The dttm of this DeviationSurveyData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def ewtiein(self):
        """Gets the ewtiein of this DeviationSurveyData.  # noqa: E501


        :return: The ewtiein of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._ewtiein

    @ewtiein.setter
    def ewtiein(self, ewtiein):
        """Sets the ewtiein of this DeviationSurveyData.


        :param ewtiein: The ewtiein of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._ewtiein = ewtiein

    @property
    def idrec(self):
        """Gets the idrec of this DeviationSurveyData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DeviationSurveyData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this DeviationSurveyData.  # noqa: E501


        :return: The idrecjob of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this DeviationSurveyData.


        :param idrecjob: The idrecjob of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecparent(self):
        """Gets the idrecparent of this DeviationSurveyData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this DeviationSurveyData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this DeviationSurveyData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this DeviationSurveyData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DeviationSurveyData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DeviationSurveyData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def inclinationtiein(self):
        """Gets the inclinationtiein of this DeviationSurveyData.  # noqa: E501


        :return: The inclinationtiein of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._inclinationtiein

    @inclinationtiein.setter
    def inclinationtiein(self, inclinationtiein):
        """Sets the inclinationtiein of this DeviationSurveyData.


        :param inclinationtiein: The inclinationtiein of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._inclinationtiein = inclinationtiein

    @property
    def mdtiein(self):
        """Gets the mdtiein of this DeviationSurveyData.  # noqa: E501


        :return: The mdtiein of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._mdtiein

    @mdtiein.setter
    def mdtiein(self, mdtiein):
        """Sets the mdtiein of this DeviationSurveyData.


        :param mdtiein: The mdtiein of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._mdtiein = mdtiein

    @property
    def notecorrection(self):
        """Gets the notecorrection of this DeviationSurveyData.  # noqa: E501


        :return: The notecorrection of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._notecorrection

    @notecorrection.setter
    def notecorrection(self, notecorrection):
        """Sets the notecorrection of this DeviationSurveyData.


        :param notecorrection: The notecorrection of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._notecorrection = notecorrection

    @property
    def nstiein(self):
        """Gets the nstiein of this DeviationSurveyData.  # noqa: E501


        :return: The nstiein of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._nstiein

    @nstiein.setter
    def nstiein(self, nstiein):
        """Sets the nstiein of this DeviationSurveyData.


        :param nstiein: The nstiein of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._nstiein = nstiein

    @property
    def proposed(self):
        """Gets the proposed of this DeviationSurveyData.  # noqa: E501


        :return: The proposed of this DeviationSurveyData.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this DeviationSurveyData.


        :param proposed: The proposed of this DeviationSurveyData.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def tvdtiein(self):
        """Gets the tvdtiein of this DeviationSurveyData.  # noqa: E501


        :return: The tvdtiein of this DeviationSurveyData.  # noqa: E501
        :rtype: float
        """
        return self._tvdtiein

    @tvdtiein.setter
    def tvdtiein(self, tvdtiein):
        """Sets the tvdtiein of this DeviationSurveyData.


        :param tvdtiein: The tvdtiein of this DeviationSurveyData.  # noqa: E501
        :type: float
        """

        self._tvdtiein = tvdtiein

    @property
    def validatedbycompany(self):
        """Gets the validatedbycompany of this DeviationSurveyData.  # noqa: E501


        :return: The validatedbycompany of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._validatedbycompany

    @validatedbycompany.setter
    def validatedbycompany(self, validatedbycompany):
        """Sets the validatedbycompany of this DeviationSurveyData.


        :param validatedbycompany: The validatedbycompany of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._validatedbycompany = validatedbycompany

    @property
    def validatedbyname(self):
        """Gets the validatedbyname of this DeviationSurveyData.  # noqa: E501


        :return: The validatedbyname of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._validatedbyname

    @validatedbyname.setter
    def validatedbyname(self, validatedbyname):
        """Sets the validatedbyname of this DeviationSurveyData.


        :param validatedbyname: The validatedbyname of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._validatedbyname = validatedbyname

    @property
    def validateddttm(self):
        """Gets the validateddttm of this DeviationSurveyData.  # noqa: E501


        :return: The validateddttm of this DeviationSurveyData.  # noqa: E501
        :rtype: datetime
        """
        return self._validateddttm

    @validateddttm.setter
    def validateddttm(self, validateddttm):
        """Sets the validateddttm of this DeviationSurveyData.


        :param validateddttm: The validateddttm of this DeviationSurveyData.  # noqa: E501
        :type: datetime
        """

        self._validateddttm = validateddttm

    @property
    def systag(self):
        """Gets the systag of this DeviationSurveyData.  # noqa: E501


        :return: The systag of this DeviationSurveyData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DeviationSurveyData.


        :param systag: The systag of this DeviationSurveyData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviationSurveyData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviationSurveyData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
