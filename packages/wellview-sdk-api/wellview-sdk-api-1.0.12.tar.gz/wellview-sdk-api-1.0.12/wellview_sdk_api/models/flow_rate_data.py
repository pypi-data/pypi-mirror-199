# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlowRateData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bsw': 'float',
        'com': 'str',
        'densitygas': 'float',
        'densityoil': 'float',
        'dttm': 'datetime',
        'h2s': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'phwater': 'float',
        'ratecond': 'float',
        'rategas': 'float',
        'rateoil': 'float',
        'ratewater': 'float',
        'salinitywater': 'float',
        'sandcut': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'bsw': 'bsw',
        'com': 'com',
        'densitygas': 'densitygas',
        'densityoil': 'densityoil',
        'dttm': 'dttm',
        'h2s': 'h2s',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'phwater': 'phwater',
        'ratecond': 'ratecond',
        'rategas': 'rategas',
        'rateoil': 'rateoil',
        'ratewater': 'ratewater',
        'salinitywater': 'salinitywater',
        'sandcut': 'sandcut',
        'systag': 'systag'
    }

    def __init__(self, bsw=None, com=None, densitygas=None, densityoil=None, dttm=None, h2s=None, idrec=None, idrecparent=None, idwell=None, phwater=None, ratecond=None, rategas=None, rateoil=None, ratewater=None, salinitywater=None, sandcut=None, systag=None):  # noqa: E501
        """FlowRateData - a model defined in Swagger"""  # noqa: E501
        self._bsw = None
        self._com = None
        self._densitygas = None
        self._densityoil = None
        self._dttm = None
        self._h2s = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._phwater = None
        self._ratecond = None
        self._rategas = None
        self._rateoil = None
        self._ratewater = None
        self._salinitywater = None
        self._sandcut = None
        self._systag = None
        self.discriminator = None
        if bsw is not None:
            self.bsw = bsw
        if com is not None:
            self.com = com
        if densitygas is not None:
            self.densitygas = densitygas
        if densityoil is not None:
            self.densityoil = densityoil
        if dttm is not None:
            self.dttm = dttm
        if h2s is not None:
            self.h2s = h2s
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if phwater is not None:
            self.phwater = phwater
        if ratecond is not None:
            self.ratecond = ratecond
        if rategas is not None:
            self.rategas = rategas
        if rateoil is not None:
            self.rateoil = rateoil
        if ratewater is not None:
            self.ratewater = ratewater
        if salinitywater is not None:
            self.salinitywater = salinitywater
        if sandcut is not None:
            self.sandcut = sandcut
        if systag is not None:
            self.systag = systag

    @property
    def bsw(self):
        """Gets the bsw of this FlowRateData.  # noqa: E501


        :return: The bsw of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._bsw

    @bsw.setter
    def bsw(self, bsw):
        """Sets the bsw of this FlowRateData.


        :param bsw: The bsw of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._bsw = bsw

    @property
    def com(self):
        """Gets the com of this FlowRateData.  # noqa: E501


        :return: The com of this FlowRateData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FlowRateData.


        :param com: The com of this FlowRateData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densitygas(self):
        """Gets the densitygas of this FlowRateData.  # noqa: E501


        :return: The densitygas of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._densitygas

    @densitygas.setter
    def densitygas(self, densitygas):
        """Sets the densitygas of this FlowRateData.


        :param densitygas: The densitygas of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._densitygas = densitygas

    @property
    def densityoil(self):
        """Gets the densityoil of this FlowRateData.  # noqa: E501


        :return: The densityoil of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._densityoil

    @densityoil.setter
    def densityoil(self, densityoil):
        """Sets the densityoil of this FlowRateData.


        :param densityoil: The densityoil of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._densityoil = densityoil

    @property
    def dttm(self):
        """Gets the dttm of this FlowRateData.  # noqa: E501


        :return: The dttm of this FlowRateData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this FlowRateData.


        :param dttm: The dttm of this FlowRateData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def h2s(self):
        """Gets the h2s of this FlowRateData.  # noqa: E501


        :return: The h2s of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._h2s

    @h2s.setter
    def h2s(self, h2s):
        """Sets the h2s of this FlowRateData.


        :param h2s: The h2s of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._h2s = h2s

    @property
    def idrec(self):
        """Gets the idrec of this FlowRateData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this FlowRateData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FlowRateData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this FlowRateData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this FlowRateData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this FlowRateData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this FlowRateData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this FlowRateData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this FlowRateData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this FlowRateData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FlowRateData.

        id of well  # noqa: E501

        :param idwell: The idwell of this FlowRateData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def phwater(self):
        """Gets the phwater of this FlowRateData.  # noqa: E501


        :return: The phwater of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._phwater

    @phwater.setter
    def phwater(self, phwater):
        """Sets the phwater of this FlowRateData.


        :param phwater: The phwater of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._phwater = phwater

    @property
    def ratecond(self):
        """Gets the ratecond of this FlowRateData.  # noqa: E501


        :return: The ratecond of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._ratecond

    @ratecond.setter
    def ratecond(self, ratecond):
        """Sets the ratecond of this FlowRateData.


        :param ratecond: The ratecond of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._ratecond = ratecond

    @property
    def rategas(self):
        """Gets the rategas of this FlowRateData.  # noqa: E501


        :return: The rategas of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._rategas

    @rategas.setter
    def rategas(self, rategas):
        """Sets the rategas of this FlowRateData.


        :param rategas: The rategas of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._rategas = rategas

    @property
    def rateoil(self):
        """Gets the rateoil of this FlowRateData.  # noqa: E501


        :return: The rateoil of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._rateoil

    @rateoil.setter
    def rateoil(self, rateoil):
        """Sets the rateoil of this FlowRateData.


        :param rateoil: The rateoil of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._rateoil = rateoil

    @property
    def ratewater(self):
        """Gets the ratewater of this FlowRateData.  # noqa: E501


        :return: The ratewater of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._ratewater

    @ratewater.setter
    def ratewater(self, ratewater):
        """Sets the ratewater of this FlowRateData.


        :param ratewater: The ratewater of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._ratewater = ratewater

    @property
    def salinitywater(self):
        """Gets the salinitywater of this FlowRateData.  # noqa: E501


        :return: The salinitywater of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._salinitywater

    @salinitywater.setter
    def salinitywater(self, salinitywater):
        """Sets the salinitywater of this FlowRateData.


        :param salinitywater: The salinitywater of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._salinitywater = salinitywater

    @property
    def sandcut(self):
        """Gets the sandcut of this FlowRateData.  # noqa: E501


        :return: The sandcut of this FlowRateData.  # noqa: E501
        :rtype: float
        """
        return self._sandcut

    @sandcut.setter
    def sandcut(self, sandcut):
        """Sets the sandcut of this FlowRateData.


        :param sandcut: The sandcut of this FlowRateData.  # noqa: E501
        :type: float
        """

        self._sandcut = sandcut

    @property
    def systag(self):
        """Gets the systag of this FlowRateData.  # noqa: E501


        :return: The systag of this FlowRateData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FlowRateData.


        :param systag: The systag of this FlowRateData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlowRateData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlowRateData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
