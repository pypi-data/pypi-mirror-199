# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ElevationHistoryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elvdttmend': 'datetime',
        'elvdttmstart': 'datetime',
        'elvother': 'float',
        'elvotherlabel': 'str',
        'elvothernote': 'str',
        'idrec': 'str',
        'idwell': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'elvdttmend': 'elvdttmend',
        'elvdttmstart': 'elvdttmstart',
        'elvother': 'elvother',
        'elvotherlabel': 'elvotherlabel',
        'elvothernote': 'elvothernote',
        'idrec': 'idrec',
        'idwell': 'idwell',
        'systag': 'systag'
    }

    def __init__(self, elvdttmend=None, elvdttmstart=None, elvother=None, elvotherlabel=None, elvothernote=None, idrec=None, idwell=None, systag=None):  # noqa: E501
        """ElevationHistoryData - a model defined in Swagger"""  # noqa: E501
        self._elvdttmend = None
        self._elvdttmstart = None
        self._elvother = None
        self._elvotherlabel = None
        self._elvothernote = None
        self._idrec = None
        self._idwell = None
        self._systag = None
        self.discriminator = None
        if elvdttmend is not None:
            self.elvdttmend = elvdttmend
        if elvdttmstart is not None:
            self.elvdttmstart = elvdttmstart
        if elvother is not None:
            self.elvother = elvother
        if elvotherlabel is not None:
            self.elvotherlabel = elvotherlabel
        if elvothernote is not None:
            self.elvothernote = elvothernote
        if idrec is not None:
            self.idrec = idrec
        self.idwell = idwell
        if systag is not None:
            self.systag = systag

    @property
    def elvdttmend(self):
        """Gets the elvdttmend of this ElevationHistoryData.  # noqa: E501


        :return: The elvdttmend of this ElevationHistoryData.  # noqa: E501
        :rtype: datetime
        """
        return self._elvdttmend

    @elvdttmend.setter
    def elvdttmend(self, elvdttmend):
        """Sets the elvdttmend of this ElevationHistoryData.


        :param elvdttmend: The elvdttmend of this ElevationHistoryData.  # noqa: E501
        :type: datetime
        """

        self._elvdttmend = elvdttmend

    @property
    def elvdttmstart(self):
        """Gets the elvdttmstart of this ElevationHistoryData.  # noqa: E501


        :return: The elvdttmstart of this ElevationHistoryData.  # noqa: E501
        :rtype: datetime
        """
        return self._elvdttmstart

    @elvdttmstart.setter
    def elvdttmstart(self, elvdttmstart):
        """Sets the elvdttmstart of this ElevationHistoryData.


        :param elvdttmstart: The elvdttmstart of this ElevationHistoryData.  # noqa: E501
        :type: datetime
        """

        self._elvdttmstart = elvdttmstart

    @property
    def elvother(self):
        """Gets the elvother of this ElevationHistoryData.  # noqa: E501


        :return: The elvother of this ElevationHistoryData.  # noqa: E501
        :rtype: float
        """
        return self._elvother

    @elvother.setter
    def elvother(self, elvother):
        """Sets the elvother of this ElevationHistoryData.


        :param elvother: The elvother of this ElevationHistoryData.  # noqa: E501
        :type: float
        """

        self._elvother = elvother

    @property
    def elvotherlabel(self):
        """Gets the elvotherlabel of this ElevationHistoryData.  # noqa: E501


        :return: The elvotherlabel of this ElevationHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._elvotherlabel

    @elvotherlabel.setter
    def elvotherlabel(self, elvotherlabel):
        """Sets the elvotherlabel of this ElevationHistoryData.


        :param elvotherlabel: The elvotherlabel of this ElevationHistoryData.  # noqa: E501
        :type: str
        """

        self._elvotherlabel = elvotherlabel

    @property
    def elvothernote(self):
        """Gets the elvothernote of this ElevationHistoryData.  # noqa: E501


        :return: The elvothernote of this ElevationHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._elvothernote

    @elvothernote.setter
    def elvothernote(self, elvothernote):
        """Sets the elvothernote of this ElevationHistoryData.


        :param elvothernote: The elvothernote of this ElevationHistoryData.  # noqa: E501
        :type: str
        """

        self._elvothernote = elvothernote

    @property
    def idrec(self):
        """Gets the idrec of this ElevationHistoryData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this ElevationHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this ElevationHistoryData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this ElevationHistoryData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idwell(self):
        """Gets the idwell of this ElevationHistoryData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this ElevationHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this ElevationHistoryData.

        id of well  # noqa: E501

        :param idwell: The idwell of this ElevationHistoryData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def systag(self):
        """Gets the systag of this ElevationHistoryData.  # noqa: E501


        :return: The systag of this ElevationHistoryData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this ElevationHistoryData.


        :param systag: The systag of this ElevationHistoryData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ElevationHistoryData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElevationHistoryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
