# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FailedComponentLinkDetailData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'areafailed': 'str',
        'category': 'str',
        'com': 'str',
        'depth': 'float',
        'des': 'str',
        'durequipinservice': 'float',
        'durrun': 'float',
        'idrec': 'str',
        'idrecfaileditem': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'subitem': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'areafailed': 'areafailed',
        'category': 'category',
        'com': 'com',
        'depth': 'depth',
        'des': 'des',
        'durequipinservice': 'durequipinservice',
        'durrun': 'durrun',
        'idrec': 'idrec',
        'idrecfaileditem': 'idrecfaileditem',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'subitem': 'subitem',
        'systag': 'systag'
    }

    def __init__(self, areafailed=None, category=None, com=None, depth=None, des=None, durequipinservice=None, durrun=None, idrec=None, idrecfaileditem=None, idrecparent=None, idwell=None, subitem=None, systag=None):  # noqa: E501
        """FailedComponentLinkDetailData - a model defined in Swagger"""  # noqa: E501
        self._areafailed = None
        self._category = None
        self._com = None
        self._depth = None
        self._des = None
        self._durequipinservice = None
        self._durrun = None
        self._idrec = None
        self._idrecfaileditem = None
        self._idrecparent = None
        self._idwell = None
        self._subitem = None
        self._systag = None
        self.discriminator = None
        if areafailed is not None:
            self.areafailed = areafailed
        if category is not None:
            self.category = category
        if com is not None:
            self.com = com
        if depth is not None:
            self.depth = depth
        if des is not None:
            self.des = des
        if durequipinservice is not None:
            self.durequipinservice = durequipinservice
        if durrun is not None:
            self.durrun = durrun
        if idrec is not None:
            self.idrec = idrec
        if idrecfaileditem is not None:
            self.idrecfaileditem = idrecfaileditem
        self.idrecparent = idrecparent
        self.idwell = idwell
        if subitem is not None:
            self.subitem = subitem
        if systag is not None:
            self.systag = systag

    @property
    def areafailed(self):
        """Gets the areafailed of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The areafailed of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._areafailed

    @areafailed.setter
    def areafailed(self, areafailed):
        """Sets the areafailed of this FailedComponentLinkDetailData.


        :param areafailed: The areafailed of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._areafailed = areafailed

    @property
    def category(self):
        """Gets the category of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The category of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this FailedComponentLinkDetailData.


        :param category: The category of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def com(self):
        """Gets the com of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The com of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this FailedComponentLinkDetailData.


        :param com: The com of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depth(self):
        """Gets the depth of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The depth of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this FailedComponentLinkDetailData.


        :param depth: The depth of this FailedComponentLinkDetailData.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def des(self):
        """Gets the des of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The des of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this FailedComponentLinkDetailData.


        :param des: The des of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def durequipinservice(self):
        """Gets the durequipinservice of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The durequipinservice of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: float
        """
        return self._durequipinservice

    @durequipinservice.setter
    def durequipinservice(self, durequipinservice):
        """Sets the durequipinservice of this FailedComponentLinkDetailData.


        :param durequipinservice: The durequipinservice of this FailedComponentLinkDetailData.  # noqa: E501
        :type: float
        """

        self._durequipinservice = durequipinservice

    @property
    def durrun(self):
        """Gets the durrun of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The durrun of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: float
        """
        return self._durrun

    @durrun.setter
    def durrun(self, durrun):
        """Sets the durrun of this FailedComponentLinkDetailData.


        :param durrun: The durrun of this FailedComponentLinkDetailData.  # noqa: E501
        :type: float
        """

        self._durrun = durrun

    @property
    def idrec(self):
        """Gets the idrec of this FailedComponentLinkDetailData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this FailedComponentLinkDetailData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecfaileditem(self):
        """Gets the idrecfaileditem of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The idrecfaileditem of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecfaileditem

    @idrecfaileditem.setter
    def idrecfaileditem(self, idrecfaileditem):
        """Sets the idrecfaileditem of this FailedComponentLinkDetailData.


        :param idrecfaileditem: The idrecfaileditem of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._idrecfaileditem = idrecfaileditem

    @property
    def idrecparent(self):
        """Gets the idrecparent of this FailedComponentLinkDetailData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this FailedComponentLinkDetailData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this FailedComponentLinkDetailData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this FailedComponentLinkDetailData.

        id of well  # noqa: E501

        :param idwell: The idwell of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def subitem(self):
        """Gets the subitem of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The subitem of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._subitem

    @subitem.setter
    def subitem(self, subitem):
        """Sets the subitem of this FailedComponentLinkDetailData.


        :param subitem: The subitem of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._subitem = subitem

    @property
    def systag(self):
        """Gets the systag of this FailedComponentLinkDetailData.  # noqa: E501


        :return: The systag of this FailedComponentLinkDetailData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this FailedComponentLinkDetailData.


        :param systag: The systag of this FailedComponentLinkDetailData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FailedComponentLinkDetailData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FailedComponentLinkDetailData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
