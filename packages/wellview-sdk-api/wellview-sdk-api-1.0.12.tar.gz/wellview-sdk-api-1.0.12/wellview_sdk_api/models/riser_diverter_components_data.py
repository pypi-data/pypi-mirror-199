# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RiserDiverterComponentsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coatinginner': 'str',
        'coatingouter': 'str',
        'com': 'str',
        'conntyp': 'str',
        'cost': 'float',
        'costunitlabel': 'str',
        'des': 'str',
        'grade': 'str',
        'iconname': 'str',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'joints': 'int',
        'length': 'float',
        'make': 'str',
        'refid': 'str',
        'szdrift': 'float',
        'szidnom': 'float',
        'szodnom': 'float',
        'wtperlength': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'coatinginner': 'coatinginner',
        'coatingouter': 'coatingouter',
        'com': 'com',
        'conntyp': 'conntyp',
        'cost': 'cost',
        'costunitlabel': 'costunitlabel',
        'des': 'des',
        'grade': 'grade',
        'iconname': 'iconname',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'joints': 'joints',
        'length': 'length',
        'make': 'make',
        'refid': 'refid',
        'szdrift': 'szdrift',
        'szidnom': 'szidnom',
        'szodnom': 'szodnom',
        'wtperlength': 'wtperlength',
        'systag': 'systag'
    }

    def __init__(self, coatinginner=None, coatingouter=None, com=None, conntyp=None, cost=None, costunitlabel=None, des=None, grade=None, iconname=None, idrec=None, idrecparent=None, idwell=None, joints=None, length=None, make=None, refid=None, szdrift=None, szidnom=None, szodnom=None, wtperlength=None, systag=None):  # noqa: E501
        """RiserDiverterComponentsData - a model defined in Swagger"""  # noqa: E501
        self._coatinginner = None
        self._coatingouter = None
        self._com = None
        self._conntyp = None
        self._cost = None
        self._costunitlabel = None
        self._des = None
        self._grade = None
        self._iconname = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._joints = None
        self._length = None
        self._make = None
        self._refid = None
        self._szdrift = None
        self._szidnom = None
        self._szodnom = None
        self._wtperlength = None
        self._systag = None
        self.discriminator = None
        if coatinginner is not None:
            self.coatinginner = coatinginner
        if coatingouter is not None:
            self.coatingouter = coatingouter
        if com is not None:
            self.com = com
        if conntyp is not None:
            self.conntyp = conntyp
        if cost is not None:
            self.cost = cost
        if costunitlabel is not None:
            self.costunitlabel = costunitlabel
        if des is not None:
            self.des = des
        if grade is not None:
            self.grade = grade
        if iconname is not None:
            self.iconname = iconname
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if joints is not None:
            self.joints = joints
        if length is not None:
            self.length = length
        if make is not None:
            self.make = make
        if refid is not None:
            self.refid = refid
        if szdrift is not None:
            self.szdrift = szdrift
        if szidnom is not None:
            self.szidnom = szidnom
        if szodnom is not None:
            self.szodnom = szodnom
        if wtperlength is not None:
            self.wtperlength = wtperlength
        if systag is not None:
            self.systag = systag

    @property
    def coatinginner(self):
        """Gets the coatinginner of this RiserDiverterComponentsData.  # noqa: E501


        :return: The coatinginner of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._coatinginner

    @coatinginner.setter
    def coatinginner(self, coatinginner):
        """Sets the coatinginner of this RiserDiverterComponentsData.


        :param coatinginner: The coatinginner of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._coatinginner = coatinginner

    @property
    def coatingouter(self):
        """Gets the coatingouter of this RiserDiverterComponentsData.  # noqa: E501


        :return: The coatingouter of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._coatingouter

    @coatingouter.setter
    def coatingouter(self, coatingouter):
        """Sets the coatingouter of this RiserDiverterComponentsData.


        :param coatingouter: The coatingouter of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._coatingouter = coatingouter

    @property
    def com(self):
        """Gets the com of this RiserDiverterComponentsData.  # noqa: E501


        :return: The com of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this RiserDiverterComponentsData.


        :param com: The com of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def conntyp(self):
        """Gets the conntyp of this RiserDiverterComponentsData.  # noqa: E501


        :return: The conntyp of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._conntyp

    @conntyp.setter
    def conntyp(self, conntyp):
        """Sets the conntyp of this RiserDiverterComponentsData.


        :param conntyp: The conntyp of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._conntyp = conntyp

    @property
    def cost(self):
        """Gets the cost of this RiserDiverterComponentsData.  # noqa: E501


        :return: The cost of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this RiserDiverterComponentsData.


        :param cost: The cost of this RiserDiverterComponentsData.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def costunitlabel(self):
        """Gets the costunitlabel of this RiserDiverterComponentsData.  # noqa: E501


        :return: The costunitlabel of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._costunitlabel

    @costunitlabel.setter
    def costunitlabel(self, costunitlabel):
        """Sets the costunitlabel of this RiserDiverterComponentsData.


        :param costunitlabel: The costunitlabel of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._costunitlabel = costunitlabel

    @property
    def des(self):
        """Gets the des of this RiserDiverterComponentsData.  # noqa: E501


        :return: The des of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this RiserDiverterComponentsData.


        :param des: The des of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def grade(self):
        """Gets the grade of this RiserDiverterComponentsData.  # noqa: E501


        :return: The grade of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this RiserDiverterComponentsData.


        :param grade: The grade of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def iconname(self):
        """Gets the iconname of this RiserDiverterComponentsData.  # noqa: E501


        :return: The iconname of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._iconname

    @iconname.setter
    def iconname(self, iconname):
        """Sets the iconname of this RiserDiverterComponentsData.


        :param iconname: The iconname of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._iconname = iconname

    @property
    def idrec(self):
        """Gets the idrec of this RiserDiverterComponentsData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RiserDiverterComponentsData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RiserDiverterComponentsData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RiserDiverterComponentsData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this RiserDiverterComponentsData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RiserDiverterComponentsData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def joints(self):
        """Gets the joints of this RiserDiverterComponentsData.  # noqa: E501


        :return: The joints of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: int
        """
        return self._joints

    @joints.setter
    def joints(self, joints):
        """Sets the joints of this RiserDiverterComponentsData.


        :param joints: The joints of this RiserDiverterComponentsData.  # noqa: E501
        :type: int
        """

        self._joints = joints

    @property
    def length(self):
        """Gets the length of this RiserDiverterComponentsData.  # noqa: E501


        :return: The length of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this RiserDiverterComponentsData.


        :param length: The length of this RiserDiverterComponentsData.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def make(self):
        """Gets the make of this RiserDiverterComponentsData.  # noqa: E501


        :return: The make of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this RiserDiverterComponentsData.


        :param make: The make of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def refid(self):
        """Gets the refid of this RiserDiverterComponentsData.  # noqa: E501


        :return: The refid of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._refid

    @refid.setter
    def refid(self, refid):
        """Sets the refid of this RiserDiverterComponentsData.


        :param refid: The refid of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._refid = refid

    @property
    def szdrift(self):
        """Gets the szdrift of this RiserDiverterComponentsData.  # noqa: E501


        :return: The szdrift of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: float
        """
        return self._szdrift

    @szdrift.setter
    def szdrift(self, szdrift):
        """Sets the szdrift of this RiserDiverterComponentsData.


        :param szdrift: The szdrift of this RiserDiverterComponentsData.  # noqa: E501
        :type: float
        """

        self._szdrift = szdrift

    @property
    def szidnom(self):
        """Gets the szidnom of this RiserDiverterComponentsData.  # noqa: E501


        :return: The szidnom of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: float
        """
        return self._szidnom

    @szidnom.setter
    def szidnom(self, szidnom):
        """Sets the szidnom of this RiserDiverterComponentsData.


        :param szidnom: The szidnom of this RiserDiverterComponentsData.  # noqa: E501
        :type: float
        """

        self._szidnom = szidnom

    @property
    def szodnom(self):
        """Gets the szodnom of this RiserDiverterComponentsData.  # noqa: E501


        :return: The szodnom of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: float
        """
        return self._szodnom

    @szodnom.setter
    def szodnom(self, szodnom):
        """Sets the szodnom of this RiserDiverterComponentsData.


        :param szodnom: The szodnom of this RiserDiverterComponentsData.  # noqa: E501
        :type: float
        """

        self._szodnom = szodnom

    @property
    def wtperlength(self):
        """Gets the wtperlength of this RiserDiverterComponentsData.  # noqa: E501


        :return: The wtperlength of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: float
        """
        return self._wtperlength

    @wtperlength.setter
    def wtperlength(self, wtperlength):
        """Sets the wtperlength of this RiserDiverterComponentsData.


        :param wtperlength: The wtperlength of this RiserDiverterComponentsData.  # noqa: E501
        :type: float
        """

        self._wtperlength = wtperlength

    @property
    def systag(self):
        """Gets the systag of this RiserDiverterComponentsData.  # noqa: E501


        :return: The systag of this RiserDiverterComponentsData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RiserDiverterComponentsData.


        :param systag: The systag of this RiserDiverterComponentsData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiserDiverterComponentsData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiserDiverterComponentsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
