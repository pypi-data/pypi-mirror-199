# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntervalLessonData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'depthend': 'float',
        'depthstart': 'float',
        'des': 'str',
        'dttmend': 'datetime',
        'dttmstart': 'datetime',
        'estcostsaving': 'float',
        'esttimesaving': 'float',
        'excludefromlessontime': 'bool',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'lessonowner': 'str',
        'lessonsystem1': 'str',
        'lessonsystem2': 'str',
        'lessonsystem3': 'str',
        'refno': 'str',
        'status': 'str',
        'typ': 'str',
        'typdetail': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'des': 'des',
        'dttmend': 'dttmend',
        'dttmstart': 'dttmstart',
        'estcostsaving': 'estcostsaving',
        'esttimesaving': 'esttimesaving',
        'excludefromlessontime': 'excludefromlessontime',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'lessonowner': 'lessonowner',
        'lessonsystem1': 'lessonsystem1',
        'lessonsystem2': 'lessonsystem2',
        'lessonsystem3': 'lessonsystem3',
        'refno': 'refno',
        'status': 'status',
        'typ': 'typ',
        'typdetail': 'typdetail',
        'systag': 'systag'
    }

    def __init__(self, com=None, depthend=None, depthstart=None, des=None, dttmend=None, dttmstart=None, estcostsaving=None, esttimesaving=None, excludefromlessontime=None, idrec=None, idrecparent=None, idrecwellbore=None, idwell=None, lessonowner=None, lessonsystem1=None, lessonsystem2=None, lessonsystem3=None, refno=None, status=None, typ=None, typdetail=None, systag=None):  # noqa: E501
        """IntervalLessonData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._depthend = None
        self._depthstart = None
        self._des = None
        self._dttmend = None
        self._dttmstart = None
        self._estcostsaving = None
        self._esttimesaving = None
        self._excludefromlessontime = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._lessonowner = None
        self._lessonsystem1 = None
        self._lessonsystem2 = None
        self._lessonsystem3 = None
        self._refno = None
        self._status = None
        self._typ = None
        self._typdetail = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if des is not None:
            self.des = des
        if dttmend is not None:
            self.dttmend = dttmend
        if dttmstart is not None:
            self.dttmstart = dttmstart
        if estcostsaving is not None:
            self.estcostsaving = estcostsaving
        if esttimesaving is not None:
            self.esttimesaving = esttimesaving
        if excludefromlessontime is not None:
            self.excludefromlessontime = excludefromlessontime
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if lessonowner is not None:
            self.lessonowner = lessonowner
        if lessonsystem1 is not None:
            self.lessonsystem1 = lessonsystem1
        if lessonsystem2 is not None:
            self.lessonsystem2 = lessonsystem2
        if lessonsystem3 is not None:
            self.lessonsystem3 = lessonsystem3
        if refno is not None:
            self.refno = refno
        if status is not None:
            self.status = status
        if typ is not None:
            self.typ = typ
        if typdetail is not None:
            self.typdetail = typdetail
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this IntervalLessonData.  # noqa: E501


        :return: The com of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this IntervalLessonData.


        :param com: The com of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def depthend(self):
        """Gets the depthend of this IntervalLessonData.  # noqa: E501


        :return: The depthend of this IntervalLessonData.  # noqa: E501
        :rtype: float
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this IntervalLessonData.


        :param depthend: The depthend of this IntervalLessonData.  # noqa: E501
        :type: float
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this IntervalLessonData.  # noqa: E501


        :return: The depthstart of this IntervalLessonData.  # noqa: E501
        :rtype: float
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this IntervalLessonData.


        :param depthstart: The depthstart of this IntervalLessonData.  # noqa: E501
        :type: float
        """

        self._depthstart = depthstart

    @property
    def des(self):
        """Gets the des of this IntervalLessonData.  # noqa: E501


        :return: The des of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this IntervalLessonData.


        :param des: The des of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def dttmend(self):
        """Gets the dttmend of this IntervalLessonData.  # noqa: E501


        :return: The dttmend of this IntervalLessonData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmend

    @dttmend.setter
    def dttmend(self, dttmend):
        """Sets the dttmend of this IntervalLessonData.


        :param dttmend: The dttmend of this IntervalLessonData.  # noqa: E501
        :type: datetime
        """

        self._dttmend = dttmend

    @property
    def dttmstart(self):
        """Gets the dttmstart of this IntervalLessonData.  # noqa: E501


        :return: The dttmstart of this IntervalLessonData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttmstart

    @dttmstart.setter
    def dttmstart(self, dttmstart):
        """Sets the dttmstart of this IntervalLessonData.


        :param dttmstart: The dttmstart of this IntervalLessonData.  # noqa: E501
        :type: datetime
        """

        self._dttmstart = dttmstart

    @property
    def estcostsaving(self):
        """Gets the estcostsaving of this IntervalLessonData.  # noqa: E501


        :return: The estcostsaving of this IntervalLessonData.  # noqa: E501
        :rtype: float
        """
        return self._estcostsaving

    @estcostsaving.setter
    def estcostsaving(self, estcostsaving):
        """Sets the estcostsaving of this IntervalLessonData.


        :param estcostsaving: The estcostsaving of this IntervalLessonData.  # noqa: E501
        :type: float
        """

        self._estcostsaving = estcostsaving

    @property
    def esttimesaving(self):
        """Gets the esttimesaving of this IntervalLessonData.  # noqa: E501


        :return: The esttimesaving of this IntervalLessonData.  # noqa: E501
        :rtype: float
        """
        return self._esttimesaving

    @esttimesaving.setter
    def esttimesaving(self, esttimesaving):
        """Sets the esttimesaving of this IntervalLessonData.


        :param esttimesaving: The esttimesaving of this IntervalLessonData.  # noqa: E501
        :type: float
        """

        self._esttimesaving = esttimesaving

    @property
    def excludefromlessontime(self):
        """Gets the excludefromlessontime of this IntervalLessonData.  # noqa: E501


        :return: The excludefromlessontime of this IntervalLessonData.  # noqa: E501
        :rtype: bool
        """
        return self._excludefromlessontime

    @excludefromlessontime.setter
    def excludefromlessontime(self, excludefromlessontime):
        """Sets the excludefromlessontime of this IntervalLessonData.


        :param excludefromlessontime: The excludefromlessontime of this IntervalLessonData.  # noqa: E501
        :type: bool
        """

        self._excludefromlessontime = excludefromlessontime

    @property
    def idrec(self):
        """Gets the idrec of this IntervalLessonData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this IntervalLessonData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this IntervalLessonData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this IntervalLessonData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this IntervalLessonData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this IntervalLessonData.  # noqa: E501


        :return: The idrecwellbore of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this IntervalLessonData.


        :param idrecwellbore: The idrecwellbore of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this IntervalLessonData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this IntervalLessonData.

        id of well  # noqa: E501

        :param idwell: The idwell of this IntervalLessonData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lessonowner(self):
        """Gets the lessonowner of this IntervalLessonData.  # noqa: E501


        :return: The lessonowner of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._lessonowner

    @lessonowner.setter
    def lessonowner(self, lessonowner):
        """Sets the lessonowner of this IntervalLessonData.


        :param lessonowner: The lessonowner of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._lessonowner = lessonowner

    @property
    def lessonsystem1(self):
        """Gets the lessonsystem1 of this IntervalLessonData.  # noqa: E501


        :return: The lessonsystem1 of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._lessonsystem1

    @lessonsystem1.setter
    def lessonsystem1(self, lessonsystem1):
        """Sets the lessonsystem1 of this IntervalLessonData.


        :param lessonsystem1: The lessonsystem1 of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._lessonsystem1 = lessonsystem1

    @property
    def lessonsystem2(self):
        """Gets the lessonsystem2 of this IntervalLessonData.  # noqa: E501


        :return: The lessonsystem2 of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._lessonsystem2

    @lessonsystem2.setter
    def lessonsystem2(self, lessonsystem2):
        """Sets the lessonsystem2 of this IntervalLessonData.


        :param lessonsystem2: The lessonsystem2 of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._lessonsystem2 = lessonsystem2

    @property
    def lessonsystem3(self):
        """Gets the lessonsystem3 of this IntervalLessonData.  # noqa: E501


        :return: The lessonsystem3 of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._lessonsystem3

    @lessonsystem3.setter
    def lessonsystem3(self, lessonsystem3):
        """Sets the lessonsystem3 of this IntervalLessonData.


        :param lessonsystem3: The lessonsystem3 of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._lessonsystem3 = lessonsystem3

    @property
    def refno(self):
        """Gets the refno of this IntervalLessonData.  # noqa: E501


        :return: The refno of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._refno

    @refno.setter
    def refno(self, refno):
        """Sets the refno of this IntervalLessonData.


        :param refno: The refno of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._refno = refno

    @property
    def status(self):
        """Gets the status of this IntervalLessonData.  # noqa: E501


        :return: The status of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IntervalLessonData.


        :param status: The status of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def typ(self):
        """Gets the typ of this IntervalLessonData.  # noqa: E501


        :return: The typ of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._typ

    @typ.setter
    def typ(self, typ):
        """Sets the typ of this IntervalLessonData.


        :param typ: The typ of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._typ = typ

    @property
    def typdetail(self):
        """Gets the typdetail of this IntervalLessonData.  # noqa: E501


        :return: The typdetail of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._typdetail

    @typdetail.setter
    def typdetail(self, typdetail):
        """Sets the typdetail of this IntervalLessonData.


        :param typdetail: The typdetail of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._typdetail = typdetail

    @property
    def systag(self):
        """Gets the systag of this IntervalLessonData.  # noqa: E501


        :return: The systag of this IntervalLessonData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this IntervalLessonData.


        :param systag: The systag of this IntervalLessonData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntervalLessonData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntervalLessonData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
