# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RodPumpData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'anchortyp': 'str',
        'barrellength': 'float',
        'barrelmaterial': 'str',
        'barreltyp': 'str',
        'gasanchorlength': 'float',
        'gasanchorszod': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idwell': 'str',
        'lengthlowerext': 'float',
        'lengthstrokemax': 'float',
        'lengthupperext': 'float',
        'plungerlengthnom': 'float',
        'plungermaterial': 'str',
        'plungerodclear': 'float',
        'pumptyp': 'str',
        'seatassydes': 'str',
        'seatassysz': 'float',
        'seatassytyp': 'str',
        'standvalveballmtl': 'str',
        'standvalveseatmtl': 'str',
        'szidbore': 'float',
        'travvalvballmtl': 'str',
        'travvalvseatmtl': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'anchortyp': 'anchortyp',
        'barrellength': 'barrellength',
        'barrelmaterial': 'barrelmaterial',
        'barreltyp': 'barreltyp',
        'gasanchorlength': 'gasanchorlength',
        'gasanchorszod': 'gasanchorszod',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idwell': 'idwell',
        'lengthlowerext': 'lengthlowerext',
        'lengthstrokemax': 'lengthstrokemax',
        'lengthupperext': 'lengthupperext',
        'plungerlengthnom': 'plungerlengthnom',
        'plungermaterial': 'plungermaterial',
        'plungerodclear': 'plungerodclear',
        'pumptyp': 'pumptyp',
        'seatassydes': 'seatassydes',
        'seatassysz': 'seatassysz',
        'seatassytyp': 'seatassytyp',
        'standvalveballmtl': 'standvalveballmtl',
        'standvalveseatmtl': 'standvalveseatmtl',
        'szidbore': 'szidbore',
        'travvalvballmtl': 'travvalvballmtl',
        'travvalvseatmtl': 'travvalvseatmtl',
        'systag': 'systag'
    }

    def __init__(self, anchortyp=None, barrellength=None, barrelmaterial=None, barreltyp=None, gasanchorlength=None, gasanchorszod=None, idrec=None, idrecparent=None, idwell=None, lengthlowerext=None, lengthstrokemax=None, lengthupperext=None, plungerlengthnom=None, plungermaterial=None, plungerodclear=None, pumptyp=None, seatassydes=None, seatassysz=None, seatassytyp=None, standvalveballmtl=None, standvalveseatmtl=None, szidbore=None, travvalvballmtl=None, travvalvseatmtl=None, systag=None):  # noqa: E501
        """RodPumpData - a model defined in Swagger"""  # noqa: E501
        self._anchortyp = None
        self._barrellength = None
        self._barrelmaterial = None
        self._barreltyp = None
        self._gasanchorlength = None
        self._gasanchorszod = None
        self._idrec = None
        self._idrecparent = None
        self._idwell = None
        self._lengthlowerext = None
        self._lengthstrokemax = None
        self._lengthupperext = None
        self._plungerlengthnom = None
        self._plungermaterial = None
        self._plungerodclear = None
        self._pumptyp = None
        self._seatassydes = None
        self._seatassysz = None
        self._seatassytyp = None
        self._standvalveballmtl = None
        self._standvalveseatmtl = None
        self._szidbore = None
        self._travvalvballmtl = None
        self._travvalvseatmtl = None
        self._systag = None
        self.discriminator = None
        if anchortyp is not None:
            self.anchortyp = anchortyp
        if barrellength is not None:
            self.barrellength = barrellength
        if barrelmaterial is not None:
            self.barrelmaterial = barrelmaterial
        if barreltyp is not None:
            self.barreltyp = barreltyp
        if gasanchorlength is not None:
            self.gasanchorlength = gasanchorlength
        if gasanchorszod is not None:
            self.gasanchorszod = gasanchorszod
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        self.idwell = idwell
        if lengthlowerext is not None:
            self.lengthlowerext = lengthlowerext
        if lengthstrokemax is not None:
            self.lengthstrokemax = lengthstrokemax
        if lengthupperext is not None:
            self.lengthupperext = lengthupperext
        if plungerlengthnom is not None:
            self.plungerlengthnom = plungerlengthnom
        if plungermaterial is not None:
            self.plungermaterial = plungermaterial
        if plungerodclear is not None:
            self.plungerodclear = plungerodclear
        if pumptyp is not None:
            self.pumptyp = pumptyp
        if seatassydes is not None:
            self.seatassydes = seatassydes
        if seatassysz is not None:
            self.seatassysz = seatassysz
        if seatassytyp is not None:
            self.seatassytyp = seatassytyp
        if standvalveballmtl is not None:
            self.standvalveballmtl = standvalveballmtl
        if standvalveseatmtl is not None:
            self.standvalveseatmtl = standvalveseatmtl
        if szidbore is not None:
            self.szidbore = szidbore
        if travvalvballmtl is not None:
            self.travvalvballmtl = travvalvballmtl
        if travvalvseatmtl is not None:
            self.travvalvseatmtl = travvalvseatmtl
        if systag is not None:
            self.systag = systag

    @property
    def anchortyp(self):
        """Gets the anchortyp of this RodPumpData.  # noqa: E501


        :return: The anchortyp of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._anchortyp

    @anchortyp.setter
    def anchortyp(self, anchortyp):
        """Sets the anchortyp of this RodPumpData.


        :param anchortyp: The anchortyp of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._anchortyp = anchortyp

    @property
    def barrellength(self):
        """Gets the barrellength of this RodPumpData.  # noqa: E501


        :return: The barrellength of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._barrellength

    @barrellength.setter
    def barrellength(self, barrellength):
        """Sets the barrellength of this RodPumpData.


        :param barrellength: The barrellength of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._barrellength = barrellength

    @property
    def barrelmaterial(self):
        """Gets the barrelmaterial of this RodPumpData.  # noqa: E501


        :return: The barrelmaterial of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._barrelmaterial

    @barrelmaterial.setter
    def barrelmaterial(self, barrelmaterial):
        """Sets the barrelmaterial of this RodPumpData.


        :param barrelmaterial: The barrelmaterial of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._barrelmaterial = barrelmaterial

    @property
    def barreltyp(self):
        """Gets the barreltyp of this RodPumpData.  # noqa: E501


        :return: The barreltyp of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._barreltyp

    @barreltyp.setter
    def barreltyp(self, barreltyp):
        """Sets the barreltyp of this RodPumpData.


        :param barreltyp: The barreltyp of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._barreltyp = barreltyp

    @property
    def gasanchorlength(self):
        """Gets the gasanchorlength of this RodPumpData.  # noqa: E501


        :return: The gasanchorlength of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._gasanchorlength

    @gasanchorlength.setter
    def gasanchorlength(self, gasanchorlength):
        """Sets the gasanchorlength of this RodPumpData.


        :param gasanchorlength: The gasanchorlength of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._gasanchorlength = gasanchorlength

    @property
    def gasanchorszod(self):
        """Gets the gasanchorszod of this RodPumpData.  # noqa: E501


        :return: The gasanchorszod of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._gasanchorszod

    @gasanchorszod.setter
    def gasanchorszod(self, gasanchorszod):
        """Sets the gasanchorszod of this RodPumpData.


        :param gasanchorszod: The gasanchorszod of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._gasanchorszod = gasanchorszod

    @property
    def idrec(self):
        """Gets the idrec of this RodPumpData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this RodPumpData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this RodPumpData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this RodPumpData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this RodPumpData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idwell(self):
        """Gets the idwell of this RodPumpData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this RodPumpData.

        id of well  # noqa: E501

        :param idwell: The idwell of this RodPumpData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def lengthlowerext(self):
        """Gets the lengthlowerext of this RodPumpData.  # noqa: E501


        :return: The lengthlowerext of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._lengthlowerext

    @lengthlowerext.setter
    def lengthlowerext(self, lengthlowerext):
        """Sets the lengthlowerext of this RodPumpData.


        :param lengthlowerext: The lengthlowerext of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._lengthlowerext = lengthlowerext

    @property
    def lengthstrokemax(self):
        """Gets the lengthstrokemax of this RodPumpData.  # noqa: E501


        :return: The lengthstrokemax of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._lengthstrokemax

    @lengthstrokemax.setter
    def lengthstrokemax(self, lengthstrokemax):
        """Sets the lengthstrokemax of this RodPumpData.


        :param lengthstrokemax: The lengthstrokemax of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._lengthstrokemax = lengthstrokemax

    @property
    def lengthupperext(self):
        """Gets the lengthupperext of this RodPumpData.  # noqa: E501


        :return: The lengthupperext of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._lengthupperext

    @lengthupperext.setter
    def lengthupperext(self, lengthupperext):
        """Sets the lengthupperext of this RodPumpData.


        :param lengthupperext: The lengthupperext of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._lengthupperext = lengthupperext

    @property
    def plungerlengthnom(self):
        """Gets the plungerlengthnom of this RodPumpData.  # noqa: E501


        :return: The plungerlengthnom of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._plungerlengthnom

    @plungerlengthnom.setter
    def plungerlengthnom(self, plungerlengthnom):
        """Sets the plungerlengthnom of this RodPumpData.


        :param plungerlengthnom: The plungerlengthnom of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._plungerlengthnom = plungerlengthnom

    @property
    def plungermaterial(self):
        """Gets the plungermaterial of this RodPumpData.  # noqa: E501


        :return: The plungermaterial of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._plungermaterial

    @plungermaterial.setter
    def plungermaterial(self, plungermaterial):
        """Sets the plungermaterial of this RodPumpData.


        :param plungermaterial: The plungermaterial of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._plungermaterial = plungermaterial

    @property
    def plungerodclear(self):
        """Gets the plungerodclear of this RodPumpData.  # noqa: E501


        :return: The plungerodclear of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._plungerodclear

    @plungerodclear.setter
    def plungerodclear(self, plungerodclear):
        """Sets the plungerodclear of this RodPumpData.


        :param plungerodclear: The plungerodclear of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._plungerodclear = plungerodclear

    @property
    def pumptyp(self):
        """Gets the pumptyp of this RodPumpData.  # noqa: E501


        :return: The pumptyp of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._pumptyp

    @pumptyp.setter
    def pumptyp(self, pumptyp):
        """Sets the pumptyp of this RodPumpData.


        :param pumptyp: The pumptyp of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._pumptyp = pumptyp

    @property
    def seatassydes(self):
        """Gets the seatassydes of this RodPumpData.  # noqa: E501


        :return: The seatassydes of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._seatassydes

    @seatassydes.setter
    def seatassydes(self, seatassydes):
        """Sets the seatassydes of this RodPumpData.


        :param seatassydes: The seatassydes of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._seatassydes = seatassydes

    @property
    def seatassysz(self):
        """Gets the seatassysz of this RodPumpData.  # noqa: E501


        :return: The seatassysz of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._seatassysz

    @seatassysz.setter
    def seatassysz(self, seatassysz):
        """Sets the seatassysz of this RodPumpData.


        :param seatassysz: The seatassysz of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._seatassysz = seatassysz

    @property
    def seatassytyp(self):
        """Gets the seatassytyp of this RodPumpData.  # noqa: E501


        :return: The seatassytyp of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._seatassytyp

    @seatassytyp.setter
    def seatassytyp(self, seatassytyp):
        """Sets the seatassytyp of this RodPumpData.


        :param seatassytyp: The seatassytyp of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._seatassytyp = seatassytyp

    @property
    def standvalveballmtl(self):
        """Gets the standvalveballmtl of this RodPumpData.  # noqa: E501


        :return: The standvalveballmtl of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._standvalveballmtl

    @standvalveballmtl.setter
    def standvalveballmtl(self, standvalveballmtl):
        """Sets the standvalveballmtl of this RodPumpData.


        :param standvalveballmtl: The standvalveballmtl of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._standvalveballmtl = standvalveballmtl

    @property
    def standvalveseatmtl(self):
        """Gets the standvalveseatmtl of this RodPumpData.  # noqa: E501


        :return: The standvalveseatmtl of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._standvalveseatmtl

    @standvalveseatmtl.setter
    def standvalveseatmtl(self, standvalveseatmtl):
        """Sets the standvalveseatmtl of this RodPumpData.


        :param standvalveseatmtl: The standvalveseatmtl of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._standvalveseatmtl = standvalveseatmtl

    @property
    def szidbore(self):
        """Gets the szidbore of this RodPumpData.  # noqa: E501


        :return: The szidbore of this RodPumpData.  # noqa: E501
        :rtype: float
        """
        return self._szidbore

    @szidbore.setter
    def szidbore(self, szidbore):
        """Sets the szidbore of this RodPumpData.


        :param szidbore: The szidbore of this RodPumpData.  # noqa: E501
        :type: float
        """

        self._szidbore = szidbore

    @property
    def travvalvballmtl(self):
        """Gets the travvalvballmtl of this RodPumpData.  # noqa: E501


        :return: The travvalvballmtl of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._travvalvballmtl

    @travvalvballmtl.setter
    def travvalvballmtl(self, travvalvballmtl):
        """Sets the travvalvballmtl of this RodPumpData.


        :param travvalvballmtl: The travvalvballmtl of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._travvalvballmtl = travvalvballmtl

    @property
    def travvalvseatmtl(self):
        """Gets the travvalvseatmtl of this RodPumpData.  # noqa: E501


        :return: The travvalvseatmtl of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._travvalvseatmtl

    @travvalvseatmtl.setter
    def travvalvseatmtl(self, travvalvseatmtl):
        """Sets the travvalvseatmtl of this RodPumpData.


        :param travvalvseatmtl: The travvalvseatmtl of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._travvalvseatmtl = travvalvseatmtl

    @property
    def systag(self):
        """Gets the systag of this RodPumpData.  # noqa: E501


        :return: The systag of this RodPumpData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this RodPumpData.


        :param systag: The systag of this RodPumpData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RodPumpData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RodPumpData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
