# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DynamometerTestData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'com': 'str',
        'dttm': 'datetime',
        'ept': 'float',
        'fluidload': 'float',
        'idrec': 'str',
        'idrecjob': 'str',
        'idrecpumpingunit': 'str',
        'idwell': 'str',
        'mpt': 'float',
        'resulttechnical': 'str',
        'resulttechnicaldetail': 'str',
        'resulttechnicalnote': 'str',
        'testedby': 'str',
        'typ1': 'str',
        'typ2': 'str',
        'systag': 'str'
    }

    attribute_map = {
        'com': 'com',
        'dttm': 'dttm',
        'ept': 'ept',
        'fluidload': 'fluidload',
        'idrec': 'idrec',
        'idrecjob': 'idrecjob',
        'idrecpumpingunit': 'idrecpumpingunit',
        'idwell': 'idwell',
        'mpt': 'mpt',
        'resulttechnical': 'resulttechnical',
        'resulttechnicaldetail': 'resulttechnicaldetail',
        'resulttechnicalnote': 'resulttechnicalnote',
        'testedby': 'testedby',
        'typ1': 'typ1',
        'typ2': 'typ2',
        'systag': 'systag'
    }

    def __init__(self, com=None, dttm=None, ept=None, fluidload=None, idrec=None, idrecjob=None, idrecpumpingunit=None, idwell=None, mpt=None, resulttechnical=None, resulttechnicaldetail=None, resulttechnicalnote=None, testedby=None, typ1=None, typ2=None, systag=None):  # noqa: E501
        """DynamometerTestData - a model defined in Swagger"""  # noqa: E501
        self._com = None
        self._dttm = None
        self._ept = None
        self._fluidload = None
        self._idrec = None
        self._idrecjob = None
        self._idrecpumpingunit = None
        self._idwell = None
        self._mpt = None
        self._resulttechnical = None
        self._resulttechnicaldetail = None
        self._resulttechnicalnote = None
        self._testedby = None
        self._typ1 = None
        self._typ2 = None
        self._systag = None
        self.discriminator = None
        if com is not None:
            self.com = com
        if dttm is not None:
            self.dttm = dttm
        if ept is not None:
            self.ept = ept
        if fluidload is not None:
            self.fluidload = fluidload
        if idrec is not None:
            self.idrec = idrec
        if idrecjob is not None:
            self.idrecjob = idrecjob
        if idrecpumpingunit is not None:
            self.idrecpumpingunit = idrecpumpingunit
        self.idwell = idwell
        if mpt is not None:
            self.mpt = mpt
        if resulttechnical is not None:
            self.resulttechnical = resulttechnical
        if resulttechnicaldetail is not None:
            self.resulttechnicaldetail = resulttechnicaldetail
        if resulttechnicalnote is not None:
            self.resulttechnicalnote = resulttechnicalnote
        if testedby is not None:
            self.testedby = testedby
        if typ1 is not None:
            self.typ1 = typ1
        if typ2 is not None:
            self.typ2 = typ2
        if systag is not None:
            self.systag = systag

    @property
    def com(self):
        """Gets the com of this DynamometerTestData.  # noqa: E501


        :return: The com of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this DynamometerTestData.


        :param com: The com of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def dttm(self):
        """Gets the dttm of this DynamometerTestData.  # noqa: E501


        :return: The dttm of this DynamometerTestData.  # noqa: E501
        :rtype: datetime
        """
        return self._dttm

    @dttm.setter
    def dttm(self, dttm):
        """Sets the dttm of this DynamometerTestData.


        :param dttm: The dttm of this DynamometerTestData.  # noqa: E501
        :type: datetime
        """

        self._dttm = dttm

    @property
    def ept(self):
        """Gets the ept of this DynamometerTestData.  # noqa: E501


        :return: The ept of this DynamometerTestData.  # noqa: E501
        :rtype: float
        """
        return self._ept

    @ept.setter
    def ept(self, ept):
        """Sets the ept of this DynamometerTestData.


        :param ept: The ept of this DynamometerTestData.  # noqa: E501
        :type: float
        """

        self._ept = ept

    @property
    def fluidload(self):
        """Gets the fluidload of this DynamometerTestData.  # noqa: E501


        :return: The fluidload of this DynamometerTestData.  # noqa: E501
        :rtype: float
        """
        return self._fluidload

    @fluidload.setter
    def fluidload(self, fluidload):
        """Sets the fluidload of this DynamometerTestData.


        :param fluidload: The fluidload of this DynamometerTestData.  # noqa: E501
        :type: float
        """

        self._fluidload = fluidload

    @property
    def idrec(self):
        """Gets the idrec of this DynamometerTestData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this DynamometerTestData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecjob(self):
        """Gets the idrecjob of this DynamometerTestData.  # noqa: E501


        :return: The idrecjob of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecjob

    @idrecjob.setter
    def idrecjob(self, idrecjob):
        """Sets the idrecjob of this DynamometerTestData.


        :param idrecjob: The idrecjob of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._idrecjob = idrecjob

    @property
    def idrecpumpingunit(self):
        """Gets the idrecpumpingunit of this DynamometerTestData.  # noqa: E501


        :return: The idrecpumpingunit of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._idrecpumpingunit

    @idrecpumpingunit.setter
    def idrecpumpingunit(self, idrecpumpingunit):
        """Sets the idrecpumpingunit of this DynamometerTestData.


        :param idrecpumpingunit: The idrecpumpingunit of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._idrecpumpingunit = idrecpumpingunit

    @property
    def idwell(self):
        """Gets the idwell of this DynamometerTestData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this DynamometerTestData.

        id of well  # noqa: E501

        :param idwell: The idwell of this DynamometerTestData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def mpt(self):
        """Gets the mpt of this DynamometerTestData.  # noqa: E501


        :return: The mpt of this DynamometerTestData.  # noqa: E501
        :rtype: float
        """
        return self._mpt

    @mpt.setter
    def mpt(self, mpt):
        """Sets the mpt of this DynamometerTestData.


        :param mpt: The mpt of this DynamometerTestData.  # noqa: E501
        :type: float
        """

        self._mpt = mpt

    @property
    def resulttechnical(self):
        """Gets the resulttechnical of this DynamometerTestData.  # noqa: E501


        :return: The resulttechnical of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnical

    @resulttechnical.setter
    def resulttechnical(self, resulttechnical):
        """Sets the resulttechnical of this DynamometerTestData.


        :param resulttechnical: The resulttechnical of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._resulttechnical = resulttechnical

    @property
    def resulttechnicaldetail(self):
        """Gets the resulttechnicaldetail of this DynamometerTestData.  # noqa: E501


        :return: The resulttechnicaldetail of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicaldetail

    @resulttechnicaldetail.setter
    def resulttechnicaldetail(self, resulttechnicaldetail):
        """Sets the resulttechnicaldetail of this DynamometerTestData.


        :param resulttechnicaldetail: The resulttechnicaldetail of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._resulttechnicaldetail = resulttechnicaldetail

    @property
    def resulttechnicalnote(self):
        """Gets the resulttechnicalnote of this DynamometerTestData.  # noqa: E501


        :return: The resulttechnicalnote of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._resulttechnicalnote

    @resulttechnicalnote.setter
    def resulttechnicalnote(self, resulttechnicalnote):
        """Sets the resulttechnicalnote of this DynamometerTestData.


        :param resulttechnicalnote: The resulttechnicalnote of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._resulttechnicalnote = resulttechnicalnote

    @property
    def testedby(self):
        """Gets the testedby of this DynamometerTestData.  # noqa: E501


        :return: The testedby of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._testedby

    @testedby.setter
    def testedby(self, testedby):
        """Sets the testedby of this DynamometerTestData.


        :param testedby: The testedby of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._testedby = testedby

    @property
    def typ1(self):
        """Gets the typ1 of this DynamometerTestData.  # noqa: E501


        :return: The typ1 of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._typ1

    @typ1.setter
    def typ1(self, typ1):
        """Sets the typ1 of this DynamometerTestData.


        :param typ1: The typ1 of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._typ1 = typ1

    @property
    def typ2(self):
        """Gets the typ2 of this DynamometerTestData.  # noqa: E501


        :return: The typ2 of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._typ2

    @typ2.setter
    def typ2(self, typ2):
        """Sets the typ2 of this DynamometerTestData.


        :param typ2: The typ2 of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._typ2 = typ2

    @property
    def systag(self):
        """Gets the systag of this DynamometerTestData.  # noqa: E501


        :return: The systag of this DynamometerTestData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this DynamometerTestData.


        :param systag: The systag of this DynamometerTestData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DynamometerTestData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamometerTestData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
