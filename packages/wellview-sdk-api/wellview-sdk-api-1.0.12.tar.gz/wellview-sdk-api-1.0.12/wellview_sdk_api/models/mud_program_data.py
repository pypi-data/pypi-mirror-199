# coding: utf-8

"""
    WellViewSDKAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.9
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MudProgramData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alkalinitymax': 'float',
        'alkalinitymin': 'float',
        'baritemax': 'float',
        'baritemin': 'float',
        'brinemax': 'float',
        'brinemin': 'float',
        'caclmax': 'float',
        'caclmin': 'float',
        'calciummax': 'float',
        'calciummin': 'float',
        'ceccuttingsmax': 'float',
        'ceccuttingsmin': 'float',
        'chloridesmax': 'float',
        'chloridesmin': 'float',
        'com': 'str',
        'densitymax': 'float',
        'densitymin': 'float',
        'depthend': 'float',
        'depthstart': 'float',
        'des': 'str',
        'ecdmax': 'float',
        'ecdmin': 'float',
        'elecstabilitymax': 'float',
        'elecstabilitymin': 'float',
        'filtercakemax': 'float',
        'filtercakemin': 'float',
        'filtratemax': 'float',
        'filtratemin': 'float',
        'filtrationszmax': 'float',
        'filtrationszmin': 'float',
        'funnelviscositymax': 'float',
        'funnelviscositymin': 'float',
        'gel10minmax': 'float',
        'gel10minmin': 'float',
        'gel10secmax': 'float',
        'gel10secmin': 'float',
        'gel30minmax': 'float',
        'gel30minmin': 'float',
        'hthpfiltercakemax': 'float',
        'hthpfiltercakemin': 'float',
        'hthpfiltratemax': 'float',
        'hthpfiltratemin': 'float',
        'hthppresmax': 'float',
        'hthppresmin': 'float',
        'hthptempmax': 'float',
        'hthptempmin': 'float',
        'idrec': 'str',
        'idrecparent': 'str',
        'idrecwellbore': 'str',
        'idwell': 'str',
        'ironmax': 'float',
        'kclmax': 'float',
        'kclmin': 'float',
        'kmax': 'float',
        'kmin': 'float',
        'lcmmax': 'str',
        'lcmmin': 'str',
        'limemax': 'float',
        'limemin': 'float',
        'magnesiummax': 'float',
        'magnesiummin': 'float',
        'mbtmax': 'float',
        'mbtmin': 'float',
        'mfmax': 'float',
        'mfmin': 'float',
        'mudmixture': 'str',
        'mudtyp': 'str',
        'nmax': 'float',
        'nmin': 'float',
        'ntumax': 'int',
        'oilpercentmax': 'float',
        'oilpercentmin': 'float',
        'p1max': 'float',
        'p1min': 'float',
        'p2max': 'float',
        'p2min': 'float',
        'pfmax': 'float',
        'pfmin': 'float',
        'phmax': 'float',
        'phmin': 'float',
        'plasticvismax': 'float',
        'plasticvismin': 'float',
        'pmmax': 'float',
        'pmmin': 'float',
        'polymermax': 'float',
        'polymermin': 'float',
        'potassiummax': 'float',
        'potassiummin': 'float',
        'sandsmax': 'float',
        'sandsmin': 'float',
        'solidslowgravmax': 'float',
        'solidslowgravmin': 'float',
        'solidsmax': 'float',
        'solidsmin': 'float',
        'sulfidemax': 'float',
        'sulfidemin': 'float',
        'tempcrystalmax': 'float',
        'tempcrystalmin': 'float',
        'tempflowlinemax': 'float',
        'tempflowlinemin': 'float',
        'vis100rpmmax': 'float',
        'vis100rpmmin': 'float',
        'vis200rpmmax': 'float',
        'vis200rpmmin': 'float',
        'vis300rpmmax': 'float',
        'vis300rpmmin': 'float',
        'vis30rpmmax': 'float',
        'vis30rpmmin': 'float',
        'vis3rpmmax': 'float',
        'vis3rpmmin': 'float',
        'vis600rpmmax': 'float',
        'vis600rpmmin': 'float',
        'vis60rpmmax': 'float',
        'vis60rpmmin': 'float',
        'vis6rpmmax': 'float',
        'vis6rpmmin': 'float',
        'waterpercentmax': 'float',
        'waterpercentmin': 'float',
        'yieldptmax': 'float',
        'yieldptmin': 'float',
        'systag': 'str'
    }

    attribute_map = {
        'alkalinitymax': 'alkalinitymax',
        'alkalinitymin': 'alkalinitymin',
        'baritemax': 'baritemax',
        'baritemin': 'baritemin',
        'brinemax': 'brinemax',
        'brinemin': 'brinemin',
        'caclmax': 'caclmax',
        'caclmin': 'caclmin',
        'calciummax': 'calciummax',
        'calciummin': 'calciummin',
        'ceccuttingsmax': 'ceccuttingsmax',
        'ceccuttingsmin': 'ceccuttingsmin',
        'chloridesmax': 'chloridesmax',
        'chloridesmin': 'chloridesmin',
        'com': 'com',
        'densitymax': 'densitymax',
        'densitymin': 'densitymin',
        'depthend': 'depthend',
        'depthstart': 'depthstart',
        'des': 'des',
        'ecdmax': 'ecdmax',
        'ecdmin': 'ecdmin',
        'elecstabilitymax': 'elecstabilitymax',
        'elecstabilitymin': 'elecstabilitymin',
        'filtercakemax': 'filtercakemax',
        'filtercakemin': 'filtercakemin',
        'filtratemax': 'filtratemax',
        'filtratemin': 'filtratemin',
        'filtrationszmax': 'filtrationszmax',
        'filtrationszmin': 'filtrationszmin',
        'funnelviscositymax': 'funnelviscositymax',
        'funnelviscositymin': 'funnelviscositymin',
        'gel10minmax': 'gel10minmax',
        'gel10minmin': 'gel10minmin',
        'gel10secmax': 'gel10secmax',
        'gel10secmin': 'gel10secmin',
        'gel30minmax': 'gel30minmax',
        'gel30minmin': 'gel30minmin',
        'hthpfiltercakemax': 'hthpfiltercakemax',
        'hthpfiltercakemin': 'hthpfiltercakemin',
        'hthpfiltratemax': 'hthpfiltratemax',
        'hthpfiltratemin': 'hthpfiltratemin',
        'hthppresmax': 'hthppresmax',
        'hthppresmin': 'hthppresmin',
        'hthptempmax': 'hthptempmax',
        'hthptempmin': 'hthptempmin',
        'idrec': 'idrec',
        'idrecparent': 'idrecparent',
        'idrecwellbore': 'idrecwellbore',
        'idwell': 'idwell',
        'ironmax': 'ironmax',
        'kclmax': 'kclmax',
        'kclmin': 'kclmin',
        'kmax': 'kmax',
        'kmin': 'kmin',
        'lcmmax': 'lcmmax',
        'lcmmin': 'lcmmin',
        'limemax': 'limemax',
        'limemin': 'limemin',
        'magnesiummax': 'magnesiummax',
        'magnesiummin': 'magnesiummin',
        'mbtmax': 'mbtmax',
        'mbtmin': 'mbtmin',
        'mfmax': 'mfmax',
        'mfmin': 'mfmin',
        'mudmixture': 'mudmixture',
        'mudtyp': 'mudtyp',
        'nmax': 'nmax',
        'nmin': 'nmin',
        'ntumax': 'ntumax',
        'oilpercentmax': 'oilpercentmax',
        'oilpercentmin': 'oilpercentmin',
        'p1max': 'p1max',
        'p1min': 'p1min',
        'p2max': 'p2max',
        'p2min': 'p2min',
        'pfmax': 'pfmax',
        'pfmin': 'pfmin',
        'phmax': 'phmax',
        'phmin': 'phmin',
        'plasticvismax': 'plasticvismax',
        'plasticvismin': 'plasticvismin',
        'pmmax': 'pmmax',
        'pmmin': 'pmmin',
        'polymermax': 'polymermax',
        'polymermin': 'polymermin',
        'potassiummax': 'potassiummax',
        'potassiummin': 'potassiummin',
        'sandsmax': 'sandsmax',
        'sandsmin': 'sandsmin',
        'solidslowgravmax': 'solidslowgravmax',
        'solidslowgravmin': 'solidslowgravmin',
        'solidsmax': 'solidsmax',
        'solidsmin': 'solidsmin',
        'sulfidemax': 'sulfidemax',
        'sulfidemin': 'sulfidemin',
        'tempcrystalmax': 'tempcrystalmax',
        'tempcrystalmin': 'tempcrystalmin',
        'tempflowlinemax': 'tempflowlinemax',
        'tempflowlinemin': 'tempflowlinemin',
        'vis100rpmmax': 'vis100rpmmax',
        'vis100rpmmin': 'vis100rpmmin',
        'vis200rpmmax': 'vis200rpmmax',
        'vis200rpmmin': 'vis200rpmmin',
        'vis300rpmmax': 'vis300rpmmax',
        'vis300rpmmin': 'vis300rpmmin',
        'vis30rpmmax': 'vis30rpmmax',
        'vis30rpmmin': 'vis30rpmmin',
        'vis3rpmmax': 'vis3rpmmax',
        'vis3rpmmin': 'vis3rpmmin',
        'vis600rpmmax': 'vis600rpmmax',
        'vis600rpmmin': 'vis600rpmmin',
        'vis60rpmmax': 'vis60rpmmax',
        'vis60rpmmin': 'vis60rpmmin',
        'vis6rpmmax': 'vis6rpmmax',
        'vis6rpmmin': 'vis6rpmmin',
        'waterpercentmax': 'waterpercentmax',
        'waterpercentmin': 'waterpercentmin',
        'yieldptmax': 'yieldptmax',
        'yieldptmin': 'yieldptmin',
        'systag': 'systag'
    }

    def __init__(self, alkalinitymax=None, alkalinitymin=None, baritemax=None, baritemin=None, brinemax=None, brinemin=None, caclmax=None, caclmin=None, calciummax=None, calciummin=None, ceccuttingsmax=None, ceccuttingsmin=None, chloridesmax=None, chloridesmin=None, com=None, densitymax=None, densitymin=None, depthend=None, depthstart=None, des=None, ecdmax=None, ecdmin=None, elecstabilitymax=None, elecstabilitymin=None, filtercakemax=None, filtercakemin=None, filtratemax=None, filtratemin=None, filtrationszmax=None, filtrationszmin=None, funnelviscositymax=None, funnelviscositymin=None, gel10minmax=None, gel10minmin=None, gel10secmax=None, gel10secmin=None, gel30minmax=None, gel30minmin=None, hthpfiltercakemax=None, hthpfiltercakemin=None, hthpfiltratemax=None, hthpfiltratemin=None, hthppresmax=None, hthppresmin=None, hthptempmax=None, hthptempmin=None, idrec=None, idrecparent=None, idrecwellbore=None, idwell=None, ironmax=None, kclmax=None, kclmin=None, kmax=None, kmin=None, lcmmax=None, lcmmin=None, limemax=None, limemin=None, magnesiummax=None, magnesiummin=None, mbtmax=None, mbtmin=None, mfmax=None, mfmin=None, mudmixture=None, mudtyp=None, nmax=None, nmin=None, ntumax=None, oilpercentmax=None, oilpercentmin=None, p1max=None, p1min=None, p2max=None, p2min=None, pfmax=None, pfmin=None, phmax=None, phmin=None, plasticvismax=None, plasticvismin=None, pmmax=None, pmmin=None, polymermax=None, polymermin=None, potassiummax=None, potassiummin=None, sandsmax=None, sandsmin=None, solidslowgravmax=None, solidslowgravmin=None, solidsmax=None, solidsmin=None, sulfidemax=None, sulfidemin=None, tempcrystalmax=None, tempcrystalmin=None, tempflowlinemax=None, tempflowlinemin=None, vis100rpmmax=None, vis100rpmmin=None, vis200rpmmax=None, vis200rpmmin=None, vis300rpmmax=None, vis300rpmmin=None, vis30rpmmax=None, vis30rpmmin=None, vis3rpmmax=None, vis3rpmmin=None, vis600rpmmax=None, vis600rpmmin=None, vis60rpmmax=None, vis60rpmmin=None, vis6rpmmax=None, vis6rpmmin=None, waterpercentmax=None, waterpercentmin=None, yieldptmax=None, yieldptmin=None, systag=None):  # noqa: E501
        """MudProgramData - a model defined in Swagger"""  # noqa: E501
        self._alkalinitymax = None
        self._alkalinitymin = None
        self._baritemax = None
        self._baritemin = None
        self._brinemax = None
        self._brinemin = None
        self._caclmax = None
        self._caclmin = None
        self._calciummax = None
        self._calciummin = None
        self._ceccuttingsmax = None
        self._ceccuttingsmin = None
        self._chloridesmax = None
        self._chloridesmin = None
        self._com = None
        self._densitymax = None
        self._densitymin = None
        self._depthend = None
        self._depthstart = None
        self._des = None
        self._ecdmax = None
        self._ecdmin = None
        self._elecstabilitymax = None
        self._elecstabilitymin = None
        self._filtercakemax = None
        self._filtercakemin = None
        self._filtratemax = None
        self._filtratemin = None
        self._filtrationszmax = None
        self._filtrationszmin = None
        self._funnelviscositymax = None
        self._funnelviscositymin = None
        self._gel10minmax = None
        self._gel10minmin = None
        self._gel10secmax = None
        self._gel10secmin = None
        self._gel30minmax = None
        self._gel30minmin = None
        self._hthpfiltercakemax = None
        self._hthpfiltercakemin = None
        self._hthpfiltratemax = None
        self._hthpfiltratemin = None
        self._hthppresmax = None
        self._hthppresmin = None
        self._hthptempmax = None
        self._hthptempmin = None
        self._idrec = None
        self._idrecparent = None
        self._idrecwellbore = None
        self._idwell = None
        self._ironmax = None
        self._kclmax = None
        self._kclmin = None
        self._kmax = None
        self._kmin = None
        self._lcmmax = None
        self._lcmmin = None
        self._limemax = None
        self._limemin = None
        self._magnesiummax = None
        self._magnesiummin = None
        self._mbtmax = None
        self._mbtmin = None
        self._mfmax = None
        self._mfmin = None
        self._mudmixture = None
        self._mudtyp = None
        self._nmax = None
        self._nmin = None
        self._ntumax = None
        self._oilpercentmax = None
        self._oilpercentmin = None
        self._p1max = None
        self._p1min = None
        self._p2max = None
        self._p2min = None
        self._pfmax = None
        self._pfmin = None
        self._phmax = None
        self._phmin = None
        self._plasticvismax = None
        self._plasticvismin = None
        self._pmmax = None
        self._pmmin = None
        self._polymermax = None
        self._polymermin = None
        self._potassiummax = None
        self._potassiummin = None
        self._sandsmax = None
        self._sandsmin = None
        self._solidslowgravmax = None
        self._solidslowgravmin = None
        self._solidsmax = None
        self._solidsmin = None
        self._sulfidemax = None
        self._sulfidemin = None
        self._tempcrystalmax = None
        self._tempcrystalmin = None
        self._tempflowlinemax = None
        self._tempflowlinemin = None
        self._vis100rpmmax = None
        self._vis100rpmmin = None
        self._vis200rpmmax = None
        self._vis200rpmmin = None
        self._vis300rpmmax = None
        self._vis300rpmmin = None
        self._vis30rpmmax = None
        self._vis30rpmmin = None
        self._vis3rpmmax = None
        self._vis3rpmmin = None
        self._vis600rpmmax = None
        self._vis600rpmmin = None
        self._vis60rpmmax = None
        self._vis60rpmmin = None
        self._vis6rpmmax = None
        self._vis6rpmmin = None
        self._waterpercentmax = None
        self._waterpercentmin = None
        self._yieldptmax = None
        self._yieldptmin = None
        self._systag = None
        self.discriminator = None
        if alkalinitymax is not None:
            self.alkalinitymax = alkalinitymax
        if alkalinitymin is not None:
            self.alkalinitymin = alkalinitymin
        if baritemax is not None:
            self.baritemax = baritemax
        if baritemin is not None:
            self.baritemin = baritemin
        if brinemax is not None:
            self.brinemax = brinemax
        if brinemin is not None:
            self.brinemin = brinemin
        if caclmax is not None:
            self.caclmax = caclmax
        if caclmin is not None:
            self.caclmin = caclmin
        if calciummax is not None:
            self.calciummax = calciummax
        if calciummin is not None:
            self.calciummin = calciummin
        if ceccuttingsmax is not None:
            self.ceccuttingsmax = ceccuttingsmax
        if ceccuttingsmin is not None:
            self.ceccuttingsmin = ceccuttingsmin
        if chloridesmax is not None:
            self.chloridesmax = chloridesmax
        if chloridesmin is not None:
            self.chloridesmin = chloridesmin
        if com is not None:
            self.com = com
        if densitymax is not None:
            self.densitymax = densitymax
        if densitymin is not None:
            self.densitymin = densitymin
        if depthend is not None:
            self.depthend = depthend
        if depthstart is not None:
            self.depthstart = depthstart
        if des is not None:
            self.des = des
        if ecdmax is not None:
            self.ecdmax = ecdmax
        if ecdmin is not None:
            self.ecdmin = ecdmin
        if elecstabilitymax is not None:
            self.elecstabilitymax = elecstabilitymax
        if elecstabilitymin is not None:
            self.elecstabilitymin = elecstabilitymin
        if filtercakemax is not None:
            self.filtercakemax = filtercakemax
        if filtercakemin is not None:
            self.filtercakemin = filtercakemin
        if filtratemax is not None:
            self.filtratemax = filtratemax
        if filtratemin is not None:
            self.filtratemin = filtratemin
        if filtrationszmax is not None:
            self.filtrationszmax = filtrationszmax
        if filtrationszmin is not None:
            self.filtrationszmin = filtrationszmin
        if funnelviscositymax is not None:
            self.funnelviscositymax = funnelviscositymax
        if funnelviscositymin is not None:
            self.funnelviscositymin = funnelviscositymin
        if gel10minmax is not None:
            self.gel10minmax = gel10minmax
        if gel10minmin is not None:
            self.gel10minmin = gel10minmin
        if gel10secmax is not None:
            self.gel10secmax = gel10secmax
        if gel10secmin is not None:
            self.gel10secmin = gel10secmin
        if gel30minmax is not None:
            self.gel30minmax = gel30minmax
        if gel30minmin is not None:
            self.gel30minmin = gel30minmin
        if hthpfiltercakemax is not None:
            self.hthpfiltercakemax = hthpfiltercakemax
        if hthpfiltercakemin is not None:
            self.hthpfiltercakemin = hthpfiltercakemin
        if hthpfiltratemax is not None:
            self.hthpfiltratemax = hthpfiltratemax
        if hthpfiltratemin is not None:
            self.hthpfiltratemin = hthpfiltratemin
        if hthppresmax is not None:
            self.hthppresmax = hthppresmax
        if hthppresmin is not None:
            self.hthppresmin = hthppresmin
        if hthptempmax is not None:
            self.hthptempmax = hthptempmax
        if hthptempmin is not None:
            self.hthptempmin = hthptempmin
        if idrec is not None:
            self.idrec = idrec
        self.idrecparent = idrecparent
        if idrecwellbore is not None:
            self.idrecwellbore = idrecwellbore
        self.idwell = idwell
        if ironmax is not None:
            self.ironmax = ironmax
        if kclmax is not None:
            self.kclmax = kclmax
        if kclmin is not None:
            self.kclmin = kclmin
        if kmax is not None:
            self.kmax = kmax
        if kmin is not None:
            self.kmin = kmin
        if lcmmax is not None:
            self.lcmmax = lcmmax
        if lcmmin is not None:
            self.lcmmin = lcmmin
        if limemax is not None:
            self.limemax = limemax
        if limemin is not None:
            self.limemin = limemin
        if magnesiummax is not None:
            self.magnesiummax = magnesiummax
        if magnesiummin is not None:
            self.magnesiummin = magnesiummin
        if mbtmax is not None:
            self.mbtmax = mbtmax
        if mbtmin is not None:
            self.mbtmin = mbtmin
        if mfmax is not None:
            self.mfmax = mfmax
        if mfmin is not None:
            self.mfmin = mfmin
        if mudmixture is not None:
            self.mudmixture = mudmixture
        if mudtyp is not None:
            self.mudtyp = mudtyp
        if nmax is not None:
            self.nmax = nmax
        if nmin is not None:
            self.nmin = nmin
        if ntumax is not None:
            self.ntumax = ntumax
        if oilpercentmax is not None:
            self.oilpercentmax = oilpercentmax
        if oilpercentmin is not None:
            self.oilpercentmin = oilpercentmin
        if p1max is not None:
            self.p1max = p1max
        if p1min is not None:
            self.p1min = p1min
        if p2max is not None:
            self.p2max = p2max
        if p2min is not None:
            self.p2min = p2min
        if pfmax is not None:
            self.pfmax = pfmax
        if pfmin is not None:
            self.pfmin = pfmin
        if phmax is not None:
            self.phmax = phmax
        if phmin is not None:
            self.phmin = phmin
        if plasticvismax is not None:
            self.plasticvismax = plasticvismax
        if plasticvismin is not None:
            self.plasticvismin = plasticvismin
        if pmmax is not None:
            self.pmmax = pmmax
        if pmmin is not None:
            self.pmmin = pmmin
        if polymermax is not None:
            self.polymermax = polymermax
        if polymermin is not None:
            self.polymermin = polymermin
        if potassiummax is not None:
            self.potassiummax = potassiummax
        if potassiummin is not None:
            self.potassiummin = potassiummin
        if sandsmax is not None:
            self.sandsmax = sandsmax
        if sandsmin is not None:
            self.sandsmin = sandsmin
        if solidslowgravmax is not None:
            self.solidslowgravmax = solidslowgravmax
        if solidslowgravmin is not None:
            self.solidslowgravmin = solidslowgravmin
        if solidsmax is not None:
            self.solidsmax = solidsmax
        if solidsmin is not None:
            self.solidsmin = solidsmin
        if sulfidemax is not None:
            self.sulfidemax = sulfidemax
        if sulfidemin is not None:
            self.sulfidemin = sulfidemin
        if tempcrystalmax is not None:
            self.tempcrystalmax = tempcrystalmax
        if tempcrystalmin is not None:
            self.tempcrystalmin = tempcrystalmin
        if tempflowlinemax is not None:
            self.tempflowlinemax = tempflowlinemax
        if tempflowlinemin is not None:
            self.tempflowlinemin = tempflowlinemin
        if vis100rpmmax is not None:
            self.vis100rpmmax = vis100rpmmax
        if vis100rpmmin is not None:
            self.vis100rpmmin = vis100rpmmin
        if vis200rpmmax is not None:
            self.vis200rpmmax = vis200rpmmax
        if vis200rpmmin is not None:
            self.vis200rpmmin = vis200rpmmin
        if vis300rpmmax is not None:
            self.vis300rpmmax = vis300rpmmax
        if vis300rpmmin is not None:
            self.vis300rpmmin = vis300rpmmin
        if vis30rpmmax is not None:
            self.vis30rpmmax = vis30rpmmax
        if vis30rpmmin is not None:
            self.vis30rpmmin = vis30rpmmin
        if vis3rpmmax is not None:
            self.vis3rpmmax = vis3rpmmax
        if vis3rpmmin is not None:
            self.vis3rpmmin = vis3rpmmin
        if vis600rpmmax is not None:
            self.vis600rpmmax = vis600rpmmax
        if vis600rpmmin is not None:
            self.vis600rpmmin = vis600rpmmin
        if vis60rpmmax is not None:
            self.vis60rpmmax = vis60rpmmax
        if vis60rpmmin is not None:
            self.vis60rpmmin = vis60rpmmin
        if vis6rpmmax is not None:
            self.vis6rpmmax = vis6rpmmax
        if vis6rpmmin is not None:
            self.vis6rpmmin = vis6rpmmin
        if waterpercentmax is not None:
            self.waterpercentmax = waterpercentmax
        if waterpercentmin is not None:
            self.waterpercentmin = waterpercentmin
        if yieldptmax is not None:
            self.yieldptmax = yieldptmax
        if yieldptmin is not None:
            self.yieldptmin = yieldptmin
        if systag is not None:
            self.systag = systag

    @property
    def alkalinitymax(self):
        """Gets the alkalinitymax of this MudProgramData.  # noqa: E501


        :return: The alkalinitymax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._alkalinitymax

    @alkalinitymax.setter
    def alkalinitymax(self, alkalinitymax):
        """Sets the alkalinitymax of this MudProgramData.


        :param alkalinitymax: The alkalinitymax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._alkalinitymax = alkalinitymax

    @property
    def alkalinitymin(self):
        """Gets the alkalinitymin of this MudProgramData.  # noqa: E501


        :return: The alkalinitymin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._alkalinitymin

    @alkalinitymin.setter
    def alkalinitymin(self, alkalinitymin):
        """Sets the alkalinitymin of this MudProgramData.


        :param alkalinitymin: The alkalinitymin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._alkalinitymin = alkalinitymin

    @property
    def baritemax(self):
        """Gets the baritemax of this MudProgramData.  # noqa: E501


        :return: The baritemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._baritemax

    @baritemax.setter
    def baritemax(self, baritemax):
        """Sets the baritemax of this MudProgramData.


        :param baritemax: The baritemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._baritemax = baritemax

    @property
    def baritemin(self):
        """Gets the baritemin of this MudProgramData.  # noqa: E501


        :return: The baritemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._baritemin

    @baritemin.setter
    def baritemin(self, baritemin):
        """Sets the baritemin of this MudProgramData.


        :param baritemin: The baritemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._baritemin = baritemin

    @property
    def brinemax(self):
        """Gets the brinemax of this MudProgramData.  # noqa: E501


        :return: The brinemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._brinemax

    @brinemax.setter
    def brinemax(self, brinemax):
        """Sets the brinemax of this MudProgramData.


        :param brinemax: The brinemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._brinemax = brinemax

    @property
    def brinemin(self):
        """Gets the brinemin of this MudProgramData.  # noqa: E501


        :return: The brinemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._brinemin

    @brinemin.setter
    def brinemin(self, brinemin):
        """Sets the brinemin of this MudProgramData.


        :param brinemin: The brinemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._brinemin = brinemin

    @property
    def caclmax(self):
        """Gets the caclmax of this MudProgramData.  # noqa: E501


        :return: The caclmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._caclmax

    @caclmax.setter
    def caclmax(self, caclmax):
        """Sets the caclmax of this MudProgramData.


        :param caclmax: The caclmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._caclmax = caclmax

    @property
    def caclmin(self):
        """Gets the caclmin of this MudProgramData.  # noqa: E501


        :return: The caclmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._caclmin

    @caclmin.setter
    def caclmin(self, caclmin):
        """Sets the caclmin of this MudProgramData.


        :param caclmin: The caclmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._caclmin = caclmin

    @property
    def calciummax(self):
        """Gets the calciummax of this MudProgramData.  # noqa: E501


        :return: The calciummax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._calciummax

    @calciummax.setter
    def calciummax(self, calciummax):
        """Sets the calciummax of this MudProgramData.


        :param calciummax: The calciummax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._calciummax = calciummax

    @property
    def calciummin(self):
        """Gets the calciummin of this MudProgramData.  # noqa: E501


        :return: The calciummin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._calciummin

    @calciummin.setter
    def calciummin(self, calciummin):
        """Sets the calciummin of this MudProgramData.


        :param calciummin: The calciummin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._calciummin = calciummin

    @property
    def ceccuttingsmax(self):
        """Gets the ceccuttingsmax of this MudProgramData.  # noqa: E501


        :return: The ceccuttingsmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._ceccuttingsmax

    @ceccuttingsmax.setter
    def ceccuttingsmax(self, ceccuttingsmax):
        """Sets the ceccuttingsmax of this MudProgramData.


        :param ceccuttingsmax: The ceccuttingsmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._ceccuttingsmax = ceccuttingsmax

    @property
    def ceccuttingsmin(self):
        """Gets the ceccuttingsmin of this MudProgramData.  # noqa: E501


        :return: The ceccuttingsmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._ceccuttingsmin

    @ceccuttingsmin.setter
    def ceccuttingsmin(self, ceccuttingsmin):
        """Sets the ceccuttingsmin of this MudProgramData.


        :param ceccuttingsmin: The ceccuttingsmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._ceccuttingsmin = ceccuttingsmin

    @property
    def chloridesmax(self):
        """Gets the chloridesmax of this MudProgramData.  # noqa: E501


        :return: The chloridesmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._chloridesmax

    @chloridesmax.setter
    def chloridesmax(self, chloridesmax):
        """Sets the chloridesmax of this MudProgramData.


        :param chloridesmax: The chloridesmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._chloridesmax = chloridesmax

    @property
    def chloridesmin(self):
        """Gets the chloridesmin of this MudProgramData.  # noqa: E501


        :return: The chloridesmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._chloridesmin

    @chloridesmin.setter
    def chloridesmin(self, chloridesmin):
        """Sets the chloridesmin of this MudProgramData.


        :param chloridesmin: The chloridesmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._chloridesmin = chloridesmin

    @property
    def com(self):
        """Gets the com of this MudProgramData.  # noqa: E501


        :return: The com of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._com

    @com.setter
    def com(self, com):
        """Sets the com of this MudProgramData.


        :param com: The com of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._com = com

    @property
    def densitymax(self):
        """Gets the densitymax of this MudProgramData.  # noqa: E501


        :return: The densitymax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._densitymax

    @densitymax.setter
    def densitymax(self, densitymax):
        """Sets the densitymax of this MudProgramData.


        :param densitymax: The densitymax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._densitymax = densitymax

    @property
    def densitymin(self):
        """Gets the densitymin of this MudProgramData.  # noqa: E501


        :return: The densitymin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._densitymin

    @densitymin.setter
    def densitymin(self, densitymin):
        """Sets the densitymin of this MudProgramData.


        :param densitymin: The densitymin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._densitymin = densitymin

    @property
    def depthend(self):
        """Gets the depthend of this MudProgramData.  # noqa: E501


        :return: The depthend of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._depthend

    @depthend.setter
    def depthend(self, depthend):
        """Sets the depthend of this MudProgramData.


        :param depthend: The depthend of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._depthend = depthend

    @property
    def depthstart(self):
        """Gets the depthstart of this MudProgramData.  # noqa: E501


        :return: The depthstart of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._depthstart

    @depthstart.setter
    def depthstart(self, depthstart):
        """Sets the depthstart of this MudProgramData.


        :param depthstart: The depthstart of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._depthstart = depthstart

    @property
    def des(self):
        """Gets the des of this MudProgramData.  # noqa: E501


        :return: The des of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._des

    @des.setter
    def des(self, des):
        """Sets the des of this MudProgramData.


        :param des: The des of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._des = des

    @property
    def ecdmax(self):
        """Gets the ecdmax of this MudProgramData.  # noqa: E501


        :return: The ecdmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._ecdmax

    @ecdmax.setter
    def ecdmax(self, ecdmax):
        """Sets the ecdmax of this MudProgramData.


        :param ecdmax: The ecdmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._ecdmax = ecdmax

    @property
    def ecdmin(self):
        """Gets the ecdmin of this MudProgramData.  # noqa: E501


        :return: The ecdmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._ecdmin

    @ecdmin.setter
    def ecdmin(self, ecdmin):
        """Sets the ecdmin of this MudProgramData.


        :param ecdmin: The ecdmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._ecdmin = ecdmin

    @property
    def elecstabilitymax(self):
        """Gets the elecstabilitymax of this MudProgramData.  # noqa: E501


        :return: The elecstabilitymax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._elecstabilitymax

    @elecstabilitymax.setter
    def elecstabilitymax(self, elecstabilitymax):
        """Sets the elecstabilitymax of this MudProgramData.


        :param elecstabilitymax: The elecstabilitymax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._elecstabilitymax = elecstabilitymax

    @property
    def elecstabilitymin(self):
        """Gets the elecstabilitymin of this MudProgramData.  # noqa: E501


        :return: The elecstabilitymin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._elecstabilitymin

    @elecstabilitymin.setter
    def elecstabilitymin(self, elecstabilitymin):
        """Sets the elecstabilitymin of this MudProgramData.


        :param elecstabilitymin: The elecstabilitymin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._elecstabilitymin = elecstabilitymin

    @property
    def filtercakemax(self):
        """Gets the filtercakemax of this MudProgramData.  # noqa: E501


        :return: The filtercakemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._filtercakemax

    @filtercakemax.setter
    def filtercakemax(self, filtercakemax):
        """Sets the filtercakemax of this MudProgramData.


        :param filtercakemax: The filtercakemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._filtercakemax = filtercakemax

    @property
    def filtercakemin(self):
        """Gets the filtercakemin of this MudProgramData.  # noqa: E501


        :return: The filtercakemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._filtercakemin

    @filtercakemin.setter
    def filtercakemin(self, filtercakemin):
        """Sets the filtercakemin of this MudProgramData.


        :param filtercakemin: The filtercakemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._filtercakemin = filtercakemin

    @property
    def filtratemax(self):
        """Gets the filtratemax of this MudProgramData.  # noqa: E501


        :return: The filtratemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._filtratemax

    @filtratemax.setter
    def filtratemax(self, filtratemax):
        """Sets the filtratemax of this MudProgramData.


        :param filtratemax: The filtratemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._filtratemax = filtratemax

    @property
    def filtratemin(self):
        """Gets the filtratemin of this MudProgramData.  # noqa: E501


        :return: The filtratemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._filtratemin

    @filtratemin.setter
    def filtratemin(self, filtratemin):
        """Sets the filtratemin of this MudProgramData.


        :param filtratemin: The filtratemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._filtratemin = filtratemin

    @property
    def filtrationszmax(self):
        """Gets the filtrationszmax of this MudProgramData.  # noqa: E501


        :return: The filtrationszmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._filtrationszmax

    @filtrationszmax.setter
    def filtrationszmax(self, filtrationszmax):
        """Sets the filtrationszmax of this MudProgramData.


        :param filtrationszmax: The filtrationszmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._filtrationszmax = filtrationszmax

    @property
    def filtrationszmin(self):
        """Gets the filtrationszmin of this MudProgramData.  # noqa: E501


        :return: The filtrationszmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._filtrationszmin

    @filtrationszmin.setter
    def filtrationszmin(self, filtrationszmin):
        """Sets the filtrationszmin of this MudProgramData.


        :param filtrationszmin: The filtrationszmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._filtrationszmin = filtrationszmin

    @property
    def funnelviscositymax(self):
        """Gets the funnelviscositymax of this MudProgramData.  # noqa: E501


        :return: The funnelviscositymax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._funnelviscositymax

    @funnelviscositymax.setter
    def funnelviscositymax(self, funnelviscositymax):
        """Sets the funnelviscositymax of this MudProgramData.


        :param funnelviscositymax: The funnelviscositymax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._funnelviscositymax = funnelviscositymax

    @property
    def funnelviscositymin(self):
        """Gets the funnelviscositymin of this MudProgramData.  # noqa: E501


        :return: The funnelviscositymin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._funnelviscositymin

    @funnelviscositymin.setter
    def funnelviscositymin(self, funnelviscositymin):
        """Sets the funnelviscositymin of this MudProgramData.


        :param funnelviscositymin: The funnelviscositymin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._funnelviscositymin = funnelviscositymin

    @property
    def gel10minmax(self):
        """Gets the gel10minmax of this MudProgramData.  # noqa: E501


        :return: The gel10minmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._gel10minmax

    @gel10minmax.setter
    def gel10minmax(self, gel10minmax):
        """Sets the gel10minmax of this MudProgramData.


        :param gel10minmax: The gel10minmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._gel10minmax = gel10minmax

    @property
    def gel10minmin(self):
        """Gets the gel10minmin of this MudProgramData.  # noqa: E501


        :return: The gel10minmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._gel10minmin

    @gel10minmin.setter
    def gel10minmin(self, gel10minmin):
        """Sets the gel10minmin of this MudProgramData.


        :param gel10minmin: The gel10minmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._gel10minmin = gel10minmin

    @property
    def gel10secmax(self):
        """Gets the gel10secmax of this MudProgramData.  # noqa: E501


        :return: The gel10secmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._gel10secmax

    @gel10secmax.setter
    def gel10secmax(self, gel10secmax):
        """Sets the gel10secmax of this MudProgramData.


        :param gel10secmax: The gel10secmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._gel10secmax = gel10secmax

    @property
    def gel10secmin(self):
        """Gets the gel10secmin of this MudProgramData.  # noqa: E501


        :return: The gel10secmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._gel10secmin

    @gel10secmin.setter
    def gel10secmin(self, gel10secmin):
        """Sets the gel10secmin of this MudProgramData.


        :param gel10secmin: The gel10secmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._gel10secmin = gel10secmin

    @property
    def gel30minmax(self):
        """Gets the gel30minmax of this MudProgramData.  # noqa: E501


        :return: The gel30minmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._gel30minmax

    @gel30minmax.setter
    def gel30minmax(self, gel30minmax):
        """Sets the gel30minmax of this MudProgramData.


        :param gel30minmax: The gel30minmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._gel30minmax = gel30minmax

    @property
    def gel30minmin(self):
        """Gets the gel30minmin of this MudProgramData.  # noqa: E501


        :return: The gel30minmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._gel30minmin

    @gel30minmin.setter
    def gel30minmin(self, gel30minmin):
        """Sets the gel30minmin of this MudProgramData.


        :param gel30minmin: The gel30minmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._gel30minmin = gel30minmin

    @property
    def hthpfiltercakemax(self):
        """Gets the hthpfiltercakemax of this MudProgramData.  # noqa: E501


        :return: The hthpfiltercakemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthpfiltercakemax

    @hthpfiltercakemax.setter
    def hthpfiltercakemax(self, hthpfiltercakemax):
        """Sets the hthpfiltercakemax of this MudProgramData.


        :param hthpfiltercakemax: The hthpfiltercakemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthpfiltercakemax = hthpfiltercakemax

    @property
    def hthpfiltercakemin(self):
        """Gets the hthpfiltercakemin of this MudProgramData.  # noqa: E501


        :return: The hthpfiltercakemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthpfiltercakemin

    @hthpfiltercakemin.setter
    def hthpfiltercakemin(self, hthpfiltercakemin):
        """Sets the hthpfiltercakemin of this MudProgramData.


        :param hthpfiltercakemin: The hthpfiltercakemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthpfiltercakemin = hthpfiltercakemin

    @property
    def hthpfiltratemax(self):
        """Gets the hthpfiltratemax of this MudProgramData.  # noqa: E501


        :return: The hthpfiltratemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthpfiltratemax

    @hthpfiltratemax.setter
    def hthpfiltratemax(self, hthpfiltratemax):
        """Sets the hthpfiltratemax of this MudProgramData.


        :param hthpfiltratemax: The hthpfiltratemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthpfiltratemax = hthpfiltratemax

    @property
    def hthpfiltratemin(self):
        """Gets the hthpfiltratemin of this MudProgramData.  # noqa: E501


        :return: The hthpfiltratemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthpfiltratemin

    @hthpfiltratemin.setter
    def hthpfiltratemin(self, hthpfiltratemin):
        """Sets the hthpfiltratemin of this MudProgramData.


        :param hthpfiltratemin: The hthpfiltratemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthpfiltratemin = hthpfiltratemin

    @property
    def hthppresmax(self):
        """Gets the hthppresmax of this MudProgramData.  # noqa: E501


        :return: The hthppresmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthppresmax

    @hthppresmax.setter
    def hthppresmax(self, hthppresmax):
        """Sets the hthppresmax of this MudProgramData.


        :param hthppresmax: The hthppresmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthppresmax = hthppresmax

    @property
    def hthppresmin(self):
        """Gets the hthppresmin of this MudProgramData.  # noqa: E501


        :return: The hthppresmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthppresmin

    @hthppresmin.setter
    def hthppresmin(self, hthppresmin):
        """Sets the hthppresmin of this MudProgramData.


        :param hthppresmin: The hthppresmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthppresmin = hthppresmin

    @property
    def hthptempmax(self):
        """Gets the hthptempmax of this MudProgramData.  # noqa: E501


        :return: The hthptempmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthptempmax

    @hthptempmax.setter
    def hthptempmax(self, hthptempmax):
        """Sets the hthptempmax of this MudProgramData.


        :param hthptempmax: The hthptempmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthptempmax = hthptempmax

    @property
    def hthptempmin(self):
        """Gets the hthptempmin of this MudProgramData.  # noqa: E501


        :return: The hthptempmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._hthptempmin

    @hthptempmin.setter
    def hthptempmin(self, hthptempmin):
        """Sets the hthptempmin of this MudProgramData.


        :param hthptempmin: The hthptempmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._hthptempmin = hthptempmin

    @property
    def idrec(self):
        """Gets the idrec of this MudProgramData.  # noqa: E501

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :return: The idrec of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._idrec

    @idrec.setter
    def idrec(self, idrec):
        """Sets the idrec of this MudProgramData.

        Its value is None for insert operation. It required for update and delete operations  # noqa: E501

        :param idrec: The idrec of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._idrec = idrec

    @property
    def idrecparent(self):
        """Gets the idrecparent of this MudProgramData.  # noqa: E501

        id of parrent table  # noqa: E501

        :return: The idrecparent of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._idrecparent

    @idrecparent.setter
    def idrecparent(self, idrecparent):
        """Sets the idrecparent of this MudProgramData.

        id of parrent table  # noqa: E501

        :param idrecparent: The idrecparent of this MudProgramData.  # noqa: E501
        :type: str
        """
        if idrecparent is None:
            raise ValueError("Invalid value for `idrecparent`, must not be `None`")  # noqa: E501

        self._idrecparent = idrecparent

    @property
    def idrecwellbore(self):
        """Gets the idrecwellbore of this MudProgramData.  # noqa: E501


        :return: The idrecwellbore of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._idrecwellbore

    @idrecwellbore.setter
    def idrecwellbore(self, idrecwellbore):
        """Sets the idrecwellbore of this MudProgramData.


        :param idrecwellbore: The idrecwellbore of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._idrecwellbore = idrecwellbore

    @property
    def idwell(self):
        """Gets the idwell of this MudProgramData.  # noqa: E501

        id of well  # noqa: E501

        :return: The idwell of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._idwell

    @idwell.setter
    def idwell(self, idwell):
        """Sets the idwell of this MudProgramData.

        id of well  # noqa: E501

        :param idwell: The idwell of this MudProgramData.  # noqa: E501
        :type: str
        """
        if idwell is None:
            raise ValueError("Invalid value for `idwell`, must not be `None`")  # noqa: E501

        self._idwell = idwell

    @property
    def ironmax(self):
        """Gets the ironmax of this MudProgramData.  # noqa: E501


        :return: The ironmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._ironmax

    @ironmax.setter
    def ironmax(self, ironmax):
        """Sets the ironmax of this MudProgramData.


        :param ironmax: The ironmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._ironmax = ironmax

    @property
    def kclmax(self):
        """Gets the kclmax of this MudProgramData.  # noqa: E501


        :return: The kclmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._kclmax

    @kclmax.setter
    def kclmax(self, kclmax):
        """Sets the kclmax of this MudProgramData.


        :param kclmax: The kclmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._kclmax = kclmax

    @property
    def kclmin(self):
        """Gets the kclmin of this MudProgramData.  # noqa: E501


        :return: The kclmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._kclmin

    @kclmin.setter
    def kclmin(self, kclmin):
        """Sets the kclmin of this MudProgramData.


        :param kclmin: The kclmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._kclmin = kclmin

    @property
    def kmax(self):
        """Gets the kmax of this MudProgramData.  # noqa: E501


        :return: The kmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._kmax

    @kmax.setter
    def kmax(self, kmax):
        """Sets the kmax of this MudProgramData.


        :param kmax: The kmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._kmax = kmax

    @property
    def kmin(self):
        """Gets the kmin of this MudProgramData.  # noqa: E501


        :return: The kmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._kmin

    @kmin.setter
    def kmin(self, kmin):
        """Sets the kmin of this MudProgramData.


        :param kmin: The kmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._kmin = kmin

    @property
    def lcmmax(self):
        """Gets the lcmmax of this MudProgramData.  # noqa: E501


        :return: The lcmmax of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._lcmmax

    @lcmmax.setter
    def lcmmax(self, lcmmax):
        """Sets the lcmmax of this MudProgramData.


        :param lcmmax: The lcmmax of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._lcmmax = lcmmax

    @property
    def lcmmin(self):
        """Gets the lcmmin of this MudProgramData.  # noqa: E501


        :return: The lcmmin of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._lcmmin

    @lcmmin.setter
    def lcmmin(self, lcmmin):
        """Sets the lcmmin of this MudProgramData.


        :param lcmmin: The lcmmin of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._lcmmin = lcmmin

    @property
    def limemax(self):
        """Gets the limemax of this MudProgramData.  # noqa: E501


        :return: The limemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._limemax

    @limemax.setter
    def limemax(self, limemax):
        """Sets the limemax of this MudProgramData.


        :param limemax: The limemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._limemax = limemax

    @property
    def limemin(self):
        """Gets the limemin of this MudProgramData.  # noqa: E501


        :return: The limemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._limemin

    @limemin.setter
    def limemin(self, limemin):
        """Sets the limemin of this MudProgramData.


        :param limemin: The limemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._limemin = limemin

    @property
    def magnesiummax(self):
        """Gets the magnesiummax of this MudProgramData.  # noqa: E501


        :return: The magnesiummax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._magnesiummax

    @magnesiummax.setter
    def magnesiummax(self, magnesiummax):
        """Sets the magnesiummax of this MudProgramData.


        :param magnesiummax: The magnesiummax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._magnesiummax = magnesiummax

    @property
    def magnesiummin(self):
        """Gets the magnesiummin of this MudProgramData.  # noqa: E501


        :return: The magnesiummin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._magnesiummin

    @magnesiummin.setter
    def magnesiummin(self, magnesiummin):
        """Sets the magnesiummin of this MudProgramData.


        :param magnesiummin: The magnesiummin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._magnesiummin = magnesiummin

    @property
    def mbtmax(self):
        """Gets the mbtmax of this MudProgramData.  # noqa: E501


        :return: The mbtmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._mbtmax

    @mbtmax.setter
    def mbtmax(self, mbtmax):
        """Sets the mbtmax of this MudProgramData.


        :param mbtmax: The mbtmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._mbtmax = mbtmax

    @property
    def mbtmin(self):
        """Gets the mbtmin of this MudProgramData.  # noqa: E501


        :return: The mbtmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._mbtmin

    @mbtmin.setter
    def mbtmin(self, mbtmin):
        """Sets the mbtmin of this MudProgramData.


        :param mbtmin: The mbtmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._mbtmin = mbtmin

    @property
    def mfmax(self):
        """Gets the mfmax of this MudProgramData.  # noqa: E501


        :return: The mfmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._mfmax

    @mfmax.setter
    def mfmax(self, mfmax):
        """Sets the mfmax of this MudProgramData.


        :param mfmax: The mfmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._mfmax = mfmax

    @property
    def mfmin(self):
        """Gets the mfmin of this MudProgramData.  # noqa: E501


        :return: The mfmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._mfmin

    @mfmin.setter
    def mfmin(self, mfmin):
        """Sets the mfmin of this MudProgramData.


        :param mfmin: The mfmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._mfmin = mfmin

    @property
    def mudmixture(self):
        """Gets the mudmixture of this MudProgramData.  # noqa: E501


        :return: The mudmixture of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._mudmixture

    @mudmixture.setter
    def mudmixture(self, mudmixture):
        """Sets the mudmixture of this MudProgramData.


        :param mudmixture: The mudmixture of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._mudmixture = mudmixture

    @property
    def mudtyp(self):
        """Gets the mudtyp of this MudProgramData.  # noqa: E501


        :return: The mudtyp of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._mudtyp

    @mudtyp.setter
    def mudtyp(self, mudtyp):
        """Sets the mudtyp of this MudProgramData.


        :param mudtyp: The mudtyp of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._mudtyp = mudtyp

    @property
    def nmax(self):
        """Gets the nmax of this MudProgramData.  # noqa: E501


        :return: The nmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._nmax

    @nmax.setter
    def nmax(self, nmax):
        """Sets the nmax of this MudProgramData.


        :param nmax: The nmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._nmax = nmax

    @property
    def nmin(self):
        """Gets the nmin of this MudProgramData.  # noqa: E501


        :return: The nmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._nmin

    @nmin.setter
    def nmin(self, nmin):
        """Sets the nmin of this MudProgramData.


        :param nmin: The nmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._nmin = nmin

    @property
    def ntumax(self):
        """Gets the ntumax of this MudProgramData.  # noqa: E501


        :return: The ntumax of this MudProgramData.  # noqa: E501
        :rtype: int
        """
        return self._ntumax

    @ntumax.setter
    def ntumax(self, ntumax):
        """Sets the ntumax of this MudProgramData.


        :param ntumax: The ntumax of this MudProgramData.  # noqa: E501
        :type: int
        """

        self._ntumax = ntumax

    @property
    def oilpercentmax(self):
        """Gets the oilpercentmax of this MudProgramData.  # noqa: E501


        :return: The oilpercentmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._oilpercentmax

    @oilpercentmax.setter
    def oilpercentmax(self, oilpercentmax):
        """Sets the oilpercentmax of this MudProgramData.


        :param oilpercentmax: The oilpercentmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._oilpercentmax = oilpercentmax

    @property
    def oilpercentmin(self):
        """Gets the oilpercentmin of this MudProgramData.  # noqa: E501


        :return: The oilpercentmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._oilpercentmin

    @oilpercentmin.setter
    def oilpercentmin(self, oilpercentmin):
        """Sets the oilpercentmin of this MudProgramData.


        :param oilpercentmin: The oilpercentmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._oilpercentmin = oilpercentmin

    @property
    def p1max(self):
        """Gets the p1max of this MudProgramData.  # noqa: E501


        :return: The p1max of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._p1max

    @p1max.setter
    def p1max(self, p1max):
        """Sets the p1max of this MudProgramData.


        :param p1max: The p1max of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._p1max = p1max

    @property
    def p1min(self):
        """Gets the p1min of this MudProgramData.  # noqa: E501


        :return: The p1min of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._p1min

    @p1min.setter
    def p1min(self, p1min):
        """Sets the p1min of this MudProgramData.


        :param p1min: The p1min of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._p1min = p1min

    @property
    def p2max(self):
        """Gets the p2max of this MudProgramData.  # noqa: E501


        :return: The p2max of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._p2max

    @p2max.setter
    def p2max(self, p2max):
        """Sets the p2max of this MudProgramData.


        :param p2max: The p2max of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._p2max = p2max

    @property
    def p2min(self):
        """Gets the p2min of this MudProgramData.  # noqa: E501


        :return: The p2min of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._p2min

    @p2min.setter
    def p2min(self, p2min):
        """Sets the p2min of this MudProgramData.


        :param p2min: The p2min of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._p2min = p2min

    @property
    def pfmax(self):
        """Gets the pfmax of this MudProgramData.  # noqa: E501


        :return: The pfmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._pfmax

    @pfmax.setter
    def pfmax(self, pfmax):
        """Sets the pfmax of this MudProgramData.


        :param pfmax: The pfmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._pfmax = pfmax

    @property
    def pfmin(self):
        """Gets the pfmin of this MudProgramData.  # noqa: E501


        :return: The pfmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._pfmin

    @pfmin.setter
    def pfmin(self, pfmin):
        """Sets the pfmin of this MudProgramData.


        :param pfmin: The pfmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._pfmin = pfmin

    @property
    def phmax(self):
        """Gets the phmax of this MudProgramData.  # noqa: E501


        :return: The phmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._phmax

    @phmax.setter
    def phmax(self, phmax):
        """Sets the phmax of this MudProgramData.


        :param phmax: The phmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._phmax = phmax

    @property
    def phmin(self):
        """Gets the phmin of this MudProgramData.  # noqa: E501


        :return: The phmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._phmin

    @phmin.setter
    def phmin(self, phmin):
        """Sets the phmin of this MudProgramData.


        :param phmin: The phmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._phmin = phmin

    @property
    def plasticvismax(self):
        """Gets the plasticvismax of this MudProgramData.  # noqa: E501


        :return: The plasticvismax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._plasticvismax

    @plasticvismax.setter
    def plasticvismax(self, plasticvismax):
        """Sets the plasticvismax of this MudProgramData.


        :param plasticvismax: The plasticvismax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._plasticvismax = plasticvismax

    @property
    def plasticvismin(self):
        """Gets the plasticvismin of this MudProgramData.  # noqa: E501


        :return: The plasticvismin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._plasticvismin

    @plasticvismin.setter
    def plasticvismin(self, plasticvismin):
        """Sets the plasticvismin of this MudProgramData.


        :param plasticvismin: The plasticvismin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._plasticvismin = plasticvismin

    @property
    def pmmax(self):
        """Gets the pmmax of this MudProgramData.  # noqa: E501


        :return: The pmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._pmmax

    @pmmax.setter
    def pmmax(self, pmmax):
        """Sets the pmmax of this MudProgramData.


        :param pmmax: The pmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._pmmax = pmmax

    @property
    def pmmin(self):
        """Gets the pmmin of this MudProgramData.  # noqa: E501


        :return: The pmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._pmmin

    @pmmin.setter
    def pmmin(self, pmmin):
        """Sets the pmmin of this MudProgramData.


        :param pmmin: The pmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._pmmin = pmmin

    @property
    def polymermax(self):
        """Gets the polymermax of this MudProgramData.  # noqa: E501


        :return: The polymermax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._polymermax

    @polymermax.setter
    def polymermax(self, polymermax):
        """Sets the polymermax of this MudProgramData.


        :param polymermax: The polymermax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._polymermax = polymermax

    @property
    def polymermin(self):
        """Gets the polymermin of this MudProgramData.  # noqa: E501


        :return: The polymermin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._polymermin

    @polymermin.setter
    def polymermin(self, polymermin):
        """Sets the polymermin of this MudProgramData.


        :param polymermin: The polymermin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._polymermin = polymermin

    @property
    def potassiummax(self):
        """Gets the potassiummax of this MudProgramData.  # noqa: E501


        :return: The potassiummax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._potassiummax

    @potassiummax.setter
    def potassiummax(self, potassiummax):
        """Sets the potassiummax of this MudProgramData.


        :param potassiummax: The potassiummax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._potassiummax = potassiummax

    @property
    def potassiummin(self):
        """Gets the potassiummin of this MudProgramData.  # noqa: E501


        :return: The potassiummin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._potassiummin

    @potassiummin.setter
    def potassiummin(self, potassiummin):
        """Sets the potassiummin of this MudProgramData.


        :param potassiummin: The potassiummin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._potassiummin = potassiummin

    @property
    def sandsmax(self):
        """Gets the sandsmax of this MudProgramData.  # noqa: E501


        :return: The sandsmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._sandsmax

    @sandsmax.setter
    def sandsmax(self, sandsmax):
        """Sets the sandsmax of this MudProgramData.


        :param sandsmax: The sandsmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._sandsmax = sandsmax

    @property
    def sandsmin(self):
        """Gets the sandsmin of this MudProgramData.  # noqa: E501


        :return: The sandsmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._sandsmin

    @sandsmin.setter
    def sandsmin(self, sandsmin):
        """Sets the sandsmin of this MudProgramData.


        :param sandsmin: The sandsmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._sandsmin = sandsmin

    @property
    def solidslowgravmax(self):
        """Gets the solidslowgravmax of this MudProgramData.  # noqa: E501


        :return: The solidslowgravmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._solidslowgravmax

    @solidslowgravmax.setter
    def solidslowgravmax(self, solidslowgravmax):
        """Sets the solidslowgravmax of this MudProgramData.


        :param solidslowgravmax: The solidslowgravmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._solidslowgravmax = solidslowgravmax

    @property
    def solidslowgravmin(self):
        """Gets the solidslowgravmin of this MudProgramData.  # noqa: E501


        :return: The solidslowgravmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._solidslowgravmin

    @solidslowgravmin.setter
    def solidslowgravmin(self, solidslowgravmin):
        """Sets the solidslowgravmin of this MudProgramData.


        :param solidslowgravmin: The solidslowgravmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._solidslowgravmin = solidslowgravmin

    @property
    def solidsmax(self):
        """Gets the solidsmax of this MudProgramData.  # noqa: E501


        :return: The solidsmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._solidsmax

    @solidsmax.setter
    def solidsmax(self, solidsmax):
        """Sets the solidsmax of this MudProgramData.


        :param solidsmax: The solidsmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._solidsmax = solidsmax

    @property
    def solidsmin(self):
        """Gets the solidsmin of this MudProgramData.  # noqa: E501


        :return: The solidsmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._solidsmin

    @solidsmin.setter
    def solidsmin(self, solidsmin):
        """Sets the solidsmin of this MudProgramData.


        :param solidsmin: The solidsmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._solidsmin = solidsmin

    @property
    def sulfidemax(self):
        """Gets the sulfidemax of this MudProgramData.  # noqa: E501


        :return: The sulfidemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._sulfidemax

    @sulfidemax.setter
    def sulfidemax(self, sulfidemax):
        """Sets the sulfidemax of this MudProgramData.


        :param sulfidemax: The sulfidemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._sulfidemax = sulfidemax

    @property
    def sulfidemin(self):
        """Gets the sulfidemin of this MudProgramData.  # noqa: E501


        :return: The sulfidemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._sulfidemin

    @sulfidemin.setter
    def sulfidemin(self, sulfidemin):
        """Sets the sulfidemin of this MudProgramData.


        :param sulfidemin: The sulfidemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._sulfidemin = sulfidemin

    @property
    def tempcrystalmax(self):
        """Gets the tempcrystalmax of this MudProgramData.  # noqa: E501


        :return: The tempcrystalmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._tempcrystalmax

    @tempcrystalmax.setter
    def tempcrystalmax(self, tempcrystalmax):
        """Sets the tempcrystalmax of this MudProgramData.


        :param tempcrystalmax: The tempcrystalmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._tempcrystalmax = tempcrystalmax

    @property
    def tempcrystalmin(self):
        """Gets the tempcrystalmin of this MudProgramData.  # noqa: E501


        :return: The tempcrystalmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._tempcrystalmin

    @tempcrystalmin.setter
    def tempcrystalmin(self, tempcrystalmin):
        """Sets the tempcrystalmin of this MudProgramData.


        :param tempcrystalmin: The tempcrystalmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._tempcrystalmin = tempcrystalmin

    @property
    def tempflowlinemax(self):
        """Gets the tempflowlinemax of this MudProgramData.  # noqa: E501


        :return: The tempflowlinemax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._tempflowlinemax

    @tempflowlinemax.setter
    def tempflowlinemax(self, tempflowlinemax):
        """Sets the tempflowlinemax of this MudProgramData.


        :param tempflowlinemax: The tempflowlinemax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._tempflowlinemax = tempflowlinemax

    @property
    def tempflowlinemin(self):
        """Gets the tempflowlinemin of this MudProgramData.  # noqa: E501


        :return: The tempflowlinemin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._tempflowlinemin

    @tempflowlinemin.setter
    def tempflowlinemin(self, tempflowlinemin):
        """Sets the tempflowlinemin of this MudProgramData.


        :param tempflowlinemin: The tempflowlinemin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._tempflowlinemin = tempflowlinemin

    @property
    def vis100rpmmax(self):
        """Gets the vis100rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis100rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis100rpmmax

    @vis100rpmmax.setter
    def vis100rpmmax(self, vis100rpmmax):
        """Sets the vis100rpmmax of this MudProgramData.


        :param vis100rpmmax: The vis100rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis100rpmmax = vis100rpmmax

    @property
    def vis100rpmmin(self):
        """Gets the vis100rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis100rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis100rpmmin

    @vis100rpmmin.setter
    def vis100rpmmin(self, vis100rpmmin):
        """Sets the vis100rpmmin of this MudProgramData.


        :param vis100rpmmin: The vis100rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis100rpmmin = vis100rpmmin

    @property
    def vis200rpmmax(self):
        """Gets the vis200rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis200rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis200rpmmax

    @vis200rpmmax.setter
    def vis200rpmmax(self, vis200rpmmax):
        """Sets the vis200rpmmax of this MudProgramData.


        :param vis200rpmmax: The vis200rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis200rpmmax = vis200rpmmax

    @property
    def vis200rpmmin(self):
        """Gets the vis200rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis200rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis200rpmmin

    @vis200rpmmin.setter
    def vis200rpmmin(self, vis200rpmmin):
        """Sets the vis200rpmmin of this MudProgramData.


        :param vis200rpmmin: The vis200rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis200rpmmin = vis200rpmmin

    @property
    def vis300rpmmax(self):
        """Gets the vis300rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis300rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis300rpmmax

    @vis300rpmmax.setter
    def vis300rpmmax(self, vis300rpmmax):
        """Sets the vis300rpmmax of this MudProgramData.


        :param vis300rpmmax: The vis300rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis300rpmmax = vis300rpmmax

    @property
    def vis300rpmmin(self):
        """Gets the vis300rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis300rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis300rpmmin

    @vis300rpmmin.setter
    def vis300rpmmin(self, vis300rpmmin):
        """Sets the vis300rpmmin of this MudProgramData.


        :param vis300rpmmin: The vis300rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis300rpmmin = vis300rpmmin

    @property
    def vis30rpmmax(self):
        """Gets the vis30rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis30rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis30rpmmax

    @vis30rpmmax.setter
    def vis30rpmmax(self, vis30rpmmax):
        """Sets the vis30rpmmax of this MudProgramData.


        :param vis30rpmmax: The vis30rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis30rpmmax = vis30rpmmax

    @property
    def vis30rpmmin(self):
        """Gets the vis30rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis30rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis30rpmmin

    @vis30rpmmin.setter
    def vis30rpmmin(self, vis30rpmmin):
        """Sets the vis30rpmmin of this MudProgramData.


        :param vis30rpmmin: The vis30rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis30rpmmin = vis30rpmmin

    @property
    def vis3rpmmax(self):
        """Gets the vis3rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis3rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis3rpmmax

    @vis3rpmmax.setter
    def vis3rpmmax(self, vis3rpmmax):
        """Sets the vis3rpmmax of this MudProgramData.


        :param vis3rpmmax: The vis3rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis3rpmmax = vis3rpmmax

    @property
    def vis3rpmmin(self):
        """Gets the vis3rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis3rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis3rpmmin

    @vis3rpmmin.setter
    def vis3rpmmin(self, vis3rpmmin):
        """Sets the vis3rpmmin of this MudProgramData.


        :param vis3rpmmin: The vis3rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis3rpmmin = vis3rpmmin

    @property
    def vis600rpmmax(self):
        """Gets the vis600rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis600rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis600rpmmax

    @vis600rpmmax.setter
    def vis600rpmmax(self, vis600rpmmax):
        """Sets the vis600rpmmax of this MudProgramData.


        :param vis600rpmmax: The vis600rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis600rpmmax = vis600rpmmax

    @property
    def vis600rpmmin(self):
        """Gets the vis600rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis600rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis600rpmmin

    @vis600rpmmin.setter
    def vis600rpmmin(self, vis600rpmmin):
        """Sets the vis600rpmmin of this MudProgramData.


        :param vis600rpmmin: The vis600rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis600rpmmin = vis600rpmmin

    @property
    def vis60rpmmax(self):
        """Gets the vis60rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis60rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis60rpmmax

    @vis60rpmmax.setter
    def vis60rpmmax(self, vis60rpmmax):
        """Sets the vis60rpmmax of this MudProgramData.


        :param vis60rpmmax: The vis60rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis60rpmmax = vis60rpmmax

    @property
    def vis60rpmmin(self):
        """Gets the vis60rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis60rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis60rpmmin

    @vis60rpmmin.setter
    def vis60rpmmin(self, vis60rpmmin):
        """Sets the vis60rpmmin of this MudProgramData.


        :param vis60rpmmin: The vis60rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis60rpmmin = vis60rpmmin

    @property
    def vis6rpmmax(self):
        """Gets the vis6rpmmax of this MudProgramData.  # noqa: E501


        :return: The vis6rpmmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis6rpmmax

    @vis6rpmmax.setter
    def vis6rpmmax(self, vis6rpmmax):
        """Sets the vis6rpmmax of this MudProgramData.


        :param vis6rpmmax: The vis6rpmmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis6rpmmax = vis6rpmmax

    @property
    def vis6rpmmin(self):
        """Gets the vis6rpmmin of this MudProgramData.  # noqa: E501


        :return: The vis6rpmmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._vis6rpmmin

    @vis6rpmmin.setter
    def vis6rpmmin(self, vis6rpmmin):
        """Sets the vis6rpmmin of this MudProgramData.


        :param vis6rpmmin: The vis6rpmmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._vis6rpmmin = vis6rpmmin

    @property
    def waterpercentmax(self):
        """Gets the waterpercentmax of this MudProgramData.  # noqa: E501


        :return: The waterpercentmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._waterpercentmax

    @waterpercentmax.setter
    def waterpercentmax(self, waterpercentmax):
        """Sets the waterpercentmax of this MudProgramData.


        :param waterpercentmax: The waterpercentmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._waterpercentmax = waterpercentmax

    @property
    def waterpercentmin(self):
        """Gets the waterpercentmin of this MudProgramData.  # noqa: E501


        :return: The waterpercentmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._waterpercentmin

    @waterpercentmin.setter
    def waterpercentmin(self, waterpercentmin):
        """Sets the waterpercentmin of this MudProgramData.


        :param waterpercentmin: The waterpercentmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._waterpercentmin = waterpercentmin

    @property
    def yieldptmax(self):
        """Gets the yieldptmax of this MudProgramData.  # noqa: E501


        :return: The yieldptmax of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._yieldptmax

    @yieldptmax.setter
    def yieldptmax(self, yieldptmax):
        """Sets the yieldptmax of this MudProgramData.


        :param yieldptmax: The yieldptmax of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._yieldptmax = yieldptmax

    @property
    def yieldptmin(self):
        """Gets the yieldptmin of this MudProgramData.  # noqa: E501


        :return: The yieldptmin of this MudProgramData.  # noqa: E501
        :rtype: float
        """
        return self._yieldptmin

    @yieldptmin.setter
    def yieldptmin(self, yieldptmin):
        """Sets the yieldptmin of this MudProgramData.


        :param yieldptmin: The yieldptmin of this MudProgramData.  # noqa: E501
        :type: float
        """

        self._yieldptmin = yieldptmin

    @property
    def systag(self):
        """Gets the systag of this MudProgramData.  # noqa: E501


        :return: The systag of this MudProgramData.  # noqa: E501
        :rtype: str
        """
        return self._systag

    @systag.setter
    def systag(self, systag):
        """Sets the systag of this MudProgramData.


        :param systag: The systag of this MudProgramData.  # noqa: E501
        :type: str
        """

        self._systag = systag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MudProgramData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MudProgramData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
