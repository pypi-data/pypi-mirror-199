[tool.poetry]
name = "transformer-smaller-training-vocab"
version = "0.2.3"
description = "Temporary remove unused tokens during training to save ram and speed."
authors = ["Benedikt Fuchs <benedikt.fuchs.staw@hotmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "transformer_smaller_training_vocab" }]
repository = "https://github.com/helpmefindaname/transformer-smaller-training-vocab"

[tool.poetry.dependencies]
python = "^3.7"
datasets = "^2.0.0"
transformers = { version = "^4.1", extras = ["torch"] }
torch = ">=1.8.0 <3.0.0"
sentencepiece = "^0.1.97"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-mypy = "^0.10.3"
black = "^22.12.0"
ruff = "^0.0.205"
pytest-github-actions-annotate-failures = "^0.1.8"
pytest-xdist = "^3.1.0"
pytest-cov = "^4.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
target-version = ['py310']


[tool.ruff]
line-length = 120
target-version = 'py310'

[tool.pytest.ini_options]
addopts = "--mypy -n auto"
filterwarnings = [
    "error",
    "ignore:SelectableGroups dict interface is deprecated. Use select.",
    'ignore:distutils Version classes are deprecated. Use packaging.version instead.', # numpy uses deprecated version check
]  # Convert all warnings to errors, imo warnings that are not treated as errors will be ignored by most people.
# My approach is to throw an error and let the programmar check if the error is intended (then add it to the filterwarnings) or not (then fix it!)



[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
warn_unused_ignores = true
warn_no_return = true
