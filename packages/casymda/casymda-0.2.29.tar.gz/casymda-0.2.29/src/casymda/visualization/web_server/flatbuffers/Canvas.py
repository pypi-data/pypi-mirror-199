# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Canvas(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAsCanvas(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Canvas()
        x.Init(buf, n + offset)
        return x

    # Canvas
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Canvas
    def Content(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from casymda.visualization.web_server.flatbuffers.Element import Element

            obj = Element()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Canvas
    def ContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Canvas
    def ContentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def CanvasStart(builder):
    builder.StartObject(1)


def CanvasAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0
    )


def CanvasStartContentVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def CanvasEnd(builder):
    return builder.EndObject()
