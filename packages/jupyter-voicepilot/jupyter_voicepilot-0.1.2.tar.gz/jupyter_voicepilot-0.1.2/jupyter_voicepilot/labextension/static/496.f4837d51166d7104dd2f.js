"use strict";(self.webpackChunkvoicepilot=self.webpackChunkvoicepilot||[]).push([[496],{496:(e,o,t)=>{t.r(o),t.d(o,{default:()=>y});var s=t(1194),n=t(2884),l=t(5923),i=t(3215),r=t(5679);function c(e,o){const t=e.content.activeCell;t?t.model.value.text=o:console.error("Could not insert cell because active cell is null")}class a{constructor(){this.mediaRecorder=null,this.chunks=[]}startRecording(){navigator.mediaDevices.getUserMedia({audio:!0}).then((e=>{this.mediaRecorder=new MediaRecorder(e,{mimeType:"audio/webm"}),this.mediaRecorder.addEventListener("dataavailable",(e=>{this.chunks.push(e.data)})),this.mediaRecorder.start()})).catch((e=>console.error(e)))}async stopRecording(){return new Promise((e=>{var o,t;null===(o=this.mediaRecorder)||void 0===o||o.addEventListener("stop",(()=>{const o=new Blob(this.chunks,{type:"audio/webm"});this.chunks=[],e(o)})),null===(t=this.mediaRecorder)||void 0===t||t.stop()}))}}var d=t(3931);class u extends FormData{getHeaders(){return{}}}class h{set apiKey(e){const o=new d.Configuration({apiKey:e,formDataCtor:u});this.openai=new d.OpenAIApi(o)}set maxTokens(e){this._maxTokens=e}createPrompt(e){return`Context: Python, format the code output with 4 spaces \n Rules: Return the code only.${e}`}showError(e){const o=e.response.data.error.message;(0,n.showErrorMessage)("OpenAI Error",o)}async getCode(e){var o;const t=await(null===(o=this.openai)||void 0===o?void 0:o.createCompletion({model:"text-davinci-003",prompt:this.createPrompt(e),max_tokens:this._maxTokens||256}).catch((e=>(this.showError(e),null))));return null==t?void 0:t.data.choices[0].text}async getChatAnswer(e){var o,t;const s=await(null===(o=this.openai)||void 0===o?void 0:o.createChatCompletion({model:"gpt-3.5-turbo",messages:[{role:"system",content:"You are a helpful assistant."},{role:"user",content:e}]}).catch((e=>(this.showError(e),null))));return null===(t=null==s?void 0:s.data.choices[0].message)||void 0===t?void 0:t.content}async getTranscript(e){var o;const t=new File([e],"input.webm",{type:"audio/webm"}),s=await(null===(o=this.openai)||void 0===o?void 0:o.createTranscription(t,"whisper-1").catch((e=>(this.showError(e),null))));return null==s?void 0:s.data.text}}function g(e){r.NotebookActions.changeCellType(e,"markdown")}function p(e){r.NotebookActions.changeCellType(e,"code")}class m{constructor(){this.registry={};for(const e of["run cell","run the cell","run","execute"])this.registry[e]=[r.NotebookActions.run];for(const e of["run all","run all cells","execute all","execute all cells"])this.registry[e]=[r.NotebookActions.runAll];for(const e of["run and advance","run cell and advance","execute and advance"])this.registry[e]=[r.NotebookActions.runAndAdvance];for(const e of["run all above","run all cells above","execute all above","execute all cells above"])this.registry[e]=[r.NotebookActions.runAllAbove];for(const e of["run all below","run all cells below","execute all below","execute all cells below"])this.registry[e]=[r.NotebookActions.runAllBelow];for(const e of["run and insert","run cell and insert","execute and insert"])this.registry[e]=[r.NotebookActions.runAndInsert];for(const e of["delete","delete cell","delete the cell","delete cells","delete the cells"])this.registry[e]=[r.NotebookActions.deleteCells];for(const e of["clear all outputs","clear all the outputs","clear outputs"])this.registry[e]=[r.NotebookActions.clearAllOutputs];for(const e of["select last run cell","select the last run cell"])this.registry[e]=[r.NotebookActions.selectLastRunCell];this.registry.undo=[r.NotebookActions.undo],this.registry.redo=[r.NotebookActions.redo];for(const e of["copy","copy cell","copy cells"])this.registry[e]=[r.NotebookActions.copy];for(const e of["cut","cut cell","cut cells"])this.registry[e]=[r.NotebookActions.cut];for(const e of["paste","paste cell","paste cells"])this.registry[e]=[r.NotebookActions.paste];for(const e of["to markdown","convert to markdown","markdown","markdown cell","cast to markdown"])this.registry[e]=[g];for(const e of["to code","convert to code","code","code cell","cast to code"])this.registry[e]=[p];for(const e of["insert code cell below","add code cell below","insert cell below","add cell below","insert cell below"])this.registry[e]=[r.NotebookActions.insertBelow];for(const e of["insert code cell above","add code cell above","insert cell above","add cell above","insert cell above"])this.registry[e]=[r.NotebookActions.insertAbove];for(const e of["insert markdown cell below","add markdown cell below"])this.registry[e]=[r.NotebookActions.insertBelow,g];for(const e of["insert markdown cell above","add markdown cell above"])this.registry[e]=[r.NotebookActions.insertAbove,g];console.log(this.registry)}preprocess_cmd(e){return e.replace(/[^\w\s]/gi,"").toLowerCase()}execute(e,o){if((o=this.preprocess_cmd(o))in this.registry){const t=this.registry[o];for(const o of t)o(e.content,e.sessionContext);return!0}return!1}}const v=new i.LabIcon({name:"jupyterlab:record-vinyl",svgstr:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Pro 6.3.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --\x3e<path d="M0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm256-96a96 96 0 1 1 0 192 96 96 0 1 1 0-192zm0 224a128 128 0 1 0 0-256 128 128 0 1 0 0 256zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z"/></svg>'});class b{constructor(){this.button=null,this.recorder=new a,this.aiClient=new h,this.cmdHandler=new m}set apiKey(e){console.log("Setting API key"),this.aiClient.apiKey=e}set maxTokens(e){console.log("Setting max tokens"),this.aiClient.maxTokens=e}toggleRecording(){var e;null===(e=this.button)||void 0===e||e.onClick()}createNew(e,o){return this.button=new n.ToolbarButton({className:"vp-button",icon:v,pressedTooltip:"Stop recording...",label:"Voice Pilot",onClick:async()=>{var o,t,s;if(null===(null===(o=this.aiClient)||void 0===o?void 0:o.apiKey))return void(0,n.showErrorMessage)("Voice Pilot Error","Please set your OpenAI API key in the settings");const l=this.button.hasClass("vp-recording");if(this.button.toggleClass("vp-recording"),l){const o=await this.recorder.stopRecording();console.log(o);const s=await this.aiClient.getTranscript(o);if(console.log(s),this.cmdHandler.execute(e,s))console.log("Notebook action has been executed.");else if(s.toLowerCase().replace(/[^\w\s]/gi,"").startsWith("hey")){console.log("Calling ChatGPT");const o=await this.aiClient.getChatAnswer(s);!function(e,o){r.NotebookActions.changeCellType(e.content,"markdown");const t=e.content.activeCell;if(t)if(t.model&&t.model.value&&0===t.model.value.text.length)t?t.model.value.text=o:console.error("Could not insert cell because active cell is null");else{r.NotebookActions.insertBelow(e.content),r.NotebookActions.changeCellType(e.content,"markdown");const t=e.content.activeCell;t?t.model.value.text=o:console.error("Could not insert cell because active cell is null")}}(e,o)}else if("code"===(null===(t=e.content.activeCell)||void 0===t?void 0:t.model.type)){const o=await this.aiClient.getCode(s);c(e,o)}else c(e,s);console.log("Recording stopped")}else null===(s=this.recorder)||void 0===s||s.startRecording(),console.log("Recording started")},tooltip:"Start recording..."}),e.toolbar.insertItem(10,"vp-button",this.button),new l.DisposableDelegate((()=>{var e;null===(e=this.button)||void 0===e||e.dispose()}))}}const w="voicepilot:plugin",y={id:w,autoStart:!0,requires:[s.ISettingRegistry,n.ICommandPalette],activate:(e,o,t)=>{console.log("JupyterLab extension voicepilot is activated!");const{commands:s,docRegistry:l}=e,i=new b;function r(e){const o=e.get("open_api_key").composite,t=e.get("max_tokens").composite;i.apiKey=o,i.maxTokens=t}l.addWidgetExtension("Notebook",i),t.addItem({command:"voicepilot:show-api-key",category:"VoicePilot"}),t.addItem({command:"voicepilot:toggle-button",category:"VoicePilot"}),s.addCommand("voicepilot:toggle-button",{label:"Toggle VoicePilot",execute:()=>{i.toggleRecording()}}),Promise.all([e.restored,null==o?void 0:o.load(w)]).then((([,e])=>{r(e),s.addCommand("voicepilot:show-api-key",{label:"Show API Key",execute:()=>{const o=null==e?void 0:e.get("open_api_key").composite;return i.apiKey=o,(0,n.showDialog)({title:"VoicePilot API Key",body:o,buttons:[n.Dialog.okButton()]})}}),null==e||e.changed.connect(r)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)}))}}}}]);