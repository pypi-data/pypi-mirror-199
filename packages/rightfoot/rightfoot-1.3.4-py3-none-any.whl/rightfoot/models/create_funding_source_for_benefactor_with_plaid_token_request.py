# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateFundingSourceForBenefactorWithPlaidTokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'benefactor_uuid': 'str',
        'plaid_public_token': 'str',
        'account_id': 'str'
    }

    attribute_map = {
        'benefactor_uuid': 'benefactorUuid',
        'plaid_public_token': 'plaidPublicToken',
        'account_id': 'accountId'
    }

    def __init__(self, benefactor_uuid=None, plaid_public_token=None, account_id=None):  # noqa: E501
        """CreateFundingSourceForBenefactorWithPlaidTokenRequest - a model defined in Swagger"""  # noqa: E501
        self._benefactor_uuid = None
        self._plaid_public_token = None
        self._account_id = None
        self.discriminator = None
        self.benefactor_uuid = benefactor_uuid
        self.plaid_public_token = plaid_public_token
        self.account_id = account_id

    @property
    def benefactor_uuid(self):
        """Gets the benefactor_uuid of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501

        Unique identifier generated by Rightfoot for Benefactor. If not provided, organizationUuid must be set.   # noqa: E501

        :return: The benefactor_uuid of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._benefactor_uuid

    @benefactor_uuid.setter
    def benefactor_uuid(self, benefactor_uuid):
        """Sets the benefactor_uuid of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.

        Unique identifier generated by Rightfoot for Benefactor. If not provided, organizationUuid must be set.   # noqa: E501

        :param benefactor_uuid: The benefactor_uuid of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501
        :type: str
        """
        if benefactor_uuid is None:
            raise ValueError("Invalid value for `benefactor_uuid`, must not be `None`")  # noqa: E501

        self._benefactor_uuid = benefactor_uuid

    @property
    def plaid_public_token(self):
        """Gets the plaid_public_token of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501

        Public token provided by Plaid Link representing the benefactor’s bank account. Grants Rightfoot permission to draw from the account backing this token. Either this and accountId are required or dwollaProcessorToken is required.   # noqa: E501

        :return: The plaid_public_token of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._plaid_public_token

    @plaid_public_token.setter
    def plaid_public_token(self, plaid_public_token):
        """Sets the plaid_public_token of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.

        Public token provided by Plaid Link representing the benefactor’s bank account. Grants Rightfoot permission to draw from the account backing this token. Either this and accountId are required or dwollaProcessorToken is required.   # noqa: E501

        :param plaid_public_token: The plaid_public_token of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501
        :type: str
        """
        if plaid_public_token is None:
            raise ValueError("Invalid value for `plaid_public_token`, must not be `None`")  # noqa: E501

        self._plaid_public_token = plaid_public_token

    @property
    def account_id(self):
        """Gets the account_id of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501

        Account ID from Plaid Link when a user selects a specific checking or savings bank account from the bank institution they log into. Either this and plaidPublicToken are required or dwollaProcessorToken is required.   # noqa: E501

        :return: The account_id of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.

        Account ID from Plaid Link when a user selects a specific checking or savings bank account from the bank institution they log into. Either this and plaidPublicToken are required or dwollaProcessorToken is required.   # noqa: E501

        :param account_id: The account_id of this CreateFundingSourceForBenefactorWithPlaidTokenRequest.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFundingSourceForBenefactorWithPlaidTokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFundingSourceForBenefactorWithPlaidTokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
