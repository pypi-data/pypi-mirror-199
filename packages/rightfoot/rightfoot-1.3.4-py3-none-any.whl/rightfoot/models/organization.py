# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'balance': 'int'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'balance': 'balance'
    }

    def __init__(self, uuid=None, name=None, balance=None):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._name = None
        self._balance = None
        self.discriminator = None
        self.uuid = uuid
        self.name = name
        self.balance = balance

    @property
    def uuid(self):
        """Gets the uuid of this Organization.  # noqa: E501

        Unique identifier generated by Rightfoot.  # noqa: E501

        :return: The uuid of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Organization.

        Unique identifier generated by Rightfoot.  # noqa: E501

        :param uuid: The uuid of this Organization.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501

        The human readable name for the business. Either its legal name or dba name.   # noqa: E501

        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The human readable name for the business. Either its legal name or dba name.   # noqa: E501

        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def balance(self):
        """Gets the balance of this Organization.  # noqa: E501

        Balance, in cents USD, held on behalf of the Organization pending distribution to loan servicer accounts.   # noqa: E501

        :return: The balance of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Organization.

        Balance, in cents USD, held on behalf of the Organization pending distribution to loan servicer accounts.   # noqa: E501

        :param balance: The balance of this Organization.  # noqa: E501
        :type: int
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
