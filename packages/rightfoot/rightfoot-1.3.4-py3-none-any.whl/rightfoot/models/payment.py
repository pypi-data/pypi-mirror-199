# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Payment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'funding_source_uuid': 'str',
        'loan_uuid': 'str',
        'beneficiary_uuid': 'str',
        'payment_amount': 'int',
        'status': 'str',
        'status_reason': 'str',
        'description': 'str',
        'time_created': 'int',
        'time_completed': 'int',
        'withdrawal_transfer_uuid': 'str',
        'return_transfer_uuid': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'funding_source_uuid': 'fundingSourceUuid',
        'loan_uuid': 'loanUuid',
        'beneficiary_uuid': 'beneficiaryUuid',
        'payment_amount': 'paymentAmount',
        'status': 'status',
        'status_reason': 'statusReason',
        'description': 'description',
        'time_created': 'timeCreated',
        'time_completed': 'timeCompleted',
        'withdrawal_transfer_uuid': 'withdrawalTransferUuid',
        'return_transfer_uuid': 'returnTransferUuid'
    }

    def __init__(self, uuid=None, funding_source_uuid=None, loan_uuid=None, beneficiary_uuid=None, payment_amount=None, status=None, status_reason=None, description=None, time_created=None, time_completed=None, withdrawal_transfer_uuid=None, return_transfer_uuid=None):  # noqa: E501
        """Payment - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._funding_source_uuid = None
        self._loan_uuid = None
        self._beneficiary_uuid = None
        self._payment_amount = None
        self._status = None
        self._status_reason = None
        self._description = None
        self._time_created = None
        self._time_completed = None
        self._withdrawal_transfer_uuid = None
        self._return_transfer_uuid = None
        self.discriminator = None
        self.uuid = uuid
        self.funding_source_uuid = funding_source_uuid
        self.loan_uuid = loan_uuid
        self.beneficiary_uuid = beneficiary_uuid
        self.payment_amount = payment_amount
        self.status = status
        self.status_reason = status_reason
        if description is not None:
            self.description = description
        self.time_created = time_created
        if time_completed is not None:
            self.time_completed = time_completed
        if withdrawal_transfer_uuid is not None:
            self.withdrawal_transfer_uuid = withdrawal_transfer_uuid
        if return_transfer_uuid is not None:
            self.return_transfer_uuid = return_transfer_uuid

    @property
    def uuid(self):
        """Gets the uuid of this Payment.  # noqa: E501

        Unique identifier generated by Rightfoot for payment.  # noqa: E501

        :return: The uuid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Payment.

        Unique identifier generated by Rightfoot for payment.  # noqa: E501

        :param uuid: The uuid of this Payment.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def funding_source_uuid(self):
        """Gets the funding_source_uuid of this Payment.  # noqa: E501

        Identifier for the `FundingSource` making this payment.  # noqa: E501

        :return: The funding_source_uuid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._funding_source_uuid

    @funding_source_uuid.setter
    def funding_source_uuid(self, funding_source_uuid):
        """Sets the funding_source_uuid of this Payment.

        Identifier for the `FundingSource` making this payment.  # noqa: E501

        :param funding_source_uuid: The funding_source_uuid of this Payment.  # noqa: E501
        :type: str
        """
        if funding_source_uuid is None:
            raise ValueError("Invalid value for `funding_source_uuid`, must not be `None`")  # noqa: E501

        self._funding_source_uuid = funding_source_uuid

    @property
    def loan_uuid(self):
        """Gets the loan_uuid of this Payment.  # noqa: E501

        Identifier for the `Loan` receiving this payment.  # noqa: E501

        :return: The loan_uuid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._loan_uuid

    @loan_uuid.setter
    def loan_uuid(self, loan_uuid):
        """Sets the loan_uuid of this Payment.

        Identifier for the `Loan` receiving this payment.  # noqa: E501

        :param loan_uuid: The loan_uuid of this Payment.  # noqa: E501
        :type: str
        """
        if loan_uuid is None:
            raise ValueError("Invalid value for `loan_uuid`, must not be `None`")  # noqa: E501

        self._loan_uuid = loan_uuid

    @property
    def beneficiary_uuid(self):
        """Gets the beneficiary_uuid of this Payment.  # noqa: E501

        Identifier for the beneficiary benefiting from this payment. Deprecated: Prefer `loanUuid`, looking up `Loan.beneficiaryUuid`.   # noqa: E501

        :return: The beneficiary_uuid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_uuid

    @beneficiary_uuid.setter
    def beneficiary_uuid(self, beneficiary_uuid):
        """Sets the beneficiary_uuid of this Payment.

        Identifier for the beneficiary benefiting from this payment. Deprecated: Prefer `loanUuid`, looking up `Loan.beneficiaryUuid`.   # noqa: E501

        :param beneficiary_uuid: The beneficiary_uuid of this Payment.  # noqa: E501
        :type: str
        """
        if beneficiary_uuid is None:
            raise ValueError("Invalid value for `beneficiary_uuid`, must not be `None`")  # noqa: E501

        self._beneficiary_uuid = beneficiary_uuid

    @property
    def payment_amount(self):
        """Gets the payment_amount of this Payment.  # noqa: E501

        Amount paid to loan, in cents USD.  # noqa: E501

        :return: The payment_amount of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this Payment.

        Amount paid to loan, in cents USD.  # noqa: E501

        :param payment_amount: The payment_amount of this Payment.  # noqa: E501
        :type: int
        """
        if payment_amount is None:
            raise ValueError("Invalid value for `payment_amount`, must not be `None`")  # noqa: E501

        self._payment_amount = payment_amount

    @property
    def status(self):
        """Gets the status of this Payment.  # noqa: E501

        Status of the payment.  # noqa: E501

        :return: The status of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payment.

        Status of the payment.  # noqa: E501

        :param status: The status of this Payment.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["PENDING", "ACCEPTED", "COMPLETED", "RETURNED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this Payment.  # noqa: E501

        Detailed status reason. Contains more detail for presenting detail to users, rather than more programmatic process handling. This enum is meant to be extended regularly, whereas status is more stable.  * ACH_WITHDRAWAL_PENDING_SCHEDULING: ACH payment not yet scheduled with payment processor. Will be scheduled soon. Can still be cancelled.  * ACH_WITHDRAWAL_CANCELLED: ACH payment cancelled. Will not be processed by payment processor.  * ACH_WITHDRAWAL_SCHEDULED: ACH payment scheduled for processing. No longer cancellable.  * ACH_WITHDRAWAL_SUCCESSFUL: ACH payment successful from funding source. Funds now en route to destination.  * ACH_WITHDRAWAL_FAILED: ACH payment failed to process.  * ACH_WITHDRAWAL_RETURNED: ACH payment returned, potentially after successful. Funds were requested to be returned to funding source by bank.  * PAYMENT_DELIVERY_PENDING: Delivery to final destination is in progress, potentially through multiple hops. This status might expand into more detail in the future.  * PAYMENT_DELIVERY_FAILED: Delivery failed to process at loan servicer. Payment returning to funding source. This can happen if a loan servicer regresses confirmation.  * PAYMENT_DELIVERY_SUCCESSFUL: Delivery successful at loan servicer. Payment may take more time to appear in statement.   # noqa: E501

        :return: The status_reason of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this Payment.

        Detailed status reason. Contains more detail for presenting detail to users, rather than more programmatic process handling. This enum is meant to be extended regularly, whereas status is more stable.  * ACH_WITHDRAWAL_PENDING_SCHEDULING: ACH payment not yet scheduled with payment processor. Will be scheduled soon. Can still be cancelled.  * ACH_WITHDRAWAL_CANCELLED: ACH payment cancelled. Will not be processed by payment processor.  * ACH_WITHDRAWAL_SCHEDULED: ACH payment scheduled for processing. No longer cancellable.  * ACH_WITHDRAWAL_SUCCESSFUL: ACH payment successful from funding source. Funds now en route to destination.  * ACH_WITHDRAWAL_FAILED: ACH payment failed to process.  * ACH_WITHDRAWAL_RETURNED: ACH payment returned, potentially after successful. Funds were requested to be returned to funding source by bank.  * PAYMENT_DELIVERY_PENDING: Delivery to final destination is in progress, potentially through multiple hops. This status might expand into more detail in the future.  * PAYMENT_DELIVERY_FAILED: Delivery failed to process at loan servicer. Payment returning to funding source. This can happen if a loan servicer regresses confirmation.  * PAYMENT_DELIVERY_SUCCESSFUL: Delivery successful at loan servicer. Payment may take more time to appear in statement.   # noqa: E501

        :param status_reason: The status_reason of this Payment.  # noqa: E501
        :type: str
        """
        if status_reason is None:
            raise ValueError("Invalid value for `status_reason`, must not be `None`")  # noqa: E501
        allowed_values = ["ACH_WITHDRAWAL_PENDING_SCHEDULING", "ACH_WITHDRAWAL_CANCELLED", "ACH_WITHDRAWAL_SCHEDULED", "ACH_WITHDRAWAL_SUCCESSFUL", "ACH_WITHDRAWAL_FAILED", "ACH_WITHDRAWAL_RETURNED", "PAYMENT_DELIVERY_PENDING", "PAYMENT_DELIVERY_FAILED", "PAYMENT_DELIVERY_SUCCESSFUL"]  # noqa: E501
        if status_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `status_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(status_reason, allowed_values)
            )

        self._status_reason = status_reason

    @property
    def description(self):
        """Gets the description of this Payment.  # noqa: E501

        In the case of errors or other variants, provides a description of the failed state.   # noqa: E501

        :return: The description of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Payment.

        In the case of errors or other variants, provides a description of the failed state.   # noqa: E501

        :param description: The description of this Payment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def time_created(self):
        """Gets the time_created of this Payment.  # noqa: E501

        Time the payment was created, in Epoch seconds UTC.  # noqa: E501

        :return: The time_created of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Payment.

        Time the payment was created, in Epoch seconds UTC.  # noqa: E501

        :param time_created: The time_created of this Payment.  # noqa: E501
        :type: int
        """
        if time_created is None:
            raise ValueError("Invalid value for `time_created`, must not be `None`")  # noqa: E501

        self._time_created = time_created

    @property
    def time_completed(self):
        """Gets the time_completed of this Payment.  # noqa: E501

        Time the payment was completed with a loan servicer, in Epoch seconds UTC.   # noqa: E501

        :return: The time_completed of this Payment.  # noqa: E501
        :rtype: int
        """
        return self._time_completed

    @time_completed.setter
    def time_completed(self, time_completed):
        """Sets the time_completed of this Payment.

        Time the payment was completed with a loan servicer, in Epoch seconds UTC.   # noqa: E501

        :param time_completed: The time_completed of this Payment.  # noqa: E501
        :type: int
        """

        self._time_completed = time_completed

    @property
    def withdrawal_transfer_uuid(self):
        """Gets the withdrawal_transfer_uuid of this Payment.  # noqa: E501

        Unique identifier for the ACH Transfer object that is used for the ACH debit to provide funds for a Loan Payment. Set once a Payment is queued for an ACH transfer batch.   # noqa: E501

        :return: The withdrawal_transfer_uuid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._withdrawal_transfer_uuid

    @withdrawal_transfer_uuid.setter
    def withdrawal_transfer_uuid(self, withdrawal_transfer_uuid):
        """Sets the withdrawal_transfer_uuid of this Payment.

        Unique identifier for the ACH Transfer object that is used for the ACH debit to provide funds for a Loan Payment. Set once a Payment is queued for an ACH transfer batch.   # noqa: E501

        :param withdrawal_transfer_uuid: The withdrawal_transfer_uuid of this Payment.  # noqa: E501
        :type: str
        """

        self._withdrawal_transfer_uuid = withdrawal_transfer_uuid

    @property
    def return_transfer_uuid(self):
        """Gets the return_transfer_uuid of this Payment.  # noqa: E501

        Unique identifier for the ACH Transfer object that is used for the ACH credit to return funds for a faild Loan Payment. Set if a payment Payment is queued for an ACH transfer batch tor return.   # noqa: E501

        :return: The return_transfer_uuid of this Payment.  # noqa: E501
        :rtype: str
        """
        return self._return_transfer_uuid

    @return_transfer_uuid.setter
    def return_transfer_uuid(self, return_transfer_uuid):
        """Sets the return_transfer_uuid of this Payment.

        Unique identifier for the ACH Transfer object that is used for the ACH credit to return funds for a faild Loan Payment. Set if a payment Payment is queued for an ACH transfer batch tor return.   # noqa: E501

        :param return_transfer_uuid: The return_transfer_uuid of this Payment.  # noqa: E501
        :type: str
        """

        self._return_transfer_uuid = return_transfer_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Payment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
