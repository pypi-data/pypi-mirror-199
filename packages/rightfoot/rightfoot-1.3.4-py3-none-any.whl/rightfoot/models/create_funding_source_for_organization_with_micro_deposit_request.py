# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateFundingSourceForOrganizationWithMicroDepositRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_uuid': 'str',
        'routing_number': 'str',
        'account_number': 'str'
    }

    attribute_map = {
        'organization_uuid': 'organizationUuid',
        'routing_number': 'routingNumber',
        'account_number': 'accountNumber'
    }

    def __init__(self, organization_uuid=None, routing_number=None, account_number=None):  # noqa: E501
        """CreateFundingSourceForOrganizationWithMicroDepositRequest - a model defined in Swagger"""  # noqa: E501
        self._organization_uuid = None
        self._routing_number = None
        self._account_number = None
        self.discriminator = None
        self.organization_uuid = organization_uuid
        self.routing_number = routing_number
        self.account_number = account_number

    @property
    def organization_uuid(self):
        """Gets the organization_uuid of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501

        Unique identifier generated by Rightfoot for Organization. If not provided, beneficiaryUuid must be set.   # noqa: E501

        :return: The organization_uuid of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_uuid

    @organization_uuid.setter
    def organization_uuid(self, organization_uuid):
        """Sets the organization_uuid of this CreateFundingSourceForOrganizationWithMicroDepositRequest.

        Unique identifier generated by Rightfoot for Organization. If not provided, beneficiaryUuid must be set.   # noqa: E501

        :param organization_uuid: The organization_uuid of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501
        :type: str
        """
        if organization_uuid is None:
            raise ValueError("Invalid value for `organization_uuid`, must not be `None`")  # noqa: E501

        self._organization_uuid = organization_uuid

    @property
    def routing_number(self):
        """Gets the routing_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501

        The bank account number. Note: The account number is validated to check if it is a numeric string of 4-17 digits.   # noqa: E501

        :return: The routing_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.

        The bank account number. Note: The account number is validated to check if it is a numeric string of 4-17 digits.   # noqa: E501

        :param routing_number: The routing_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501
        :type: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")  # noqa: E501

        self._routing_number = routing_number

    @property
    def account_number(self):
        """Gets the account_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501

        A bank routing number that identifies a bank or credit union in the U.S.   # noqa: E501

        :return: The account_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.

        A bank routing number that identifies a bank or credit union in the U.S.   # noqa: E501

        :param account_number: The account_number of this CreateFundingSourceForOrganizationWithMicroDepositRequest.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFundingSourceForOrganizationWithMicroDepositRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFundingSourceForOrganizationWithMicroDepositRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
