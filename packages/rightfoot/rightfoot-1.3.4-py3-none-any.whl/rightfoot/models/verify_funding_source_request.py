# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VerifyFundingSourceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value1': 'str',
        'value2': 'str'
    }

    attribute_map = {
        'value1': 'value1',
        'value2': 'value2'
    }

    def __init__(self, value1=None, value2=None):  # noqa: E501
        """VerifyFundingSourceRequest - a model defined in Swagger"""  # noqa: E501
        self._value1 = None
        self._value2 = None
        self.discriminator = None
        self.value1 = value1
        self.value2 = value2

    @property
    def value1(self):
        """Gets the value1 of this VerifyFundingSourceRequest.  # noqa: E501

        First micro-deposit amount.   # noqa: E501

        :return: The value1 of this VerifyFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._value1

    @value1.setter
    def value1(self, value1):
        """Sets the value1 of this VerifyFundingSourceRequest.

        First micro-deposit amount.   # noqa: E501

        :param value1: The value1 of this VerifyFundingSourceRequest.  # noqa: E501
        :type: str
        """
        if value1 is None:
            raise ValueError("Invalid value for `value1`, must not be `None`")  # noqa: E501

        self._value1 = value1

    @property
    def value2(self):
        """Gets the value2 of this VerifyFundingSourceRequest.  # noqa: E501

        Second micro-deposit amount.   # noqa: E501

        :return: The value2 of this VerifyFundingSourceRequest.  # noqa: E501
        :rtype: str
        """
        return self._value2

    @value2.setter
    def value2(self, value2):
        """Sets the value2 of this VerifyFundingSourceRequest.

        Second micro-deposit amount.   # noqa: E501

        :param value2: The value2 of this VerifyFundingSourceRequest.  # noqa: E501
        :type: str
        """
        if value2 is None:
            raise ValueError("Invalid value for `value2`, must not be `None`")  # noqa: E501

        self._value2 = value2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifyFundingSourceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyFundingSourceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
