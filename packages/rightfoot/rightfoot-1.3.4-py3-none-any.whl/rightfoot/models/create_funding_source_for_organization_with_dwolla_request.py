# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreateFundingSourceForOrganizationWithDwollaRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_uuid': 'str',
        'dwolla_processor_token': 'str'
    }

    attribute_map = {
        'organization_uuid': 'organizationUuid',
        'dwolla_processor_token': 'dwollaProcessorToken'
    }

    def __init__(self, organization_uuid=None, dwolla_processor_token=None):  # noqa: E501
        """CreateFundingSourceForOrganizationWithDwollaRequest - a model defined in Swagger"""  # noqa: E501
        self._organization_uuid = None
        self._dwolla_processor_token = None
        self.discriminator = None
        self.organization_uuid = organization_uuid
        self.dwolla_processor_token = dwolla_processor_token

    @property
    def organization_uuid(self):
        """Gets the organization_uuid of this CreateFundingSourceForOrganizationWithDwollaRequest.  # noqa: E501

        Unique identifier generated by Rightfoot for Organization. If not provided, beneficiaryUuid must be set.   # noqa: E501

        :return: The organization_uuid of this CreateFundingSourceForOrganizationWithDwollaRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_uuid

    @organization_uuid.setter
    def organization_uuid(self, organization_uuid):
        """Sets the organization_uuid of this CreateFundingSourceForOrganizationWithDwollaRequest.

        Unique identifier generated by Rightfoot for Organization. If not provided, beneficiaryUuid must be set.   # noqa: E501

        :param organization_uuid: The organization_uuid of this CreateFundingSourceForOrganizationWithDwollaRequest.  # noqa: E501
        :type: str
        """
        if organization_uuid is None:
            raise ValueError("Invalid value for `organization_uuid`, must not be `None`")  # noqa: E501

        self._organization_uuid = organization_uuid

    @property
    def dwolla_processor_token(self):
        """Gets the dwolla_processor_token of this CreateFundingSourceForOrganizationWithDwollaRequest.  # noqa: E501

        Dwolla Processor Token generated from a Plaid Auth access token owned by the API application. Grants Rightfoot permission to draw from the account backing this token. Either this or plaidPublicToken and accountId is required.   # noqa: E501

        :return: The dwolla_processor_token of this CreateFundingSourceForOrganizationWithDwollaRequest.  # noqa: E501
        :rtype: str
        """
        return self._dwolla_processor_token

    @dwolla_processor_token.setter
    def dwolla_processor_token(self, dwolla_processor_token):
        """Sets the dwolla_processor_token of this CreateFundingSourceForOrganizationWithDwollaRequest.

        Dwolla Processor Token generated from a Plaid Auth access token owned by the API application. Grants Rightfoot permission to draw from the account backing this token. Either this or plaidPublicToken and accountId is required.   # noqa: E501

        :param dwolla_processor_token: The dwolla_processor_token of this CreateFundingSourceForOrganizationWithDwollaRequest.  # noqa: E501
        :type: str
        """
        if dwolla_processor_token is None:
            raise ValueError("Invalid value for `dwolla_processor_token`, must not be `None`")  # noqa: E501

        self._dwolla_processor_token = dwolla_processor_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFundingSourceForOrganizationWithDwollaRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFundingSourceForOrganizationWithDwollaRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
