# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Transfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'status': 'str',
        'amount': 'int',
        'funding_source_uuid': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'status': 'status',
        'amount': 'amount',
        'funding_source_uuid': 'fundingSourceUuid'
    }

    def __init__(self, uuid=None, status=None, amount=None, funding_source_uuid=None):  # noqa: E501
        """Transfer - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._status = None
        self._amount = None
        self._funding_source_uuid = None
        self.discriminator = None
        self.uuid = uuid
        self.status = status
        self.amount = amount
        self.funding_source_uuid = funding_source_uuid

    @property
    def uuid(self):
        """Gets the uuid of this Transfer.  # noqa: E501

        Unique identifier for the transfer.  # noqa: E501

        :return: The uuid of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Transfer.

        Unique identifier for the transfer.  # noqa: E501

        :param uuid: The uuid of this Transfer.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def status(self):
        """Gets the status of this Transfer.  # noqa: E501

        Indicates the status of the ACH transfer.  # noqa: E501

        :return: The status of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transfer.

        Indicates the status of the ACH transfer.  # noqa: E501

        :param status: The status of this Transfer.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["SCHEDULED", "RETURNED", "COMPLETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this Transfer.  # noqa: E501

        Amount, in cents USD, transfers out of (negative) or into (positive) the FundingSource.   # noqa: E501

        :return: The amount of this Transfer.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transfer.

        Amount, in cents USD, transfers out of (negative) or into (positive) the FundingSource.   # noqa: E501

        :param amount: The amount of this Transfer.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def funding_source_uuid(self):
        """Gets the funding_source_uuid of this Transfer.  # noqa: E501

        The identifier for the FundingSource that is being transacted against.  # noqa: E501

        :return: The funding_source_uuid of this Transfer.  # noqa: E501
        :rtype: str
        """
        return self._funding_source_uuid

    @funding_source_uuid.setter
    def funding_source_uuid(self, funding_source_uuid):
        """Sets the funding_source_uuid of this Transfer.

        The identifier for the FundingSource that is being transacted against.  # noqa: E501

        :param funding_source_uuid: The funding_source_uuid of this Transfer.  # noqa: E501
        :type: str
        """
        if funding_source_uuid is None:
            raise ValueError("Invalid value for `funding_source_uuid`, must not be `None`")  # noqa: E501

        self._funding_source_uuid = funding_source_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
