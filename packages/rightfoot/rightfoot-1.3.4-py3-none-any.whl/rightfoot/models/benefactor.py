# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Benefactor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'verification_status': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'verification_status': 'verificationStatus'
    }

    def __init__(self, uuid=None, first_name=None, last_name=None, verification_status=None):  # noqa: E501
        """Benefactor - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._first_name = None
        self._last_name = None
        self._verification_status = None
        self.discriminator = None
        self.uuid = uuid
        self.first_name = first_name
        self.last_name = last_name
        self.verification_status = verification_status

    @property
    def uuid(self):
        """Gets the uuid of this Benefactor.  # noqa: E501

        Unique identifier generated by Rightfoot.  # noqa: E501

        :return: The uuid of this Benefactor.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Benefactor.

        Unique identifier generated by Rightfoot.  # noqa: E501

        :param uuid: The uuid of this Benefactor.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def first_name(self):
        """Gets the first_name of this Benefactor.  # noqa: E501

        The given name of the benefactor.  # noqa: E501

        :return: The first_name of this Benefactor.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Benefactor.

        The given name of the benefactor.  # noqa: E501

        :param first_name: The first_name of this Benefactor.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Benefactor.  # noqa: E501

        The family name of the benefactor.  # noqa: E501

        :return: The last_name of this Benefactor.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Benefactor.

        The family name of the benefactor.  # noqa: E501

        :param last_name: The last_name of this Benefactor.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def verification_status(self):
        """Gets the verification_status of this Benefactor.  # noqa: E501

        The verification status of the benefactor.  # noqa: E501

        :return: The verification_status of this Benefactor.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this Benefactor.

        The verification status of the benefactor.  # noqa: E501

        :param verification_status: The verification_status of this Benefactor.  # noqa: E501
        :type: str
        """
        if verification_status is None:
            raise ValueError("Invalid value for `verification_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNVERIFIED", "VERIFIED", "FAILED"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Benefactor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Benefactor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
