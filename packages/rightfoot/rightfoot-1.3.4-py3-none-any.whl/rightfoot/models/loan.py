# coding: utf-8

"""
    Rightfoot Loan Repayment

    This API provides loan repayment. You can find out more about Rightfoot at [docs.rightfoot.com](https://docs.rightfoot.com).   # noqa: E501

    OpenAPI spec version: 1.3.2
    Contact: engineering@rightfoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Loan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'beneficiary_uuid': 'str',
        'account_number': 'str',
        'status': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'beneficiary_uuid': 'beneficiaryUuid',
        'account_number': 'accountNumber',
        'status': 'status'
    }

    def __init__(self, uuid=None, beneficiary_uuid=None, account_number=None, status=None):  # noqa: E501
        """Loan - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._beneficiary_uuid = None
        self._account_number = None
        self._status = None
        self.discriminator = None
        self.uuid = uuid
        self.beneficiary_uuid = beneficiary_uuid
        self.account_number = account_number
        self.status = status

    @property
    def uuid(self):
        """Gets the uuid of this Loan.  # noqa: E501

        Unique identifier for future API calls to reference a created loan.   # noqa: E501

        :return: The uuid of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Loan.

        Unique identifier for future API calls to reference a created loan.   # noqa: E501

        :param uuid: The uuid of this Loan.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def beneficiary_uuid(self):
        """Gets the beneficiary_uuid of this Loan.  # noqa: E501

        Identifier for the `Beneficiary` that holds this loan.  # noqa: E501

        :return: The beneficiary_uuid of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._beneficiary_uuid

    @beneficiary_uuid.setter
    def beneficiary_uuid(self, beneficiary_uuid):
        """Sets the beneficiary_uuid of this Loan.

        Identifier for the `Beneficiary` that holds this loan.  # noqa: E501

        :param beneficiary_uuid: The beneficiary_uuid of this Loan.  # noqa: E501
        :type: str
        """
        if beneficiary_uuid is None:
            raise ValueError("Invalid value for `beneficiary_uuid`, must not be `None`")  # noqa: E501

        self._beneficiary_uuid = beneficiary_uuid

    @property
    def account_number(self):
        """Gets the account_number of this Loan.  # noqa: E501

        Masked account number for the student loan account. Typically will include last four characters of account number, with preceding characters masked with asterisks (`*`), but some accounts might vary in masked representation.   # noqa: E501

        :return: The account_number of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Loan.

        Masked account number for the student loan account. Typically will include last four characters of account number, with preceding characters masked with asterisks (`*`), but some accounts might vary in masked representation.   # noqa: E501

        :param account_number: The account_number of this Loan.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    @property
    def status(self):
        """Gets the status of this Loan.  # noqa: E501

        Status of the loan.  # noqa: E501

        :return: The status of this Loan.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Loan.

        Status of the loan.  # noqa: E501

        :param status: The status of this Loan.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Loan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Loan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
