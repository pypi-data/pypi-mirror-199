# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _context
else:
    import _context

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import opencmiss.zinc.font
import opencmiss.zinc.graphics
import opencmiss.zinc.field
import opencmiss.zinc.differentialoperator
import opencmiss.zinc.element
import opencmiss.zinc.node
import opencmiss.zinc.fieldassignment
import opencmiss.zinc.fieldcache
import opencmiss.zinc.fieldmodule
import opencmiss.zinc.scenecoordinatesystem
import opencmiss.zinc.timesequence
import opencmiss.zinc.optimisation
import opencmiss.zinc.fieldsmoothing
import opencmiss.zinc.fieldparameters
import opencmiss.zinc.fieldrange
import opencmiss.zinc.region
import opencmiss.zinc.scene
import opencmiss.zinc.scenefilter
import opencmiss.zinc.selection
import opencmiss.zinc.timekeeper
import opencmiss.zinc.timenotifier
import opencmiss.zinc.scenepicker
import opencmiss.zinc.sceneviewer
import opencmiss.zinc.light
import opencmiss.zinc.shader
import opencmiss.zinc.spectrum
import opencmiss.zinc.streamscene
import opencmiss.zinc.stream
import opencmiss.zinc.streamregion
import opencmiss.zinc.streamimage
import opencmiss.zinc.glyph
import opencmiss.zinc.material
import opencmiss.zinc.tessellation
import opencmiss.zinc.logger
class Context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _context.Context_swiginit(self, _context.new_Context(*args))
    __swig_destroy__ = _context.delete_Context

    def isValid(self):
        return _context.Context_isValid(self)

    def getId(self):
        return _context.Context_getId(self)

    def getName(self):
        return _context.Context_getName(self)

    def getVersion(self):
        return _context.Context_getVersion(self)

    def getRevision(self):
        return _context.Context_getRevision(self)

    def getVersionString(self):
        return _context.Context_getVersionString(self)

    def createRegion(self):
        return _context.Context_createRegion(self)

    def getDefaultRegion(self):
        return _context.Context_getDefaultRegion(self)

    def setDefaultRegion(self, region):
        return _context.Context_setDefaultRegion(self, region)

    def getFontmodule(self):
        return _context.Context_getFontmodule(self)

    def getGlyphmodule(self):
        return _context.Context_getGlyphmodule(self)

    def getLightmodule(self):
        return _context.Context_getLightmodule(self)

    def getLogger(self):
        return _context.Context_getLogger(self)

    def getMaterialmodule(self):
        return _context.Context_getMaterialmodule(self)

    def getScenefiltermodule(self):
        return _context.Context_getScenefiltermodule(self)

    def getSceneviewermodule(self):
        return _context.Context_getSceneviewermodule(self)

    def getShadermodule(self):
        return _context.Context_getShadermodule(self)

    def getSpectrummodule(self):
        return _context.Context_getSpectrummodule(self)

    def getTessellationmodule(self):
        return _context.Context_getTessellationmodule(self)

    def getTimekeepermodule(self):
        return _context.Context_getTimekeepermodule(self)

    def __eq__(self, other):
        return _context.Context___eq__(self, other)

# Register Context in _context:
_context.Context_swigregister(Context)


def __eq__(*args):
    return _context.__eq__(*args)


