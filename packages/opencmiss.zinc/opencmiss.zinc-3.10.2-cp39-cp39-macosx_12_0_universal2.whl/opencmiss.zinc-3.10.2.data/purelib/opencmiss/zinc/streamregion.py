# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _streamregion
else:
    import _streamregion

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import opencmiss.zinc.field
import opencmiss.zinc.differentialoperator
import opencmiss.zinc.element
import opencmiss.zinc.node
import opencmiss.zinc.fieldassignment
import opencmiss.zinc.fieldcache
import opencmiss.zinc.fieldmodule
import opencmiss.zinc.scenecoordinatesystem
import opencmiss.zinc.timesequence
import opencmiss.zinc.optimisation
import opencmiss.zinc.fieldsmoothing
import opencmiss.zinc.fieldparameters
import opencmiss.zinc.fieldrange
import opencmiss.zinc.region
import opencmiss.zinc.context
import opencmiss.zinc.font
import opencmiss.zinc.graphics
import opencmiss.zinc.glyph
import opencmiss.zinc.material
import opencmiss.zinc.spectrum
import opencmiss.zinc.tessellation
import opencmiss.zinc.light
import opencmiss.zinc.logger
import opencmiss.zinc.scenefilter
import opencmiss.zinc.sceneviewer
import opencmiss.zinc.scene
import opencmiss.zinc.selection
import opencmiss.zinc.timekeeper
import opencmiss.zinc.timenotifier
import opencmiss.zinc.scenepicker
import opencmiss.zinc.shader
import opencmiss.zinc.streamscene
import opencmiss.zinc.stream
import opencmiss.zinc.streamimage
class StreaminformationRegion(opencmiss.zinc.stream.Streaminformation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _streamregion.StreaminformationRegion_swiginit(self, _streamregion.new_StreaminformationRegion(*args))

    def isValid(self):
        return _streamregion.StreaminformationRegion_isValid(self)
    ATTRIBUTE_INVALID = _streamregion.StreaminformationRegion_ATTRIBUTE_INVALID
    ATTRIBUTE_TIME = _streamregion.StreaminformationRegion_ATTRIBUTE_TIME
    FILE_FORMAT_INVALID = _streamregion.StreaminformationRegion_FILE_FORMAT_INVALID
    FILE_FORMAT_AUTOMATIC = _streamregion.StreaminformationRegion_FILE_FORMAT_AUTOMATIC
    FILE_FORMAT_EX = _streamregion.StreaminformationRegion_FILE_FORMAT_EX
    FILE_FORMAT_FIELDML = _streamregion.StreaminformationRegion_FILE_FORMAT_FIELDML
    RECURSION_MODE_INVALID = _streamregion.StreaminformationRegion_RECURSION_MODE_INVALID
    RECURSION_MODE_ON = _streamregion.StreaminformationRegion_RECURSION_MODE_ON
    RECURSION_MODE_OFF = _streamregion.StreaminformationRegion_RECURSION_MODE_OFF

    def hasAttribute(self, attribute):
        return _streamregion.StreaminformationRegion_hasAttribute(self, attribute)

    def getAttributeReal(self, attribute):
        return _streamregion.StreaminformationRegion_getAttributeReal(self, attribute)

    def setAttributeReal(self, attribute, value):
        return _streamregion.StreaminformationRegion_setAttributeReal(self, attribute, value)

    def hasResourceAttribute(self, resource, attribute):
        return _streamregion.StreaminformationRegion_hasResourceAttribute(self, resource, attribute)

    def getResourceAttributeReal(self, resource, attribute):
        return _streamregion.StreaminformationRegion_getResourceAttributeReal(self, resource, attribute)

    def setResourceAttributeReal(self, resource, attribute, value):
        return _streamregion.StreaminformationRegion_setResourceAttributeReal(self, resource, attribute, value)

    def getFileFormat(self):
        return _streamregion.StreaminformationRegion_getFileFormat(self)

    def setFileFormat(self, fileFormat):
        return _streamregion.StreaminformationRegion_setFileFormat(self, fileFormat)

    def getResourceDomainTypes(self, resource):
        return _streamregion.StreaminformationRegion_getResourceDomainTypes(self, resource)

    def setResourceDomainTypes(self, resource, domainTypes):
        return _streamregion.StreaminformationRegion_setResourceDomainTypes(self, resource, domainTypes)

    def setFieldNames(self, numberOfNames):
        return _streamregion.StreaminformationRegion_setFieldNames(self, numberOfNames)

    def setResourceFieldNames(self, resource, numberOfNames):
        return _streamregion.StreaminformationRegion_setResourceFieldNames(self, resource, numberOfNames)

    def setRecursionMode(self, recursionMode):
        return _streamregion.StreaminformationRegion_setRecursionMode(self, recursionMode)

    def setResourceRecursionMode(self, resource, recursionMode):
        return _streamregion.StreaminformationRegion_setResourceRecursionMode(self, resource, recursionMode)

    def getResourceGroupName(self, resource):
        return _streamregion.StreaminformationRegion_getResourceGroupName(self, resource)

    def setResourceGroupName(self, resource, groupName):
        return _streamregion.StreaminformationRegion_setResourceGroupName(self, resource, groupName)
    __swig_destroy__ = _streamregion.delete_StreaminformationRegion

# Register StreaminformationRegion in _streamregion:
_streamregion.StreaminformationRegion_swigregister(StreaminformationRegion)

