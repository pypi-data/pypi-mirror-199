Metadata-Version: 2.1
Name: mailerlite-python
Version: 0.1.2
Summary: API wrapper for MailerLite written in Python
License: MIT
Author: Juan Carlos Rios
Author-email: juankrios15@gmail.com
Requires-Python: >=3.7,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: requests (>=2.26.0,<3.0.0)
Description-Content-Type: text/markdown

![](https://img.shields.io/badge/version-0.1.1-success) ![](https://img.shields.io/badge/code-Python-4B8BBE?logo=python&logoColor=white)
# mailerlite-python

mailerlite-python is an API wrapper for MailerLite, written in Python

## Installing
```
pip install mailerlite-python
```
## Usage
```
from mailerlite.client import Client
client = Client('API_KEY')
```
### Subscribers
#### List Subscribers
```
subs = client.list_subscribers(params=None)
# Optional params (dict):
# filter[status] = Must be one of the possible statuses: active, unsubscribed, unconfirmed, bounced or junk.
# limit = Defaults to 25
# page = Defaults to 1
```
#### Create Subscriber
```
subscriber = {
    "email": "carlos@burgos.com",
    "fields": {
        "name": "Carlos",
        "last_name": "Burgos",
        "city": "BogotÃ¡",
    }
}
sub = client.create_subscriber(subscriber)
# If user email already exists, updates existing subscriber.
```
#### Fetch Subscriber
```
# Reference can be either email or ID
subscriber = client.fetch_subscriber(reference)
```
#### Delete Subscriber
```
client.delete_subscriber(subscriber_id)
```
#### Subscribe Subscriber
```
client.activate_subscriber(subscriber_id)
```
#### Unsubscribe Subscriber
```
client.unsubscribe_subscriber(subscriber_id)
```
#### Assign Subscriber to a Group
```
client.assign_to_group(subscriber_id, group_id)
```
#### List Subscriber fields
```
fields = client.list_subscriber_fields()
```
#### List Groups
```
groups = client.list_groups(params=None)
# Optional params (dict):
# filter[name] = Returns partial matches
# limit = An account can have at most a 250 groups
# page = Defaults to 1
# sort = Can be one of: name, total, open_rate, click_rate, created_at. Defaults to ascending order; prepend (-)
```

### Webhooks
#### List all webhooks
```
webhooks = client.list_webhooks()
```
#### Create webhook
```
webhook = {
    "name": "first webhook",
    "events": ["subscriber.created"],
    "url": "http://www.cartwright.info/eligendi-soluta-corporis-in-quod-ullam"
}
webhook_created = client.create_webhook(webhook)
```
#### Delete webhook
```
client.delete_webhook(webhook_id)
```
