Metadata-Version: 2.1
Name: fia
Version: 0.2.0
Summary: fia (financial analyzer) package for Python.
Author-email: Aleksey Ustinov <augithub@zohomail.com>
License:                                 Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
Project-URL: Homepage, https://github.com/lexust1/fia
Project-URL: Bug Tracker, https://github.com/lexust1/fia/issues
Project-URL: Source Code, https://github.com/lexust1/fia
Keywords: finance,portfolio,trading,crypto,TradingView,AlphaVantage
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Framework :: Jupyter :: JupyterLab
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Natural Language :: English
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: test
License-File: LICENSE

# FInancial Analyzer (fia)


## Overview
**fia** (FInancial Analyzer) is a package that gets the historical market
data from multiple resources such as TradingView, Alphavantage, etc. 

The package collects the data from TradingView over WebSocket. In the future,
other options and resources will be added.


## Installation
The source code is hosted on [GitHub](https://github.com/lexust1/fia).

Before the package installation, it is recommended to create a new virtual
environment by conda, virtualenv, poetry, and so on.

The dependencies are listed in [pyproject.toml](https://github.com/lexust1) 
in the dependencies section.

To install the package use the following commands in Terminal:

- For PyPI:
    ```shell
    pip install fia
    ```

## The simplest working example
```python
from fia import Frame, set_logger, TvDataCollector  

# Set the logger to see the INFO messages.
set_logger("INFO")
# Create an instance of the TvDataCollector class.
tvdc = TvDataCollector(username="Red69", 
                       password="fhEnv@*re37",
                       exchange="NASDAQ",
                       ticker_sym="AAPL",
                       currency="USD",
                       frame=Frame.MIN15,
                       bars=50)
# Get the raw data including the historical market data.
raw_data = tvdc.get_data()
# Get the clean historical market data as DataFrame object.
df = tvdc.get_pandas_data(raw_data, tz="America/Chicago")
```
See the detailed explanation below in the Usage section.

## Usage
There are two ways how the package can be used:
1. Over command line interface.
2. As an imported package in Python (recommended method).

### The 1st method (command line interface):
The 1st method returns only a CSV file with the historical market 
data. This file can be used by a user in other software and apps 
to analyze the data. It is designed for people who are not going 
to use Python as the main tool and need only the file with the 
historical market data.

#### Method 1.1 (CLI + environment variables):
1. Go to the project directory and create setenv.sh
2. Add the following lines in the file:
    ```shell
    export TV_USERNAME="USERNAME"
    export TV_PASSWORD="PASSWORD"
    ```
    where:
    - "USERNAME" is a TradingView username (not to be confused with email).
    - "PASSWORD" is a TradingView password.
    
    For example:
    ```shell
    export TV_USERNAME="Red69"
    export TV_PASSWORD="fhEnv@*re37"
    ```
3. From Terminal export the environment variables:
    ``` shell
    . ./setenv.sh
    ```
 4. Type the command in Terminal:
    ```shell
    fia -e exchange -t ticker_sym -c currency -f frame -b bars
    ```    
    where:
    - exchange is an exchange (NYSE, CME, etc.).
    - ticker_sym is a ticker symbol (AAPL, BTC, etc.)
    - currency is a currency (USD, EUR, etc.).
    - frame is a bar timeframe. Use one of the following options: 
      - MIN1 - 1 min, 
      - MIN5 - 5 min, 
      - MIN15 - 15 min, 
      - MIN30 - 30 min, 
      - MIN45 - 45 min, 
      - HOUR1 - 1 hr, 
      - HOUR2 - 2 hr, 
      - HOUR3 - 3 hr, 
      - HOUR4 - 4 hr, 
      - DAY - day, 
      - WEEK - week,
      - MONTH - month.
    - bars is a number of bars (the limit depends on the Tradingview plan and 
      the ticker symbol).
    - user_agent is a user agent (optional), use the **-a** flag if you would like 
      to change the default value.
    - remember is a status (optional), "on" - remember the user, use the **-r** flag
      if you would like to change the default value.     
    
    For example:
    ```shell
    fia -e NASDAQ -t AAPL -c USD -f DAY -b 50
    ```
5.  It creates a CSV file that has the file name is similar to 
    "TICKER_SYM_FRAME_DATE_TIME" (for example, AAPL_NASDAQ_DAY_20221123_10_21_49) 
    and saves it in the fia_output folder.
    The fia_output folder is created in your home (~, $HOME, etc.) folder.
    
    An example of output CSV file:
    ```csv
    DateTime,Open,High,Low,Close,Volume
    2022-09-15 08:30:00-05:00,154.65,155.24,151.38,152.37,90481110.0
    2022-09-16 08:30:00-05:00,151.21,151.35,148.37,150.7,162278841.0
    .................................................................
    2022-11-22 08:30:00-06:00,148.13,150.42,146.925,150.18,51804132.0
    2022-11-23 08:30:00-06:00,149.45,151.83,149.34,151.07,58301395.0
    ```
      There are 6 values in every row separated by comma:
     - DateTime: date and time. The UTC timezone is used.
     - Open: the opening price of the chosen timeframe.
     - High: the highest price of the chosen timeframe.
     - Low: the lowest price of the chosen timeframe.
     - Close: the closing price of the chosen timeframe.
     - Volume: the market volume.     
     
    The values usually are in USD but check the currency and the unit of measure on 
     the exchange.

6. Add setenv.sh in the .gitignore file for security reasons if you are going to
   create a repository on a platform is similar to GitHub.

#### Method 1.2 (CLI + explicit username and password):
This method is not recommended because it is not secure. It is better to use
the environment variables to keep your username and password as it was described
above in Method 1.1.

Type the command in Terminal:
```shell
fia -u username -p password -e exchange -t ticker_sym -c currency -f frame -b bars
```    
where:
- username is a TradingView username (not to be confused with email).
- password is a TradingView password.
- exchange is an exchange (NYSE, CME, etc.).
- ticker_sym is a ticker symbol (AAPL, BTC, etc.)
- currency is a currency (USD, EUR, etc.).
- frame is a bar timeframe. Use one of the following options: 
  - MIN1 - 1 min, 
  - MIN5 - 5 min, 
  - MIN15 - 15 min, 
  - MIN30 - 30 min, 
  - MIN45 - 45 min, 
  - HOUR1 - 1 hr, 
  - HOUR2 - 2 hr, 
  - HOUR3 - 3 hr, 
  - HOUR4 - 4 hr, 
  - DAY - day, 
  - WEEK - week,
  - MONTH - month.
- bars is a number of bars (the limit depends on the Tradingview plan and the 
  ticker symbol).
- user_agent is a user agent (optional), use the **-a** flag if you would like 
  to change the default value.
- remember is a status (optional), "on" - remember the user, use the **-r** flag
  if you would like to change the default value.
    
For example:
  ```shell
  fia -u Red69 -p fhEnv@*re37 -e NASDAQ -t AAPL -c USD -f DAY -b 50
  ```


### The 2nd method (import as a Python package):
The 2nd method is a recommended usage because it is more flexible 
and can work with other Python libraries. 

It can return: 
- the raw market data received over WebSocket, 
- the market data in JSON format,
- the market data as a Pandas DataFrame object. 

It is designed for people who would like to use the package with Pandas, 
Matplotlib, JupyterLab, etc.

#### Method 2.1 (import + environment variables):
1. Go to the project directory and create setenv.sh
2. Add the following lines in the file:
    ```shell
    export TV_USERNAME="USERNAME"
    export TV_PASSWORD="PASSWORD"
    ```
    where:
    - "USERNAME" is a TradingView username (not to be confused with email).
    - "PASSWORD" is a TradingView password.
    
    For example:
    ```shell
    export TV_USERNAME="Red69"
    export TV_PASSWORD="fhEnv@*re37"
    ```
3. From Terminal export the environment variables:
    ``` shell
    . ./setenv.sh
    ```
4. Create a python file and get the historical market data:
    ```python
    import os
    # Import the fia package the TvDataCollector class and the Frame enum.
    from fia import Frame, TvDataCollector
    
      
    # Create an instance of the TvDataCollector class.
    tvdc = TvDataCollector(username=os.environ.get("TV_USERNAME"),
                           password=os.environ.get("TV_PASSWORD"),
                           exchange="NASDAQ", 
                           ticker_sym="AAPL",
                           currency="USD",
                           frame=Frame.MIN15,
                           bars=50)
    # Get the raw data including the historical market data.
    raw_data = tvdc.get_data()
    # Get the clean historical market data as DataFrame object.
    df = tvdc.get_pandas_data(raw_data)
    ```    
The TvDataCollector class gets the historical market data from TradingView and
has the following attributes:
- username is a TradingView username (not to be confused with email).
- password is a TradingView password.
- exchange is an exchange (NYSE, CME, etc.).
- ticker_sym is a ticker symbol (AAPL, BTC, etc.)
- currency is a currency (USD, EUR, etc.).
- frame is a bar timeframe as a member of enum Frame. Use one of the following 
  options: 
  - Frame.MIN1 - 1 min, 
  - Frame.MIN5 - 5 min, 
  - Frame.MIN15 - 15 min, 
  - Frame.MIN30 - 30 min, 
  - Frame.MIN45 - 45 min, 
  - Frame.HOUR1 - 1 hr, 
  - Frame.HOUR2 - 2 hr, 
  - Frame.HOUR3 - 3 hr, 
  - Frame.HOUR4 - 4 hr, 
  - Frame.DAY - day, 
  - Frame.WEEK - week,
  - Frame.MONTH - month.
- bars is a number of bars (the limit depends on the Tradingview plan and the 
  ticker symbol).
- user_agent is a user agent (optional), use the **-a** flag if you would like 
  to change the default value.
- remember is a status (optional), "on" - remember the user, use the **-r** flag
  if you would like to change the default value.

The TvDataCollector has the following public methods:
- get_auth_token(): Gets the authorization token.
    The following code
    ```python
    # tvdc is an instance of the TvDataCollector class.
    tvdc.get_auth_token()
    ```
    returns the authorization token generated for your username on TradingView 
    when you sign in.
- get_data(): Gets the raw data over Websocket.   
    The following code
    ```python
    # tvdc is an instance of the TvDataCollector class.
    tvdc.get_data()
    ```
    returns the raw data including the historical market data.
    
    It includes all sent and received messages over WebSocket. It can be useful
    if you would like to parse the raw data and use what you need for your goals. 
- get_pandas_data(raw_data, tz): Gets the market data as Pandas DataFrame from the raw 
  data. The tz argument is optional. The UTC time is used by default. Any time zone 
  from pytz.all_timezones (see the python library pytz) can be used. For  example, 
  "America/Chicago" is CME timezone.

  The following code
    ```python
    # tvdc is an instance of the TvDataCollector class.
    # raw_data is received by using tvdc.get_data().
    tvdc.get_pandas_data(raw_data)
    ```
    returns the DataFrame object:

| DateTime                  | Open    | High   | Low      | Close  | Volume     |
|---------------------------|---------|--------|----------|--------|------------|
| 2022-09-14 13:30:00+00:00 | 154.785 | 157.1  | 153.6106 | 155.31 | 87965409.0 |
| 2022-09-15 13:30:00+00:00 | 154.65  | 155.24 | 151.38   | 152.37 | 90481110.0 |
| …                         | …       | …      | …        | …      | …          |
| 2022-11-21 14:30:00+00:00 | 150.16  | 150.37 | 147.715  | 148.01 | 58724070.0 |
| 2022-11-22 14:30:00+00:00 | 148.13  | 150.42 | 146.925  | 150.18 | 51804132.0 |
   
  There are 6 columns:
  - DateTime: date and time. It depends on the tz argument value in get_pandas_data().
    The UTC time is used by default.
  - Open: the opening price of the chosen timeframe.
  - High: the highest price of the chosen timeframe.
  - Low: the lowest price of the chosen timeframe.
  - Close: the closing price of the chosen timeframe.
  - Volume: the market volume.     
  The price values usually are in USD but check the currency and the unit of measure on 
  the exchange. 
  If you would like to change the timezone see the following example:
    ```python
    # tvdc is an instance of the TvDataCollector class.
    # raw_data is received by using tvdc.get_data().
    # "America/Chicago" is a timezone. Any time zone from pytz.all_timezones 
    # (see the python library pytz) can be used.
    tvdc.get_pandas_data(raw_data, "America/Chicago")
    ```

- get_json_data(raw_data): Gets the market data in JSON format from the raw data.
    The following code
    ```python
    # tvdc is an instance of the TvDataCollector class.
    # raw_data is received by using tvdc.get_data().
    tvdc.get_json_data(raw_data)
    ```
    returns the data in JSON format.
   
5. Add setenv.sh in the .gitignore file for security reasons if you are going to
   create a repository on a platform is similar to GitHub.

#### Method 2.2 (import + explicit username and password):
This method is not recommended because it is not secure. It is better to use
the environment variables to keep your username and password as it was described
above in Method 2.1.

Create a python file and get the historical market data:
```python
# Import the fia package the TvDataCollector class and the Frame enum.
from fia import Frame, TvDataCollector
    
      
# Create an instance of the TvDataCollector class.
tvdc = TvDataCollector(username="Red69",
                       password="fhEnv@*re37",
                       exchange="NASDAQ", 
                       ticker_sym="AAPL",
                       currency="USD",
                       frame=Frame.MIN15,
                       bars=50)
# Get the raw data including the historical market data.
raw_data = tvdc.get_data()
# Get the clean historical market data as DataFrame object.
df = tvdc.get_pandas_data(raw_data)
```    
The attributes and methods are described in Method 2.1. The only difference is
that we assign the explicit username and password rather than using os.environ.get()
to get them from the environment variables.

## Logging

1. When the package is used over command line interface the root logger
   is set by default and shows the info messages.

2. When the package is imported the root logger is not set. It prevents
   collisions with the logging system of the program where the package
   was imported.
    
    There are several ways how to set the logger:
    - Use the set_logger() function that sets the root logger and helps to choose
      the level of log messages:
      ```python
      # import functions set_logger()
      from fia import set_logger
      
      
      # Set status: "INFO", "DEBUG", "WARNING", etc.
      set_logger("INFO")
      ```
    - Set the root logger manually.
      ```python
      import logging
      import sys
                              
      
      # Get the root logger.
      logger = logging.getLogger()
      # Set the level of messages for the logger.
      logger.setLevel(logging.DEBUG)
      # Set the log message style.
      formatter = logging.Formatter(
          "{asctime} | {name} | {levelname} | {message}", style="{"
      )
      # Set and attach the handler.
      handler = logging.StreamHandler(sys.stdout)
      handler.setLevel(logging.DEBUG)
      handler.setFormatter(formatter)
      logger.addHandler(handler) 
      ```
    - Set the package logger manually.
      ```python
      import logging
      import sys
      
                          
      # Get the logger.
      logger = logging.getLogger("fia")
      # Set the level of messages for the logger.
      logger.setLevel(logging.DEBUG)
      # Set the log message style.
      formatter = logging.Formatter(
          "{asctime} | {name} | {levelname} | {message}", style="{"
      )
      # Set and attach the handler.
      handler = logging.StreamHandler(sys.stdout)
      handler.setLevel(logging.DEBUG)
      handler.setFormatter(formatter)
      logger.addHandler(handler) 
      ```
    Choose the most suitable method for your case.

## Important notes
You should treat the historical data accurately especially the last bar. 

For example, when you use the day timeframe, the last bar represents the actual prices
and volume for the current day. If the market is active the prices and volume keep 
changing.

A similar situation occurs when you try to retrieve the data in the middle of 
the week, month, etc. 

## License
[Apache 2.0](https://github.com/lexust1)

## Disclaimer
The fia package and any results received by using the fia package
are for informational and educational purposes only.
You should not construe any such information or other material as
legal, tax, investment, financial, or other advice.
There are risks associated with investing in any securities and
assets. Do your own research. Past performance is not a guarantee
of future return or performance. You may gain or lose money.
