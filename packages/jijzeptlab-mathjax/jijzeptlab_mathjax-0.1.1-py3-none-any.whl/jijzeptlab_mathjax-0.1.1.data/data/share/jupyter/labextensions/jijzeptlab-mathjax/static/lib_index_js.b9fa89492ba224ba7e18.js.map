{"version":3,"file":"lib_index_js.b9fa89492ba224ba7e18.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAA0D;AAC1D;AACkD;AAClD;AACgD;AAChD;AACqD;AACY;AACG;AACF;AACM;AACC;AACT;AAChE,8EAAyB,CAAC,gFAAW,KAAK,kFAAW,CAAC,uFAAc;AACpE,wBAAwB,2EAAO;AAC/B;AACA;AACO;AACP;AACA,0BAA0B,+DAAK;AAC/B;AACA,SAAS;AACT,wBAAwB,0DAAG;AAC3B,sBAAsB,qFAAkB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,6BAA6B,qEAAgB;AAC7C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,qEAAqE,cAAc;AACnF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oEAAgB;AAC9B;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jijzeptlab-mathjax/./lib/index.js"],"sourcesContent":["import { ILatexTypesetter } from '@jupyterlab/rendermime';\n// MathJax core\nimport { mathjax } from 'mathjax-full/js/mathjax';\n// TeX input\nimport { TeX } from 'mathjax-full/js/input/tex';\n// HTML output\nimport { CHTML } from 'mathjax-full/js/output/chtml';\nimport { TeXFont } from 'mathjax-full/js/output/chtml/fonts/tex';\nimport { AllPackages } from 'mathjax-full/js/input/tex/AllPackages';\nimport { SafeHandler } from 'mathjax-full/js/ui/safe/SafeHandler';\nimport { HTMLHandler } from 'mathjax-full/js/handlers/html/HTMLHandler';\nimport { browserAdaptor } from 'mathjax-full/js/adaptors/browserAdaptor';\nimport 'mathjax-full/js/input/tex/require/RequireConfiguration';\nmathjax.handlers.register(SafeHandler(new HTMLHandler(browserAdaptor())));\nclass emptyFont extends TeXFont {\n}\nemptyFont.defaultFonts = {};\nexport class MathJax3Typesetter {\n    constructor(app) {\n        const chtml = new CHTML({\n            font: new emptyFont()\n        });\n        const tex = new TeX({\n            packages: AllPackages.concat('require'),\n            inlineMath: [\n                ['$', '$'],\n                ['\\\\(', '\\\\)']\n            ],\n            displayMath: [\n                ['$$', '$$'],\n                ['\\\\[', '\\\\]']\n            ],\n            processEscapes: true,\n            processEnvironments: true,\n            maxBuffer: 5000000000 * 1024\n        });\n        this._mathDocument = mathjax.document(window.document, {\n            InputJax: tex,\n            OutputJax: chtml\n        });\n        console.log(tex);\n        const mjclipboard = 'mathjax:clipboard';\n        const mjscale = 'mathjax:scale';\n        app.commands.addCommand(mjclipboard, {\n            execute: (args) => {\n                const md = this._mathDocument;\n                const oJax = md.outputJax;\n                navigator.clipboard.writeText(oJax.math.math);\n            },\n            label: 'MathJax Copy Latex'\n        });\n        app.commands.addCommand(mjscale, {\n            execute: (args) => {\n                const scale = args['scale'] || 1.0;\n                const md = this._mathDocument;\n                md.outputJax.options.scale = scale;\n                md.rerender();\n            },\n            label: (args) => 'Mathjax Scale ' + (args['scale'] ? `x${args['scale']}` : 'Reset')\n        });\n    }\n    /**\n     * Typeset the math in a node.\n     */\n    typeset(node) {\n        this._mathDocument.options.elements = [node];\n        this._mathDocument.clear().render();\n        delete this._mathDocument.options.elements;\n    }\n}\n/**\n * Initialization data for the jijzeptlab-mathjax extension.\n */\nconst plugin = {\n    id: 'jijzeptlab-mathjax:plugin',\n    autoStart: true,\n    // optional: [ISettingRegistry],\n    provides: ILatexTypesetter,\n    activate: (app, settingRegistry) => new MathJax3Typesetter(app)\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}