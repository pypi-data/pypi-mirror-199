# coding: utf-8

"""
    CCT Customer Service Requests

    API for interacting with City of Cape Town's eServices API.  # noqa: E501

    The version of the OpenAPI document: 2.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coct_sr_api_client import schemas  # noqa: F401


class RequestAttributesSchema(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "account_number",
            "lastName",
            "comm",
            "address",
            "latitude",
            "telephone",
            "message",
            "type",
            "firstName",
            "subtype",
            "category_2",
            "street",
            "category_1",
            "street_number",
            "suburb",
            "id",
            "email",
            "longitude",
            "username",
        }
        
        class properties:
            id = schemas.Int64Schema
            category_1 = schemas.StrSchema
            category_2 = schemas.StrSchema
            suburb = schemas.StrSchema
            email = schemas.StrSchema
            message = schemas.StrSchema
            address = schemas.StrSchema
            username = schemas.StrSchema
            account_number = schemas.StrSchema
            comm = schemas.StrSchema
            latitude = schemas.StrSchema
            longitude = schemas.StrSchema
            type = schemas.IntSchema
            subtype = schemas.IntSchema
            telephone = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            street = schemas.StrSchema
            street_number = schemas.IntSchema
            __annotations__ = {
                "id": id,
                "category_1": category_1,
                "category_2": category_2,
                "suburb": suburb,
                "email": email,
                "message": message,
                "address": address,
                "username": username,
                "account_number": account_number,
                "comm": comm,
                "latitude": latitude,
                "longitude": longitude,
                "type": type,
                "subtype": subtype,
                "telephone": telephone,
                "firstName": firstName,
                "lastName": lastName,
                "street": street,
                "street_number": street_number,
            }
    
    account_number: MetaOapg.properties.account_number
    lastName: MetaOapg.properties.lastName
    comm: MetaOapg.properties.comm
    address: MetaOapg.properties.address
    latitude: MetaOapg.properties.latitude
    telephone: MetaOapg.properties.telephone
    message: MetaOapg.properties.message
    type: MetaOapg.properties.type
    firstName: MetaOapg.properties.firstName
    subtype: MetaOapg.properties.subtype
    category_2: MetaOapg.properties.category_2
    street: MetaOapg.properties.street
    category_1: MetaOapg.properties.category_1
    street_number: MetaOapg.properties.street_number
    suburb: MetaOapg.properties.suburb
    id: MetaOapg.properties.id
    email: MetaOapg.properties.email
    longitude: MetaOapg.properties.longitude
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_1"]) -> MetaOapg.properties.category_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_2"]) -> MetaOapg.properties.category_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suburb"]) -> MetaOapg.properties.suburb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comm"]) -> MetaOapg.properties.comm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["telephone"]) -> MetaOapg.properties.telephone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["street_number"]) -> MetaOapg.properties.street_number: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "category_1", "category_2", "suburb", "email", "message", "address", "username", "account_number", "comm", "latitude", "longitude", "type", "subtype", "telephone", "firstName", "lastName", "street", "street_number", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_1"]) -> MetaOapg.properties.category_1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_2"]) -> MetaOapg.properties.category_2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suburb"]) -> MetaOapg.properties.suburb: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_number"]) -> MetaOapg.properties.account_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comm"]) -> MetaOapg.properties.comm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["telephone"]) -> MetaOapg.properties.telephone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street"]) -> MetaOapg.properties.street: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["street_number"]) -> MetaOapg.properties.street_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "category_1", "category_2", "suburb", "email", "message", "address", "username", "account_number", "comm", "latitude", "longitude", "type", "subtype", "telephone", "firstName", "lastName", "street", "street_number", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_number: typing.Union[MetaOapg.properties.account_number, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        comm: typing.Union[MetaOapg.properties.comm, str, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        latitude: typing.Union[MetaOapg.properties.latitude, str, ],
        telephone: typing.Union[MetaOapg.properties.telephone, str, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        type: typing.Union[MetaOapg.properties.type, decimal.Decimal, int, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        subtype: typing.Union[MetaOapg.properties.subtype, decimal.Decimal, int, ],
        category_2: typing.Union[MetaOapg.properties.category_2, str, ],
        street: typing.Union[MetaOapg.properties.street, str, ],
        category_1: typing.Union[MetaOapg.properties.category_1, str, ],
        street_number: typing.Union[MetaOapg.properties.street_number, decimal.Decimal, int, ],
        suburb: typing.Union[MetaOapg.properties.suburb, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        longitude: typing.Union[MetaOapg.properties.longitude, str, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequestAttributesSchema':
        return super().__new__(
            cls,
            *_args,
            account_number=account_number,
            lastName=lastName,
            comm=comm,
            address=address,
            latitude=latitude,
            telephone=telephone,
            message=message,
            type=type,
            firstName=firstName,
            subtype=subtype,
            category_2=category_2,
            street=street,
            category_1=category_1,
            street_number=street_number,
            suburb=suburb,
            id=id,
            email=email,
            longitude=longitude,
            username=username,
            _configuration=_configuration,
            **kwargs,
        )
