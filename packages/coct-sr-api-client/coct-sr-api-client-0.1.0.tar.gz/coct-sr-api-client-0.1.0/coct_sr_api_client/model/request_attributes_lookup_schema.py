# coding: utf-8

"""
    CCT Customer Service Requests

    API for interacting with City of Cape Town's eServices API.  # noqa: E501

    The version of the OpenAPI document: 2.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from coct_sr_api_client import schemas  # noqa: F401


class RequestAttributesLookupSchema(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "subtype",
            "description",
            "time_created",
            "message",
            "type",
            "reference_number",
            "status",
        }
        
        class properties:
            reference_number = schemas.StrSchema
            type = schemas.StrSchema
            subtype = schemas.StrSchema
            description = schemas.StrSchema
            status = schemas.StrSchema
            message = schemas.StrSchema
            time_created = schemas.StrSchema
            __annotations__ = {
                "reference_number": reference_number,
                "type": type,
                "subtype": subtype,
                "description": description,
                "status": status,
                "message": message,
                "time_created": time_created,
            }
    
    subtype: MetaOapg.properties.subtype
    description: MetaOapg.properties.description
    time_created: MetaOapg.properties.time_created
    message: MetaOapg.properties.message
    type: MetaOapg.properties.type
    reference_number: MetaOapg.properties.reference_number
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_number"]) -> MetaOapg.properties.reference_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_created"]) -> MetaOapg.properties.time_created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["reference_number", "type", "subtype", "description", "status", "message", "time_created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_number"]) -> MetaOapg.properties.reference_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_created"]) -> MetaOapg.properties.time_created: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reference_number", "type", "subtype", "description", "status", "message", "time_created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        subtype: typing.Union[MetaOapg.properties.subtype, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        time_created: typing.Union[MetaOapg.properties.time_created, str, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        reference_number: typing.Union[MetaOapg.properties.reference_number, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RequestAttributesLookupSchema':
        return super().__new__(
            cls,
            *_args,
            subtype=subtype,
            description=description,
            time_created=time_created,
            message=message,
            type=type,
            reference_number=reference_number,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
