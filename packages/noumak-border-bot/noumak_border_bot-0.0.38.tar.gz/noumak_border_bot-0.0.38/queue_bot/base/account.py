from queue_bot.db.models import User, Numbers
from queue_bot import keyboard
from aiogram.dispatcher.filters.state import StatesGroup, State
from abc import ABC, abstractmethod
from queue_bot.middleware import _


class ClientStateGroup(StatesGroup):
    add_bus = State()
    add_car = State()
    add_truck = State()
    delete_bus = State()
    delete_car = State()
    delete_truck = State()
    edit_bus = State()
    edit_car = State()
    edit_truck = State()


class BaseUser(ABC):
    @abstractmethod
    async def _get_user(self):
        ...

    @abstractmethod
    async def _get_numbers(self) -> Numbers:
        ...


class Account(BaseUser):
    def __init__(self, user_id):
        self._user_id = user_id

    async def _get_user(self):
        self._model: User = (
            await User.filter(telegram_id=self._user_id).prefetch_related().first()
        )

    async def _get_numbers(self) -> Numbers:
        await self._get_user()
        return await self._model.number

    async def edit_number(self):
        numbers = await self._get_numbers()
        if numbers != None:
            self.response = _("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            self.keyboard = keyboard.ikb_lk_edit_number
        else:
            self.response = _("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            self.keyboard = keyboard.ikb_lk_back

    async def edit_bus(self):
        numbers = await self._get_numbers()
        if numbers.bus != None:
            self.response = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞")
            return await ClientStateGroup.edit_bus.set(), True
        self.response = _("–ó–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞")
        self.keyboard = keyboard.ikb_lk_back
        return False

    async def edit_passenger(self):
        numbers = await self._get_numbers()
        if numbers.car != None:
            self.response = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ")
            return await ClientStateGroup.edit_car.set(), True
        self.response = _("–ó–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ")
        self.keyboard = keyboard.ikb_lk_back
        return False

    async def edit_cargo(self):
        numbers = await self._get_numbers()
        if numbers.truck != None:
            self.response = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–æ–≤–æ–π")
            return await ClientStateGroup.edit_truck.set(), True
        self.response = _("–ó–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        self.keyboard = keyboard.ikb_lk_back
        return False

    async def add_number(self):
        numbers = await self._get_numbers()
        if numbers != None:
            self.response = _("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        else:
            numbers = await Numbers.create()
            await self._model.update_from_dict({"number_id": numbers.id})
            await self._model.save()
            self.response = _("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
        self.keyboard = keyboard.ikb_lk_add_number

    async def add_bus(self):
        numbers = await self._get_numbers()
        if numbers.bus == None:
            self.response = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞")
            return await ClientStateGroup.add_bus.set(), True
        else:
            self.response = _("–ó–∞ –≤–∞–º–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∞–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{}'").format(
                numbers.bus
            )
            self.keyboard = keyboard.ikb_lk_back
            return False

    async def add_passenger(self):
        numbers = await self._get_numbers()
        if numbers.car == None:
            self.response = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ")
            return await ClientStateGroup.add_car.set(), True
        else:
            self.response = _("–ó–∞ –≤–∞–º–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –∞–≤—Ç–æ —Å –Ω–æ–º–µ—Ä–æ–º '{}'").format(
                numbers.car
            )
            self.keyboard = keyboard.ikb_lk_back
            return False

    async def add_cargo(self):
        numbers = await self._get_numbers()
        if numbers.truck == None:
            self.response = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            return await ClientStateGroup.add_truck.set(), True
        else:
            self.response = _(
                "–ó–∞ –≤–∞–º–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –≥—Ä—É–∑–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –Ω–æ–º–µ—Ä–æ–º '{}'"
            ).format(numbers.truck)
            self.keyboard = keyboard.ikb_lk_back
            return False

    async def del_number(self):
        numbers = await self._get_numbers()
        if numbers != None:
            self.response = _("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
            self.keyboard = keyboard.ikb_lk_del_number
        else:
            self.response = _("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
            self.keyboard = keyboard.ikb_lk_back

    async def del_bus(self):
        self.numbers = await self._get_numbers()
        if self.numbers.bus:
            old_number = self.numbers.bus
            await self.numbers.update_from_dict({"bus": None})
            await self.numbers.save()
            self.response = _("–ê–≤—Ç–æ–±—É—Å —Å –Ω–æ–º–µ—Ä–æ–º '{}' —É–¥–∞–ª–µ–Ω").format(old_number)
        else:
            self.response = _("–ó–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞")
        self.keyboard = keyboard.ikb_lk_back

    async def del_passenger(self):
        self.numbers = await self._get_numbers()
        if self.numbers.car:
            old_number = self.numbers.car
            await self.numbers.update_from_dict({"car": None})
            await self.numbers.save()
            self.response = _("–õ–µ–≥–∫–æ–≤–∞—è —Å –Ω–æ–º–µ—Ä–æ–º '{}' —É–¥–∞–ª–µ–Ω–∞").format(old_number)
        else:
            self.response = _("–ó–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ")
        self.keyboard = keyboard.ikb_lk_back

    async def del_cargo(self):
        self.numbers = await self._get_numbers()
        if self.numbers.truck:
            old_number = self.numbers.truck
            await self.numbers.update_from_dict({"truck": None})
            await self.numbers.save()
            self.response = _("–ì—Ä—É–∑–æ–≤–∞—è —Å –Ω–æ–º–µ—Ä–æ–º '{}' —É–¥–∞–ª–µ–Ω–∞").format(old_number)
        else:
            self.response = _("–ó–∞ –≤–∞–º–∏ –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–æ–≤–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        self.keyboard = keyboard.ikb_lk_back

    async def show_number(self):
        await self._get_user()
        try:
            val = {
                k: (v if v != None else _("–ù–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"))
                for (k, v) in (await self._model.number.values()).items()
                if k != "id"
            }
            self.response = _(
                "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –∑–∞ –≤–∞–º–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:\n"
                "<b>–ê–≤—Ç–æ–±—É—Å:</b> {bus} üöå\n"
                "<b>–õ–µ–≥–∫–æ–≤–∞—è:</b> {car} üöò\n"
                "<b>–ì—Ä—É–∑–æ–≤–∞—è:</b> {truck} üöõ"
            ).format(
                bus=val["bus"],
                car=val["car"],
                truck=val["truck"],
            )
        except AttributeError:
            self.response = _("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        finally:
            self.keyboard = keyboard.ikb_lk_back

    async def del_numbers(self):
        numbers = await self._get_numbers()
        if numbers:
            await numbers.delete()
            self.response = _("–í–µ—Å—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            self.response = _("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–∏–Ω –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
        self.keyboard = _(keyboard.ikb_lk_back)


class NumberNotValid(Exception):
    ...


class BaseNumberValid(ABC):
    def __init__(self, number, state, transport, user_id):
        self._number = number
        self._state = state
        self._transport = transport
        self._user = user_id

    @abstractmethod
    def valid(self):
        ...

    def is_valid(self):
        try:
            self.valid()
        except NumberNotValid:
            return False
        return True


class NumberValid(BaseNumberValid, BaseUser):
    def valid(self):
        if not (self._number.isalnum() and 5 <= len(self._number) <= 11):
            self.response = _(
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
            )
            raise NumberNotValid
        self._transliterate()

    def _transliterate(self):
        letters = {
            "–∞": "a",
            "–≤": "b",
            "–µ": "e",
            "–¥": "–î",
            "–∫": "k",
            "–º": "m",
            "–Ω": "h",
            "–æ": "o",
            "—Ä": "p",
            "—Å": "c",
            "—Ç": "t",
            "—É": "y",
            "—Ö": "x",
            "–ê": "A",
            "–í": "B",
            "–ï": "E",
            "–î": "D",
            "–ö": "K",
            "–ú": "M",
            "–ù": "H",
            "–û": "O",
            "–†": "P",
            "–°": "C",
            "–¢": "T",
            "–£": "Y",
            "–•": "X",
        }
        for key in letters:
            self._number = self._number.replace(key, letters[key])

    def __str__(self):
        return self._number.upper()

    async def _get_user(self):
        self._model: User = (
            await User.filter(telegram_id=self._user).prefetch_related().first()
        )

    async def _get_numbers(self) -> Numbers:
        await self._get_user()
        return await self._model.number

    async def save(self):
        numbers: Numbers = await self._get_numbers()
        await numbers.update_from_dict({self._transport: str(self)})
        await numbers.save()
        await self._state.finish()
