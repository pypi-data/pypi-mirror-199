name: tricolour
command: tricolour
image: stimela/tricolour

policies:
  prefix: --
  replace: {'_': '-'}

inputs:
  ms:
    info: MS to be flagged
    dtype: MS
    required: true
    policies:
      positional: true
  config:
    info: YAML config file containing parameters for the flagger in the 'sum_threshold' key.
    dtype: File
  ignore-flags:
    info: Ingnore existing flags
    dtype: bool
  flagging-strategy:
    info: Flagging Strategy. If 'standard' all correlations in the visibility are flagged independently. If 'polarisation' the polarised intensity sqrt(Q^2 + U^2 + V^2) is calculated and used to flag all correlations in the visibility 
    dtype: str
    choices:
     - standard
     - polarisation
     - total_power
  row-chunks: 
    info: Hint indicating the number of Measurement Set rows to read in a single chunk. Smaller and larger numbers will tend to respectively decrease or increase both memory usage and computational efficiency
    dtype: int 
  baseline-chunks:
    info: Number of baselines in a window chunk
    dtype: int
  nworkers:
    info: Number of workers (threads) to use. By default, set to twice the number of logical CPUs on the system. Many workers can also affect memory usage on systems with many cores.
    dtype: int
  dilate-masks:
    info: Number of channels to dilate as int or string with units
    dtype: Union[int,str]
  data-column:
    info: Name of visibility data column to flag
    dtype: str
  scan-numbers:
    info: Scan numbers to flag
    dtype: str
  subtract-model-column:
    info: Columns to subtract from 'data-column' to form residuals to flag on
    dtype: str
  field-names:
    info: Name(s) of fields to flag. Defaults to flagging all
    dtype: List[str] 
  disable-post-mortem:
    info: Disable the default behaviour of starting the Interactive Python Debugger upon an unhandled exception. This may be necessary for batch pipelining
    dtype: bool
  window-backend:
    info: Visibility and flag data is re-ordered from a MS row ordering into time-frequency windows ordered by baseline. For smaller problems, it may be possible to pack a couple of scans worth of visibility data  into memory, but for larger problem sizes, it is necessary to reorder the data on disk
    dtype: str
    choices:
        - numpy 
        - zarr-disk