#!/usr/bin/env python3
# Translate fancy text to regular text
# SPDX-FileCopyrightText: 2023 Ng√¥ Ng·ªçc ƒê·ª©c Huy <huyngo@disroot.org>
#
# SPDX-License-Identifier: MPL-2.0

import argparse
from typing import Dict, Optional, Tuple

__version__ = "1.0"


def create_alphabet_map(
    a: str, tag: str, upper: bool = True
) -> Dict[str, Tuple[str, str]]:
    """Take the first letter and create a map from fancy to regular alphabet.

    >>> alphabet_map = create_alphabet_map("ùêö", "mathematical bold", False)
    >>> alphabet_map["ùêö"]
    ('a', 'mathematical bold')
    >>> alphabet_map["ùê≥"]
    ('z', 'mathematical bold')
    >>> alphabet_map = create_alphabet_map("ùêÄ", "mathematical bold")
    >>> alphabet_map["ùêÄ"]
    ('A', 'mathematical bold')
    >>> alphabet_map["ùêô"]
    ('Z', 'mathematical bold')
    >>> len(alphabet_map)
    26
    """
    standard_a = "a"
    if upper:
        standard_a = "A"
    return {chr(ord(a) + i): (chr(ord(standard_a) + i), tag)
            for i in range(26)}


def create_numeric_map(
    start: int, end: int, char: str, tag: str
) ->  Dict[str, Tuple[str, str]]:
    """Create map from fancy numeric characters to regular ones.

    Both ``start`` and ``end`` are inclusive.

    >>> numeric_map = create_numeric_map(1, 20, "‚ë†", "circled")
    >>> len(numeric_map)
    20
    >>> numeric_map["‚ë´"]
    ('12', 'circled')
    """
    return {chr(ord(char) + num - start): (str(num), tag) for num in range(start, end + 1)}


def create_multi_alphabet_map() -> Dict[str, Tuple[str, str]]:
    """Create all alphabet maps.  Supported alphabets are:

    * `Mathematical alphanumeric symbols <https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols>`_
    * `Enclosed Alphanumerics <https://en.wikipedia.org/wiki/Enclosed_Alphanumerics>`_
    * `Enclosed Alphanumeric Supplement <https://en.wikipedia.org/wiki/Enclosed_Alphanumeric_Supplement>`_
    """
    character_map = dict()
    # Mathematical alphanumeric symbols
    character_map.update(create_alphabet_map("ùêÄ", "mathematical bold"))
    character_map.update(create_alphabet_map("ùêö", "mathematical bold", False))
    character_map.update(create_alphabet_map("ùê¥", "mathematical italic"))
    character_map.update(create_alphabet_map("ùëé", "mathematical italic", False))
    character_map.update(create_alphabet_map("ùë®", "mathematical bold italic"))
    character_map.update(create_alphabet_map("ùíÇ", "mathematical bold italic", False))
    character_map.update(create_alphabet_map("ùñ†", "mathematical san-serif"))
    character_map.update(create_alphabet_map("ùñ∫", "mathematical san-serif", False))
    character_map.update(create_alphabet_map("ùóî", "mathematical san-serif bold"))
    character_map.update(create_alphabet_map("ùóÆ", "mathematical san-serif bold", False))
    character_map.update(create_alphabet_map("ùòà", "mathematical san-serif italic"))
    character_map.update(create_alphabet_map("ùò¢", "mathematical san-serif italic", False))
    character_map.update(create_alphabet_map("ùòº", "mathematical san-serif bold italic"))
    character_map.update(create_alphabet_map("ùôñ", "mathematical san-serif bold italic", False))
    character_map.update(create_alphabet_map("ùíú", "mathematical script"))
    character_map.update(create_alphabet_map("ùí∂", "mathematical script", False))
    character_map.update(create_alphabet_map("ùìê", "mathematical script bold"))
    character_map.update(create_alphabet_map("ùì™", "mathematical script bold", False))
    character_map.update(create_alphabet_map("ùîÑ", "mathematical fraktur"))
    character_map.update(create_alphabet_map("ùîû", "mathematical fraktur", False))
    character_map.update(create_alphabet_map("ùï¨", "mathematical fraktur bold"))
    character_map.update(create_alphabet_map("ùñÜ", "mathematical fraktur bold", False))
    character_map.update(create_alphabet_map("ùô∞", "mathematical monospace"))
    character_map.update(create_alphabet_map("ùöä", "mathematical monospace", False))
    character_map.update(create_alphabet_map("ùî∏", "mathematical double-struck"))
    character_map.update(create_alphabet_map("ùïí", "mathematical double-struck", False))
    character_map.update(create_numeric_map(0, 9, "ùüé", "bold"))
    character_map.update(create_numeric_map(0, 9, "ùüò", "double-struck"))
    character_map.update(create_numeric_map(0, 9, "ùü¢", "sans-serif"))
    character_map.update(create_numeric_map(0, 9, "ùü¨", "sans-serif bold"))
    character_map.update(create_numeric_map(0, 9, "ùü∂", "monospace"))
    # Enclosed alphanumerics
    character_map.update(create_numeric_map(0, 0, "‚ì™", "circled"))
    character_map.update(create_numeric_map(1, 20, "‚ë†", "circled"))
    character_map.update(create_numeric_map(1, 20, "‚ë¥", "parenthesized"))
    character_map.update(create_numeric_map(1, 20, "‚íà", "full stop"))
    character_map.update(create_alphabet_map("‚íú", "parenthesized", False))
    character_map.update(create_alphabet_map("‚í∂", "circled"))
    character_map.update(create_alphabet_map("‚ìê", "circled", False))
    character_map.update(create_numeric_map(0, 0, "‚ìø", "negative circled"))
    character_map.update(create_numeric_map(11, 20, "‚ì´", "negative circled"))
    character_map.update(create_numeric_map(1, 10, "‚ìµ", "double circled"))
    # Enclosed alphanumeric supplement
    character_map.update(create_numeric_map(0, 0, "üÑÄ", "full stop"))
    character_map.update(create_numeric_map(0, 9, "üÑÅ", "comma"))
    character_map.update(create_numeric_map(0, 0, "üÑã", "dingbat circled sans-serif"))
    character_map.update(create_numeric_map(0, 0, "üÑå", "dingbat negative circled sans-serif"))
    character_map.update(create_numeric_map(0, 0, "üÑç", "circled"))  # "with slash" is not informative here
    character_map.update(create_alphabet_map("üÑê", "parenthesized"))
    character_map.update(create_alphabet_map("üÑ∞", "squared"))
    character_map.update(create_alphabet_map("üÖê", "negative circled"))
    character_map.update(create_alphabet_map("üÖ∞", "negative squared"))

    return character_map


def translate_text(
    fancy_text: str, alphabet_map: Optional[Dict[str, Tuple[str, str]]] = None
) -> Tuple[str, str]:
    """Translate fancy text to regular text, with a tag.

    >>> fancy_text = "ùêìùê°ùêû ùê™ùêÆùê¢ùêúùê§ ùêõùê´ùê®ùê∞ùêß ùêüùê®ùê± ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†"
    >>> unfancy_text, label = translate_text(fancy_text)
    >>> unfancy_text
    'The quick brown fox jumps over the lazy dog'
    >>> label
    'mathematical bold'

    Similarly styled alphanumeric characters are considered the same
    even when they're not continuous on unicode block.

    >>> fancy_text = "‚íæ ‚ìó‚ìê‚ì•‚ìî ‚ë†‚ì™‚ë° ‚ìê‚ìü‚ìü‚ìõ‚ìî‚ì¢"
    >>> unfancy_text, label = translate_text(fancy_text)
    >>> unfancy_text
    'I have 102 apples'
    >>> label
    'circled'

    If two or more alphabets are used, the label will be 'mixed'

    >>> fancy_text = "ùêìùê°ùêû ùññùñöùñéùñàùñê ùñáùñóùñîùñúùñì ùñãùñîùñù ùê£ùêÆùê¶ùê©ùê¨ ùê®ùêØùêûùê´ ùê≠ùê°ùêû ùê•ùêöùê≥ùê≤ ùêùùê®ùê†"
    >>> unfancy_text, label = translate_text(fancy_text)
    >>> unfancy_text
    'The quick brown fox jumps over the lazy dog'
    >>> label
    'mixed'
    """
    if alphabet_map is None:
        alphabet_map = create_multi_alphabet_map()
    translator = str.maketrans({k: v[0] for k, v in alphabet_map.items()})
    character_sets = set(map(lambda c: alphabet_map[c][1] if c in alphabet_map else None, fancy_text))
    if None in character_sets:
        character_sets.remove(None)

    label = "mixed"
    if len(character_sets) == 1:
        label = list(character_sets)[0]
    return fancy_text.translate(translator), label


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Translate fancy to regular text.")
    parser.add_argument("--test", type=bool, help="Run doctest")
    parser.add_argument("--verbose", type=bool, help="Run verbose mode (for tests)")
    args = parser.parse_args()
    if args.test:
        import doctest
        failure, total = doctest.testmod(verbose=args.verbose)
        print(f"{total - failure}/{total} tests passed")
    else:
        alphabet_map = create_multi_alphabet_map()
        print("Press Ctrl+C or Ctrl+D to exit")
        try:
            while True:
                fancy_text = input()
                unfancy_text, label = translate_text(fancy_text, alphabet_map)
                print("Fancy type:", label)
                print(unfancy_text)
        except (EOFError, KeyboardInterrupt):
            print("Bye")
