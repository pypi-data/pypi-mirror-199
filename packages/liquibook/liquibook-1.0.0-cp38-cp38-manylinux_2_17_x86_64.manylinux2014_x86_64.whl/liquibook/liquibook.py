# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _liquibook
else:
    import _liquibook

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

DEPTH = _liquibook.DEPTH
SHARED_PTR_DISOWN = _liquibook.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _liquibook.delete_SwigPyIterator

    def value(self):
        return _liquibook.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _liquibook.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _liquibook.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _liquibook.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _liquibook.SwigPyIterator_equal(self, x)

    def copy(self):
        return _liquibook.SwigPyIterator_copy(self)

    def next(self):
        return _liquibook.SwigPyIterator_next(self)

    def __next__(self):
        return _liquibook.SwigPyIterator___next__(self)

    def previous(self):
        return _liquibook.SwigPyIterator_previous(self)

    def advance(self, n):
        return _liquibook.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _liquibook.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _liquibook.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _liquibook.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _liquibook.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _liquibook.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _liquibook.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _liquibook:
_liquibook.SwigPyIterator_swigregister(SwigPyIterator)
oc_no_conditions = _liquibook.oc_no_conditions
oc_all_or_none = _liquibook.oc_all_or_none
oc_immediate_or_cancel = _liquibook.oc_immediate_or_cancel
oc_fill_or_kill = _liquibook.oc_fill_or_kill
oc_stop = _liquibook.oc_stop
class ComparablePrice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, buySide, price):
        _liquibook.ComparablePrice_swiginit(self, _liquibook.new_ComparablePrice(buySide, price))

    def matches(self, rhs):
        return _liquibook.ComparablePrice_matches(self, rhs)

    def __le__(self, rhs):
        return _liquibook.ComparablePrice___le__(self, rhs)

    def __ge__(self, rhs):
        return _liquibook.ComparablePrice___ge__(self, rhs)

    def __lt__(self, *args):
        return _liquibook.ComparablePrice___lt__(self, *args)

    def __eq__(self, *args):
        return _liquibook.ComparablePrice___eq__(self, *args)

    def __ne__(self, *args):
        return _liquibook.ComparablePrice___ne__(self, *args)

    def __gt__(self, *args):
        return _liquibook.ComparablePrice___gt__(self, *args)

    def price(self):
        return _liquibook.ComparablePrice_price(self)

    def isBuy(self):
        return _liquibook.ComparablePrice_isBuy(self)

    def isMarket(self):
        return _liquibook.ComparablePrice_isMarket(self)
    __swig_destroy__ = _liquibook.delete_ComparablePrice

# Register ComparablePrice in _liquibook:
_liquibook.ComparablePrice_swigregister(ComparablePrice)

def __lt__(price, key):
    return _liquibook.__lt__(price, key)

def __gt__(price, key):
    return _liquibook.__gt__(price, key)

def __eq__(price, key):
    return _liquibook.__eq__(price, key)

def __ne__(price, key):
    return _liquibook.__ne__(price, key)

def __le__(price, key):
    return _liquibook.__le__(price, key)

def __ge__(price, key):
    return _liquibook.__ge__(price, key)

def __lshift__(out, key):
    return _liquibook.__lshift__(out, key)
class Order(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def is_limit(self):
        return _liquibook.Order_is_limit(self)

    def is_buy(self):
        return _liquibook.Order_is_buy(self)

    def price(self):
        return _liquibook.Order_price(self)

    def stop_price(self):
        return _liquibook.Order_stop_price(self)

    def order_qty(self):
        return _liquibook.Order_order_qty(self)

    def all_or_none(self):
        return _liquibook.Order_all_or_none(self)

    def immediate_or_cancel(self):
        return _liquibook.Order_immediate_or_cancel(self)
    __swig_destroy__ = _liquibook.delete_Order

# Register Order in _liquibook:
_liquibook.Order_swigregister(Order)
class DepthLevel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _liquibook.DepthLevel_swiginit(self, _liquibook.new_DepthLevel())

    def price(self):
        return _liquibook.DepthLevel_price(self)

    def order_count(self):
        return _liquibook.DepthLevel_order_count(self)

    def aggregate_qty(self):
        return _liquibook.DepthLevel_aggregate_qty(self)

    def is_excess(self):
        return _liquibook.DepthLevel_is_excess(self)

    def init(self, price, is_excess):
        return _liquibook.DepthLevel_init(self, price, is_excess)

    def add_order(self, qty):
        return _liquibook.DepthLevel_add_order(self, qty)

    def increase_qty(self, qty):
        return _liquibook.DepthLevel_increase_qty(self, qty)

    def decrease_qty(self, qty):
        return _liquibook.DepthLevel_decrease_qty(self, qty)

    def set(self, price, qty, order_count, last_change=0):
        return _liquibook.DepthLevel_set(self, price, qty, order_count, last_change)

    def close_order(self, qty):
        return _liquibook.DepthLevel_close_order(self, qty)

    def last_change(self, *args):
        return _liquibook.DepthLevel_last_change(self, *args)

    def changed_since(self, last_published_change):
        return _liquibook.DepthLevel_changed_since(self, last_published_change)
    last_change_ = property(_liquibook.DepthLevel_last_change__get, _liquibook.DepthLevel_last_change__set)
    __swig_destroy__ = _liquibook.delete_DepthLevel

# Register DepthLevel in _liquibook:
_liquibook.DepthLevel_swigregister(DepthLevel)
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def log_exception(self, context, ex):
        return _liquibook.Logger_log_exception(self, context, ex)

    def log_message(self, message):
        return _liquibook.Logger_log_message(self, message)
    __swig_destroy__ = _liquibook.delete_Logger

# Register Logger in _liquibook:
_liquibook.Logger_swigregister(Logger)
os_new = _liquibook.os_new
os_accepted = _liquibook.os_accepted
os_complete = _liquibook.os_complete
os_cancelled = _liquibook.os_cancelled
os_rejected = _liquibook.os_rejected
class SimpleOrder(Order):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == SimpleOrder:
            _self = None
        else:
            _self = self
        _liquibook.SimpleOrder_swiginit(self, _liquibook.new_SimpleOrder(_self, *args))

    def state(self):
        return _liquibook.SimpleOrder_state(self)

    def is_buy(self):
        return _liquibook.SimpleOrder_is_buy(self)

    def price(self):
        return _liquibook.SimpleOrder_price(self)

    def stop_price(self):
        return _liquibook.SimpleOrder_stop_price(self)

    def order_qty(self):
        return _liquibook.SimpleOrder_order_qty(self)

    def open_qty(self):
        return _liquibook.SimpleOrder_open_qty(self)

    def filled_qty(self):
        return _liquibook.SimpleOrder_filled_qty(self)

    def filled_cost(self):
        return _liquibook.SimpleOrder_filled_cost(self)

    def fill(self, fill_qty, fill_cost, fill_id):
        return _liquibook.SimpleOrder_fill(self, fill_qty, fill_cost, fill_id)

    def conditions(self):
        return _liquibook.SimpleOrder_conditions(self)

    def all_or_none(self):
        return _liquibook.SimpleOrder_all_or_none(self)

    def immediate_or_cancel(self):
        return _liquibook.SimpleOrder_immediate_or_cancel(self)

    def accept(self):
        return _liquibook.SimpleOrder_accept(self)

    def cancel(self):
        return _liquibook.SimpleOrder_cancel(self)

    def replace(self, size_delta, new_price):
        return _liquibook.SimpleOrder_replace(self, size_delta, new_price)
    order_id_ = property(_liquibook.SimpleOrder_order_id__get)
    __swig_destroy__ = _liquibook.delete_SimpleOrder
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_SimpleOrder(self)
        return weakref.proxy(self)

# Register SimpleOrder in _liquibook:
_liquibook.SimpleOrder_swigregister(SimpleOrder)
class liquibook_book_OrderBook(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == liquibook_book_OrderBook:
            _self = None
        else:
            _self = self
        _liquibook.liquibook_book_OrderBook_swiginit(self, _liquibook.new_liquibook_book_OrderBook(_self, *args))

    def set_symbol(self, symbol):
        return _liquibook.liquibook_book_OrderBook_set_symbol(self, symbol)

    def symbol(self):
        return _liquibook.liquibook_book_OrderBook_symbol(self)

    def set_order_listener(self, listener):
        return _liquibook.liquibook_book_OrderBook_set_order_listener(self, listener)

    def set_trade_listener(self, listener):
        return _liquibook.liquibook_book_OrderBook_set_trade_listener(self, listener)

    def set_order_book_listener(self, listener):
        return _liquibook.liquibook_book_OrderBook_set_order_book_listener(self, listener)

    def set_logger(self, logger):
        return _liquibook.liquibook_book_OrderBook_set_logger(self, logger)

    def add(self, order, conditions=0):
        return _liquibook.liquibook_book_OrderBook_add(self, order, conditions)

    def cancel(self, order):
        return _liquibook.liquibook_book_OrderBook_cancel(self, order)

    def replace(self, *args):
        return _liquibook.liquibook_book_OrderBook_replace(self, *args)

    def set_market_price(self, price):
        return _liquibook.liquibook_book_OrderBook_set_market_price(self, price)

    def market_price(self):
        return _liquibook.liquibook_book_OrderBook_market_price(self)

    def bids(self):
        return _liquibook.liquibook_book_OrderBook_bids(self)

    def asks(self):
        return _liquibook.liquibook_book_OrderBook_asks(self)

    def stopBids(self):
        return _liquibook.liquibook_book_OrderBook_stopBids(self)

    def stopAsks(self):
        return _liquibook.liquibook_book_OrderBook_stopAsks(self)

    def move_callbacks(self, target):
        return _liquibook.liquibook_book_OrderBook_move_callbacks(self, target)

    def perform_callbacks(self):
        return _liquibook.liquibook_book_OrderBook_perform_callbacks(self)

    def log(self, out):
        return _liquibook.liquibook_book_OrderBook_log(self, out)

    def perform_callback(self, cb):
        return _liquibook.liquibook_book_OrderBook_perform_callback(self, cb)

    def match_order(self, inbound_order, inbound_price, current_orders, deferred_aons):
        return _liquibook.liquibook_book_OrderBook_match_order(self, inbound_order, inbound_price, current_orders, deferred_aons)

    def on_accept(self, order, quantity):
        return _liquibook.liquibook_book_OrderBook_on_accept(self, order, quantity)

    def on_accept_stop(self, order):
        return _liquibook.liquibook_book_OrderBook_on_accept_stop(self, order)

    def on_trigger_stop(self, order):
        return _liquibook.liquibook_book_OrderBook_on_trigger_stop(self, order)

    def on_reject(self, order, reason):
        return _liquibook.liquibook_book_OrderBook_on_reject(self, order, reason)

    def on_fill(self, order, matched_order, fill_qty, fill_price, inbound_order_filled, matched_order_filled):
        return _liquibook.liquibook_book_OrderBook_on_fill(self, order, matched_order, fill_qty, fill_price, inbound_order_filled, matched_order_filled)

    def on_cancel(self, order, quantity):
        return _liquibook.liquibook_book_OrderBook_on_cancel(self, order, quantity)

    def on_cancel_stop(self, order):
        return _liquibook.liquibook_book_OrderBook_on_cancel_stop(self, order)

    def on_cancel_reject(self, order, reason):
        return _liquibook.liquibook_book_OrderBook_on_cancel_reject(self, order, reason)

    def on_replace(self, order, current_qty, new_qty, new_price):
        return _liquibook.liquibook_book_OrderBook_on_replace(self, order, current_qty, new_qty, new_price)

    def on_replace_reject(self, order, reason):
        return _liquibook.liquibook_book_OrderBook_on_replace_reject(self, order, reason)

    def on_trade(self, book, qty, price):
        return _liquibook.liquibook_book_OrderBook_on_trade(self, book, qty, price)

    def on_order_book_change(self):
        return _liquibook.liquibook_book_OrderBook_on_order_book_change(self)
    __swig_destroy__ = _liquibook.delete_liquibook_book_OrderBook
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_liquibook_book_OrderBook(self)
        return weakref.proxy(self)

# Register liquibook_book_OrderBook in _liquibook:
_liquibook.liquibook_book_OrderBook_swigregister(liquibook_book_OrderBook)
class liquibook_book_OrderBookListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_order_book_change(self, book):
        return _liquibook.liquibook_book_OrderBookListener_on_order_book_change(self, book)

    def __init__(self):
        if self.__class__ == liquibook_book_OrderBookListener:
            _self = None
        else:
            _self = self
        _liquibook.liquibook_book_OrderBookListener_swiginit(self, _liquibook.new_liquibook_book_OrderBookListener(_self, ))
    __swig_destroy__ = _liquibook.delete_liquibook_book_OrderBookListener
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_liquibook_book_OrderBookListener(self)
        return weakref.proxy(self)

# Register liquibook_book_OrderBookListener in _liquibook:
_liquibook.liquibook_book_OrderBookListener_swigregister(liquibook_book_OrderBookListener)
class liquibook_book_Depth(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _liquibook.liquibook_book_Depth_swiginit(self, _liquibook.new_liquibook_book_Depth())

    def end(self):
        return _liquibook.liquibook_book_Depth_end(self)

    def bids(self, *args):
        return _liquibook.liquibook_book_Depth_bids(self, *args)

    def last_bid_level(self, *args):
        return _liquibook.liquibook_book_Depth_last_bid_level(self, *args)

    def asks(self, *args):
        return _liquibook.liquibook_book_Depth_asks(self, *args)

    def last_ask_level(self, *args):
        return _liquibook.liquibook_book_Depth_last_ask_level(self, *args)

    def add_order(self, price, qty, is_bid):
        return _liquibook.liquibook_book_Depth_add_order(self, price, qty, is_bid)

    def ignore_fill_qty(self, qty, is_bid):
        return _liquibook.liquibook_book_Depth_ignore_fill_qty(self, qty, is_bid)

    def fill_order(self, price, fill_qty, filled, is_bid):
        return _liquibook.liquibook_book_Depth_fill_order(self, price, fill_qty, filled, is_bid)

    def close_order(self, price, open_qty, is_bid):
        return _liquibook.liquibook_book_Depth_close_order(self, price, open_qty, is_bid)

    def change_qty_order(self, price, qty_delta, is_bid):
        return _liquibook.liquibook_book_Depth_change_qty_order(self, price, qty_delta, is_bid)

    def replace_order(self, current_price, new_price, current_qty, new_qty, is_bid):
        return _liquibook.liquibook_book_Depth_replace_order(self, current_price, new_price, current_qty, new_qty, is_bid)

    def needs_bid_restoration(self, restoration_price):
        return _liquibook.liquibook_book_Depth_needs_bid_restoration(self, restoration_price)

    def needs_ask_restoration(self, restoration_price):
        return _liquibook.liquibook_book_Depth_needs_ask_restoration(self, restoration_price)

    def changed(self):
        return _liquibook.liquibook_book_Depth_changed(self)

    def last_change(self):
        return _liquibook.liquibook_book_Depth_last_change(self)

    def last_published_change(self):
        return _liquibook.liquibook_book_Depth_last_published_change(self)

    def published(self):
        return _liquibook.liquibook_book_Depth_published(self)

    def get_bid_levels(self):
        return _liquibook.liquibook_book_Depth_get_bid_levels(self)

    def get_ask_levels(self):
        return _liquibook.liquibook_book_Depth_get_ask_levels(self)
    __swig_destroy__ = _liquibook.delete_liquibook_book_Depth

# Register liquibook_book_Depth in _liquibook:
_liquibook.liquibook_book_Depth_swigregister(liquibook_book_Depth)
class depth_level_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _liquibook.depth_level_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _liquibook.depth_level_vector___nonzero__(self)

    def __bool__(self):
        return _liquibook.depth_level_vector___bool__(self)

    def __len__(self):
        return _liquibook.depth_level_vector___len__(self)

    def __getslice__(self, i, j):
        return _liquibook.depth_level_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _liquibook.depth_level_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _liquibook.depth_level_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _liquibook.depth_level_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _liquibook.depth_level_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _liquibook.depth_level_vector___setitem__(self, *args)

    def pop(self):
        return _liquibook.depth_level_vector_pop(self)

    def append(self, x):
        return _liquibook.depth_level_vector_append(self, x)

    def empty(self):
        return _liquibook.depth_level_vector_empty(self)

    def size(self):
        return _liquibook.depth_level_vector_size(self)

    def swap(self, v):
        return _liquibook.depth_level_vector_swap(self, v)

    def begin(self):
        return _liquibook.depth_level_vector_begin(self)

    def end(self):
        return _liquibook.depth_level_vector_end(self)

    def rbegin(self):
        return _liquibook.depth_level_vector_rbegin(self)

    def rend(self):
        return _liquibook.depth_level_vector_rend(self)

    def clear(self):
        return _liquibook.depth_level_vector_clear(self)

    def get_allocator(self):
        return _liquibook.depth_level_vector_get_allocator(self)

    def pop_back(self):
        return _liquibook.depth_level_vector_pop_back(self)

    def erase(self, *args):
        return _liquibook.depth_level_vector_erase(self, *args)

    def __init__(self, *args):
        _liquibook.depth_level_vector_swiginit(self, _liquibook.new_depth_level_vector(*args))

    def push_back(self, x):
        return _liquibook.depth_level_vector_push_back(self, x)

    def front(self):
        return _liquibook.depth_level_vector_front(self)

    def back(self):
        return _liquibook.depth_level_vector_back(self)

    def assign(self, n, x):
        return _liquibook.depth_level_vector_assign(self, n, x)

    def resize(self, *args):
        return _liquibook.depth_level_vector_resize(self, *args)

    def insert(self, *args):
        return _liquibook.depth_level_vector_insert(self, *args)

    def reserve(self, n):
        return _liquibook.depth_level_vector_reserve(self, n)

    def capacity(self):
        return _liquibook.depth_level_vector_capacity(self)
    __swig_destroy__ = _liquibook.delete_depth_level_vector

# Register depth_level_vector in _liquibook:
_liquibook.depth_level_vector_swigregister(depth_level_vector)
class DepthOrderBook(liquibook_book_OrderBook):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == DepthOrderBook:
            _self = None
        else:
            _self = self
        _liquibook.DepthOrderBook_swiginit(self, _liquibook.new_DepthOrderBook(_self, *args))

    def set_bbo_listener(self, bbo_listener):
        return _liquibook.DepthOrderBook_set_bbo_listener(self, bbo_listener)

    def set_depth_listener(self, depth_listener):
        return _liquibook.DepthOrderBook_set_depth_listener(self, depth_listener)

    def depth(self, *args):
        return _liquibook.DepthOrderBook_depth(self, *args)

    def on_accept(self, order, quantity):
        return _liquibook.DepthOrderBook_on_accept(self, order, quantity)

    def on_accept_stop(self, order):
        return _liquibook.DepthOrderBook_on_accept_stop(self, order)

    def on_trigger_stop(self, order):
        return _liquibook.DepthOrderBook_on_trigger_stop(self, order)

    def on_fill(self, order, matched_order, fill_qty, fill_price, inbound_order_filled, matched_order_filled):
        return _liquibook.DepthOrderBook_on_fill(self, order, matched_order, fill_qty, fill_price, inbound_order_filled, matched_order_filled)

    def on_cancel(self, order, quantity):
        return _liquibook.DepthOrderBook_on_cancel(self, order, quantity)

    def on_cancel_stop(self, order):
        return _liquibook.DepthOrderBook_on_cancel_stop(self, order)

    def on_replace(self, order, current_qty, new_qty, new_price):
        return _liquibook.DepthOrderBook_on_replace(self, order, current_qty, new_qty, new_price)

    def on_order_book_change(self):
        return _liquibook.DepthOrderBook_on_order_book_change(self)
    __swig_destroy__ = _liquibook.delete_DepthOrderBook
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_DepthOrderBook(self)
        return weakref.proxy(self)

    def perform_callback(self, cb):
        return _liquibook.DepthOrderBook_perform_callback(self, cb)

    def match_order(self, inbound_order, inbound_price, current_orders, deferred_aons):
        return _liquibook.DepthOrderBook_match_order(self, inbound_order, inbound_price, current_orders, deferred_aons)

    def on_reject(self, order, reason):
        return _liquibook.DepthOrderBook_on_reject(self, order, reason)

    def on_cancel_reject(self, order, reason):
        return _liquibook.DepthOrderBook_on_cancel_reject(self, order, reason)

    def on_replace_reject(self, order, reason):
        return _liquibook.DepthOrderBook_on_replace_reject(self, order, reason)

    def on_trade(self, book, qty, price):
        return _liquibook.DepthOrderBook_on_trade(self, book, qty, price)

# Register DepthOrderBook in _liquibook:
_liquibook.DepthOrderBook_swigregister(DepthOrderBook)
class OrderListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_accept(self, order):
        return _liquibook.OrderListener_on_accept(self, order)

    def on_trigger_stop(self, order):
        return _liquibook.OrderListener_on_trigger_stop(self, order)

    def on_reject(self, order, reason):
        return _liquibook.OrderListener_on_reject(self, order, reason)

    def on_fill(self, order, matched_order, fill_qty, fill_price):
        return _liquibook.OrderListener_on_fill(self, order, matched_order, fill_qty, fill_price)

    def on_cancel(self, order):
        return _liquibook.OrderListener_on_cancel(self, order)

    def on_cancel_reject(self, order, reason):
        return _liquibook.OrderListener_on_cancel_reject(self, order, reason)

    def on_replace(self, order, size_delta, new_price):
        return _liquibook.OrderListener_on_replace(self, order, size_delta, new_price)

    def on_replace_reject(self, order, reason):
        return _liquibook.OrderListener_on_replace_reject(self, order, reason)

    def __init__(self):
        if self.__class__ == OrderListener:
            _self = None
        else:
            _self = self
        _liquibook.OrderListener_swiginit(self, _liquibook.new_OrderListener(_self, ))
    __swig_destroy__ = _liquibook.delete_OrderListener
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_OrderListener(self)
        return weakref.proxy(self)

# Register OrderListener in _liquibook:
_liquibook.OrderListener_swigregister(OrderListener)
class DepthListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_depth_change(self, book, depth):
        return _liquibook.DepthListener_on_depth_change(self, book, depth)

    def __init__(self):
        if self.__class__ == DepthListener:
            _self = None
        else:
            _self = self
        _liquibook.DepthListener_swiginit(self, _liquibook.new_DepthListener(_self, ))
    __swig_destroy__ = _liquibook.delete_DepthListener
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_DepthListener(self)
        return weakref.proxy(self)

# Register DepthListener in _liquibook:
_liquibook.DepthListener_swigregister(DepthListener)
class OrderBookListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_order_book_change(self, book):
        return _liquibook.OrderBookListener_on_order_book_change(self, book)

    def __init__(self):
        if self.__class__ == OrderBookListener:
            _self = None
        else:
            _self = self
        _liquibook.OrderBookListener_swiginit(self, _liquibook.new_OrderBookListener(_self, ))
    __swig_destroy__ = _liquibook.delete_OrderBookListener
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_OrderBookListener(self)
        return weakref.proxy(self)

# Register OrderBookListener in _liquibook:
_liquibook.OrderBookListener_swigregister(OrderBookListener)
class OrderTracker(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, order, conditions=0):
        _liquibook.OrderTracker_swiginit(self, _liquibook.new_OrderTracker(order, conditions))

    def change_qty(self, delta):
        return _liquibook.OrderTracker_change_qty(self, delta)

    def fill(self, qty):
        return _liquibook.OrderTracker_fill(self, qty)

    def filled(self):
        return _liquibook.OrderTracker_filled(self)

    def filled_qty(self):
        return _liquibook.OrderTracker_filled_qty(self)

    def open_qty(self):
        return _liquibook.OrderTracker_open_qty(self)

    def ptr(self, *args):
        return _liquibook.OrderTracker_ptr(self, *args)

    def all_or_none(self):
        return _liquibook.OrderTracker_all_or_none(self)

    def immediate_or_cancel(self):
        return _liquibook.OrderTracker_immediate_or_cancel(self)

    def reserve(self, reserved):
        return _liquibook.OrderTracker_reserve(self, reserved)
    __swig_destroy__ = _liquibook.delete_OrderTracker

# Register OrderTracker in _liquibook:
_liquibook.OrderTracker_swigregister(OrderTracker)
class OrderTrackerMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _liquibook.OrderTrackerMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _liquibook.OrderTrackerMap___nonzero__(self)

    def __bool__(self):
        return _liquibook.OrderTrackerMap___bool__(self)

    def __len__(self):
        return _liquibook.OrderTrackerMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _liquibook.OrderTrackerMap___getitem__(self, key)

    def __delitem__(self, key):
        return _liquibook.OrderTrackerMap___delitem__(self, key)

    def has_key(self, key):
        return _liquibook.OrderTrackerMap_has_key(self, key)

    def keys(self):
        return _liquibook.OrderTrackerMap_keys(self)

    def values(self):
        return _liquibook.OrderTrackerMap_values(self)

    def items(self):
        return _liquibook.OrderTrackerMap_items(self)

    def __contains__(self, key):
        return _liquibook.OrderTrackerMap___contains__(self, key)

    def key_iterator(self):
        return _liquibook.OrderTrackerMap_key_iterator(self)

    def value_iterator(self):
        return _liquibook.OrderTrackerMap_value_iterator(self)

    def __setitem__(self, *args):
        return _liquibook.OrderTrackerMap___setitem__(self, *args)

    def __init__(self, *args):
        _liquibook.OrderTrackerMap_swiginit(self, _liquibook.new_OrderTrackerMap(*args))

    def empty(self):
        return _liquibook.OrderTrackerMap_empty(self)

    def size(self):
        return _liquibook.OrderTrackerMap_size(self)

    def swap(self, v):
        return _liquibook.OrderTrackerMap_swap(self, v)

    def begin(self):
        return _liquibook.OrderTrackerMap_begin(self)

    def end(self):
        return _liquibook.OrderTrackerMap_end(self)

    def rbegin(self):
        return _liquibook.OrderTrackerMap_rbegin(self)

    def rend(self):
        return _liquibook.OrderTrackerMap_rend(self)

    def clear(self):
        return _liquibook.OrderTrackerMap_clear(self)

    def get_allocator(self):
        return _liquibook.OrderTrackerMap_get_allocator(self)

    def count(self, x):
        return _liquibook.OrderTrackerMap_count(self, x)

    def erase(self, *args):
        return _liquibook.OrderTrackerMap_erase(self, *args)

    def find(self, x):
        return _liquibook.OrderTrackerMap_find(self, x)

    def lower_bound(self, x):
        return _liquibook.OrderTrackerMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _liquibook.OrderTrackerMap_upper_bound(self, x)

    def equal_range(self, *args):
        return _liquibook.OrderTrackerMap_equal_range(self, *args)
    __swig_destroy__ = _liquibook.delete_OrderTrackerMap

# Register OrderTrackerMap in _liquibook:
_liquibook.OrderTrackerMap_swigregister(OrderTrackerMap)
class DepthOrderBookBboListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_bbo_change(self, book, depth):
        return _liquibook.DepthOrderBookBboListener_on_bbo_change(self, book, depth)

    def __init__(self):
        if self.__class__ == DepthOrderBookBboListener:
            _self = None
        else:
            _self = self
        _liquibook.DepthOrderBookBboListener_swiginit(self, _liquibook.new_DepthOrderBookBboListener(_self, ))
    __swig_destroy__ = _liquibook.delete_DepthOrderBookBboListener
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_DepthOrderBookBboListener(self)
        return weakref.proxy(self)

# Register DepthOrderBookBboListener in _liquibook:
_liquibook.DepthOrderBookBboListener_swigregister(DepthOrderBookBboListener)
class SimpleOrderBook(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SimpleOrderBook:
            _self = None
        else:
            _self = self
        _liquibook.SimpleOrderBook_swiginit(self, _liquibook.new_SimpleOrderBook(_self, ))

    def perform_callback(self, cb):
        return _liquibook.SimpleOrderBook_perform_callback(self, cb)
    __swig_destroy__ = _liquibook.delete_SimpleOrderBook
    def __disown__(self):
        self.this.disown()
        _liquibook.disown_SimpleOrderBook(self)
        return weakref.proxy(self)

# Register SimpleOrderBook in _liquibook:
_liquibook.SimpleOrderBook_swigregister(SimpleOrderBook)

