# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('libtgw_python38', [dirname(__file__)])
        except ImportError:
            import libtgw_python38
            return libtgw_python38
        if fp is not None:
            try:
                _mod = imp.load_module('libtgw_python38', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    libtgw_python38 = swig_import_helper()
    del swig_import_helper
else:
    import libtgw_python38
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return libtgw_python38.SwigPyIterator_value(self)
    def incr(self, n=1): return libtgw_python38.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return libtgw_python38.SwigPyIterator_decr(self, n)
    def distance(self, *args): return libtgw_python38.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return libtgw_python38.SwigPyIterator_equal(self, *args)
    def copy(self): return libtgw_python38.SwigPyIterator_copy(self)
    def next(self): return libtgw_python38.SwigPyIterator_next(self)
    def __next__(self): return libtgw_python38.SwigPyIterator___next__(self)
    def previous(self): return libtgw_python38.SwigPyIterator_previous(self)
    def advance(self, *args): return libtgw_python38.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return libtgw_python38.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return libtgw_python38.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return libtgw_python38.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return libtgw_python38.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return libtgw_python38.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return libtgw_python38.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = libtgw_python38.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ConstField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstField, name)
    __repr__ = _swig_repr
    kIPMaxLen = libtgw_python38.ConstField_kIPMaxLen
    kUMSItemLen = libtgw_python38.ConstField_kUMSItemLen
    kUsernameLen = libtgw_python38.ConstField_kUsernameLen
    kPasswordLen = libtgw_python38.ConstField_kPasswordLen
    kSecurityCodeLen = libtgw_python38.ConstField_kSecurityCodeLen
    kHistorySecurityCodeLen = libtgw_python38.ConstField_kHistorySecurityCodeLen
    kPushSecurityCodeLen = libtgw_python38.ConstField_kPushSecurityCodeLen
    kSecurityNameLen = libtgw_python38.ConstField_kSecurityNameLen
    kTradingPhaseCodeLen = libtgw_python38.ConstField_kTradingPhaseCodeLen
    kExChangeInstIDLen = libtgw_python38.ConstField_kExChangeInstIDLen
    kPositionLevelLen = libtgw_python38.ConstField_kPositionLevelLen
    kMDStreamIDLen = libtgw_python38.ConstField_kMDStreamIDLen
    kSecurityStatusLen = libtgw_python38.ConstField_kSecurityStatusLen
    kSecuritySymbolLen = libtgw_python38.ConstField_kSecuritySymbolLen
    kSecurityEnglishNameLen = libtgw_python38.ConstField_kSecurityEnglishNameLen
    kSecurityTypeLen = libtgw_python38.ConstField_kSecurityTypeLen
    kCurrencyLen = libtgw_python38.ConstField_kCurrencyLen
    kVolumeTradeLen = libtgw_python38.ConstField_kVolumeTradeLen
    kValueTradeLen = libtgw_python38.ConstField_kValueTradeLen
    kFutureSecurityCodeLen = libtgw_python38.ConstField_kFutureSecurityCodeLen
    kMDStreamIDMaxLen = libtgw_python38.ConstField_kMDStreamIDMaxLen
    kDataPermission = libtgw_python38.ConstField_kDataPermission
    kTokenMaxLen = libtgw_python38.ConstField_kTokenMaxLen
    kQuerySecurityCodeLen = libtgw_python38.ConstField_kQuerySecurityCodeLen
    kTradingStatusLen = libtgw_python38.ConstField_kTradingStatusLen
    kSymbolLen = libtgw_python38.ConstField_kSymbolLen
    kSecurityAbbreviationLen = libtgw_python38.ConstField_kSecurityAbbreviationLen
    kMaxTypesLen = libtgw_python38.ConstField_kMaxTypesLen
    kTypesLen = libtgw_python38.ConstField_kTypesLen
    kCodeTableSecurityStatusMaxLen = libtgw_python38.ConstField_kCodeTableSecurityStatusMaxLen
    RegularShare = libtgw_python38.ConstField_RegularShare
    def __init__(self): 
        this = libtgw_python38.new_ConstField()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ConstField
    __del__ = lambda self : None;
ConstField_swigregister = libtgw_python38.ConstField_swigregister
ConstField_swigregister(ConstField)

class MarketType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MarketType, name)
    __repr__ = _swig_repr
    kNone = libtgw_python38.MarketType_kNone
    kNEEQ = libtgw_python38.MarketType_kNEEQ
    kSHFE = libtgw_python38.MarketType_kSHFE
    kCFFEX = libtgw_python38.MarketType_kCFFEX
    kDCE = libtgw_python38.MarketType_kDCE
    kCZCE = libtgw_python38.MarketType_kCZCE
    kINE = libtgw_python38.MarketType_kINE
    kSSE = libtgw_python38.MarketType_kSSE
    kSZSE = libtgw_python38.MarketType_kSZSE
    kHKEx = libtgw_python38.MarketType_kHKEx
    kBK = libtgw_python38.MarketType_kBK
    kMax = libtgw_python38.MarketType_kMax
    def __init__(self): 
        this = libtgw_python38.new_MarketType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MarketType
    __del__ = lambda self : None;
MarketType_swigregister = libtgw_python38.MarketType_swigregister
MarketType_swigregister(MarketType)

class LogLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevel, name)
    __repr__ = _swig_repr
    kTrace = libtgw_python38.LogLevel_kTrace
    kDebug = libtgw_python38.LogLevel_kDebug
    kInfo = libtgw_python38.LogLevel_kInfo
    kWarn = libtgw_python38.LogLevel_kWarn
    kError = libtgw_python38.LogLevel_kError
    kFatal = libtgw_python38.LogLevel_kFatal
    def __init__(self): 
        this = libtgw_python38.new_LogLevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_LogLevel
    __del__ = lambda self : None;
LogLevel_swigregister = libtgw_python38.LogLevel_swigregister
LogLevel_swigregister(LogLevel)

class EventLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventLevel, name)
    __repr__ = _swig_repr
    kInfo = libtgw_python38.EventLevel_kInfo
    kWarn = libtgw_python38.EventLevel_kWarn
    kError = libtgw_python38.EventLevel_kError
    def __init__(self): 
        this = libtgw_python38.new_EventLevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_EventLevel
    __del__ = lambda self : None;
EventLevel_swigregister = libtgw_python38.EventLevel_swigregister
EventLevel_swigregister(EventLevel)

class ErrorCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorCode, name)
    __repr__ = _swig_repr
    kFailure = libtgw_python38.ErrorCode_kFailure
    kUnInited = libtgw_python38.ErrorCode_kUnInited
    kNullSpi = libtgw_python38.ErrorCode_kNullSpi
    kParamIllegal = libtgw_python38.ErrorCode_kParamIllegal
    kNetError = libtgw_python38.ErrorCode_kNetError
    kPermissionError = libtgw_python38.ErrorCode_kPermissionError
    kLogonFailed = libtgw_python38.ErrorCode_kLogonFailed
    kAllocateMemoryFailed = libtgw_python38.ErrorCode_kAllocateMemoryFailed
    kChannelError = libtgw_python38.ErrorCode_kChannelError
    kOverLoad = libtgw_python38.ErrorCode_kOverLoad
    kLogoned = libtgw_python38.ErrorCode_kLogoned
    kHqsError = libtgw_python38.ErrorCode_kHqsError
    kNonQueryTimePeriod = libtgw_python38.ErrorCode_kNonQueryTimePeriod
    kDbAndCodeTableNoCode = libtgw_python38.ErrorCode_kDbAndCodeTableNoCode
    kIllegalMode = libtgw_python38.ErrorCode_kIllegalMode
    kThreadBusy = libtgw_python38.ErrorCode_kThreadBusy
    kParseDataError = libtgw_python38.ErrorCode_kParseDataError
    kTimeout = libtgw_python38.ErrorCode_kTimeout
    kFlowOverLimit = libtgw_python38.ErrorCode_kFlowOverLimit
    kCodeTableCacheNotAvailable = libtgw_python38.ErrorCode_kCodeTableCacheNotAvailable
    kOverMaxSubLimit = libtgw_python38.ErrorCode_kOverMaxSubLimit
    kLostConnection = libtgw_python38.ErrorCode_kLostConnection
    kOverMaxQueryLimit = libtgw_python38.ErrorCode_kOverMaxQueryLimit
    kFunctionIdNull = libtgw_python38.ErrorCode_kFunctionIdNull
    kDataEmpty = libtgw_python38.ErrorCode_kDataEmpty
    kUserNotExist = libtgw_python38.ErrorCode_kUserNotExist
    kVerifyFailure = libtgw_python38.ErrorCode_kVerifyFailure
    kApiInterfaceUsing = libtgw_python38.ErrorCode_kApiInterfaceUsing
    kSuccess = libtgw_python38.ErrorCode_kSuccess
    def __init__(self): 
        this = libtgw_python38.new_ErrorCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ErrorCode
    __del__ = lambda self : None;
ErrorCode_swigregister = libtgw_python38.ErrorCode_swigregister
ErrorCode_swigregister(ErrorCode)

class EventCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventCode, name)
    __repr__ = _swig_repr
    kUMSConnectSuccess = libtgw_python38.EventCode_kUMSConnectSuccess
    kUMSConnectFailed = libtgw_python38.EventCode_kUMSConnectFailed
    kUMSLogonSuccess = libtgw_python38.EventCode_kUMSLogonSuccess
    kUMSLogonFailed = libtgw_python38.EventCode_kUMSLogonFailed
    kUMSHeartbeatTimeout = libtgw_python38.EventCode_kUMSHeartbeatTimeout
    kChannelTCPInitSuccess = libtgw_python38.EventCode_kChannelTCPInitSuccess
    kChannelTCPInitFailed = libtgw_python38.EventCode_kChannelTCPInitFailed
    kChannelTCPConnectSuccess = libtgw_python38.EventCode_kChannelTCPConnectSuccess
    kChannelTCPConnectFailed = libtgw_python38.EventCode_kChannelTCPConnectFailed
    kChannelTCPLogonSuccess = libtgw_python38.EventCode_kChannelTCPLogonSuccess
    kChannelTCPLogonFailed = libtgw_python38.EventCode_kChannelTCPLogonFailed
    kChannelTCPSessionClosed = libtgw_python38.EventCode_kChannelTCPSessionClosed
    kChannelTCPHeartbeatTimeout = libtgw_python38.EventCode_kChannelTCPHeartbeatTimeout
    def __init__(self): 
        this = libtgw_python38.new_EventCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_EventCode
    __del__ = lambda self : None;
EventCode_swigregister = libtgw_python38.EventCode_swigregister
EventCode_swigregister(EventCode)

class ApiMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ApiMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ApiMode, name)
    __repr__ = _swig_repr
    kColocationMode = libtgw_python38.ApiMode_kColocationMode
    kInternetMode = libtgw_python38.ApiMode_kInternetMode
    def __init__(self): 
        this = libtgw_python38.new_ApiMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ApiMode
    __del__ = lambda self : None;
ApiMode_swigregister = libtgw_python38.ApiMode_swigregister
ApiMode_swigregister(ApiMode)

class ColocatChannelMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColocatChannelMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColocatChannelMode, name)
    __repr__ = _swig_repr
    kTCP = libtgw_python38.ColocatChannelMode_kTCP
    kQTCP = libtgw_python38.ColocatChannelMode_kQTCP
    kRTCP = libtgw_python38.ColocatChannelMode_kRTCP
    def __init__(self): 
        this = libtgw_python38.new_ColocatChannelMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ColocatChannelMode
    __del__ = lambda self : None;
ColocatChannelMode_swigregister = libtgw_python38.ColocatChannelMode_swigregister
ColocatChannelMode_swigregister(ColocatChannelMode)

class SubscribeDataType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeDataType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeDataType, name)
    __repr__ = _swig_repr
    kNone = libtgw_python38.SubscribeDataType_kNone
    k1MinKline = libtgw_python38.SubscribeDataType_k1MinKline
    k3MinKline = libtgw_python38.SubscribeDataType_k3MinKline
    k5MinKline = libtgw_python38.SubscribeDataType_k5MinKline
    k10MinKline = libtgw_python38.SubscribeDataType_k10MinKline
    k15MinKline = libtgw_python38.SubscribeDataType_k15MinKline
    k30MinKline = libtgw_python38.SubscribeDataType_k30MinKline
    k60MinKline = libtgw_python38.SubscribeDataType_k60MinKline
    k120MinKline = libtgw_python38.SubscribeDataType_k120MinKline
    kSnapshotDerive = libtgw_python38.SubscribeDataType_kSnapshotDerive
    kSnapshot = libtgw_python38.SubscribeDataType_kSnapshot
    kOptionSnapshot = libtgw_python38.SubscribeDataType_kOptionSnapshot
    kHKTSnapshot = libtgw_python38.SubscribeDataType_kHKTSnapshot
    kIndexSnapshot = libtgw_python38.SubscribeDataType_kIndexSnapshot
    kAfterHourFixedPriceSnapshot = libtgw_python38.SubscribeDataType_kAfterHourFixedPriceSnapshot
    kCSIIndexSnapshot = libtgw_python38.SubscribeDataType_kCSIIndexSnapshot
    kCnIndexSnapshot = libtgw_python38.SubscribeDataType_kCnIndexSnapshot
    kHKTRealtimeLimit = libtgw_python38.SubscribeDataType_kHKTRealtimeLimit
    kHKTProductStatus = libtgw_python38.SubscribeDataType_kHKTProductStatus
    kHKTVCM = libtgw_python38.SubscribeDataType_kHKTVCM
    kFutureSnapshot = libtgw_python38.SubscribeDataType_kFutureSnapshot
    def __init__(self): 
        this = libtgw_python38.new_SubscribeDataType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_SubscribeDataType
    __del__ = lambda self : None;
SubscribeDataType_swigregister = libtgw_python38.SubscribeDataType_swigregister
SubscribeDataType_swigregister(SubscribeDataType)

class MDDatatype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDDatatype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDDatatype, name)
    __repr__ = _swig_repr
    k1KLine = libtgw_python38.MDDatatype_k1KLine
    k3KLine = libtgw_python38.MDDatatype_k3KLine
    k5KLine = libtgw_python38.MDDatatype_k5KLine
    k10KLine = libtgw_python38.MDDatatype_k10KLine
    k15KLine = libtgw_python38.MDDatatype_k15KLine
    k30KLine = libtgw_python38.MDDatatype_k30KLine
    k60KLine = libtgw_python38.MDDatatype_k60KLine
    k120KLine = libtgw_python38.MDDatatype_k120KLine
    kDayKline = libtgw_python38.MDDatatype_kDayKline
    kWeekKline = libtgw_python38.MDDatatype_kWeekKline
    kMonthKline = libtgw_python38.MDDatatype_kMonthKline
    kSeasonKline = libtgw_python38.MDDatatype_kSeasonKline
    kYearKline = libtgw_python38.MDDatatype_kYearKline
    kTickExecution = libtgw_python38.MDDatatype_kTickExecution
    kSnapshot = libtgw_python38.MDDatatype_kSnapshot
    def __init__(self): 
        this = libtgw_python38.new_MDDatatype()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDDatatype
    __del__ = lambda self : None;
MDDatatype_swigregister = libtgw_python38.MDDatatype_swigregister
MDDatatype_swigregister(MDDatatype)

class VarietyCategory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarietyCategory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarietyCategory, name)
    __repr__ = _swig_repr
    kNone = libtgw_python38.VarietyCategory_kNone
    kStock = libtgw_python38.VarietyCategory_kStock
    kFund = libtgw_python38.VarietyCategory_kFund
    kBond = libtgw_python38.VarietyCategory_kBond
    kOption = libtgw_python38.VarietyCategory_kOption
    kIndex = libtgw_python38.VarietyCategory_kIndex
    kHKT = libtgw_python38.VarietyCategory_kHKT
    kFutureOption = libtgw_python38.VarietyCategory_kFutureOption
    kCFETSRMB = libtgw_python38.VarietyCategory_kCFETSRMB
    kHKEx = libtgw_python38.VarietyCategory_kHKEx
    kOthers = libtgw_python38.VarietyCategory_kOthers
    def __init__(self): 
        this = libtgw_python38.new_VarietyCategory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_VarietyCategory
    __del__ = lambda self : None;
VarietyCategory_swigregister = libtgw_python38.VarietyCategory_swigregister
VarietyCategory_swigregister(VarietyCategory)

class HistoryTaskStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HistoryTaskStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HistoryTaskStatus, name)
    __repr__ = _swig_repr
    kSuccess = libtgw_python38.HistoryTaskStatus_kSuccess
    kFailed = libtgw_python38.HistoryTaskStatus_kFailed
    kTaskCancel = libtgw_python38.HistoryTaskStatus_kTaskCancel
    kTaskWaiting = libtgw_python38.HistoryTaskStatus_kTaskWaiting
    kTaskTimeOut = libtgw_python38.HistoryTaskStatus_kTaskTimeOut
    def __init__(self): 
        this = libtgw_python38.new_HistoryTaskStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_HistoryTaskStatus
    __del__ = lambda self : None;
HistoryTaskStatus_swigregister = libtgw_python38.HistoryTaskStatus_swigregister
HistoryTaskStatus_swigregister(HistoryTaskStatus)

class InternetDataPermission(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternetDataPermission, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternetDataPermission, name)
    __repr__ = _swig_repr
    kSnapshotDerive = libtgw_python38.InternetDataPermission_kSnapshotDerive
    kStockSnapshot = libtgw_python38.InternetDataPermission_kStockSnapshot
    kIndexSnapshot = libtgw_python38.InternetDataPermission_kIndexSnapshot
    kHKTSnapshot = libtgw_python38.InternetDataPermission_kHKTSnapshot
    kOptionSnapshot = libtgw_python38.InternetDataPermission_kOptionSnapshot
    kFutureSnapshot = libtgw_python38.InternetDataPermission_kFutureSnapshot
    kCSIIndexSnapshot = libtgw_python38.InternetDataPermission_kCSIIndexSnapshot
    kAfterHourFixedPriceSnapshot = libtgw_python38.InternetDataPermission_kAfterHourFixedPriceSnapshot
    k1MinKline = libtgw_python38.InternetDataPermission_k1MinKline
    k3MinKline = libtgw_python38.InternetDataPermission_k3MinKline
    k5MinKline = libtgw_python38.InternetDataPermission_k5MinKline
    k10MinKline = libtgw_python38.InternetDataPermission_k10MinKline
    k15MinKline = libtgw_python38.InternetDataPermission_k15MinKline
    k30MinKline = libtgw_python38.InternetDataPermission_k30MinKline
    k60MinKline = libtgw_python38.InternetDataPermission_k60MinKline
    k120MinKline = libtgw_python38.InternetDataPermission_k120MinKline
    kDayKline = libtgw_python38.InternetDataPermission_kDayKline
    kWeekKline = libtgw_python38.InternetDataPermission_kWeekKline
    kMonthKline = libtgw_python38.InternetDataPermission_kMonthKline
    kSeasonKline = libtgw_python38.InternetDataPermission_kSeasonKline
    kYearKline = libtgw_python38.InternetDataPermission_kYearKline
    kExFactor = libtgw_python38.InternetDataPermission_kExFactor
    def __init__(self): 
        this = libtgw_python38.new_InternetDataPermission()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_InternetDataPermission
    __del__ = lambda self : None;
InternetDataPermission_swigregister = libtgw_python38.InternetDataPermission_swigregister
InternetDataPermission_swigregister(InternetDataPermission)

class ColocaCfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColocaCfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColocaCfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["channel_mode"] = libtgw_python38.ColocaCfg_channel_mode_set
    __swig_getmethods__["channel_mode"] = libtgw_python38.ColocaCfg_channel_mode_get
    if _newclass:channel_mode = _swig_property(libtgw_python38.ColocaCfg_channel_mode_get, libtgw_python38.ColocaCfg_channel_mode_set)
    __swig_setmethods__["qtcp_channel_thread"] = libtgw_python38.ColocaCfg_qtcp_channel_thread_set
    __swig_getmethods__["qtcp_channel_thread"] = libtgw_python38.ColocaCfg_qtcp_channel_thread_get
    if _newclass:qtcp_channel_thread = _swig_property(libtgw_python38.ColocaCfg_qtcp_channel_thread_get, libtgw_python38.ColocaCfg_qtcp_channel_thread_set)
    __swig_setmethods__["qtcp_req_time_out"] = libtgw_python38.ColocaCfg_qtcp_req_time_out_set
    __swig_getmethods__["qtcp_req_time_out"] = libtgw_python38.ColocaCfg_qtcp_req_time_out_get
    if _newclass:qtcp_req_time_out = _swig_property(libtgw_python38.ColocaCfg_qtcp_req_time_out_get, libtgw_python38.ColocaCfg_qtcp_req_time_out_set)
    __swig_setmethods__["qtcp_max_req_cnt"] = libtgw_python38.ColocaCfg_qtcp_max_req_cnt_set
    __swig_getmethods__["qtcp_max_req_cnt"] = libtgw_python38.ColocaCfg_qtcp_max_req_cnt_get
    if _newclass:qtcp_max_req_cnt = _swig_property(libtgw_python38.ColocaCfg_qtcp_max_req_cnt_get, libtgw_python38.ColocaCfg_qtcp_max_req_cnt_set)
    def __init__(self): 
        this = libtgw_python38.new_ColocaCfg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ColocaCfg
    __del__ = lambda self : None;
ColocaCfg_swigregister = libtgw_python38.ColocaCfg_swigregister
ColocaCfg_swigregister(ColocaCfg)

class Cfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["server_vip"] = libtgw_python38.Cfg_server_vip_set
    __swig_getmethods__["server_vip"] = libtgw_python38.Cfg_server_vip_get
    if _newclass:server_vip = _swig_property(libtgw_python38.Cfg_server_vip_get, libtgw_python38.Cfg_server_vip_set)
    __swig_setmethods__["server_port"] = libtgw_python38.Cfg_server_port_set
    __swig_getmethods__["server_port"] = libtgw_python38.Cfg_server_port_get
    if _newclass:server_port = _swig_property(libtgw_python38.Cfg_server_port_get, libtgw_python38.Cfg_server_port_set)
    __swig_setmethods__["username"] = libtgw_python38.Cfg_username_set
    __swig_getmethods__["username"] = libtgw_python38.Cfg_username_get
    if _newclass:username = _swig_property(libtgw_python38.Cfg_username_get, libtgw_python38.Cfg_username_set)
    __swig_setmethods__["password"] = libtgw_python38.Cfg_password_set
    __swig_getmethods__["password"] = libtgw_python38.Cfg_password_get
    if _newclass:password = _swig_property(libtgw_python38.Cfg_password_get, libtgw_python38.Cfg_password_set)
    __swig_setmethods__["coloca_cfg"] = libtgw_python38.Cfg_coloca_cfg_set
    __swig_getmethods__["coloca_cfg"] = libtgw_python38.Cfg_coloca_cfg_get
    if _newclass:coloca_cfg = _swig_property(libtgw_python38.Cfg_coloca_cfg_get, libtgw_python38.Cfg_coloca_cfg_set)
    def __init__(self): 
        this = libtgw_python38.new_Cfg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_Cfg
    __del__ = lambda self : None;
Cfg_swigregister = libtgw_python38.Cfg_swigregister
Cfg_swigregister(Cfg)

class UpdatePassWordReq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UpdatePassWordReq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UpdatePassWordReq, name)
    __repr__ = _swig_repr
    __swig_setmethods__["username"] = libtgw_python38.UpdatePassWordReq_username_set
    __swig_getmethods__["username"] = libtgw_python38.UpdatePassWordReq_username_get
    if _newclass:username = _swig_property(libtgw_python38.UpdatePassWordReq_username_get, libtgw_python38.UpdatePassWordReq_username_set)
    __swig_setmethods__["old_password"] = libtgw_python38.UpdatePassWordReq_old_password_set
    __swig_getmethods__["old_password"] = libtgw_python38.UpdatePassWordReq_old_password_get
    if _newclass:old_password = _swig_property(libtgw_python38.UpdatePassWordReq_old_password_get, libtgw_python38.UpdatePassWordReq_old_password_set)
    __swig_setmethods__["new_password"] = libtgw_python38.UpdatePassWordReq_new_password_set
    __swig_getmethods__["new_password"] = libtgw_python38.UpdatePassWordReq_new_password_get
    if _newclass:new_password = _swig_property(libtgw_python38.UpdatePassWordReq_new_password_get, libtgw_python38.UpdatePassWordReq_new_password_set)
    def __init__(self): 
        this = libtgw_python38.new_UpdatePassWordReq()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_UpdatePassWordReq
    __del__ = lambda self : None;
UpdatePassWordReq_swigregister = libtgw_python38.UpdatePassWordReq_swigregister
UpdatePassWordReq_swigregister(UpdatePassWordReq)

class SubscribeItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscribeItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubscribeItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python38.SubscribeItem_market_set
    __swig_getmethods__["market"] = libtgw_python38.SubscribeItem_market_get
    if _newclass:market = _swig_property(libtgw_python38.SubscribeItem_market_get, libtgw_python38.SubscribeItem_market_set)
    __swig_setmethods__["flag"] = libtgw_python38.SubscribeItem_flag_set
    __swig_getmethods__["flag"] = libtgw_python38.SubscribeItem_flag_get
    if _newclass:flag = _swig_property(libtgw_python38.SubscribeItem_flag_get, libtgw_python38.SubscribeItem_flag_set)
    __swig_setmethods__["security_code"] = libtgw_python38.SubscribeItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.SubscribeItem_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.SubscribeItem_security_code_get, libtgw_python38.SubscribeItem_security_code_set)
    __swig_setmethods__["category_type"] = libtgw_python38.SubscribeItem_category_type_set
    __swig_getmethods__["category_type"] = libtgw_python38.SubscribeItem_category_type_get
    if _newclass:category_type = _swig_property(libtgw_python38.SubscribeItem_category_type_get, libtgw_python38.SubscribeItem_category_type_set)
    def __init__(self): 
        this = libtgw_python38.new_SubscribeItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_SubscribeItem
    __del__ = lambda self : None;
SubscribeItem_swigregister = libtgw_python38.SubscribeItem_swigregister
SubscribeItem_swigregister(SubscribeItem)

class SubFactorItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubFactorItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubFactorItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["factor_type"] = libtgw_python38.SubFactorItem_factor_type_set
    __swig_getmethods__["factor_type"] = libtgw_python38.SubFactorItem_factor_type_get
    if _newclass:factor_type = _swig_property(libtgw_python38.SubFactorItem_factor_type_get, libtgw_python38.SubFactorItem_factor_type_set)
    __swig_setmethods__["factor_sub_type"] = libtgw_python38.SubFactorItem_factor_sub_type_set
    __swig_getmethods__["factor_sub_type"] = libtgw_python38.SubFactorItem_factor_sub_type_get
    if _newclass:factor_sub_type = _swig_property(libtgw_python38.SubFactorItem_factor_sub_type_get, libtgw_python38.SubFactorItem_factor_sub_type_set)
    __swig_setmethods__["factor_name"] = libtgw_python38.SubFactorItem_factor_name_set
    __swig_getmethods__["factor_name"] = libtgw_python38.SubFactorItem_factor_name_get
    if _newclass:factor_name = _swig_property(libtgw_python38.SubFactorItem_factor_name_get, libtgw_python38.SubFactorItem_factor_name_set)
    def __init__(self): 
        this = libtgw_python38.new_SubFactorItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_SubFactorItem
    __del__ = lambda self : None;
SubFactorItem_swigregister = libtgw_python38.SubFactorItem_swigregister
SubFactorItem_swigregister(SubFactorItem)

class ReqKline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqKline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqKline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python38.ReqKline_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.ReqKline_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.ReqKline_security_code_get, libtgw_python38.ReqKline_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python38.ReqKline_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.ReqKline_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.ReqKline_market_type_get, libtgw_python38.ReqKline_market_type_set)
    __swig_setmethods__["cq_flag"] = libtgw_python38.ReqKline_cq_flag_set
    __swig_getmethods__["cq_flag"] = libtgw_python38.ReqKline_cq_flag_get
    if _newclass:cq_flag = _swig_property(libtgw_python38.ReqKline_cq_flag_get, libtgw_python38.ReqKline_cq_flag_set)
    __swig_setmethods__["cq_date"] = libtgw_python38.ReqKline_cq_date_set
    __swig_getmethods__["cq_date"] = libtgw_python38.ReqKline_cq_date_get
    if _newclass:cq_date = _swig_property(libtgw_python38.ReqKline_cq_date_get, libtgw_python38.ReqKline_cq_date_set)
    __swig_setmethods__["qj_flag"] = libtgw_python38.ReqKline_qj_flag_set
    __swig_getmethods__["qj_flag"] = libtgw_python38.ReqKline_qj_flag_get
    if _newclass:qj_flag = _swig_property(libtgw_python38.ReqKline_qj_flag_get, libtgw_python38.ReqKline_qj_flag_set)
    __swig_setmethods__["cyc_type"] = libtgw_python38.ReqKline_cyc_type_set
    __swig_getmethods__["cyc_type"] = libtgw_python38.ReqKline_cyc_type_get
    if _newclass:cyc_type = _swig_property(libtgw_python38.ReqKline_cyc_type_get, libtgw_python38.ReqKline_cyc_type_set)
    __swig_setmethods__["cyc_def"] = libtgw_python38.ReqKline_cyc_def_set
    __swig_getmethods__["cyc_def"] = libtgw_python38.ReqKline_cyc_def_get
    if _newclass:cyc_def = _swig_property(libtgw_python38.ReqKline_cyc_def_get, libtgw_python38.ReqKline_cyc_def_set)
    __swig_setmethods__["auto_complete"] = libtgw_python38.ReqKline_auto_complete_set
    __swig_getmethods__["auto_complete"] = libtgw_python38.ReqKline_auto_complete_get
    if _newclass:auto_complete = _swig_property(libtgw_python38.ReqKline_auto_complete_get, libtgw_python38.ReqKline_auto_complete_set)
    __swig_setmethods__["begin_date"] = libtgw_python38.ReqKline_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python38.ReqKline_begin_date_get
    if _newclass:begin_date = _swig_property(libtgw_python38.ReqKline_begin_date_get, libtgw_python38.ReqKline_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python38.ReqKline_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python38.ReqKline_end_date_get
    if _newclass:end_date = _swig_property(libtgw_python38.ReqKline_end_date_get, libtgw_python38.ReqKline_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python38.ReqKline_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python38.ReqKline_begin_time_get
    if _newclass:begin_time = _swig_property(libtgw_python38.ReqKline_begin_time_get, libtgw_python38.ReqKline_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python38.ReqKline_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python38.ReqKline_end_time_get
    if _newclass:end_time = _swig_property(libtgw_python38.ReqKline_end_time_get, libtgw_python38.ReqKline_end_time_set)
    def __init__(self): 
        this = libtgw_python38.new_ReqKline()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ReqKline
    __del__ = lambda self : None;
ReqKline_swigregister = libtgw_python38.ReqKline_swigregister
ReqKline_swigregister(ReqKline)

class ReqDefault(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqDefault, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqDefault, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python38.ReqDefault_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.ReqDefault_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.ReqDefault_security_code_get, libtgw_python38.ReqDefault_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python38.ReqDefault_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.ReqDefault_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.ReqDefault_market_type_get, libtgw_python38.ReqDefault_market_type_set)
    __swig_setmethods__["date"] = libtgw_python38.ReqDefault_date_set
    __swig_getmethods__["date"] = libtgw_python38.ReqDefault_date_get
    if _newclass:date = _swig_property(libtgw_python38.ReqDefault_date_get, libtgw_python38.ReqDefault_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python38.ReqDefault_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python38.ReqDefault_begin_time_get
    if _newclass:begin_time = _swig_property(libtgw_python38.ReqDefault_begin_time_get, libtgw_python38.ReqDefault_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python38.ReqDefault_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python38.ReqDefault_end_time_get
    if _newclass:end_time = _swig_property(libtgw_python38.ReqDefault_end_time_get, libtgw_python38.ReqDefault_end_time_set)
    def __init__(self): 
        this = libtgw_python38.new_ReqDefault()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ReqDefault
    __del__ = lambda self : None;
ReqDefault_swigregister = libtgw_python38.ReqDefault_swigregister
ReqDefault_swigregister(ReqDefault)

class ReqHistoryItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqHistoryItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqHistoryItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python38.ReqHistoryItem_market_set
    __swig_getmethods__["market"] = libtgw_python38.ReqHistoryItem_market_get
    if _newclass:market = _swig_property(libtgw_python38.ReqHistoryItem_market_get, libtgw_python38.ReqHistoryItem_market_set)
    __swig_setmethods__["security_code"] = libtgw_python38.ReqHistoryItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.ReqHistoryItem_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.ReqHistoryItem_security_code_get, libtgw_python38.ReqHistoryItem_security_code_set)
    def __init__(self): 
        this = libtgw_python38.new_ReqHistoryItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ReqHistoryItem
    __del__ = lambda self : None;
ReqHistoryItem_swigregister = libtgw_python38.ReqHistoryItem_swigregister
ReqHistoryItem_swigregister(ReqHistoryItem)

class SubCodeTableItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubCodeTableItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SubCodeTableItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market"] = libtgw_python38.SubCodeTableItem_market_set
    __swig_getmethods__["market"] = libtgw_python38.SubCodeTableItem_market_get
    if _newclass:market = _swig_property(libtgw_python38.SubCodeTableItem_market_get, libtgw_python38.SubCodeTableItem_market_set)
    __swig_setmethods__["security_code"] = libtgw_python38.SubCodeTableItem_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.SubCodeTableItem_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.SubCodeTableItem_security_code_get, libtgw_python38.SubCodeTableItem_security_code_set)
    def __init__(self): 
        this = libtgw_python38.new_SubCodeTableItem()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_SubCodeTableItem
    __del__ = lambda self : None;
SubCodeTableItem_swigregister = libtgw_python38.SubCodeTableItem_swigregister
SubCodeTableItem_swigregister(SubCodeTableItem)

class ReqFactor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqFactor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqFactor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["factor_type"] = libtgw_python38.ReqFactor_factor_type_set
    __swig_getmethods__["factor_type"] = libtgw_python38.ReqFactor_factor_type_get
    if _newclass:factor_type = _swig_property(libtgw_python38.ReqFactor_factor_type_get, libtgw_python38.ReqFactor_factor_type_set)
    __swig_setmethods__["factor_sub_type"] = libtgw_python38.ReqFactor_factor_sub_type_set
    __swig_getmethods__["factor_sub_type"] = libtgw_python38.ReqFactor_factor_sub_type_get
    if _newclass:factor_sub_type = _swig_property(libtgw_python38.ReqFactor_factor_sub_type_get, libtgw_python38.ReqFactor_factor_sub_type_set)
    __swig_setmethods__["factor_name"] = libtgw_python38.ReqFactor_factor_name_set
    __swig_getmethods__["factor_name"] = libtgw_python38.ReqFactor_factor_name_get
    if _newclass:factor_name = _swig_property(libtgw_python38.ReqFactor_factor_name_get, libtgw_python38.ReqFactor_factor_name_set)
    __swig_setmethods__["begin_date"] = libtgw_python38.ReqFactor_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python38.ReqFactor_begin_date_get
    if _newclass:begin_date = _swig_property(libtgw_python38.ReqFactor_begin_date_get, libtgw_python38.ReqFactor_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python38.ReqFactor_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python38.ReqFactor_end_date_get
    if _newclass:end_date = _swig_property(libtgw_python38.ReqFactor_end_date_get, libtgw_python38.ReqFactor_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python38.ReqFactor_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python38.ReqFactor_begin_time_get
    if _newclass:begin_time = _swig_property(libtgw_python38.ReqFactor_begin_time_get, libtgw_python38.ReqFactor_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python38.ReqFactor_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python38.ReqFactor_end_time_get
    if _newclass:end_time = _swig_property(libtgw_python38.ReqFactor_end_time_get, libtgw_python38.ReqFactor_end_time_set)
    __swig_setmethods__["Key1"] = libtgw_python38.ReqFactor_Key1_set
    __swig_getmethods__["Key1"] = libtgw_python38.ReqFactor_Key1_get
    if _newclass:Key1 = _swig_property(libtgw_python38.ReqFactor_Key1_get, libtgw_python38.ReqFactor_Key1_set)
    __swig_setmethods__["Key2"] = libtgw_python38.ReqFactor_Key2_set
    __swig_getmethods__["Key2"] = libtgw_python38.ReqFactor_Key2_get
    if _newclass:Key2 = _swig_property(libtgw_python38.ReqFactor_Key2_get, libtgw_python38.ReqFactor_Key2_set)
    def __init__(self): 
        this = libtgw_python38.new_ReqFactor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ReqFactor
    __del__ = lambda self : None;
ReqFactor_swigregister = libtgw_python38.ReqFactor_swigregister
ReqFactor_swigregister(ReqFactor)

class ReqReplayKline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqReplayKline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqReplayKline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cq_flag"] = libtgw_python38.ReqReplayKline_cq_flag_set
    __swig_getmethods__["cq_flag"] = libtgw_python38.ReqReplayKline_cq_flag_get
    if _newclass:cq_flag = _swig_property(libtgw_python38.ReqReplayKline_cq_flag_get, libtgw_python38.ReqReplayKline_cq_flag_set)
    __swig_setmethods__["cq_date"] = libtgw_python38.ReqReplayKline_cq_date_set
    __swig_getmethods__["cq_date"] = libtgw_python38.ReqReplayKline_cq_date_get
    if _newclass:cq_date = _swig_property(libtgw_python38.ReqReplayKline_cq_date_get, libtgw_python38.ReqReplayKline_cq_date_set)
    __swig_setmethods__["qj_flag"] = libtgw_python38.ReqReplayKline_qj_flag_set
    __swig_getmethods__["qj_flag"] = libtgw_python38.ReqReplayKline_qj_flag_get
    if _newclass:qj_flag = _swig_property(libtgw_python38.ReqReplayKline_qj_flag_get, libtgw_python38.ReqReplayKline_qj_flag_set)
    __swig_setmethods__["cyc_type"] = libtgw_python38.ReqReplayKline_cyc_type_set
    __swig_getmethods__["cyc_type"] = libtgw_python38.ReqReplayKline_cyc_type_get
    if _newclass:cyc_type = _swig_property(libtgw_python38.ReqReplayKline_cyc_type_get, libtgw_python38.ReqReplayKline_cyc_type_set)
    __swig_setmethods__["cyc_def"] = libtgw_python38.ReqReplayKline_cyc_def_set
    __swig_getmethods__["cyc_def"] = libtgw_python38.ReqReplayKline_cyc_def_get
    if _newclass:cyc_def = _swig_property(libtgw_python38.ReqReplayKline_cyc_def_get, libtgw_python38.ReqReplayKline_cyc_def_set)
    __swig_setmethods__["auto_complete"] = libtgw_python38.ReqReplayKline_auto_complete_set
    __swig_getmethods__["auto_complete"] = libtgw_python38.ReqReplayKline_auto_complete_get
    if _newclass:auto_complete = _swig_property(libtgw_python38.ReqReplayKline_auto_complete_get, libtgw_python38.ReqReplayKline_auto_complete_set)
    __swig_setmethods__["begin_date"] = libtgw_python38.ReqReplayKline_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python38.ReqReplayKline_begin_date_get
    if _newclass:begin_date = _swig_property(libtgw_python38.ReqReplayKline_begin_date_get, libtgw_python38.ReqReplayKline_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python38.ReqReplayKline_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python38.ReqReplayKline_end_date_get
    if _newclass:end_date = _swig_property(libtgw_python38.ReqReplayKline_end_date_get, libtgw_python38.ReqReplayKline_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python38.ReqReplayKline_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python38.ReqReplayKline_begin_time_get
    if _newclass:begin_time = _swig_property(libtgw_python38.ReqReplayKline_begin_time_get, libtgw_python38.ReqReplayKline_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python38.ReqReplayKline_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python38.ReqReplayKline_end_time_get
    if _newclass:end_time = _swig_property(libtgw_python38.ReqReplayKline_end_time_get, libtgw_python38.ReqReplayKline_end_time_set)
    __swig_setmethods__["replay_speed"] = libtgw_python38.ReqReplayKline_replay_speed_set
    __swig_getmethods__["replay_speed"] = libtgw_python38.ReqReplayKline_replay_speed_get
    if _newclass:replay_speed = _swig_property(libtgw_python38.ReqReplayKline_replay_speed_get, libtgw_python38.ReqReplayKline_replay_speed_set)
    __swig_setmethods__["task_id"] = libtgw_python38.ReqReplayKline_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python38.ReqReplayKline_task_id_get
    if _newclass:task_id = _swig_property(libtgw_python38.ReqReplayKline_task_id_get, libtgw_python38.ReqReplayKline_task_id_set)
    __swig_setmethods__["req_items"] = libtgw_python38.ReqReplayKline_req_items_set
    __swig_getmethods__["req_items"] = libtgw_python38.ReqReplayKline_req_items_get
    if _newclass:req_items = _swig_property(libtgw_python38.ReqReplayKline_req_items_get, libtgw_python38.ReqReplayKline_req_items_set)
    __swig_setmethods__["req_item_cnt"] = libtgw_python38.ReqReplayKline_req_item_cnt_set
    __swig_getmethods__["req_item_cnt"] = libtgw_python38.ReqReplayKline_req_item_cnt_get
    if _newclass:req_item_cnt = _swig_property(libtgw_python38.ReqReplayKline_req_item_cnt_get, libtgw_python38.ReqReplayKline_req_item_cnt_set)
    def __init__(self): 
        this = libtgw_python38.new_ReqReplayKline()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ReqReplayKline
    __del__ = lambda self : None;
ReqReplayKline_swigregister = libtgw_python38.ReqReplayKline_swigregister
ReqReplayKline_swigregister(ReqReplayKline)

class ReqReplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReqReplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReqReplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["md_data_type"] = libtgw_python38.ReqReplay_md_data_type_set
    __swig_getmethods__["md_data_type"] = libtgw_python38.ReqReplay_md_data_type_get
    if _newclass:md_data_type = _swig_property(libtgw_python38.ReqReplay_md_data_type_get, libtgw_python38.ReqReplay_md_data_type_set)
    __swig_setmethods__["begin_date"] = libtgw_python38.ReqReplay_begin_date_set
    __swig_getmethods__["begin_date"] = libtgw_python38.ReqReplay_begin_date_get
    if _newclass:begin_date = _swig_property(libtgw_python38.ReqReplay_begin_date_get, libtgw_python38.ReqReplay_begin_date_set)
    __swig_setmethods__["end_date"] = libtgw_python38.ReqReplay_end_date_set
    __swig_getmethods__["end_date"] = libtgw_python38.ReqReplay_end_date_get
    if _newclass:end_date = _swig_property(libtgw_python38.ReqReplay_end_date_get, libtgw_python38.ReqReplay_end_date_set)
    __swig_setmethods__["begin_time"] = libtgw_python38.ReqReplay_begin_time_set
    __swig_getmethods__["begin_time"] = libtgw_python38.ReqReplay_begin_time_get
    if _newclass:begin_time = _swig_property(libtgw_python38.ReqReplay_begin_time_get, libtgw_python38.ReqReplay_begin_time_set)
    __swig_setmethods__["end_time"] = libtgw_python38.ReqReplay_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python38.ReqReplay_end_time_get
    if _newclass:end_time = _swig_property(libtgw_python38.ReqReplay_end_time_get, libtgw_python38.ReqReplay_end_time_set)
    __swig_setmethods__["replay_speed"] = libtgw_python38.ReqReplay_replay_speed_set
    __swig_getmethods__["replay_speed"] = libtgw_python38.ReqReplay_replay_speed_get
    if _newclass:replay_speed = _swig_property(libtgw_python38.ReqReplay_replay_speed_get, libtgw_python38.ReqReplay_replay_speed_set)
    __swig_setmethods__["task_id"] = libtgw_python38.ReqReplay_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python38.ReqReplay_task_id_get
    if _newclass:task_id = _swig_property(libtgw_python38.ReqReplay_task_id_get, libtgw_python38.ReqReplay_task_id_set)
    __swig_setmethods__["req_items"] = libtgw_python38.ReqReplay_req_items_set
    __swig_getmethods__["req_items"] = libtgw_python38.ReqReplay_req_items_get
    if _newclass:req_items = _swig_property(libtgw_python38.ReqReplay_req_items_get, libtgw_python38.ReqReplay_req_items_set)
    __swig_setmethods__["req_item_cnt"] = libtgw_python38.ReqReplay_req_item_cnt_set
    __swig_getmethods__["req_item_cnt"] = libtgw_python38.ReqReplay_req_item_cnt_get
    if _newclass:req_item_cnt = _swig_property(libtgw_python38.ReqReplay_req_item_cnt_get, libtgw_python38.ReqReplay_req_item_cnt_set)
    def __init__(self): 
        this = libtgw_python38.new_ReqReplay()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ReqReplay
    __del__ = lambda self : None;
ReqReplay_swigregister = libtgw_python38.ReqReplay_swigregister
ReqReplay_swigregister(ReqReplay)

class LogonResponse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogonResponse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogonResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["api_mode"] = libtgw_python38.LogonResponse_api_mode_set
    __swig_getmethods__["api_mode"] = libtgw_python38.LogonResponse_api_mode_get
    if _newclass:api_mode = _swig_property(libtgw_python38.LogonResponse_api_mode_get, libtgw_python38.LogonResponse_api_mode_set)
    __swig_setmethods__["logon_msg_len"] = libtgw_python38.LogonResponse_logon_msg_len_set
    __swig_getmethods__["logon_msg_len"] = libtgw_python38.LogonResponse_logon_msg_len_get
    if _newclass:logon_msg_len = _swig_property(libtgw_python38.LogonResponse_logon_msg_len_get, libtgw_python38.LogonResponse_logon_msg_len_set)
    __swig_setmethods__["logon_json"] = libtgw_python38.LogonResponse_logon_json_set
    __swig_getmethods__["logon_json"] = libtgw_python38.LogonResponse_logon_json_get
    if _newclass:logon_json = _swig_property(libtgw_python38.LogonResponse_logon_json_get, libtgw_python38.LogonResponse_logon_json_set)
    def __init__(self): 
        this = libtgw_python38.new_LogonResponse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_LogonResponse
    __del__ = lambda self : None;
LogonResponse_swigregister = libtgw_python38.LogonResponse_swigregister
LogonResponse_swigregister(LogonResponse)

class MDKLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDKLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDKLine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDKLine_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDKLine_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDKLine_market_type_get, libtgw_python38.MDKLine_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDKLine_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDKLine_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDKLine_security_code_get, libtgw_python38.MDKLine_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDKLine_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDKLine_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDKLine_orig_time_get, libtgw_python38.MDKLine_orig_time_set)
    __swig_setmethods__["kline_time"] = libtgw_python38.MDKLine_kline_time_set
    __swig_getmethods__["kline_time"] = libtgw_python38.MDKLine_kline_time_get
    if _newclass:kline_time = _swig_property(libtgw_python38.MDKLine_kline_time_get, libtgw_python38.MDKLine_kline_time_set)
    __swig_setmethods__["open_price"] = libtgw_python38.MDKLine_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python38.MDKLine_open_price_get
    if _newclass:open_price = _swig_property(libtgw_python38.MDKLine_open_price_get, libtgw_python38.MDKLine_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDKLine_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDKLine_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDKLine_high_price_get, libtgw_python38.MDKLine_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDKLine_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDKLine_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDKLine_low_price_get, libtgw_python38.MDKLine_low_price_set)
    __swig_setmethods__["close_price"] = libtgw_python38.MDKLine_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python38.MDKLine_close_price_get
    if _newclass:close_price = _swig_property(libtgw_python38.MDKLine_close_price_get, libtgw_python38.MDKLine_close_price_set)
    __swig_setmethods__["volume_trade"] = libtgw_python38.MDKLine_volume_trade_set
    __swig_getmethods__["volume_trade"] = libtgw_python38.MDKLine_volume_trade_get
    if _newclass:volume_trade = _swig_property(libtgw_python38.MDKLine_volume_trade_get, libtgw_python38.MDKLine_volume_trade_set)
    __swig_setmethods__["value_trade"] = libtgw_python38.MDKLine_value_trade_set
    __swig_getmethods__["value_trade"] = libtgw_python38.MDKLine_value_trade_get
    if _newclass:value_trade = _swig_property(libtgw_python38.MDKLine_value_trade_get, libtgw_python38.MDKLine_value_trade_set)
    def __init__(self): 
        this = libtgw_python38.new_MDKLine()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDKLine
    __del__ = lambda self : None;
MDKLine_swigregister = libtgw_python38.MDKLine_swigregister
MDKLine_swigregister(MDKLine)

class MDSnapshotDerive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshotDerive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshotDerive, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDSnapshotDerive_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDSnapshotDerive_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDSnapshotDerive_market_type_get, libtgw_python38.MDSnapshotDerive_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDSnapshotDerive_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDSnapshotDerive_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDSnapshotDerive_security_code_get, libtgw_python38.MDSnapshotDerive_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDSnapshotDerive_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDSnapshotDerive_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDSnapshotDerive_orig_time_get, libtgw_python38.MDSnapshotDerive_orig_time_set)
    __swig_setmethods__["average_price"] = libtgw_python38.MDSnapshotDerive_average_price_set
    __swig_getmethods__["average_price"] = libtgw_python38.MDSnapshotDerive_average_price_get
    if _newclass:average_price = _swig_property(libtgw_python38.MDSnapshotDerive_average_price_get, libtgw_python38.MDSnapshotDerive_average_price_set)
    __swig_setmethods__["circulation_value"] = libtgw_python38.MDSnapshotDerive_circulation_value_set
    __swig_getmethods__["circulation_value"] = libtgw_python38.MDSnapshotDerive_circulation_value_get
    if _newclass:circulation_value = _swig_property(libtgw_python38.MDSnapshotDerive_circulation_value_get, libtgw_python38.MDSnapshotDerive_circulation_value_set)
    __swig_setmethods__["total_value"] = libtgw_python38.MDSnapshotDerive_total_value_set
    __swig_getmethods__["total_value"] = libtgw_python38.MDSnapshotDerive_total_value_get
    if _newclass:total_value = _swig_property(libtgw_python38.MDSnapshotDerive_total_value_get, libtgw_python38.MDSnapshotDerive_total_value_set)
    __swig_setmethods__["initiative_buy_volume"] = libtgw_python38.MDSnapshotDerive_initiative_buy_volume_set
    __swig_getmethods__["initiative_buy_volume"] = libtgw_python38.MDSnapshotDerive_initiative_buy_volume_get
    if _newclass:initiative_buy_volume = _swig_property(libtgw_python38.MDSnapshotDerive_initiative_buy_volume_get, libtgw_python38.MDSnapshotDerive_initiative_buy_volume_set)
    __swig_setmethods__["initiative_sell_volume"] = libtgw_python38.MDSnapshotDerive_initiative_sell_volume_set
    __swig_getmethods__["initiative_sell_volume"] = libtgw_python38.MDSnapshotDerive_initiative_sell_volume_get
    if _newclass:initiative_sell_volume = _swig_property(libtgw_python38.MDSnapshotDerive_initiative_sell_volume_get, libtgw_python38.MDSnapshotDerive_initiative_sell_volume_set)
    __swig_setmethods__["turnover_rate"] = libtgw_python38.MDSnapshotDerive_turnover_rate_set
    __swig_getmethods__["turnover_rate"] = libtgw_python38.MDSnapshotDerive_turnover_rate_get
    if _newclass:turnover_rate = _swig_property(libtgw_python38.MDSnapshotDerive_turnover_rate_get, libtgw_python38.MDSnapshotDerive_turnover_rate_set)
    __swig_setmethods__["volume_ratio"] = libtgw_python38.MDSnapshotDerive_volume_ratio_set
    __swig_getmethods__["volume_ratio"] = libtgw_python38.MDSnapshotDerive_volume_ratio_get
    if _newclass:volume_ratio = _swig_property(libtgw_python38.MDSnapshotDerive_volume_ratio_get, libtgw_python38.MDSnapshotDerive_volume_ratio_set)
    __swig_setmethods__["ask_bid_ratio"] = libtgw_python38.MDSnapshotDerive_ask_bid_ratio_set
    __swig_getmethods__["ask_bid_ratio"] = libtgw_python38.MDSnapshotDerive_ask_bid_ratio_get
    if _newclass:ask_bid_ratio = _swig_property(libtgw_python38.MDSnapshotDerive_ask_bid_ratio_get, libtgw_python38.MDSnapshotDerive_ask_bid_ratio_set)
    __swig_setmethods__["amplitude"] = libtgw_python38.MDSnapshotDerive_amplitude_set
    __swig_getmethods__["amplitude"] = libtgw_python38.MDSnapshotDerive_amplitude_get
    if _newclass:amplitude = _swig_property(libtgw_python38.MDSnapshotDerive_amplitude_get, libtgw_python38.MDSnapshotDerive_amplitude_set)
    __swig_setmethods__["PE_static"] = libtgw_python38.MDSnapshotDerive_PE_static_set
    __swig_getmethods__["PE_static"] = libtgw_python38.MDSnapshotDerive_PE_static_get
    if _newclass:PE_static = _swig_property(libtgw_python38.MDSnapshotDerive_PE_static_get, libtgw_python38.MDSnapshotDerive_PE_static_set)
    __swig_setmethods__["PE_dynamic"] = libtgw_python38.MDSnapshotDerive_PE_dynamic_set
    __swig_getmethods__["PE_dynamic"] = libtgw_python38.MDSnapshotDerive_PE_dynamic_get
    if _newclass:PE_dynamic = _swig_property(libtgw_python38.MDSnapshotDerive_PE_dynamic_get, libtgw_python38.MDSnapshotDerive_PE_dynamic_set)
    __swig_setmethods__["PE_TTM"] = libtgw_python38.MDSnapshotDerive_PE_TTM_set
    __swig_getmethods__["PE_TTM"] = libtgw_python38.MDSnapshotDerive_PE_TTM_get
    if _newclass:PE_TTM = _swig_property(libtgw_python38.MDSnapshotDerive_PE_TTM_get, libtgw_python38.MDSnapshotDerive_PE_TTM_set)
    __swig_setmethods__["PB"] = libtgw_python38.MDSnapshotDerive_PB_set
    __swig_getmethods__["PB"] = libtgw_python38.MDSnapshotDerive_PB_get
    if _newclass:PB = _swig_property(libtgw_python38.MDSnapshotDerive_PB_get, libtgw_python38.MDSnapshotDerive_PB_set)
    __swig_setmethods__["entrustment_diff"] = libtgw_python38.MDSnapshotDerive_entrustment_diff_set
    __swig_getmethods__["entrustment_diff"] = libtgw_python38.MDSnapshotDerive_entrustment_diff_get
    if _newclass:entrustment_diff = _swig_property(libtgw_python38.MDSnapshotDerive_entrustment_diff_get, libtgw_python38.MDSnapshotDerive_entrustment_diff_set)
    __swig_setmethods__["initiative_flag"] = libtgw_python38.MDSnapshotDerive_initiative_flag_set
    __swig_getmethods__["initiative_flag"] = libtgw_python38.MDSnapshotDerive_initiative_flag_get
    if _newclass:initiative_flag = _swig_property(libtgw_python38.MDSnapshotDerive_initiative_flag_get, libtgw_python38.MDSnapshotDerive_initiative_flag_set)
    def __init__(self): 
        this = libtgw_python38.new_MDSnapshotDerive()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDSnapshotDerive
    __del__ = lambda self : None;
MDSnapshotDerive_swigregister = libtgw_python38.MDSnapshotDerive_swigregister
MDSnapshotDerive_swigregister(MDSnapshotDerive)

class Factor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Factor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Factor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data_size"] = libtgw_python38.Factor_data_size_set
    __swig_getmethods__["data_size"] = libtgw_python38.Factor_data_size_get
    if _newclass:data_size = _swig_property(libtgw_python38.Factor_data_size_get, libtgw_python38.Factor_data_size_set)
    __swig_setmethods__["json_buf"] = libtgw_python38.Factor_json_buf_set
    __swig_getmethods__["json_buf"] = libtgw_python38.Factor_json_buf_get
    if _newclass:json_buf = _swig_property(libtgw_python38.Factor_json_buf_get, libtgw_python38.Factor_json_buf_set)
    def __init__(self): 
        this = libtgw_python38.new_Factor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_Factor
    __del__ = lambda self : None;
Factor_swigregister = libtgw_python38.Factor_swigregister
Factor_swigregister(Factor)

class MDSnapshotL1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshotL1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshotL1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDSnapshotL1_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDSnapshotL1_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDSnapshotL1_market_type_get, libtgw_python38.MDSnapshotL1_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDSnapshotL1_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDSnapshotL1_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDSnapshotL1_security_code_get, libtgw_python38.MDSnapshotL1_security_code_set)
    __swig_setmethods__["variety_category"] = libtgw_python38.MDSnapshotL1_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python38.MDSnapshotL1_variety_category_get
    if _newclass:variety_category = _swig_property(libtgw_python38.MDSnapshotL1_variety_category_get, libtgw_python38.MDSnapshotL1_variety_category_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDSnapshotL1_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDSnapshotL1_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDSnapshotL1_orig_time_get, libtgw_python38.MDSnapshotL1_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDSnapshotL1_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDSnapshotL1_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDSnapshotL1_trading_phase_code_get, libtgw_python38.MDSnapshotL1_trading_phase_code_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDSnapshotL1_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDSnapshotL1_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDSnapshotL1_pre_close_price_get, libtgw_python38.MDSnapshotL1_pre_close_price_set)
    __swig_setmethods__["open_price"] = libtgw_python38.MDSnapshotL1_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python38.MDSnapshotL1_open_price_get
    if _newclass:open_price = _swig_property(libtgw_python38.MDSnapshotL1_open_price_get, libtgw_python38.MDSnapshotL1_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDSnapshotL1_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDSnapshotL1_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDSnapshotL1_high_price_get, libtgw_python38.MDSnapshotL1_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDSnapshotL1_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDSnapshotL1_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDSnapshotL1_low_price_get, libtgw_python38.MDSnapshotL1_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python38.MDSnapshotL1_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python38.MDSnapshotL1_last_price_get
    if _newclass:last_price = _swig_property(libtgw_python38.MDSnapshotL1_last_price_get, libtgw_python38.MDSnapshotL1_last_price_set)
    __swig_setmethods__["close_price"] = libtgw_python38.MDSnapshotL1_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python38.MDSnapshotL1_close_price_get
    if _newclass:close_price = _swig_property(libtgw_python38.MDSnapshotL1_close_price_get, libtgw_python38.MDSnapshotL1_close_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python38.MDSnapshotL1_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python38.MDSnapshotL1_bid_price_get
    if _newclass:bid_price = _swig_property(libtgw_python38.MDSnapshotL1_bid_price_get, libtgw_python38.MDSnapshotL1_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python38.MDSnapshotL1_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python38.MDSnapshotL1_bid_volume_get
    if _newclass:bid_volume = _swig_property(libtgw_python38.MDSnapshotL1_bid_volume_get, libtgw_python38.MDSnapshotL1_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python38.MDSnapshotL1_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python38.MDSnapshotL1_offer_price_get
    if _newclass:offer_price = _swig_property(libtgw_python38.MDSnapshotL1_offer_price_get, libtgw_python38.MDSnapshotL1_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python38.MDSnapshotL1_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python38.MDSnapshotL1_offer_volume_get
    if _newclass:offer_volume = _swig_property(libtgw_python38.MDSnapshotL1_offer_volume_get, libtgw_python38.MDSnapshotL1_offer_volume_set)
    __swig_setmethods__["num_trades"] = libtgw_python38.MDSnapshotL1_num_trades_set
    __swig_getmethods__["num_trades"] = libtgw_python38.MDSnapshotL1_num_trades_get
    if _newclass:num_trades = _swig_property(libtgw_python38.MDSnapshotL1_num_trades_get, libtgw_python38.MDSnapshotL1_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDSnapshotL1_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDSnapshotL1_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDSnapshotL1_total_volume_trade_get, libtgw_python38.MDSnapshotL1_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDSnapshotL1_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDSnapshotL1_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDSnapshotL1_total_value_trade_get, libtgw_python38.MDSnapshotL1_total_value_trade_set)
    __swig_setmethods__["IOPV"] = libtgw_python38.MDSnapshotL1_IOPV_set
    __swig_getmethods__["IOPV"] = libtgw_python38.MDSnapshotL1_IOPV_get
    if _newclass:IOPV = _swig_property(libtgw_python38.MDSnapshotL1_IOPV_get, libtgw_python38.MDSnapshotL1_IOPV_set)
    __swig_setmethods__["high_limited"] = libtgw_python38.MDSnapshotL1_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python38.MDSnapshotL1_high_limited_get
    if _newclass:high_limited = _swig_property(libtgw_python38.MDSnapshotL1_high_limited_get, libtgw_python38.MDSnapshotL1_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python38.MDSnapshotL1_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python38.MDSnapshotL1_low_limited_get
    if _newclass:low_limited = _swig_property(libtgw_python38.MDSnapshotL1_low_limited_get, libtgw_python38.MDSnapshotL1_low_limited_set)
    def __init__(self): 
        this = libtgw_python38.new_MDSnapshotL1()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDSnapshotL1
    __del__ = lambda self : None;
MDSnapshotL1_swigregister = libtgw_python38.MDSnapshotL1_swigregister
MDSnapshotL1_swigregister(MDSnapshotL1)

class MDIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDIndexSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDIndexSnapshot_market_type_get, libtgw_python38.MDIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDIndexSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDIndexSnapshot_security_code_get, libtgw_python38.MDIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDIndexSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDIndexSnapshot_orig_time_get, libtgw_python38.MDIndexSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDIndexSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDIndexSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDIndexSnapshot_trading_phase_code_get, libtgw_python38.MDIndexSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_index"] = libtgw_python38.MDIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = libtgw_python38.MDIndexSnapshot_pre_close_index_get
    if _newclass:pre_close_index = _swig_property(libtgw_python38.MDIndexSnapshot_pre_close_index_get, libtgw_python38.MDIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["open_index"] = libtgw_python38.MDIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = libtgw_python38.MDIndexSnapshot_open_index_get
    if _newclass:open_index = _swig_property(libtgw_python38.MDIndexSnapshot_open_index_get, libtgw_python38.MDIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = libtgw_python38.MDIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = libtgw_python38.MDIndexSnapshot_high_index_get
    if _newclass:high_index = _swig_property(libtgw_python38.MDIndexSnapshot_high_index_get, libtgw_python38.MDIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = libtgw_python38.MDIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = libtgw_python38.MDIndexSnapshot_low_index_get
    if _newclass:low_index = _swig_property(libtgw_python38.MDIndexSnapshot_low_index_get, libtgw_python38.MDIndexSnapshot_low_index_set)
    __swig_setmethods__["last_index"] = libtgw_python38.MDIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = libtgw_python38.MDIndexSnapshot_last_index_get
    if _newclass:last_index = _swig_property(libtgw_python38.MDIndexSnapshot_last_index_get, libtgw_python38.MDIndexSnapshot_last_index_set)
    __swig_setmethods__["close_index"] = libtgw_python38.MDIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = libtgw_python38.MDIndexSnapshot_close_index_get
    if _newclass:close_index = _swig_property(libtgw_python38.MDIndexSnapshot_close_index_get, libtgw_python38.MDIndexSnapshot_close_index_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDIndexSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDIndexSnapshot_total_volume_trade_get, libtgw_python38.MDIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDIndexSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDIndexSnapshot_total_value_trade_get, libtgw_python38.MDIndexSnapshot_total_value_trade_set)
    def __init__(self): 
        this = libtgw_python38.new_MDIndexSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDIndexSnapshot
    __del__ = lambda self : None;
MDIndexSnapshot_swigregister = libtgw_python38.MDIndexSnapshot_swigregister
MDIndexSnapshot_swigregister(MDIndexSnapshot)

class MDOptionSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOptionSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOptionSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDOptionSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDOptionSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDOptionSnapshot_market_type_get, libtgw_python38.MDOptionSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDOptionSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDOptionSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDOptionSnapshot_security_code_get, libtgw_python38.MDOptionSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDOptionSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDOptionSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDOptionSnapshot_orig_time_get, libtgw_python38.MDOptionSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDOptionSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDOptionSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDOptionSnapshot_trading_phase_code_get, libtgw_python38.MDOptionSnapshot_trading_phase_code_set)
    __swig_setmethods__["total_long_position"] = libtgw_python38.MDOptionSnapshot_total_long_position_set
    __swig_getmethods__["total_long_position"] = libtgw_python38.MDOptionSnapshot_total_long_position_get
    if _newclass:total_long_position = _swig_property(libtgw_python38.MDOptionSnapshot_total_long_position_get, libtgw_python38.MDOptionSnapshot_total_long_position_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDOptionSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDOptionSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDOptionSnapshot_total_volume_trade_get, libtgw_python38.MDOptionSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDOptionSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDOptionSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDOptionSnapshot_total_value_trade_get, libtgw_python38.MDOptionSnapshot_total_value_trade_set)
    __swig_setmethods__["pre_settle_price"] = libtgw_python38.MDOptionSnapshot_pre_settle_price_set
    __swig_getmethods__["pre_settle_price"] = libtgw_python38.MDOptionSnapshot_pre_settle_price_get
    if _newclass:pre_settle_price = _swig_property(libtgw_python38.MDOptionSnapshot_pre_settle_price_get, libtgw_python38.MDOptionSnapshot_pre_settle_price_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDOptionSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDOptionSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDOptionSnapshot_pre_close_price_get, libtgw_python38.MDOptionSnapshot_pre_close_price_set)
    __swig_setmethods__["open_price"] = libtgw_python38.MDOptionSnapshot_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python38.MDOptionSnapshot_open_price_get
    if _newclass:open_price = _swig_property(libtgw_python38.MDOptionSnapshot_open_price_get, libtgw_python38.MDOptionSnapshot_open_price_set)
    __swig_setmethods__["auction_price"] = libtgw_python38.MDOptionSnapshot_auction_price_set
    __swig_getmethods__["auction_price"] = libtgw_python38.MDOptionSnapshot_auction_price_get
    if _newclass:auction_price = _swig_property(libtgw_python38.MDOptionSnapshot_auction_price_get, libtgw_python38.MDOptionSnapshot_auction_price_set)
    __swig_setmethods__["auction_volume"] = libtgw_python38.MDOptionSnapshot_auction_volume_set
    __swig_getmethods__["auction_volume"] = libtgw_python38.MDOptionSnapshot_auction_volume_get
    if _newclass:auction_volume = _swig_property(libtgw_python38.MDOptionSnapshot_auction_volume_get, libtgw_python38.MDOptionSnapshot_auction_volume_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDOptionSnapshot_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDOptionSnapshot_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDOptionSnapshot_high_price_get, libtgw_python38.MDOptionSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDOptionSnapshot_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDOptionSnapshot_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDOptionSnapshot_low_price_get, libtgw_python38.MDOptionSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python38.MDOptionSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python38.MDOptionSnapshot_last_price_get
    if _newclass:last_price = _swig_property(libtgw_python38.MDOptionSnapshot_last_price_get, libtgw_python38.MDOptionSnapshot_last_price_set)
    __swig_setmethods__["close_price"] = libtgw_python38.MDOptionSnapshot_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python38.MDOptionSnapshot_close_price_get
    if _newclass:close_price = _swig_property(libtgw_python38.MDOptionSnapshot_close_price_get, libtgw_python38.MDOptionSnapshot_close_price_set)
    __swig_setmethods__["high_limited"] = libtgw_python38.MDOptionSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python38.MDOptionSnapshot_high_limited_get
    if _newclass:high_limited = _swig_property(libtgw_python38.MDOptionSnapshot_high_limited_get, libtgw_python38.MDOptionSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python38.MDOptionSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python38.MDOptionSnapshot_low_limited_get
    if _newclass:low_limited = _swig_property(libtgw_python38.MDOptionSnapshot_low_limited_get, libtgw_python38.MDOptionSnapshot_low_limited_set)
    __swig_setmethods__["bid_price"] = libtgw_python38.MDOptionSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python38.MDOptionSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(libtgw_python38.MDOptionSnapshot_bid_price_get, libtgw_python38.MDOptionSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python38.MDOptionSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python38.MDOptionSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(libtgw_python38.MDOptionSnapshot_bid_volume_get, libtgw_python38.MDOptionSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python38.MDOptionSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python38.MDOptionSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(libtgw_python38.MDOptionSnapshot_offer_price_get, libtgw_python38.MDOptionSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python38.MDOptionSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python38.MDOptionSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(libtgw_python38.MDOptionSnapshot_offer_volume_get, libtgw_python38.MDOptionSnapshot_offer_volume_set)
    __swig_setmethods__["settle_price"] = libtgw_python38.MDOptionSnapshot_settle_price_set
    __swig_getmethods__["settle_price"] = libtgw_python38.MDOptionSnapshot_settle_price_get
    if _newclass:settle_price = _swig_property(libtgw_python38.MDOptionSnapshot_settle_price_get, libtgw_python38.MDOptionSnapshot_settle_price_set)
    __swig_setmethods__["ref_price"] = libtgw_python38.MDOptionSnapshot_ref_price_set
    __swig_getmethods__["ref_price"] = libtgw_python38.MDOptionSnapshot_ref_price_get
    if _newclass:ref_price = _swig_property(libtgw_python38.MDOptionSnapshot_ref_price_get, libtgw_python38.MDOptionSnapshot_ref_price_set)
    __swig_setmethods__["contract_type"] = libtgw_python38.MDOptionSnapshot_contract_type_set
    __swig_getmethods__["contract_type"] = libtgw_python38.MDOptionSnapshot_contract_type_get
    if _newclass:contract_type = _swig_property(libtgw_python38.MDOptionSnapshot_contract_type_get, libtgw_python38.MDOptionSnapshot_contract_type_set)
    __swig_setmethods__["expire_date"] = libtgw_python38.MDOptionSnapshot_expire_date_set
    __swig_getmethods__["expire_date"] = libtgw_python38.MDOptionSnapshot_expire_date_get
    if _newclass:expire_date = _swig_property(libtgw_python38.MDOptionSnapshot_expire_date_get, libtgw_python38.MDOptionSnapshot_expire_date_set)
    __swig_setmethods__["underlying_security_code"] = libtgw_python38.MDOptionSnapshot_underlying_security_code_set
    __swig_getmethods__["underlying_security_code"] = libtgw_python38.MDOptionSnapshot_underlying_security_code_get
    if _newclass:underlying_security_code = _swig_property(libtgw_python38.MDOptionSnapshot_underlying_security_code_get, libtgw_python38.MDOptionSnapshot_underlying_security_code_set)
    __swig_setmethods__["exercise_price"] = libtgw_python38.MDOptionSnapshot_exercise_price_set
    __swig_getmethods__["exercise_price"] = libtgw_python38.MDOptionSnapshot_exercise_price_get
    if _newclass:exercise_price = _swig_property(libtgw_python38.MDOptionSnapshot_exercise_price_get, libtgw_python38.MDOptionSnapshot_exercise_price_set)
    def __init__(self): 
        this = libtgw_python38.new_MDOptionSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDOptionSnapshot
    __del__ = lambda self : None;
MDOptionSnapshot_swigregister = libtgw_python38.MDOptionSnapshot_swigregister
MDOptionSnapshot_swigregister(MDOptionSnapshot)

class MDHKTSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDHKTSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDHKTSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDHKTSnapshot_market_type_get, libtgw_python38.MDHKTSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDHKTSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDHKTSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDHKTSnapshot_security_code_get, libtgw_python38.MDHKTSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDHKTSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDHKTSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDHKTSnapshot_orig_time_get, libtgw_python38.MDHKTSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDHKTSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDHKTSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDHKTSnapshot_trading_phase_code_get, libtgw_python38.MDHKTSnapshot_trading_phase_code_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDHKTSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDHKTSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDHKTSnapshot_total_volume_trade_get, libtgw_python38.MDHKTSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDHKTSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDHKTSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDHKTSnapshot_total_value_trade_get, libtgw_python38.MDHKTSnapshot_total_value_trade_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDHKTSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDHKTSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDHKTSnapshot_pre_close_price_get, libtgw_python38.MDHKTSnapshot_pre_close_price_set)
    __swig_setmethods__["nominal_price"] = libtgw_python38.MDHKTSnapshot_nominal_price_set
    __swig_getmethods__["nominal_price"] = libtgw_python38.MDHKTSnapshot_nominal_price_get
    if _newclass:nominal_price = _swig_property(libtgw_python38.MDHKTSnapshot_nominal_price_get, libtgw_python38.MDHKTSnapshot_nominal_price_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDHKTSnapshot_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDHKTSnapshot_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDHKTSnapshot_high_price_get, libtgw_python38.MDHKTSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDHKTSnapshot_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDHKTSnapshot_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDHKTSnapshot_low_price_get, libtgw_python38.MDHKTSnapshot_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python38.MDHKTSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python38.MDHKTSnapshot_last_price_get
    if _newclass:last_price = _swig_property(libtgw_python38.MDHKTSnapshot_last_price_get, libtgw_python38.MDHKTSnapshot_last_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python38.MDHKTSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python38.MDHKTSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(libtgw_python38.MDHKTSnapshot_bid_price_get, libtgw_python38.MDHKTSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python38.MDHKTSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python38.MDHKTSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(libtgw_python38.MDHKTSnapshot_bid_volume_get, libtgw_python38.MDHKTSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python38.MDHKTSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python38.MDHKTSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(libtgw_python38.MDHKTSnapshot_offer_price_get, libtgw_python38.MDHKTSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python38.MDHKTSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python38.MDHKTSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(libtgw_python38.MDHKTSnapshot_offer_volume_get, libtgw_python38.MDHKTSnapshot_offer_volume_set)
    __swig_setmethods__["ref_price"] = libtgw_python38.MDHKTSnapshot_ref_price_set
    __swig_getmethods__["ref_price"] = libtgw_python38.MDHKTSnapshot_ref_price_get
    if _newclass:ref_price = _swig_property(libtgw_python38.MDHKTSnapshot_ref_price_get, libtgw_python38.MDHKTSnapshot_ref_price_set)
    __swig_setmethods__["high_limited"] = libtgw_python38.MDHKTSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python38.MDHKTSnapshot_high_limited_get
    if _newclass:high_limited = _swig_property(libtgw_python38.MDHKTSnapshot_high_limited_get, libtgw_python38.MDHKTSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python38.MDHKTSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python38.MDHKTSnapshot_low_limited_get
    if _newclass:low_limited = _swig_property(libtgw_python38.MDHKTSnapshot_low_limited_get, libtgw_python38.MDHKTSnapshot_low_limited_set)
    __swig_setmethods__["bid_price_limit_up"] = libtgw_python38.MDHKTSnapshot_bid_price_limit_up_set
    __swig_getmethods__["bid_price_limit_up"] = libtgw_python38.MDHKTSnapshot_bid_price_limit_up_get
    if _newclass:bid_price_limit_up = _swig_property(libtgw_python38.MDHKTSnapshot_bid_price_limit_up_get, libtgw_python38.MDHKTSnapshot_bid_price_limit_up_set)
    __swig_setmethods__["bid_price_limit_down"] = libtgw_python38.MDHKTSnapshot_bid_price_limit_down_set
    __swig_getmethods__["bid_price_limit_down"] = libtgw_python38.MDHKTSnapshot_bid_price_limit_down_get
    if _newclass:bid_price_limit_down = _swig_property(libtgw_python38.MDHKTSnapshot_bid_price_limit_down_get, libtgw_python38.MDHKTSnapshot_bid_price_limit_down_set)
    __swig_setmethods__["offer_price_limit_up"] = libtgw_python38.MDHKTSnapshot_offer_price_limit_up_set
    __swig_getmethods__["offer_price_limit_up"] = libtgw_python38.MDHKTSnapshot_offer_price_limit_up_get
    if _newclass:offer_price_limit_up = _swig_property(libtgw_python38.MDHKTSnapshot_offer_price_limit_up_get, libtgw_python38.MDHKTSnapshot_offer_price_limit_up_set)
    __swig_setmethods__["offer_price_limit_down"] = libtgw_python38.MDHKTSnapshot_offer_price_limit_down_set
    __swig_getmethods__["offer_price_limit_down"] = libtgw_python38.MDHKTSnapshot_offer_price_limit_down_get
    if _newclass:offer_price_limit_down = _swig_property(libtgw_python38.MDHKTSnapshot_offer_price_limit_down_get, libtgw_python38.MDHKTSnapshot_offer_price_limit_down_set)
    def __init__(self): 
        this = libtgw_python38.new_MDHKTSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDHKTSnapshot
    __del__ = lambda self : None;
MDHKTSnapshot_swigregister = libtgw_python38.MDHKTSnapshot_swigregister
MDHKTSnapshot_swigregister(MDHKTSnapshot)

class MDFutureSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDFutureSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDFutureSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDFutureSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDFutureSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDFutureSnapshot_market_type_get, libtgw_python38.MDFutureSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDFutureSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDFutureSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDFutureSnapshot_security_code_get, libtgw_python38.MDFutureSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDFutureSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDFutureSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDFutureSnapshot_orig_time_get, libtgw_python38.MDFutureSnapshot_orig_time_set)
    __swig_setmethods__["action_day"] = libtgw_python38.MDFutureSnapshot_action_day_set
    __swig_getmethods__["action_day"] = libtgw_python38.MDFutureSnapshot_action_day_get
    if _newclass:action_day = _swig_property(libtgw_python38.MDFutureSnapshot_action_day_get, libtgw_python38.MDFutureSnapshot_action_day_set)
    __swig_setmethods__["last_price"] = libtgw_python38.MDFutureSnapshot_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python38.MDFutureSnapshot_last_price_get
    if _newclass:last_price = _swig_property(libtgw_python38.MDFutureSnapshot_last_price_get, libtgw_python38.MDFutureSnapshot_last_price_set)
    __swig_setmethods__["pre_settle_price"] = libtgw_python38.MDFutureSnapshot_pre_settle_price_set
    __swig_getmethods__["pre_settle_price"] = libtgw_python38.MDFutureSnapshot_pre_settle_price_get
    if _newclass:pre_settle_price = _swig_property(libtgw_python38.MDFutureSnapshot_pre_settle_price_get, libtgw_python38.MDFutureSnapshot_pre_settle_price_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDFutureSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDFutureSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDFutureSnapshot_pre_close_price_get, libtgw_python38.MDFutureSnapshot_pre_close_price_set)
    __swig_setmethods__["pre_open_interest"] = libtgw_python38.MDFutureSnapshot_pre_open_interest_set
    __swig_getmethods__["pre_open_interest"] = libtgw_python38.MDFutureSnapshot_pre_open_interest_get
    if _newclass:pre_open_interest = _swig_property(libtgw_python38.MDFutureSnapshot_pre_open_interest_get, libtgw_python38.MDFutureSnapshot_pre_open_interest_set)
    __swig_setmethods__["open_price"] = libtgw_python38.MDFutureSnapshot_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python38.MDFutureSnapshot_open_price_get
    if _newclass:open_price = _swig_property(libtgw_python38.MDFutureSnapshot_open_price_get, libtgw_python38.MDFutureSnapshot_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDFutureSnapshot_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDFutureSnapshot_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDFutureSnapshot_high_price_get, libtgw_python38.MDFutureSnapshot_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDFutureSnapshot_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDFutureSnapshot_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDFutureSnapshot_low_price_get, libtgw_python38.MDFutureSnapshot_low_price_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDFutureSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDFutureSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDFutureSnapshot_total_volume_trade_get, libtgw_python38.MDFutureSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDFutureSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDFutureSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDFutureSnapshot_total_value_trade_get, libtgw_python38.MDFutureSnapshot_total_value_trade_set)
    __swig_setmethods__["open_interest"] = libtgw_python38.MDFutureSnapshot_open_interest_set
    __swig_getmethods__["open_interest"] = libtgw_python38.MDFutureSnapshot_open_interest_get
    if _newclass:open_interest = _swig_property(libtgw_python38.MDFutureSnapshot_open_interest_get, libtgw_python38.MDFutureSnapshot_open_interest_set)
    __swig_setmethods__["close_price"] = libtgw_python38.MDFutureSnapshot_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python38.MDFutureSnapshot_close_price_get
    if _newclass:close_price = _swig_property(libtgw_python38.MDFutureSnapshot_close_price_get, libtgw_python38.MDFutureSnapshot_close_price_set)
    __swig_setmethods__["settle_price"] = libtgw_python38.MDFutureSnapshot_settle_price_set
    __swig_getmethods__["settle_price"] = libtgw_python38.MDFutureSnapshot_settle_price_get
    if _newclass:settle_price = _swig_property(libtgw_python38.MDFutureSnapshot_settle_price_get, libtgw_python38.MDFutureSnapshot_settle_price_set)
    __swig_setmethods__["high_limited"] = libtgw_python38.MDFutureSnapshot_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python38.MDFutureSnapshot_high_limited_get
    if _newclass:high_limited = _swig_property(libtgw_python38.MDFutureSnapshot_high_limited_get, libtgw_python38.MDFutureSnapshot_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python38.MDFutureSnapshot_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python38.MDFutureSnapshot_low_limited_get
    if _newclass:low_limited = _swig_property(libtgw_python38.MDFutureSnapshot_low_limited_get, libtgw_python38.MDFutureSnapshot_low_limited_set)
    __swig_setmethods__["pre_delta"] = libtgw_python38.MDFutureSnapshot_pre_delta_set
    __swig_getmethods__["pre_delta"] = libtgw_python38.MDFutureSnapshot_pre_delta_get
    if _newclass:pre_delta = _swig_property(libtgw_python38.MDFutureSnapshot_pre_delta_get, libtgw_python38.MDFutureSnapshot_pre_delta_set)
    __swig_setmethods__["curr_delta"] = libtgw_python38.MDFutureSnapshot_curr_delta_set
    __swig_getmethods__["curr_delta"] = libtgw_python38.MDFutureSnapshot_curr_delta_get
    if _newclass:curr_delta = _swig_property(libtgw_python38.MDFutureSnapshot_curr_delta_get, libtgw_python38.MDFutureSnapshot_curr_delta_set)
    __swig_setmethods__["bid_price"] = libtgw_python38.MDFutureSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python38.MDFutureSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(libtgw_python38.MDFutureSnapshot_bid_price_get, libtgw_python38.MDFutureSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python38.MDFutureSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python38.MDFutureSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(libtgw_python38.MDFutureSnapshot_bid_volume_get, libtgw_python38.MDFutureSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python38.MDFutureSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python38.MDFutureSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(libtgw_python38.MDFutureSnapshot_offer_price_get, libtgw_python38.MDFutureSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python38.MDFutureSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python38.MDFutureSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(libtgw_python38.MDFutureSnapshot_offer_volume_get, libtgw_python38.MDFutureSnapshot_offer_volume_set)
    __swig_setmethods__["average_price"] = libtgw_python38.MDFutureSnapshot_average_price_set
    __swig_getmethods__["average_price"] = libtgw_python38.MDFutureSnapshot_average_price_get
    if _newclass:average_price = _swig_property(libtgw_python38.MDFutureSnapshot_average_price_get, libtgw_python38.MDFutureSnapshot_average_price_set)
    __swig_setmethods__["trading_day"] = libtgw_python38.MDFutureSnapshot_trading_day_set
    __swig_getmethods__["trading_day"] = libtgw_python38.MDFutureSnapshot_trading_day_get
    if _newclass:trading_day = _swig_property(libtgw_python38.MDFutureSnapshot_trading_day_get, libtgw_python38.MDFutureSnapshot_trading_day_set)
    __swig_setmethods__["variety_category"] = libtgw_python38.MDFutureSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python38.MDFutureSnapshot_variety_category_get
    if _newclass:variety_category = _swig_property(libtgw_python38.MDFutureSnapshot_variety_category_get, libtgw_python38.MDFutureSnapshot_variety_category_set)
    __swig_setmethods__["latest_volume_trade"] = libtgw_python38.MDFutureSnapshot_latest_volume_trade_set
    __swig_getmethods__["latest_volume_trade"] = libtgw_python38.MDFutureSnapshot_latest_volume_trade_get
    if _newclass:latest_volume_trade = _swig_property(libtgw_python38.MDFutureSnapshot_latest_volume_trade_get, libtgw_python38.MDFutureSnapshot_latest_volume_trade_set)
    __swig_setmethods__["init_volume_trade"] = libtgw_python38.MDFutureSnapshot_init_volume_trade_set
    __swig_getmethods__["init_volume_trade"] = libtgw_python38.MDFutureSnapshot_init_volume_trade_get
    if _newclass:init_volume_trade = _swig_property(libtgw_python38.MDFutureSnapshot_init_volume_trade_get, libtgw_python38.MDFutureSnapshot_init_volume_trade_set)
    __swig_setmethods__["change_volume_trade"] = libtgw_python38.MDFutureSnapshot_change_volume_trade_set
    __swig_getmethods__["change_volume_trade"] = libtgw_python38.MDFutureSnapshot_change_volume_trade_get
    if _newclass:change_volume_trade = _swig_property(libtgw_python38.MDFutureSnapshot_change_volume_trade_get, libtgw_python38.MDFutureSnapshot_change_volume_trade_set)
    __swig_setmethods__["bid_imply_volume"] = libtgw_python38.MDFutureSnapshot_bid_imply_volume_set
    __swig_getmethods__["bid_imply_volume"] = libtgw_python38.MDFutureSnapshot_bid_imply_volume_get
    if _newclass:bid_imply_volume = _swig_property(libtgw_python38.MDFutureSnapshot_bid_imply_volume_get, libtgw_python38.MDFutureSnapshot_bid_imply_volume_set)
    __swig_setmethods__["offer_imply_volume"] = libtgw_python38.MDFutureSnapshot_offer_imply_volume_set
    __swig_getmethods__["offer_imply_volume"] = libtgw_python38.MDFutureSnapshot_offer_imply_volume_get
    if _newclass:offer_imply_volume = _swig_property(libtgw_python38.MDFutureSnapshot_offer_imply_volume_get, libtgw_python38.MDFutureSnapshot_offer_imply_volume_set)
    __swig_setmethods__["total_bid_volume_trade"] = libtgw_python38.MDFutureSnapshot_total_bid_volume_trade_set
    __swig_getmethods__["total_bid_volume_trade"] = libtgw_python38.MDFutureSnapshot_total_bid_volume_trade_get
    if _newclass:total_bid_volume_trade = _swig_property(libtgw_python38.MDFutureSnapshot_total_bid_volume_trade_get, libtgw_python38.MDFutureSnapshot_total_bid_volume_trade_set)
    __swig_setmethods__["total_ask_volume_trade"] = libtgw_python38.MDFutureSnapshot_total_ask_volume_trade_set
    __swig_getmethods__["total_ask_volume_trade"] = libtgw_python38.MDFutureSnapshot_total_ask_volume_trade_get
    if _newclass:total_ask_volume_trade = _swig_property(libtgw_python38.MDFutureSnapshot_total_ask_volume_trade_get, libtgw_python38.MDFutureSnapshot_total_ask_volume_trade_set)
    __swig_setmethods__["exchange_inst_id"] = libtgw_python38.MDFutureSnapshot_exchange_inst_id_set
    __swig_getmethods__["exchange_inst_id"] = libtgw_python38.MDFutureSnapshot_exchange_inst_id_get
    if _newclass:exchange_inst_id = _swig_property(libtgw_python38.MDFutureSnapshot_exchange_inst_id_get, libtgw_python38.MDFutureSnapshot_exchange_inst_id_set)
    def __init__(self): 
        this = libtgw_python38.new_MDFutureSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDFutureSnapshot
    __del__ = lambda self : None;
MDFutureSnapshot_swigregister = libtgw_python38.MDFutureSnapshot_swigregister
MDFutureSnapshot_swigregister(MDFutureSnapshot)

class MDAfterHourFixedPriceSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDAfterHourFixedPriceSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDAfterHourFixedPriceSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_market_type_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_security_code_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_security_code_set)
    __swig_setmethods__["variety_category"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_variety_category_get
    if _newclass:variety_category = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_variety_category_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_variety_category_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_orig_time_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_trading_phase_code_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_trading_phase_code_set)
    __swig_setmethods__["close_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_close_price_get
    if _newclass:close_price = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_close_price_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_close_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_price_get
    if _newclass:bid_price = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_price_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_volume_get
    if _newclass:bid_volume = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_volume_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_price_get
    if _newclass:offer_price = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_price_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_volume_get
    if _newclass:offer_volume = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_volume_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_offer_volume_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_pre_close_price_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_pre_close_price_set)
    __swig_setmethods__["num_trades"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_num_trades_set
    __swig_getmethods__["num_trades"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_num_trades_get
    if _newclass:num_trades = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_num_trades_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_total_volume_trade_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDAfterHourFixedPriceSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDAfterHourFixedPriceSnapshot_total_value_trade_get, libtgw_python38.MDAfterHourFixedPriceSnapshot_total_value_trade_set)
    def __init__(self): 
        this = libtgw_python38.new_MDAfterHourFixedPriceSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDAfterHourFixedPriceSnapshot
    __del__ = lambda self : None;
MDAfterHourFixedPriceSnapshot_swigregister = libtgw_python38.MDAfterHourFixedPriceSnapshot_swigregister
MDAfterHourFixedPriceSnapshot_swigregister(MDAfterHourFixedPriceSnapshot)

class MDCSIIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCSIIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCSIIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDCSIIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDCSIIndexSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDCSIIndexSnapshot_market_type_get, libtgw_python38.MDCSIIndexSnapshot_market_type_set)
    __swig_setmethods__["index_market"] = libtgw_python38.MDCSIIndexSnapshot_index_market_set
    __swig_getmethods__["index_market"] = libtgw_python38.MDCSIIndexSnapshot_index_market_get
    if _newclass:index_market = _swig_property(libtgw_python38.MDCSIIndexSnapshot_index_market_get, libtgw_python38.MDCSIIndexSnapshot_index_market_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDCSIIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDCSIIndexSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDCSIIndexSnapshot_security_code_get, libtgw_python38.MDCSIIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDCSIIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDCSIIndexSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDCSIIndexSnapshot_orig_time_get, libtgw_python38.MDCSIIndexSnapshot_orig_time_set)
    __swig_setmethods__["last_index"] = libtgw_python38.MDCSIIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = libtgw_python38.MDCSIIndexSnapshot_last_index_get
    if _newclass:last_index = _swig_property(libtgw_python38.MDCSIIndexSnapshot_last_index_get, libtgw_python38.MDCSIIndexSnapshot_last_index_set)
    __swig_setmethods__["open_index"] = libtgw_python38.MDCSIIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = libtgw_python38.MDCSIIndexSnapshot_open_index_get
    if _newclass:open_index = _swig_property(libtgw_python38.MDCSIIndexSnapshot_open_index_get, libtgw_python38.MDCSIIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = libtgw_python38.MDCSIIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = libtgw_python38.MDCSIIndexSnapshot_high_index_get
    if _newclass:high_index = _swig_property(libtgw_python38.MDCSIIndexSnapshot_high_index_get, libtgw_python38.MDCSIIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = libtgw_python38.MDCSIIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = libtgw_python38.MDCSIIndexSnapshot_low_index_get
    if _newclass:low_index = _swig_property(libtgw_python38.MDCSIIndexSnapshot_low_index_get, libtgw_python38.MDCSIIndexSnapshot_low_index_set)
    __swig_setmethods__["close_index"] = libtgw_python38.MDCSIIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = libtgw_python38.MDCSIIndexSnapshot_close_index_get
    if _newclass:close_index = _swig_property(libtgw_python38.MDCSIIndexSnapshot_close_index_get, libtgw_python38.MDCSIIndexSnapshot_close_index_set)
    __swig_setmethods__["pre_close_index"] = libtgw_python38.MDCSIIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = libtgw_python38.MDCSIIndexSnapshot_pre_close_index_get
    if _newclass:pre_close_index = _swig_property(libtgw_python38.MDCSIIndexSnapshot_pre_close_index_get, libtgw_python38.MDCSIIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["change"] = libtgw_python38.MDCSIIndexSnapshot_change_set
    __swig_getmethods__["change"] = libtgw_python38.MDCSIIndexSnapshot_change_get
    if _newclass:change = _swig_property(libtgw_python38.MDCSIIndexSnapshot_change_get, libtgw_python38.MDCSIIndexSnapshot_change_set)
    __swig_setmethods__["ratio_of_change"] = libtgw_python38.MDCSIIndexSnapshot_ratio_of_change_set
    __swig_getmethods__["ratio_of_change"] = libtgw_python38.MDCSIIndexSnapshot_ratio_of_change_get
    if _newclass:ratio_of_change = _swig_property(libtgw_python38.MDCSIIndexSnapshot_ratio_of_change_get, libtgw_python38.MDCSIIndexSnapshot_ratio_of_change_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDCSIIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDCSIIndexSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDCSIIndexSnapshot_total_volume_trade_get, libtgw_python38.MDCSIIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDCSIIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDCSIIndexSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDCSIIndexSnapshot_total_value_trade_get, libtgw_python38.MDCSIIndexSnapshot_total_value_trade_set)
    __swig_setmethods__["exchange_rate"] = libtgw_python38.MDCSIIndexSnapshot_exchange_rate_set
    __swig_getmethods__["exchange_rate"] = libtgw_python38.MDCSIIndexSnapshot_exchange_rate_get
    if _newclass:exchange_rate = _swig_property(libtgw_python38.MDCSIIndexSnapshot_exchange_rate_get, libtgw_python38.MDCSIIndexSnapshot_exchange_rate_set)
    __swig_setmethods__["currency_symbol"] = libtgw_python38.MDCSIIndexSnapshot_currency_symbol_set
    __swig_getmethods__["currency_symbol"] = libtgw_python38.MDCSIIndexSnapshot_currency_symbol_get
    if _newclass:currency_symbol = _swig_property(libtgw_python38.MDCSIIndexSnapshot_currency_symbol_get, libtgw_python38.MDCSIIndexSnapshot_currency_symbol_set)
    def __init__(self): 
        this = libtgw_python38.new_MDCSIIndexSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDCSIIndexSnapshot
    __del__ = lambda self : None;
MDCSIIndexSnapshot_swigregister = libtgw_python38.MDCSIIndexSnapshot_swigregister
MDCSIIndexSnapshot_swigregister(MDCSIIndexSnapshot)

class MDCnIndexSnapshot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCnIndexSnapshot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCnIndexSnapshot, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDCnIndexSnapshot_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDCnIndexSnapshot_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDCnIndexSnapshot_market_type_get, libtgw_python38.MDCnIndexSnapshot_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDCnIndexSnapshot_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDCnIndexSnapshot_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDCnIndexSnapshot_security_code_get, libtgw_python38.MDCnIndexSnapshot_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDCnIndexSnapshot_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDCnIndexSnapshot_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDCnIndexSnapshot_orig_time_get, libtgw_python38.MDCnIndexSnapshot_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDCnIndexSnapshot_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDCnIndexSnapshot_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDCnIndexSnapshot_trading_phase_code_get, libtgw_python38.MDCnIndexSnapshot_trading_phase_code_set)
    __swig_setmethods__["pre_close_index"] = libtgw_python38.MDCnIndexSnapshot_pre_close_index_set
    __swig_getmethods__["pre_close_index"] = libtgw_python38.MDCnIndexSnapshot_pre_close_index_get
    if _newclass:pre_close_index = _swig_property(libtgw_python38.MDCnIndexSnapshot_pre_close_index_get, libtgw_python38.MDCnIndexSnapshot_pre_close_index_set)
    __swig_setmethods__["open_index"] = libtgw_python38.MDCnIndexSnapshot_open_index_set
    __swig_getmethods__["open_index"] = libtgw_python38.MDCnIndexSnapshot_open_index_get
    if _newclass:open_index = _swig_property(libtgw_python38.MDCnIndexSnapshot_open_index_get, libtgw_python38.MDCnIndexSnapshot_open_index_set)
    __swig_setmethods__["high_index"] = libtgw_python38.MDCnIndexSnapshot_high_index_set
    __swig_getmethods__["high_index"] = libtgw_python38.MDCnIndexSnapshot_high_index_get
    if _newclass:high_index = _swig_property(libtgw_python38.MDCnIndexSnapshot_high_index_get, libtgw_python38.MDCnIndexSnapshot_high_index_set)
    __swig_setmethods__["low_index"] = libtgw_python38.MDCnIndexSnapshot_low_index_set
    __swig_getmethods__["low_index"] = libtgw_python38.MDCnIndexSnapshot_low_index_get
    if _newclass:low_index = _swig_property(libtgw_python38.MDCnIndexSnapshot_low_index_get, libtgw_python38.MDCnIndexSnapshot_low_index_set)
    __swig_setmethods__["last_index"] = libtgw_python38.MDCnIndexSnapshot_last_index_set
    __swig_getmethods__["last_index"] = libtgw_python38.MDCnIndexSnapshot_last_index_get
    if _newclass:last_index = _swig_property(libtgw_python38.MDCnIndexSnapshot_last_index_get, libtgw_python38.MDCnIndexSnapshot_last_index_set)
    __swig_setmethods__["close_index"] = libtgw_python38.MDCnIndexSnapshot_close_index_set
    __swig_getmethods__["close_index"] = libtgw_python38.MDCnIndexSnapshot_close_index_get
    if _newclass:close_index = _swig_property(libtgw_python38.MDCnIndexSnapshot_close_index_get, libtgw_python38.MDCnIndexSnapshot_close_index_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDCnIndexSnapshot_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDCnIndexSnapshot_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDCnIndexSnapshot_total_volume_trade_get, libtgw_python38.MDCnIndexSnapshot_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDCnIndexSnapshot_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDCnIndexSnapshot_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDCnIndexSnapshot_total_value_trade_get, libtgw_python38.MDCnIndexSnapshot_total_value_trade_set)
    def __init__(self): 
        this = libtgw_python38.new_MDCnIndexSnapshot()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDCnIndexSnapshot
    __del__ = lambda self : None;
MDCnIndexSnapshot_swigregister = libtgw_python38.MDCnIndexSnapshot_swigregister
MDCnIndexSnapshot_swigregister(MDCnIndexSnapshot)

class MDHKTRealtimeLimit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTRealtimeLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTRealtimeLimit, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDHKTRealtimeLimit_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDHKTRealtimeLimit_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDHKTRealtimeLimit_market_type_get, libtgw_python38.MDHKTRealtimeLimit_market_type_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDHKTRealtimeLimit_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDHKTRealtimeLimit_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDHKTRealtimeLimit_orig_time_get, libtgw_python38.MDHKTRealtimeLimit_orig_time_set)
    __swig_setmethods__["threshold_amount"] = libtgw_python38.MDHKTRealtimeLimit_threshold_amount_set
    __swig_getmethods__["threshold_amount"] = libtgw_python38.MDHKTRealtimeLimit_threshold_amount_get
    if _newclass:threshold_amount = _swig_property(libtgw_python38.MDHKTRealtimeLimit_threshold_amount_get, libtgw_python38.MDHKTRealtimeLimit_threshold_amount_set)
    __swig_setmethods__["pos_amt"] = libtgw_python38.MDHKTRealtimeLimit_pos_amt_set
    __swig_getmethods__["pos_amt"] = libtgw_python38.MDHKTRealtimeLimit_pos_amt_get
    if _newclass:pos_amt = _swig_property(libtgw_python38.MDHKTRealtimeLimit_pos_amt_get, libtgw_python38.MDHKTRealtimeLimit_pos_amt_set)
    __swig_setmethods__["amount_status"] = libtgw_python38.MDHKTRealtimeLimit_amount_status_set
    __swig_getmethods__["amount_status"] = libtgw_python38.MDHKTRealtimeLimit_amount_status_get
    if _newclass:amount_status = _swig_property(libtgw_python38.MDHKTRealtimeLimit_amount_status_get, libtgw_python38.MDHKTRealtimeLimit_amount_status_set)
    __swig_setmethods__["mkt_status"] = libtgw_python38.MDHKTRealtimeLimit_mkt_status_set
    __swig_getmethods__["mkt_status"] = libtgw_python38.MDHKTRealtimeLimit_mkt_status_get
    if _newclass:mkt_status = _swig_property(libtgw_python38.MDHKTRealtimeLimit_mkt_status_get, libtgw_python38.MDHKTRealtimeLimit_mkt_status_set)
    def __init__(self): 
        this = libtgw_python38.new_MDHKTRealtimeLimit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDHKTRealtimeLimit
    __del__ = lambda self : None;
MDHKTRealtimeLimit_swigregister = libtgw_python38.MDHKTRealtimeLimit_swigregister
MDHKTRealtimeLimit_swigregister(MDHKTRealtimeLimit)

class MDHKTProductStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTProductStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTProductStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDHKTProductStatus_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDHKTProductStatus_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDHKTProductStatus_market_type_get, libtgw_python38.MDHKTProductStatus_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDHKTProductStatus_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDHKTProductStatus_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDHKTProductStatus_security_code_get, libtgw_python38.MDHKTProductStatus_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDHKTProductStatus_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDHKTProductStatus_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDHKTProductStatus_orig_time_get, libtgw_python38.MDHKTProductStatus_orig_time_set)
    __swig_setmethods__["trading_status1"] = libtgw_python38.MDHKTProductStatus_trading_status1_set
    __swig_getmethods__["trading_status1"] = libtgw_python38.MDHKTProductStatus_trading_status1_get
    if _newclass:trading_status1 = _swig_property(libtgw_python38.MDHKTProductStatus_trading_status1_get, libtgw_python38.MDHKTProductStatus_trading_status1_set)
    __swig_setmethods__["trading_status2"] = libtgw_python38.MDHKTProductStatus_trading_status2_set
    __swig_getmethods__["trading_status2"] = libtgw_python38.MDHKTProductStatus_trading_status2_get
    if _newclass:trading_status2 = _swig_property(libtgw_python38.MDHKTProductStatus_trading_status2_get, libtgw_python38.MDHKTProductStatus_trading_status2_set)
    def __init__(self): 
        this = libtgw_python38.new_MDHKTProductStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDHKTProductStatus
    __del__ = lambda self : None;
MDHKTProductStatus_swigregister = libtgw_python38.MDHKTProductStatus_swigregister
MDHKTProductStatus_swigregister(MDHKTProductStatus)

class MDHKTVCM(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDHKTVCM, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDHKTVCM, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDHKTVCM_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDHKTVCM_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDHKTVCM_market_type_get, libtgw_python38.MDHKTVCM_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDHKTVCM_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDHKTVCM_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDHKTVCM_security_code_get, libtgw_python38.MDHKTVCM_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDHKTVCM_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDHKTVCM_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDHKTVCM_orig_time_get, libtgw_python38.MDHKTVCM_orig_time_set)
    __swig_setmethods__["start_time"] = libtgw_python38.MDHKTVCM_start_time_set
    __swig_getmethods__["start_time"] = libtgw_python38.MDHKTVCM_start_time_get
    if _newclass:start_time = _swig_property(libtgw_python38.MDHKTVCM_start_time_get, libtgw_python38.MDHKTVCM_start_time_set)
    __swig_setmethods__["end_time"] = libtgw_python38.MDHKTVCM_end_time_set
    __swig_getmethods__["end_time"] = libtgw_python38.MDHKTVCM_end_time_get
    if _newclass:end_time = _swig_property(libtgw_python38.MDHKTVCM_end_time_get, libtgw_python38.MDHKTVCM_end_time_set)
    __swig_setmethods__["ref_price"] = libtgw_python38.MDHKTVCM_ref_price_set
    __swig_getmethods__["ref_price"] = libtgw_python38.MDHKTVCM_ref_price_get
    if _newclass:ref_price = _swig_property(libtgw_python38.MDHKTVCM_ref_price_get, libtgw_python38.MDHKTVCM_ref_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDHKTVCM_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDHKTVCM_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDHKTVCM_low_price_get, libtgw_python38.MDHKTVCM_low_price_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDHKTVCM_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDHKTVCM_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDHKTVCM_high_price_get, libtgw_python38.MDHKTVCM_high_price_set)
    def __init__(self): 
        this = libtgw_python38.new_MDHKTVCM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDHKTVCM
    __del__ = lambda self : None;
MDHKTVCM_swigregister = libtgw_python38.MDHKTVCM_swigregister
MDHKTVCM_swigregister(MDHKTVCM)

class MDSnapshotL2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDSnapshotL2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDSnapshotL2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDSnapshotL2_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDSnapshotL2_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDSnapshotL2_market_type_get, libtgw_python38.MDSnapshotL2_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDSnapshotL2_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDSnapshotL2_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDSnapshotL2_security_code_get, libtgw_python38.MDSnapshotL2_security_code_set)
    __swig_setmethods__["orig_time"] = libtgw_python38.MDSnapshotL2_orig_time_set
    __swig_getmethods__["orig_time"] = libtgw_python38.MDSnapshotL2_orig_time_get
    if _newclass:orig_time = _swig_property(libtgw_python38.MDSnapshotL2_orig_time_get, libtgw_python38.MDSnapshotL2_orig_time_set)
    __swig_setmethods__["trading_phase_code"] = libtgw_python38.MDSnapshotL2_trading_phase_code_set
    __swig_getmethods__["trading_phase_code"] = libtgw_python38.MDSnapshotL2_trading_phase_code_get
    if _newclass:trading_phase_code = _swig_property(libtgw_python38.MDSnapshotL2_trading_phase_code_get, libtgw_python38.MDSnapshotL2_trading_phase_code_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDSnapshotL2_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDSnapshotL2_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDSnapshotL2_pre_close_price_get, libtgw_python38.MDSnapshotL2_pre_close_price_set)
    __swig_setmethods__["open_price"] = libtgw_python38.MDSnapshotL2_open_price_set
    __swig_getmethods__["open_price"] = libtgw_python38.MDSnapshotL2_open_price_get
    if _newclass:open_price = _swig_property(libtgw_python38.MDSnapshotL2_open_price_get, libtgw_python38.MDSnapshotL2_open_price_set)
    __swig_setmethods__["high_price"] = libtgw_python38.MDSnapshotL2_high_price_set
    __swig_getmethods__["high_price"] = libtgw_python38.MDSnapshotL2_high_price_get
    if _newclass:high_price = _swig_property(libtgw_python38.MDSnapshotL2_high_price_get, libtgw_python38.MDSnapshotL2_high_price_set)
    __swig_setmethods__["low_price"] = libtgw_python38.MDSnapshotL2_low_price_set
    __swig_getmethods__["low_price"] = libtgw_python38.MDSnapshotL2_low_price_get
    if _newclass:low_price = _swig_property(libtgw_python38.MDSnapshotL2_low_price_get, libtgw_python38.MDSnapshotL2_low_price_set)
    __swig_setmethods__["last_price"] = libtgw_python38.MDSnapshotL2_last_price_set
    __swig_getmethods__["last_price"] = libtgw_python38.MDSnapshotL2_last_price_get
    if _newclass:last_price = _swig_property(libtgw_python38.MDSnapshotL2_last_price_get, libtgw_python38.MDSnapshotL2_last_price_set)
    __swig_setmethods__["close_price"] = libtgw_python38.MDSnapshotL2_close_price_set
    __swig_getmethods__["close_price"] = libtgw_python38.MDSnapshotL2_close_price_get
    if _newclass:close_price = _swig_property(libtgw_python38.MDSnapshotL2_close_price_get, libtgw_python38.MDSnapshotL2_close_price_set)
    __swig_setmethods__["bid_price"] = libtgw_python38.MDSnapshotL2_bid_price_set
    __swig_getmethods__["bid_price"] = libtgw_python38.MDSnapshotL2_bid_price_get
    if _newclass:bid_price = _swig_property(libtgw_python38.MDSnapshotL2_bid_price_get, libtgw_python38.MDSnapshotL2_bid_price_set)
    __swig_setmethods__["bid_volume"] = libtgw_python38.MDSnapshotL2_bid_volume_set
    __swig_getmethods__["bid_volume"] = libtgw_python38.MDSnapshotL2_bid_volume_get
    if _newclass:bid_volume = _swig_property(libtgw_python38.MDSnapshotL2_bid_volume_get, libtgw_python38.MDSnapshotL2_bid_volume_set)
    __swig_setmethods__["offer_price"] = libtgw_python38.MDSnapshotL2_offer_price_set
    __swig_getmethods__["offer_price"] = libtgw_python38.MDSnapshotL2_offer_price_get
    if _newclass:offer_price = _swig_property(libtgw_python38.MDSnapshotL2_offer_price_get, libtgw_python38.MDSnapshotL2_offer_price_set)
    __swig_setmethods__["offer_volume"] = libtgw_python38.MDSnapshotL2_offer_volume_set
    __swig_getmethods__["offer_volume"] = libtgw_python38.MDSnapshotL2_offer_volume_get
    if _newclass:offer_volume = _swig_property(libtgw_python38.MDSnapshotL2_offer_volume_get, libtgw_python38.MDSnapshotL2_offer_volume_set)
    __swig_setmethods__["num_trades"] = libtgw_python38.MDSnapshotL2_num_trades_set
    __swig_getmethods__["num_trades"] = libtgw_python38.MDSnapshotL2_num_trades_get
    if _newclass:num_trades = _swig_property(libtgw_python38.MDSnapshotL2_num_trades_get, libtgw_python38.MDSnapshotL2_num_trades_set)
    __swig_setmethods__["total_volume_trade"] = libtgw_python38.MDSnapshotL2_total_volume_trade_set
    __swig_getmethods__["total_volume_trade"] = libtgw_python38.MDSnapshotL2_total_volume_trade_get
    if _newclass:total_volume_trade = _swig_property(libtgw_python38.MDSnapshotL2_total_volume_trade_get, libtgw_python38.MDSnapshotL2_total_volume_trade_set)
    __swig_setmethods__["total_value_trade"] = libtgw_python38.MDSnapshotL2_total_value_trade_set
    __swig_getmethods__["total_value_trade"] = libtgw_python38.MDSnapshotL2_total_value_trade_get
    if _newclass:total_value_trade = _swig_property(libtgw_python38.MDSnapshotL2_total_value_trade_get, libtgw_python38.MDSnapshotL2_total_value_trade_set)
    __swig_setmethods__["total_bid_volume"] = libtgw_python38.MDSnapshotL2_total_bid_volume_set
    __swig_getmethods__["total_bid_volume"] = libtgw_python38.MDSnapshotL2_total_bid_volume_get
    if _newclass:total_bid_volume = _swig_property(libtgw_python38.MDSnapshotL2_total_bid_volume_get, libtgw_python38.MDSnapshotL2_total_bid_volume_set)
    __swig_setmethods__["total_offer_volume"] = libtgw_python38.MDSnapshotL2_total_offer_volume_set
    __swig_getmethods__["total_offer_volume"] = libtgw_python38.MDSnapshotL2_total_offer_volume_get
    if _newclass:total_offer_volume = _swig_property(libtgw_python38.MDSnapshotL2_total_offer_volume_get, libtgw_python38.MDSnapshotL2_total_offer_volume_set)
    __swig_setmethods__["weighted_avg_bid_price"] = libtgw_python38.MDSnapshotL2_weighted_avg_bid_price_set
    __swig_getmethods__["weighted_avg_bid_price"] = libtgw_python38.MDSnapshotL2_weighted_avg_bid_price_get
    if _newclass:weighted_avg_bid_price = _swig_property(libtgw_python38.MDSnapshotL2_weighted_avg_bid_price_get, libtgw_python38.MDSnapshotL2_weighted_avg_bid_price_set)
    __swig_setmethods__["weighted_avg_offer_price"] = libtgw_python38.MDSnapshotL2_weighted_avg_offer_price_set
    __swig_getmethods__["weighted_avg_offer_price"] = libtgw_python38.MDSnapshotL2_weighted_avg_offer_price_get
    if _newclass:weighted_avg_offer_price = _swig_property(libtgw_python38.MDSnapshotL2_weighted_avg_offer_price_get, libtgw_python38.MDSnapshotL2_weighted_avg_offer_price_set)
    __swig_setmethods__["IOPV"] = libtgw_python38.MDSnapshotL2_IOPV_set
    __swig_getmethods__["IOPV"] = libtgw_python38.MDSnapshotL2_IOPV_get
    if _newclass:IOPV = _swig_property(libtgw_python38.MDSnapshotL2_IOPV_get, libtgw_python38.MDSnapshotL2_IOPV_set)
    __swig_setmethods__["yield_to_maturity"] = libtgw_python38.MDSnapshotL2_yield_to_maturity_set
    __swig_getmethods__["yield_to_maturity"] = libtgw_python38.MDSnapshotL2_yield_to_maturity_get
    if _newclass:yield_to_maturity = _swig_property(libtgw_python38.MDSnapshotL2_yield_to_maturity_get, libtgw_python38.MDSnapshotL2_yield_to_maturity_set)
    __swig_setmethods__["high_limited"] = libtgw_python38.MDSnapshotL2_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python38.MDSnapshotL2_high_limited_get
    if _newclass:high_limited = _swig_property(libtgw_python38.MDSnapshotL2_high_limited_get, libtgw_python38.MDSnapshotL2_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python38.MDSnapshotL2_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python38.MDSnapshotL2_low_limited_get
    if _newclass:low_limited = _swig_property(libtgw_python38.MDSnapshotL2_low_limited_get, libtgw_python38.MDSnapshotL2_low_limited_set)
    __swig_setmethods__["price_earning_ratio1"] = libtgw_python38.MDSnapshotL2_price_earning_ratio1_set
    __swig_getmethods__["price_earning_ratio1"] = libtgw_python38.MDSnapshotL2_price_earning_ratio1_get
    if _newclass:price_earning_ratio1 = _swig_property(libtgw_python38.MDSnapshotL2_price_earning_ratio1_get, libtgw_python38.MDSnapshotL2_price_earning_ratio1_set)
    __swig_setmethods__["price_earning_ratio2"] = libtgw_python38.MDSnapshotL2_price_earning_ratio2_set
    __swig_getmethods__["price_earning_ratio2"] = libtgw_python38.MDSnapshotL2_price_earning_ratio2_get
    if _newclass:price_earning_ratio2 = _swig_property(libtgw_python38.MDSnapshotL2_price_earning_ratio2_get, libtgw_python38.MDSnapshotL2_price_earning_ratio2_set)
    __swig_setmethods__["change1"] = libtgw_python38.MDSnapshotL2_change1_set
    __swig_getmethods__["change1"] = libtgw_python38.MDSnapshotL2_change1_get
    if _newclass:change1 = _swig_property(libtgw_python38.MDSnapshotL2_change1_get, libtgw_python38.MDSnapshotL2_change1_set)
    __swig_setmethods__["change2"] = libtgw_python38.MDSnapshotL2_change2_set
    __swig_getmethods__["change2"] = libtgw_python38.MDSnapshotL2_change2_get
    if _newclass:change2 = _swig_property(libtgw_python38.MDSnapshotL2_change2_get, libtgw_python38.MDSnapshotL2_change2_set)
    def __init__(self): 
        this = libtgw_python38.new_MDSnapshotL2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDSnapshotL2
    __del__ = lambda self : None;
MDSnapshotL2_swigregister = libtgw_python38.MDSnapshotL2_swigregister
MDSnapshotL2_swigregister(MDSnapshotL2)

class MDTickExecution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTickExecution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTickExecution, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDTickExecution_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDTickExecution_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDTickExecution_market_type_get, libtgw_python38.MDTickExecution_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDTickExecution_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDTickExecution_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDTickExecution_security_code_get, libtgw_python38.MDTickExecution_security_code_set)
    __swig_setmethods__["exec_time"] = libtgw_python38.MDTickExecution_exec_time_set
    __swig_getmethods__["exec_time"] = libtgw_python38.MDTickExecution_exec_time_get
    if _newclass:exec_time = _swig_property(libtgw_python38.MDTickExecution_exec_time_get, libtgw_python38.MDTickExecution_exec_time_set)
    __swig_setmethods__["channel_no"] = libtgw_python38.MDTickExecution_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python38.MDTickExecution_channel_no_get
    if _newclass:channel_no = _swig_property(libtgw_python38.MDTickExecution_channel_no_get, libtgw_python38.MDTickExecution_channel_no_set)
    __swig_setmethods__["appl_seq_num"] = libtgw_python38.MDTickExecution_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = libtgw_python38.MDTickExecution_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(libtgw_python38.MDTickExecution_appl_seq_num_get, libtgw_python38.MDTickExecution_appl_seq_num_set)
    __swig_setmethods__["exec_price"] = libtgw_python38.MDTickExecution_exec_price_set
    __swig_getmethods__["exec_price"] = libtgw_python38.MDTickExecution_exec_price_get
    if _newclass:exec_price = _swig_property(libtgw_python38.MDTickExecution_exec_price_get, libtgw_python38.MDTickExecution_exec_price_set)
    __swig_setmethods__["exec_volume"] = libtgw_python38.MDTickExecution_exec_volume_set
    __swig_getmethods__["exec_volume"] = libtgw_python38.MDTickExecution_exec_volume_get
    if _newclass:exec_volume = _swig_property(libtgw_python38.MDTickExecution_exec_volume_get, libtgw_python38.MDTickExecution_exec_volume_set)
    __swig_setmethods__["value_trade"] = libtgw_python38.MDTickExecution_value_trade_set
    __swig_getmethods__["value_trade"] = libtgw_python38.MDTickExecution_value_trade_get
    if _newclass:value_trade = _swig_property(libtgw_python38.MDTickExecution_value_trade_get, libtgw_python38.MDTickExecution_value_trade_set)
    __swig_setmethods__["bid_appl_seq_num"] = libtgw_python38.MDTickExecution_bid_appl_seq_num_set
    __swig_getmethods__["bid_appl_seq_num"] = libtgw_python38.MDTickExecution_bid_appl_seq_num_get
    if _newclass:bid_appl_seq_num = _swig_property(libtgw_python38.MDTickExecution_bid_appl_seq_num_get, libtgw_python38.MDTickExecution_bid_appl_seq_num_set)
    __swig_setmethods__["offer_appl_seq_num"] = libtgw_python38.MDTickExecution_offer_appl_seq_num_set
    __swig_getmethods__["offer_appl_seq_num"] = libtgw_python38.MDTickExecution_offer_appl_seq_num_get
    if _newclass:offer_appl_seq_num = _swig_property(libtgw_python38.MDTickExecution_offer_appl_seq_num_get, libtgw_python38.MDTickExecution_offer_appl_seq_num_set)
    __swig_setmethods__["side"] = libtgw_python38.MDTickExecution_side_set
    __swig_getmethods__["side"] = libtgw_python38.MDTickExecution_side_get
    if _newclass:side = _swig_property(libtgw_python38.MDTickExecution_side_get, libtgw_python38.MDTickExecution_side_set)
    __swig_setmethods__["exec_type"] = libtgw_python38.MDTickExecution_exec_type_set
    __swig_getmethods__["exec_type"] = libtgw_python38.MDTickExecution_exec_type_get
    if _newclass:exec_type = _swig_property(libtgw_python38.MDTickExecution_exec_type_get, libtgw_python38.MDTickExecution_exec_type_set)
    __swig_setmethods__["md_stream_id"] = libtgw_python38.MDTickExecution_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = libtgw_python38.MDTickExecution_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(libtgw_python38.MDTickExecution_md_stream_id_get, libtgw_python38.MDTickExecution_md_stream_id_set)
    __swig_setmethods__["biz_index"] = libtgw_python38.MDTickExecution_biz_index_set
    __swig_getmethods__["biz_index"] = libtgw_python38.MDTickExecution_biz_index_get
    if _newclass:biz_index = _swig_property(libtgw_python38.MDTickExecution_biz_index_get, libtgw_python38.MDTickExecution_biz_index_set)
    __swig_setmethods__["variety_category"] = libtgw_python38.MDTickExecution_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python38.MDTickExecution_variety_category_get
    if _newclass:variety_category = _swig_property(libtgw_python38.MDTickExecution_variety_category_get, libtgw_python38.MDTickExecution_variety_category_set)
    def __init__(self): 
        this = libtgw_python38.new_MDTickExecution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDTickExecution
    __del__ = lambda self : None;
MDTickExecution_swigregister = libtgw_python38.MDTickExecution_swigregister
MDTickExecution_swigregister(MDTickExecution)

class MDTickOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDTickOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDTickOrder, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDTickOrder_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDTickOrder_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDTickOrder_market_type_get, libtgw_python38.MDTickOrder_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDTickOrder_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDTickOrder_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDTickOrder_security_code_get, libtgw_python38.MDTickOrder_security_code_set)
    __swig_setmethods__["appl_seq_num"] = libtgw_python38.MDTickOrder_appl_seq_num_set
    __swig_getmethods__["appl_seq_num"] = libtgw_python38.MDTickOrder_appl_seq_num_get
    if _newclass:appl_seq_num = _swig_property(libtgw_python38.MDTickOrder_appl_seq_num_get, libtgw_python38.MDTickOrder_appl_seq_num_set)
    __swig_setmethods__["channel_no"] = libtgw_python38.MDTickOrder_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python38.MDTickOrder_channel_no_get
    if _newclass:channel_no = _swig_property(libtgw_python38.MDTickOrder_channel_no_get, libtgw_python38.MDTickOrder_channel_no_set)
    __swig_setmethods__["order_time"] = libtgw_python38.MDTickOrder_order_time_set
    __swig_getmethods__["order_time"] = libtgw_python38.MDTickOrder_order_time_get
    if _newclass:order_time = _swig_property(libtgw_python38.MDTickOrder_order_time_get, libtgw_python38.MDTickOrder_order_time_set)
    __swig_setmethods__["order_price"] = libtgw_python38.MDTickOrder_order_price_set
    __swig_getmethods__["order_price"] = libtgw_python38.MDTickOrder_order_price_get
    if _newclass:order_price = _swig_property(libtgw_python38.MDTickOrder_order_price_get, libtgw_python38.MDTickOrder_order_price_set)
    __swig_setmethods__["order_volume"] = libtgw_python38.MDTickOrder_order_volume_set
    __swig_getmethods__["order_volume"] = libtgw_python38.MDTickOrder_order_volume_get
    if _newclass:order_volume = _swig_property(libtgw_python38.MDTickOrder_order_volume_get, libtgw_python38.MDTickOrder_order_volume_set)
    __swig_setmethods__["side"] = libtgw_python38.MDTickOrder_side_set
    __swig_getmethods__["side"] = libtgw_python38.MDTickOrder_side_get
    if _newclass:side = _swig_property(libtgw_python38.MDTickOrder_side_get, libtgw_python38.MDTickOrder_side_set)
    __swig_setmethods__["order_type"] = libtgw_python38.MDTickOrder_order_type_set
    __swig_getmethods__["order_type"] = libtgw_python38.MDTickOrder_order_type_get
    if _newclass:order_type = _swig_property(libtgw_python38.MDTickOrder_order_type_get, libtgw_python38.MDTickOrder_order_type_set)
    __swig_setmethods__["md_stream_id"] = libtgw_python38.MDTickOrder_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = libtgw_python38.MDTickOrder_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(libtgw_python38.MDTickOrder_md_stream_id_get, libtgw_python38.MDTickOrder_md_stream_id_set)
    __swig_setmethods__["product_status"] = libtgw_python38.MDTickOrder_product_status_set
    __swig_getmethods__["product_status"] = libtgw_python38.MDTickOrder_product_status_get
    if _newclass:product_status = _swig_property(libtgw_python38.MDTickOrder_product_status_get, libtgw_python38.MDTickOrder_product_status_set)
    __swig_setmethods__["orig_order_no"] = libtgw_python38.MDTickOrder_orig_order_no_set
    __swig_getmethods__["orig_order_no"] = libtgw_python38.MDTickOrder_orig_order_no_get
    if _newclass:orig_order_no = _swig_property(libtgw_python38.MDTickOrder_orig_order_no_get, libtgw_python38.MDTickOrder_orig_order_no_set)
    __swig_setmethods__["biz_index"] = libtgw_python38.MDTickOrder_biz_index_set
    __swig_getmethods__["biz_index"] = libtgw_python38.MDTickOrder_biz_index_get
    if _newclass:biz_index = _swig_property(libtgw_python38.MDTickOrder_biz_index_get, libtgw_python38.MDTickOrder_biz_index_set)
    def __init__(self): 
        this = libtgw_python38.new_MDTickOrder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDTickOrder
    __del__ = lambda self : None;
MDTickOrder_swigregister = libtgw_python38.MDTickOrder_swigregister
MDTickOrder_swigregister(MDTickOrder)

class MDOrderQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDOrderQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDOrderQueue, name)
    __repr__ = _swig_repr
    __swig_setmethods__["market_type"] = libtgw_python38.MDOrderQueue_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDOrderQueue_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDOrderQueue_market_type_get, libtgw_python38.MDOrderQueue_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDOrderQueue_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDOrderQueue_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDOrderQueue_security_code_get, libtgw_python38.MDOrderQueue_security_code_set)
    __swig_setmethods__["order_time"] = libtgw_python38.MDOrderQueue_order_time_set
    __swig_getmethods__["order_time"] = libtgw_python38.MDOrderQueue_order_time_get
    if _newclass:order_time = _swig_property(libtgw_python38.MDOrderQueue_order_time_get, libtgw_python38.MDOrderQueue_order_time_set)
    __swig_setmethods__["side"] = libtgw_python38.MDOrderQueue_side_set
    __swig_getmethods__["side"] = libtgw_python38.MDOrderQueue_side_get
    if _newclass:side = _swig_property(libtgw_python38.MDOrderQueue_side_get, libtgw_python38.MDOrderQueue_side_set)
    __swig_setmethods__["order_price"] = libtgw_python38.MDOrderQueue_order_price_set
    __swig_getmethods__["order_price"] = libtgw_python38.MDOrderQueue_order_price_get
    if _newclass:order_price = _swig_property(libtgw_python38.MDOrderQueue_order_price_get, libtgw_python38.MDOrderQueue_order_price_set)
    __swig_setmethods__["order_volume"] = libtgw_python38.MDOrderQueue_order_volume_set
    __swig_getmethods__["order_volume"] = libtgw_python38.MDOrderQueue_order_volume_get
    if _newclass:order_volume = _swig_property(libtgw_python38.MDOrderQueue_order_volume_get, libtgw_python38.MDOrderQueue_order_volume_set)
    __swig_setmethods__["num_of_orders"] = libtgw_python38.MDOrderQueue_num_of_orders_set
    __swig_getmethods__["num_of_orders"] = libtgw_python38.MDOrderQueue_num_of_orders_get
    if _newclass:num_of_orders = _swig_property(libtgw_python38.MDOrderQueue_num_of_orders_get, libtgw_python38.MDOrderQueue_num_of_orders_set)
    __swig_setmethods__["items"] = libtgw_python38.MDOrderQueue_items_set
    __swig_getmethods__["items"] = libtgw_python38.MDOrderQueue_items_get
    if _newclass:items = _swig_property(libtgw_python38.MDOrderQueue_items_get, libtgw_python38.MDOrderQueue_items_set)
    __swig_setmethods__["volume"] = libtgw_python38.MDOrderQueue_volume_set
    __swig_getmethods__["volume"] = libtgw_python38.MDOrderQueue_volume_get
    if _newclass:volume = _swig_property(libtgw_python38.MDOrderQueue_volume_get, libtgw_python38.MDOrderQueue_volume_set)
    __swig_setmethods__["channel_no"] = libtgw_python38.MDOrderQueue_channel_no_set
    __swig_getmethods__["channel_no"] = libtgw_python38.MDOrderQueue_channel_no_get
    if _newclass:channel_no = _swig_property(libtgw_python38.MDOrderQueue_channel_no_get, libtgw_python38.MDOrderQueue_channel_no_set)
    __swig_setmethods__["md_stream_id"] = libtgw_python38.MDOrderQueue_md_stream_id_set
    __swig_getmethods__["md_stream_id"] = libtgw_python38.MDOrderQueue_md_stream_id_get
    if _newclass:md_stream_id = _swig_property(libtgw_python38.MDOrderQueue_md_stream_id_get, libtgw_python38.MDOrderQueue_md_stream_id_set)
    def __init__(self): 
        this = libtgw_python38.new_MDOrderQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDOrderQueue
    __del__ = lambda self : None;
MDOrderQueue_swigregister = libtgw_python38.MDOrderQueue_swigregister
MDOrderQueue_swigregister(MDOrderQueue)

class MDCodeTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCodeTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCodeTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python38.MDCodeTable_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDCodeTable_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDCodeTable_security_code_get, libtgw_python38.MDCodeTable_security_code_set)
    __swig_setmethods__["symbol"] = libtgw_python38.MDCodeTable_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python38.MDCodeTable_symbol_get
    if _newclass:symbol = _swig_property(libtgw_python38.MDCodeTable_symbol_get, libtgw_python38.MDCodeTable_symbol_set)
    __swig_setmethods__["english_name"] = libtgw_python38.MDCodeTable_english_name_set
    __swig_getmethods__["english_name"] = libtgw_python38.MDCodeTable_english_name_get
    if _newclass:english_name = _swig_property(libtgw_python38.MDCodeTable_english_name_get, libtgw_python38.MDCodeTable_english_name_set)
    __swig_setmethods__["market_type"] = libtgw_python38.MDCodeTable_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDCodeTable_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDCodeTable_market_type_get, libtgw_python38.MDCodeTable_market_type_set)
    __swig_setmethods__["security_type"] = libtgw_python38.MDCodeTable_security_type_set
    __swig_getmethods__["security_type"] = libtgw_python38.MDCodeTable_security_type_get
    if _newclass:security_type = _swig_property(libtgw_python38.MDCodeTable_security_type_get, libtgw_python38.MDCodeTable_security_type_set)
    __swig_setmethods__["currency"] = libtgw_python38.MDCodeTable_currency_set
    __swig_getmethods__["currency"] = libtgw_python38.MDCodeTable_currency_get
    if _newclass:currency = _swig_property(libtgw_python38.MDCodeTable_currency_get, libtgw_python38.MDCodeTable_currency_set)
    def __init__(self): 
        this = libtgw_python38.new_MDCodeTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDCodeTable
    __del__ = lambda self : None;
MDCodeTable_swigregister = libtgw_python38.MDCodeTable_swigregister
MDCodeTable_swigregister(MDCodeTable)

class MDExFactorTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDExFactorTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDExFactorTable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["inner_code"] = libtgw_python38.MDExFactorTable_inner_code_set
    __swig_getmethods__["inner_code"] = libtgw_python38.MDExFactorTable_inner_code_get
    if _newclass:inner_code = _swig_property(libtgw_python38.MDExFactorTable_inner_code_get, libtgw_python38.MDExFactorTable_inner_code_set)
    __swig_setmethods__["security_code"] = libtgw_python38.MDExFactorTable_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDExFactorTable_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDExFactorTable_security_code_get, libtgw_python38.MDExFactorTable_security_code_set)
    __swig_setmethods__["ex_date"] = libtgw_python38.MDExFactorTable_ex_date_set
    __swig_getmethods__["ex_date"] = libtgw_python38.MDExFactorTable_ex_date_get
    if _newclass:ex_date = _swig_property(libtgw_python38.MDExFactorTable_ex_date_get, libtgw_python38.MDExFactorTable_ex_date_set)
    __swig_setmethods__["ex_factor"] = libtgw_python38.MDExFactorTable_ex_factor_set
    __swig_getmethods__["ex_factor"] = libtgw_python38.MDExFactorTable_ex_factor_get
    if _newclass:ex_factor = _swig_property(libtgw_python38.MDExFactorTable_ex_factor_get, libtgw_python38.MDExFactorTable_ex_factor_set)
    __swig_setmethods__["cum_factor"] = libtgw_python38.MDExFactorTable_cum_factor_set
    __swig_getmethods__["cum_factor"] = libtgw_python38.MDExFactorTable_cum_factor_get
    if _newclass:cum_factor = _swig_property(libtgw_python38.MDExFactorTable_cum_factor_get, libtgw_python38.MDExFactorTable_cum_factor_set)
    def __init__(self): 
        this = libtgw_python38.new_MDExFactorTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDExFactorTable
    __del__ = lambda self : None;
MDExFactorTable_swigregister = libtgw_python38.MDExFactorTable_swigregister
MDExFactorTable_swigregister(MDExFactorTable)

class MDStockInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDStockInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDStockInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python38.MDStockInfo_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDStockInfo_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDStockInfo_security_code_get, libtgw_python38.MDStockInfo_security_code_set)
    __swig_setmethods__["symbol"] = libtgw_python38.MDStockInfo_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python38.MDStockInfo_symbol_get
    if _newclass:symbol = _swig_property(libtgw_python38.MDStockInfo_symbol_get, libtgw_python38.MDStockInfo_symbol_set)
    __swig_setmethods__["market_type"] = libtgw_python38.MDStockInfo_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDStockInfo_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDStockInfo_market_type_get, libtgw_python38.MDStockInfo_market_type_set)
    __swig_setmethods__["security_type"] = libtgw_python38.MDStockInfo_security_type_set
    __swig_getmethods__["security_type"] = libtgw_python38.MDStockInfo_security_type_get
    if _newclass:security_type = _swig_property(libtgw_python38.MDStockInfo_security_type_get, libtgw_python38.MDStockInfo_security_type_set)
    __swig_setmethods__["currency"] = libtgw_python38.MDStockInfo_currency_set
    __swig_getmethods__["currency"] = libtgw_python38.MDStockInfo_currency_get
    if _newclass:currency = _swig_property(libtgw_python38.MDStockInfo_currency_get, libtgw_python38.MDStockInfo_currency_set)
    __swig_setmethods__["security_status"] = libtgw_python38.MDStockInfo_security_status_set
    __swig_getmethods__["security_status"] = libtgw_python38.MDStockInfo_security_status_get
    if _newclass:security_status = _swig_property(libtgw_python38.MDStockInfo_security_status_get, libtgw_python38.MDStockInfo_security_status_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDStockInfo_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDStockInfo_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDStockInfo_pre_close_price_get, libtgw_python38.MDStockInfo_pre_close_price_set)
    __swig_setmethods__["total_shares"] = libtgw_python38.MDStockInfo_total_shares_set
    __swig_getmethods__["total_shares"] = libtgw_python38.MDStockInfo_total_shares_get
    if _newclass:total_shares = _swig_property(libtgw_python38.MDStockInfo_total_shares_get, libtgw_python38.MDStockInfo_total_shares_set)
    __swig_setmethods__["flow_shares"] = libtgw_python38.MDStockInfo_flow_shares_set
    __swig_getmethods__["flow_shares"] = libtgw_python38.MDStockInfo_flow_shares_get
    if _newclass:flow_shares = _swig_property(libtgw_python38.MDStockInfo_flow_shares_get, libtgw_python38.MDStockInfo_flow_shares_set)
    __swig_setmethods__["noprofit"] = libtgw_python38.MDStockInfo_noprofit_set
    __swig_getmethods__["noprofit"] = libtgw_python38.MDStockInfo_noprofit_get
    if _newclass:noprofit = _swig_property(libtgw_python38.MDStockInfo_noprofit_get, libtgw_python38.MDStockInfo_noprofit_set)
    __swig_setmethods__["weighted_voting_rights"] = libtgw_python38.MDStockInfo_weighted_voting_rights_set
    __swig_getmethods__["weighted_voting_rights"] = libtgw_python38.MDStockInfo_weighted_voting_rights_get
    if _newclass:weighted_voting_rights = _swig_property(libtgw_python38.MDStockInfo_weighted_voting_rights_get, libtgw_python38.MDStockInfo_weighted_voting_rights_set)
    __swig_setmethods__["registration_flag"] = libtgw_python38.MDStockInfo_registration_flag_set
    __swig_getmethods__["registration_flag"] = libtgw_python38.MDStockInfo_registration_flag_get
    if _newclass:registration_flag = _swig_property(libtgw_python38.MDStockInfo_registration_flag_get, libtgw_python38.MDStockInfo_registration_flag_set)
    __swig_setmethods__["eps"] = libtgw_python38.MDStockInfo_eps_set
    __swig_getmethods__["eps"] = libtgw_python38.MDStockInfo_eps_get
    if _newclass:eps = _swig_property(libtgw_python38.MDStockInfo_eps_get, libtgw_python38.MDStockInfo_eps_set)
    __swig_setmethods__["eps_cell"] = libtgw_python38.MDStockInfo_eps_cell_set
    __swig_getmethods__["eps_cell"] = libtgw_python38.MDStockInfo_eps_cell_get
    if _newclass:eps_cell = _swig_property(libtgw_python38.MDStockInfo_eps_cell_get, libtgw_python38.MDStockInfo_eps_cell_set)
    __swig_setmethods__["net_profit_ttm"] = libtgw_python38.MDStockInfo_net_profit_ttm_set
    __swig_getmethods__["net_profit_ttm"] = libtgw_python38.MDStockInfo_net_profit_ttm_get
    if _newclass:net_profit_ttm = _swig_property(libtgw_python38.MDStockInfo_net_profit_ttm_get, libtgw_python38.MDStockInfo_net_profit_ttm_set)
    __swig_setmethods__["net_profit"] = libtgw_python38.MDStockInfo_net_profit_set
    __swig_getmethods__["net_profit"] = libtgw_python38.MDStockInfo_net_profit_get
    if _newclass:net_profit = _swig_property(libtgw_python38.MDStockInfo_net_profit_get, libtgw_python38.MDStockInfo_net_profit_set)
    __swig_setmethods__["net_asset"] = libtgw_python38.MDStockInfo_net_asset_set
    __swig_getmethods__["net_asset"] = libtgw_python38.MDStockInfo_net_asset_get
    if _newclass:net_asset = _swig_property(libtgw_python38.MDStockInfo_net_asset_get, libtgw_python38.MDStockInfo_net_asset_set)
    __swig_setmethods__["net_profit_recent_annual"] = libtgw_python38.MDStockInfo_net_profit_recent_annual_set
    __swig_getmethods__["net_profit_recent_annual"] = libtgw_python38.MDStockInfo_net_profit_recent_annual_get
    if _newclass:net_profit_recent_annual = _swig_property(libtgw_python38.MDStockInfo_net_profit_recent_annual_get, libtgw_python38.MDStockInfo_net_profit_recent_annual_set)
    __swig_setmethods__["net_profit_first_quarter"] = libtgw_python38.MDStockInfo_net_profit_first_quarter_set
    __swig_getmethods__["net_profit_first_quarter"] = libtgw_python38.MDStockInfo_net_profit_first_quarter_get
    if _newclass:net_profit_first_quarter = _swig_property(libtgw_python38.MDStockInfo_net_profit_first_quarter_get, libtgw_python38.MDStockInfo_net_profit_first_quarter_set)
    def __init__(self): 
        this = libtgw_python38.new_MDStockInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDStockInfo
    __del__ = lambda self : None;
MDStockInfo_swigregister = libtgw_python38.MDStockInfo_swigregister
MDStockInfo_swigregister(MDStockInfo)

class MDCodeTableRecord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDCodeTableRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDCodeTableRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["security_code"] = libtgw_python38.MDCodeTableRecord_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.MDCodeTableRecord_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.MDCodeTableRecord_security_code_get, libtgw_python38.MDCodeTableRecord_security_code_set)
    __swig_setmethods__["market_type"] = libtgw_python38.MDCodeTableRecord_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.MDCodeTableRecord_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.MDCodeTableRecord_market_type_get, libtgw_python38.MDCodeTableRecord_market_type_set)
    __swig_setmethods__["symbol"] = libtgw_python38.MDCodeTableRecord_symbol_set
    __swig_getmethods__["symbol"] = libtgw_python38.MDCodeTableRecord_symbol_get
    if _newclass:symbol = _swig_property(libtgw_python38.MDCodeTableRecord_symbol_get, libtgw_python38.MDCodeTableRecord_symbol_set)
    __swig_setmethods__["english_name"] = libtgw_python38.MDCodeTableRecord_english_name_set
    __swig_getmethods__["english_name"] = libtgw_python38.MDCodeTableRecord_english_name_get
    if _newclass:english_name = _swig_property(libtgw_python38.MDCodeTableRecord_english_name_get, libtgw_python38.MDCodeTableRecord_english_name_set)
    __swig_setmethods__["security_type"] = libtgw_python38.MDCodeTableRecord_security_type_set
    __swig_getmethods__["security_type"] = libtgw_python38.MDCodeTableRecord_security_type_get
    if _newclass:security_type = _swig_property(libtgw_python38.MDCodeTableRecord_security_type_get, libtgw_python38.MDCodeTableRecord_security_type_set)
    __swig_setmethods__["currency"] = libtgw_python38.MDCodeTableRecord_currency_set
    __swig_getmethods__["currency"] = libtgw_python38.MDCodeTableRecord_currency_get
    if _newclass:currency = _swig_property(libtgw_python38.MDCodeTableRecord_currency_get, libtgw_python38.MDCodeTableRecord_currency_set)
    __swig_setmethods__["variety_category"] = libtgw_python38.MDCodeTableRecord_variety_category_set
    __swig_getmethods__["variety_category"] = libtgw_python38.MDCodeTableRecord_variety_category_get
    if _newclass:variety_category = _swig_property(libtgw_python38.MDCodeTableRecord_variety_category_get, libtgw_python38.MDCodeTableRecord_variety_category_set)
    __swig_setmethods__["pre_close_price"] = libtgw_python38.MDCodeTableRecord_pre_close_price_set
    __swig_getmethods__["pre_close_price"] = libtgw_python38.MDCodeTableRecord_pre_close_price_get
    if _newclass:pre_close_price = _swig_property(libtgw_python38.MDCodeTableRecord_pre_close_price_get, libtgw_python38.MDCodeTableRecord_pre_close_price_set)
    __swig_setmethods__["underlying_security_id"] = libtgw_python38.MDCodeTableRecord_underlying_security_id_set
    __swig_getmethods__["underlying_security_id"] = libtgw_python38.MDCodeTableRecord_underlying_security_id_get
    if _newclass:underlying_security_id = _swig_property(libtgw_python38.MDCodeTableRecord_underlying_security_id_get, libtgw_python38.MDCodeTableRecord_underlying_security_id_set)
    __swig_setmethods__["contract_type"] = libtgw_python38.MDCodeTableRecord_contract_type_set
    __swig_getmethods__["contract_type"] = libtgw_python38.MDCodeTableRecord_contract_type_get
    if _newclass:contract_type = _swig_property(libtgw_python38.MDCodeTableRecord_contract_type_get, libtgw_python38.MDCodeTableRecord_contract_type_set)
    __swig_setmethods__["exercise_price"] = libtgw_python38.MDCodeTableRecord_exercise_price_set
    __swig_getmethods__["exercise_price"] = libtgw_python38.MDCodeTableRecord_exercise_price_get
    if _newclass:exercise_price = _swig_property(libtgw_python38.MDCodeTableRecord_exercise_price_get, libtgw_python38.MDCodeTableRecord_exercise_price_set)
    __swig_setmethods__["expire_date"] = libtgw_python38.MDCodeTableRecord_expire_date_set
    __swig_getmethods__["expire_date"] = libtgw_python38.MDCodeTableRecord_expire_date_get
    if _newclass:expire_date = _swig_property(libtgw_python38.MDCodeTableRecord_expire_date_get, libtgw_python38.MDCodeTableRecord_expire_date_set)
    __swig_setmethods__["high_limited"] = libtgw_python38.MDCodeTableRecord_high_limited_set
    __swig_getmethods__["high_limited"] = libtgw_python38.MDCodeTableRecord_high_limited_get
    if _newclass:high_limited = _swig_property(libtgw_python38.MDCodeTableRecord_high_limited_get, libtgw_python38.MDCodeTableRecord_high_limited_set)
    __swig_setmethods__["low_limited"] = libtgw_python38.MDCodeTableRecord_low_limited_set
    __swig_getmethods__["low_limited"] = libtgw_python38.MDCodeTableRecord_low_limited_get
    if _newclass:low_limited = _swig_property(libtgw_python38.MDCodeTableRecord_low_limited_get, libtgw_python38.MDCodeTableRecord_low_limited_set)
    __swig_setmethods__["security_status"] = libtgw_python38.MDCodeTableRecord_security_status_set
    __swig_getmethods__["security_status"] = libtgw_python38.MDCodeTableRecord_security_status_get
    if _newclass:security_status = _swig_property(libtgw_python38.MDCodeTableRecord_security_status_get, libtgw_python38.MDCodeTableRecord_security_status_set)
    __swig_setmethods__["price_tick"] = libtgw_python38.MDCodeTableRecord_price_tick_set
    __swig_getmethods__["price_tick"] = libtgw_python38.MDCodeTableRecord_price_tick_get
    if _newclass:price_tick = _swig_property(libtgw_python38.MDCodeTableRecord_price_tick_get, libtgw_python38.MDCodeTableRecord_price_tick_set)
    __swig_setmethods__["buy_qty_unit"] = libtgw_python38.MDCodeTableRecord_buy_qty_unit_set
    __swig_getmethods__["buy_qty_unit"] = libtgw_python38.MDCodeTableRecord_buy_qty_unit_get
    if _newclass:buy_qty_unit = _swig_property(libtgw_python38.MDCodeTableRecord_buy_qty_unit_get, libtgw_python38.MDCodeTableRecord_buy_qty_unit_set)
    __swig_setmethods__["sell_qty_unit"] = libtgw_python38.MDCodeTableRecord_sell_qty_unit_set
    __swig_getmethods__["sell_qty_unit"] = libtgw_python38.MDCodeTableRecord_sell_qty_unit_get
    if _newclass:sell_qty_unit = _swig_property(libtgw_python38.MDCodeTableRecord_sell_qty_unit_get, libtgw_python38.MDCodeTableRecord_sell_qty_unit_set)
    __swig_setmethods__["market_buy_qty_unit"] = libtgw_python38.MDCodeTableRecord_market_buy_qty_unit_set
    __swig_getmethods__["market_buy_qty_unit"] = libtgw_python38.MDCodeTableRecord_market_buy_qty_unit_get
    if _newclass:market_buy_qty_unit = _swig_property(libtgw_python38.MDCodeTableRecord_market_buy_qty_unit_get, libtgw_python38.MDCodeTableRecord_market_buy_qty_unit_set)
    __swig_setmethods__["market_sell_qty_unit"] = libtgw_python38.MDCodeTableRecord_market_sell_qty_unit_set
    __swig_getmethods__["market_sell_qty_unit"] = libtgw_python38.MDCodeTableRecord_market_sell_qty_unit_get
    if _newclass:market_sell_qty_unit = _swig_property(libtgw_python38.MDCodeTableRecord_market_sell_qty_unit_get, libtgw_python38.MDCodeTableRecord_market_sell_qty_unit_set)
    __swig_setmethods__["buy_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_buy_qty_lower_limit_set
    __swig_getmethods__["buy_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_buy_qty_lower_limit_get
    if _newclass:buy_qty_lower_limit = _swig_property(libtgw_python38.MDCodeTableRecord_buy_qty_lower_limit_get, libtgw_python38.MDCodeTableRecord_buy_qty_lower_limit_set)
    __swig_setmethods__["buy_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_buy_qty_upper_limit_set
    __swig_getmethods__["buy_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_buy_qty_upper_limit_get
    if _newclass:buy_qty_upper_limit = _swig_property(libtgw_python38.MDCodeTableRecord_buy_qty_upper_limit_get, libtgw_python38.MDCodeTableRecord_buy_qty_upper_limit_set)
    __swig_setmethods__["sell_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_sell_qty_lower_limit_set
    __swig_getmethods__["sell_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_sell_qty_lower_limit_get
    if _newclass:sell_qty_lower_limit = _swig_property(libtgw_python38.MDCodeTableRecord_sell_qty_lower_limit_get, libtgw_python38.MDCodeTableRecord_sell_qty_lower_limit_set)
    __swig_setmethods__["sell_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_sell_qty_upper_limit_set
    __swig_getmethods__["sell_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_sell_qty_upper_limit_get
    if _newclass:sell_qty_upper_limit = _swig_property(libtgw_python38.MDCodeTableRecord_sell_qty_upper_limit_get, libtgw_python38.MDCodeTableRecord_sell_qty_upper_limit_set)
    __swig_setmethods__["market_buy_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_market_buy_qty_lower_limit_set
    __swig_getmethods__["market_buy_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_market_buy_qty_lower_limit_get
    if _newclass:market_buy_qty_lower_limit = _swig_property(libtgw_python38.MDCodeTableRecord_market_buy_qty_lower_limit_get, libtgw_python38.MDCodeTableRecord_market_buy_qty_lower_limit_set)
    __swig_setmethods__["market_buy_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_market_buy_qty_upper_limit_set
    __swig_getmethods__["market_buy_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_market_buy_qty_upper_limit_get
    if _newclass:market_buy_qty_upper_limit = _swig_property(libtgw_python38.MDCodeTableRecord_market_buy_qty_upper_limit_get, libtgw_python38.MDCodeTableRecord_market_buy_qty_upper_limit_set)
    __swig_setmethods__["market_sell_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_market_sell_qty_lower_limit_set
    __swig_getmethods__["market_sell_qty_lower_limit"] = libtgw_python38.MDCodeTableRecord_market_sell_qty_lower_limit_get
    if _newclass:market_sell_qty_lower_limit = _swig_property(libtgw_python38.MDCodeTableRecord_market_sell_qty_lower_limit_get, libtgw_python38.MDCodeTableRecord_market_sell_qty_lower_limit_set)
    __swig_setmethods__["market_sell_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_market_sell_qty_upper_limit_set
    __swig_getmethods__["market_sell_qty_upper_limit"] = libtgw_python38.MDCodeTableRecord_market_sell_qty_upper_limit_get
    if _newclass:market_sell_qty_upper_limit = _swig_property(libtgw_python38.MDCodeTableRecord_market_sell_qty_upper_limit_get, libtgw_python38.MDCodeTableRecord_market_sell_qty_upper_limit_set)
    __swig_setmethods__["list_day"] = libtgw_python38.MDCodeTableRecord_list_day_set
    __swig_getmethods__["list_day"] = libtgw_python38.MDCodeTableRecord_list_day_get
    if _newclass:list_day = _swig_property(libtgw_python38.MDCodeTableRecord_list_day_get, libtgw_python38.MDCodeTableRecord_list_day_set)
    __swig_setmethods__["par_value"] = libtgw_python38.MDCodeTableRecord_par_value_set
    __swig_getmethods__["par_value"] = libtgw_python38.MDCodeTableRecord_par_value_get
    if _newclass:par_value = _swig_property(libtgw_python38.MDCodeTableRecord_par_value_get, libtgw_python38.MDCodeTableRecord_par_value_set)
    __swig_setmethods__["outstanding_share"] = libtgw_python38.MDCodeTableRecord_outstanding_share_set
    __swig_getmethods__["outstanding_share"] = libtgw_python38.MDCodeTableRecord_outstanding_share_get
    if _newclass:outstanding_share = _swig_property(libtgw_python38.MDCodeTableRecord_outstanding_share_get, libtgw_python38.MDCodeTableRecord_outstanding_share_set)
    __swig_setmethods__["public_float_share_quantity"] = libtgw_python38.MDCodeTableRecord_public_float_share_quantity_set
    __swig_getmethods__["public_float_share_quantity"] = libtgw_python38.MDCodeTableRecord_public_float_share_quantity_get
    if _newclass:public_float_share_quantity = _swig_property(libtgw_python38.MDCodeTableRecord_public_float_share_quantity_get, libtgw_python38.MDCodeTableRecord_public_float_share_quantity_set)
    __swig_setmethods__["contract_multiplier"] = libtgw_python38.MDCodeTableRecord_contract_multiplier_set
    __swig_getmethods__["contract_multiplier"] = libtgw_python38.MDCodeTableRecord_contract_multiplier_get
    if _newclass:contract_multiplier = _swig_property(libtgw_python38.MDCodeTableRecord_contract_multiplier_get, libtgw_python38.MDCodeTableRecord_contract_multiplier_set)
    __swig_setmethods__["regular_share"] = libtgw_python38.MDCodeTableRecord_regular_share_set
    __swig_getmethods__["regular_share"] = libtgw_python38.MDCodeTableRecord_regular_share_get
    if _newclass:regular_share = _swig_property(libtgw_python38.MDCodeTableRecord_regular_share_get, libtgw_python38.MDCodeTableRecord_regular_share_set)
    __swig_setmethods__["interest"] = libtgw_python38.MDCodeTableRecord_interest_set
    __swig_getmethods__["interest"] = libtgw_python38.MDCodeTableRecord_interest_get
    if _newclass:interest = _swig_property(libtgw_python38.MDCodeTableRecord_interest_get, libtgw_python38.MDCodeTableRecord_interest_set)
    __swig_setmethods__["coupon_rate"] = libtgw_python38.MDCodeTableRecord_coupon_rate_set
    __swig_getmethods__["coupon_rate"] = libtgw_python38.MDCodeTableRecord_coupon_rate_get
    if _newclass:coupon_rate = _swig_property(libtgw_python38.MDCodeTableRecord_coupon_rate_get, libtgw_python38.MDCodeTableRecord_coupon_rate_set)
    __swig_setmethods__["product_code"] = libtgw_python38.MDCodeTableRecord_product_code_set
    __swig_getmethods__["product_code"] = libtgw_python38.MDCodeTableRecord_product_code_get
    if _newclass:product_code = _swig_property(libtgw_python38.MDCodeTableRecord_product_code_get, libtgw_python38.MDCodeTableRecord_product_code_set)
    __swig_setmethods__["delivery_year"] = libtgw_python38.MDCodeTableRecord_delivery_year_set
    __swig_getmethods__["delivery_year"] = libtgw_python38.MDCodeTableRecord_delivery_year_get
    if _newclass:delivery_year = _swig_property(libtgw_python38.MDCodeTableRecord_delivery_year_get, libtgw_python38.MDCodeTableRecord_delivery_year_set)
    __swig_setmethods__["delivery_month"] = libtgw_python38.MDCodeTableRecord_delivery_month_set
    __swig_getmethods__["delivery_month"] = libtgw_python38.MDCodeTableRecord_delivery_month_get
    if _newclass:delivery_month = _swig_property(libtgw_python38.MDCodeTableRecord_delivery_month_get, libtgw_python38.MDCodeTableRecord_delivery_month_set)
    __swig_setmethods__["create_date"] = libtgw_python38.MDCodeTableRecord_create_date_set
    __swig_getmethods__["create_date"] = libtgw_python38.MDCodeTableRecord_create_date_get
    if _newclass:create_date = _swig_property(libtgw_python38.MDCodeTableRecord_create_date_get, libtgw_python38.MDCodeTableRecord_create_date_set)
    __swig_setmethods__["start_deliv_date"] = libtgw_python38.MDCodeTableRecord_start_deliv_date_set
    __swig_getmethods__["start_deliv_date"] = libtgw_python38.MDCodeTableRecord_start_deliv_date_get
    if _newclass:start_deliv_date = _swig_property(libtgw_python38.MDCodeTableRecord_start_deliv_date_get, libtgw_python38.MDCodeTableRecord_start_deliv_date_set)
    __swig_setmethods__["end_deliv_date"] = libtgw_python38.MDCodeTableRecord_end_deliv_date_set
    __swig_getmethods__["end_deliv_date"] = libtgw_python38.MDCodeTableRecord_end_deliv_date_get
    if _newclass:end_deliv_date = _swig_property(libtgw_python38.MDCodeTableRecord_end_deliv_date_get, libtgw_python38.MDCodeTableRecord_end_deliv_date_set)
    __swig_setmethods__["position_type"] = libtgw_python38.MDCodeTableRecord_position_type_set
    __swig_getmethods__["position_type"] = libtgw_python38.MDCodeTableRecord_position_type_get
    if _newclass:position_type = _swig_property(libtgw_python38.MDCodeTableRecord_position_type_get, libtgw_python38.MDCodeTableRecord_position_type_set)
    def __init__(self): 
        this = libtgw_python38.new_MDCodeTableRecord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_MDCodeTableRecord
    __del__ = lambda self : None;
MDCodeTableRecord_swigregister = libtgw_python38.MDCodeTableRecord_swigregister
MDCodeTableRecord_swigregister(MDCodeTableRecord)

class ThirdInfoData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThirdInfoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ThirdInfoData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python38.ThirdInfoData_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python38.ThirdInfoData_task_id_get
    if _newclass:task_id = _swig_property(libtgw_python38.ThirdInfoData_task_id_get, libtgw_python38.ThirdInfoData_task_id_set)
    __swig_setmethods__["data_size"] = libtgw_python38.ThirdInfoData_data_size_set
    __swig_getmethods__["data_size"] = libtgw_python38.ThirdInfoData_data_size_get
    if _newclass:data_size = _swig_property(libtgw_python38.ThirdInfoData_data_size_get, libtgw_python38.ThirdInfoData_data_size_set)
    __swig_setmethods__["json_data"] = libtgw_python38.ThirdInfoData_json_data_set
    __swig_getmethods__["json_data"] = libtgw_python38.ThirdInfoData_json_data_get
    if _newclass:json_data = _swig_property(libtgw_python38.ThirdInfoData_json_data_get, libtgw_python38.ThirdInfoData_json_data_set)
    def __init__(self): 
        this = libtgw_python38.new_ThirdInfoData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_ThirdInfoData
    __del__ = lambda self : None;
ThirdInfoData_swigregister = libtgw_python38.ThirdInfoData_swigregister
ThirdInfoData_swigregister(ThirdInfoData)

class RspTaskStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspTaskStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspTaskStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python38.RspTaskStatus_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python38.RspTaskStatus_task_id_get
    if _newclass:task_id = _swig_property(libtgw_python38.RspTaskStatus_task_id_get, libtgw_python38.RspTaskStatus_task_id_set)
    __swig_setmethods__["status"] = libtgw_python38.RspTaskStatus_status_set
    __swig_getmethods__["status"] = libtgw_python38.RspTaskStatus_status_get
    if _newclass:status = _swig_property(libtgw_python38.RspTaskStatus_status_get, libtgw_python38.RspTaskStatus_status_set)
    __swig_setmethods__["process_rate"] = libtgw_python38.RspTaskStatus_process_rate_set
    __swig_getmethods__["process_rate"] = libtgw_python38.RspTaskStatus_process_rate_get
    if _newclass:process_rate = _swig_property(libtgw_python38.RspTaskStatus_process_rate_get, libtgw_python38.RspTaskStatus_process_rate_set)
    __swig_setmethods__["error_code"] = libtgw_python38.RspTaskStatus_error_code_set
    __swig_getmethods__["error_code"] = libtgw_python38.RspTaskStatus_error_code_get
    if _newclass:error_code = _swig_property(libtgw_python38.RspTaskStatus_error_code_get, libtgw_python38.RspTaskStatus_error_code_set)
    __swig_setmethods__["error_msg_len"] = libtgw_python38.RspTaskStatus_error_msg_len_set
    __swig_getmethods__["error_msg_len"] = libtgw_python38.RspTaskStatus_error_msg_len_get
    if _newclass:error_msg_len = _swig_property(libtgw_python38.RspTaskStatus_error_msg_len_get, libtgw_python38.RspTaskStatus_error_msg_len_set)
    __swig_setmethods__["error_msg"] = libtgw_python38.RspTaskStatus_error_msg_set
    __swig_getmethods__["error_msg"] = libtgw_python38.RspTaskStatus_error_msg_get
    if _newclass:error_msg = _swig_property(libtgw_python38.RspTaskStatus_error_msg_get, libtgw_python38.RspTaskStatus_error_msg_set)
    def __init__(self): 
        this = libtgw_python38.new_RspTaskStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_RspTaskStatus
    __del__ = lambda self : None;
RspTaskStatus_swigregister = libtgw_python38.RspTaskStatus_swigregister
RspTaskStatus_swigregister(RspTaskStatus)

class RspUnionStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspUnionStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspUnionStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["req_type"] = libtgw_python38.RspUnionStatus_req_type_set
    __swig_getmethods__["req_type"] = libtgw_python38.RspUnionStatus_req_type_get
    if _newclass:req_type = _swig_property(libtgw_python38.RspUnionStatus_req_type_get, libtgw_python38.RspUnionStatus_req_type_set)
    __swig_setmethods__["market_type"] = libtgw_python38.RspUnionStatus_market_type_set
    __swig_getmethods__["market_type"] = libtgw_python38.RspUnionStatus_market_type_get
    if _newclass:market_type = _swig_property(libtgw_python38.RspUnionStatus_market_type_get, libtgw_python38.RspUnionStatus_market_type_set)
    __swig_setmethods__["security_code"] = libtgw_python38.RspUnionStatus_security_code_set
    __swig_getmethods__["security_code"] = libtgw_python38.RspUnionStatus_security_code_get
    if _newclass:security_code = _swig_property(libtgw_python38.RspUnionStatus_security_code_get, libtgw_python38.RspUnionStatus_security_code_set)
    def __init__(self): 
        this = libtgw_python38.new_RspUnionStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_RspUnionStatus
    __del__ = lambda self : None;
RspUnionStatus_swigregister = libtgw_python38.RspUnionStatus_swigregister
RspUnionStatus_swigregister(RspUnionStatus)

class RspFactorStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspFactorStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspFactorStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["factor_type"] = libtgw_python38.RspFactorStatus_factor_type_set
    __swig_getmethods__["factor_type"] = libtgw_python38.RspFactorStatus_factor_type_get
    if _newclass:factor_type = _swig_property(libtgw_python38.RspFactorStatus_factor_type_get, libtgw_python38.RspFactorStatus_factor_type_set)
    __swig_setmethods__["factor_sub_type"] = libtgw_python38.RspFactorStatus_factor_sub_type_set
    __swig_getmethods__["factor_sub_type"] = libtgw_python38.RspFactorStatus_factor_sub_type_get
    if _newclass:factor_sub_type = _swig_property(libtgw_python38.RspFactorStatus_factor_sub_type_get, libtgw_python38.RspFactorStatus_factor_sub_type_set)
    __swig_setmethods__["factor_name"] = libtgw_python38.RspFactorStatus_factor_name_set
    __swig_getmethods__["factor_name"] = libtgw_python38.RspFactorStatus_factor_name_get
    if _newclass:factor_name = _swig_property(libtgw_python38.RspFactorStatus_factor_name_get, libtgw_python38.RspFactorStatus_factor_name_set)
    def __init__(self): 
        this = libtgw_python38.new_RspFactorStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_RspFactorStatus
    __del__ = lambda self : None;
RspFactorStatus_swigregister = libtgw_python38.RspFactorStatus_swigregister
RspFactorStatus_swigregister(RspFactorStatus)

class RspSecuritiesInfoStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspSecuritiesInfoStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspSecuritiesInfoStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code_table_item_cnt"] = libtgw_python38.RspSecuritiesInfoStatus_code_table_item_cnt_set
    __swig_getmethods__["code_table_item_cnt"] = libtgw_python38.RspSecuritiesInfoStatus_code_table_item_cnt_get
    if _newclass:code_table_item_cnt = _swig_property(libtgw_python38.RspSecuritiesInfoStatus_code_table_item_cnt_get, libtgw_python38.RspSecuritiesInfoStatus_code_table_item_cnt_set)
    __swig_setmethods__["codes"] = libtgw_python38.RspSecuritiesInfoStatus_codes_set
    __swig_getmethods__["codes"] = libtgw_python38.RspSecuritiesInfoStatus_codes_get
    if _newclass:codes = _swig_property(libtgw_python38.RspSecuritiesInfoStatus_codes_get, libtgw_python38.RspSecuritiesInfoStatus_codes_set)
    def __init__(self): 
        this = libtgw_python38.new_RspSecuritiesInfoStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_RspSecuritiesInfoStatus
    __del__ = lambda self : None;
RspSecuritiesInfoStatus_swigregister = libtgw_python38.RspSecuritiesInfoStatus_swigregister
RspSecuritiesInfoStatus_swigregister(RspSecuritiesInfoStatus)

class RspThirdInfoStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspThirdInfoStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspThirdInfoStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["task_id"] = libtgw_python38.RspThirdInfoStatus_task_id_set
    __swig_getmethods__["task_id"] = libtgw_python38.RspThirdInfoStatus_task_id_get
    if _newclass:task_id = _swig_property(libtgw_python38.RspThirdInfoStatus_task_id_get, libtgw_python38.RspThirdInfoStatus_task_id_set)
    def __init__(self): 
        this = libtgw_python38.new_RspThirdInfoStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_RspThirdInfoStatus
    __del__ = lambda self : None;
RspThirdInfoStatus_swigregister = libtgw_python38.RspThirdInfoStatus_swigregister
RspThirdInfoStatus_swigregister(RspThirdInfoStatus)

class RspQueryStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RspQueryStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RspQueryStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_code"] = libtgw_python38.RspQueryStatus_error_code_set
    __swig_getmethods__["error_code"] = libtgw_python38.RspQueryStatus_error_code_get
    if _newclass:error_code = _swig_property(libtgw_python38.RspQueryStatus_error_code_get, libtgw_python38.RspQueryStatus_error_code_set)
    __swig_setmethods__["error_msg_len"] = libtgw_python38.RspQueryStatus_error_msg_len_set
    __swig_getmethods__["error_msg_len"] = libtgw_python38.RspQueryStatus_error_msg_len_get
    if _newclass:error_msg_len = _swig_property(libtgw_python38.RspQueryStatus_error_msg_len_get, libtgw_python38.RspQueryStatus_error_msg_len_set)
    __swig_setmethods__["error_msg"] = libtgw_python38.RspQueryStatus_error_msg_set
    __swig_getmethods__["error_msg"] = libtgw_python38.RspQueryStatus_error_msg_get
    if _newclass:error_msg = _swig_property(libtgw_python38.RspQueryStatus_error_msg_get, libtgw_python38.RspQueryStatus_error_msg_set)
    __swig_setmethods__["rsp_union_status"] = libtgw_python38.RspQueryStatus_rsp_union_status_set
    __swig_getmethods__["rsp_union_status"] = libtgw_python38.RspQueryStatus_rsp_union_status_get
    if _newclass:rsp_union_status = _swig_property(libtgw_python38.RspQueryStatus_rsp_union_status_get, libtgw_python38.RspQueryStatus_rsp_union_status_set)
    __swig_setmethods__["rsp_factor_status"] = libtgw_python38.RspQueryStatus_rsp_factor_status_set
    __swig_getmethods__["rsp_factor_status"] = libtgw_python38.RspQueryStatus_rsp_factor_status_get
    if _newclass:rsp_factor_status = _swig_property(libtgw_python38.RspQueryStatus_rsp_factor_status_get, libtgw_python38.RspQueryStatus_rsp_factor_status_set)
    __swig_setmethods__["rsp_stockinfo_status"] = libtgw_python38.RspQueryStatus_rsp_stockinfo_status_set
    __swig_getmethods__["rsp_stockinfo_status"] = libtgw_python38.RspQueryStatus_rsp_stockinfo_status_get
    if _newclass:rsp_stockinfo_status = _swig_property(libtgw_python38.RspQueryStatus_rsp_stockinfo_status_get, libtgw_python38.RspQueryStatus_rsp_stockinfo_status_set)
    __swig_setmethods__["rsp_thirdinfo_status"] = libtgw_python38.RspQueryStatus_rsp_thirdinfo_status_set
    __swig_getmethods__["rsp_thirdinfo_status"] = libtgw_python38.RspQueryStatus_rsp_thirdinfo_status_get
    if _newclass:rsp_thirdinfo_status = _swig_property(libtgw_python38.RspQueryStatus_rsp_thirdinfo_status_get, libtgw_python38.RspQueryStatus_rsp_thirdinfo_status_set)
    def __init__(self): 
        this = libtgw_python38.new_RspQueryStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_RspQueryStatus
    __del__ = lambda self : None;
RspQueryStatus_swigregister = libtgw_python38.RspQueryStatus_swigregister
RspQueryStatus_swigregister(RspQueryStatus)

class IGMDApi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDApi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDApi, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetVersion"] = lambda x: libtgw_python38.IGMDApi_GetVersion
    if _newclass:GetVersion = staticmethod(libtgw_python38.IGMDApi_GetVersion)
    __swig_getmethods__["Init"] = lambda x: libtgw_python38.IGMDApi_Init
    if _newclass:Init = staticmethod(libtgw_python38.IGMDApi_Init)
    __swig_getmethods__["Release"] = lambda x: libtgw_python38.IGMDApi_Release
    if _newclass:Release = staticmethod(libtgw_python38.IGMDApi_Release)
    __swig_getmethods__["FreeMemory"] = lambda x: libtgw_python38.IGMDApi_FreeMemory
    if _newclass:FreeMemory = staticmethod(libtgw_python38.IGMDApi_FreeMemory)
    __swig_getmethods__["GetTaskID"] = lambda x: libtgw_python38.IGMDApi_GetTaskID
    if _newclass:GetTaskID = staticmethod(libtgw_python38.IGMDApi_GetTaskID)
    __swig_getmethods__["UpdatePassWord"] = lambda x: libtgw_python38.IGMDApi_UpdatePassWord
    if _newclass:UpdatePassWord = staticmethod(libtgw_python38.IGMDApi_UpdatePassWord)
    __swig_getmethods__["Subscribe"] = lambda x: libtgw_python38.IGMDApi_Subscribe
    if _newclass:Subscribe = staticmethod(libtgw_python38.IGMDApi_Subscribe)
    __swig_getmethods__["UnSubscribe"] = lambda x: libtgw_python38.IGMDApi_UnSubscribe
    if _newclass:UnSubscribe = staticmethod(libtgw_python38.IGMDApi_UnSubscribe)
    __swig_getmethods__["SubFactor"] = lambda x: libtgw_python38.IGMDApi_SubFactor
    if _newclass:SubFactor = staticmethod(libtgw_python38.IGMDApi_SubFactor)
    __swig_getmethods__["UnSubFactor"] = lambda x: libtgw_python38.IGMDApi_UnSubFactor
    if _newclass:UnSubFactor = staticmethod(libtgw_python38.IGMDApi_UnSubFactor)
    __swig_getmethods__["QueryKline"] = lambda x: libtgw_python38.IGMDApi_QueryKline
    if _newclass:QueryKline = staticmethod(libtgw_python38.IGMDApi_QueryKline)
    __swig_getmethods__["QuerySnapshot"] = lambda x: libtgw_python38.IGMDApi_QuerySnapshot
    if _newclass:QuerySnapshot = staticmethod(libtgw_python38.IGMDApi_QuerySnapshot)
    __swig_getmethods__["QueryOrderQueue"] = lambda x: libtgw_python38.IGMDApi_QueryOrderQueue
    if _newclass:QueryOrderQueue = staticmethod(libtgw_python38.IGMDApi_QueryOrderQueue)
    __swig_getmethods__["QueryTickExecution"] = lambda x: libtgw_python38.IGMDApi_QueryTickExecution
    if _newclass:QueryTickExecution = staticmethod(libtgw_python38.IGMDApi_QueryTickExecution)
    __swig_getmethods__["QueryTickOrder"] = lambda x: libtgw_python38.IGMDApi_QueryTickOrder
    if _newclass:QueryTickOrder = staticmethod(libtgw_python38.IGMDApi_QueryTickOrder)
    __swig_getmethods__["QueryCodeTable"] = lambda x: libtgw_python38.IGMDApi_QueryCodeTable
    if _newclass:QueryCodeTable = staticmethod(libtgw_python38.IGMDApi_QueryCodeTable)
    __swig_getmethods__["QuerySecuritiesInfo"] = lambda x: libtgw_python38.IGMDApi_QuerySecuritiesInfo
    if _newclass:QuerySecuritiesInfo = staticmethod(libtgw_python38.IGMDApi_QuerySecuritiesInfo)
    __swig_getmethods__["QueryExFactorTable"] = lambda x: libtgw_python38.IGMDApi_QueryExFactorTable
    if _newclass:QueryExFactorTable = staticmethod(libtgw_python38.IGMDApi_QueryExFactorTable)
    __swig_getmethods__["QueryFactor"] = lambda x: libtgw_python38.IGMDApi_QueryFactor
    if _newclass:QueryFactor = staticmethod(libtgw_python38.IGMDApi_QueryFactor)
    __swig_getmethods__["SetThirdInfoParam"] = lambda x: libtgw_python38.IGMDApi_SetThirdInfoParam
    if _newclass:SetThirdInfoParam = staticmethod(libtgw_python38.IGMDApi_SetThirdInfoParam)
    __swig_getmethods__["QueryThirdInfo"] = lambda x: libtgw_python38.IGMDApi_QueryThirdInfo
    if _newclass:QueryThirdInfo = staticmethod(libtgw_python38.IGMDApi_QueryThirdInfo)
    __swig_getmethods__["ReplayKline"] = lambda x: libtgw_python38.IGMDApi_ReplayKline
    if _newclass:ReplayKline = staticmethod(libtgw_python38.IGMDApi_ReplayKline)
    __swig_getmethods__["ReplayRequest"] = lambda x: libtgw_python38.IGMDApi_ReplayRequest
    if _newclass:ReplayRequest = staticmethod(libtgw_python38.IGMDApi_ReplayRequest)
    __swig_getmethods__["CancelTask"] = lambda x: libtgw_python38.IGMDApi_CancelTask
    if _newclass:CancelTask = staticmethod(libtgw_python38.IGMDApi_CancelTask)
    def __init__(self): 
        this = libtgw_python38.new_IGMDApi()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libtgw_python38.delete_IGMDApi
    __del__ = lambda self : None;
IGMDApi_swigregister = libtgw_python38.IGMDApi_swigregister
IGMDApi_swigregister(IGMDApi)

def IGMDApi_GetVersion():
  return libtgw_python38.IGMDApi_GetVersion()
IGMDApi_GetVersion = libtgw_python38.IGMDApi_GetVersion

def IGMDApi_Init(*args):
  return libtgw_python38.IGMDApi_Init(*args)
IGMDApi_Init = libtgw_python38.IGMDApi_Init

def IGMDApi_Release():
  return libtgw_python38.IGMDApi_Release()
IGMDApi_Release = libtgw_python38.IGMDApi_Release

def IGMDApi_FreeMemory(*args):
  return libtgw_python38.IGMDApi_FreeMemory(*args)
IGMDApi_FreeMemory = libtgw_python38.IGMDApi_FreeMemory

def IGMDApi_GetTaskID():
  return libtgw_python38.IGMDApi_GetTaskID()
IGMDApi_GetTaskID = libtgw_python38.IGMDApi_GetTaskID

def IGMDApi_UpdatePassWord(*args):
  return libtgw_python38.IGMDApi_UpdatePassWord(*args)
IGMDApi_UpdatePassWord = libtgw_python38.IGMDApi_UpdatePassWord

def IGMDApi_Subscribe(*args):
  return libtgw_python38.IGMDApi_Subscribe(*args)
IGMDApi_Subscribe = libtgw_python38.IGMDApi_Subscribe

def IGMDApi_UnSubscribe(*args):
  return libtgw_python38.IGMDApi_UnSubscribe(*args)
IGMDApi_UnSubscribe = libtgw_python38.IGMDApi_UnSubscribe

def IGMDApi_SubFactor(*args):
  return libtgw_python38.IGMDApi_SubFactor(*args)
IGMDApi_SubFactor = libtgw_python38.IGMDApi_SubFactor

def IGMDApi_UnSubFactor(*args):
  return libtgw_python38.IGMDApi_UnSubFactor(*args)
IGMDApi_UnSubFactor = libtgw_python38.IGMDApi_UnSubFactor

def IGMDApi_QueryKline(*args):
  return libtgw_python38.IGMDApi_QueryKline(*args)
IGMDApi_QueryKline = libtgw_python38.IGMDApi_QueryKline

def IGMDApi_QuerySnapshot(*args):
  return libtgw_python38.IGMDApi_QuerySnapshot(*args)
IGMDApi_QuerySnapshot = libtgw_python38.IGMDApi_QuerySnapshot

def IGMDApi_QueryOrderQueue(*args):
  return libtgw_python38.IGMDApi_QueryOrderQueue(*args)
IGMDApi_QueryOrderQueue = libtgw_python38.IGMDApi_QueryOrderQueue

def IGMDApi_QueryTickExecution(*args):
  return libtgw_python38.IGMDApi_QueryTickExecution(*args)
IGMDApi_QueryTickExecution = libtgw_python38.IGMDApi_QueryTickExecution

def IGMDApi_QueryTickOrder(*args):
  return libtgw_python38.IGMDApi_QueryTickOrder(*args)
IGMDApi_QueryTickOrder = libtgw_python38.IGMDApi_QueryTickOrder

def IGMDApi_QueryCodeTable(*args):
  return libtgw_python38.IGMDApi_QueryCodeTable(*args)
IGMDApi_QueryCodeTable = libtgw_python38.IGMDApi_QueryCodeTable

def IGMDApi_QuerySecuritiesInfo(*args):
  return libtgw_python38.IGMDApi_QuerySecuritiesInfo(*args)
IGMDApi_QuerySecuritiesInfo = libtgw_python38.IGMDApi_QuerySecuritiesInfo

def IGMDApi_QueryExFactorTable(*args):
  return libtgw_python38.IGMDApi_QueryExFactorTable(*args)
IGMDApi_QueryExFactorTable = libtgw_python38.IGMDApi_QueryExFactorTable

def IGMDApi_QueryFactor(*args):
  return libtgw_python38.IGMDApi_QueryFactor(*args)
IGMDApi_QueryFactor = libtgw_python38.IGMDApi_QueryFactor

def IGMDApi_SetThirdInfoParam(*args):
  return libtgw_python38.IGMDApi_SetThirdInfoParam(*args)
IGMDApi_SetThirdInfoParam = libtgw_python38.IGMDApi_SetThirdInfoParam

def IGMDApi_QueryThirdInfo(*args):
  return libtgw_python38.IGMDApi_QueryThirdInfo(*args)
IGMDApi_QueryThirdInfo = libtgw_python38.IGMDApi_QueryThirdInfo

def IGMDApi_ReplayKline(*args):
  return libtgw_python38.IGMDApi_ReplayKline(*args)
IGMDApi_ReplayKline = libtgw_python38.IGMDApi_ReplayKline

def IGMDApi_ReplayRequest(*args):
  return libtgw_python38.IGMDApi_ReplayRequest(*args)
IGMDApi_ReplayRequest = libtgw_python38.IGMDApi_ReplayRequest

def IGMDApi_CancelTask(*args):
  return libtgw_python38.IGMDApi_CancelTask(*args)
IGMDApi_CancelTask = libtgw_python38.IGMDApi_CancelTask

class IGMDSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDSpi
    __del__ = lambda self : None;
    def OnLog(self, *args): return libtgw_python38.IGMDSpi_OnLog(self, *args)
    def OnLogon(self, *args): return libtgw_python38.IGMDSpi_OnLogon(self, *args)
    def OnIndicator(self, *args): return libtgw_python38.IGMDSpi_OnIndicator(self, *args)
    def OnEvent(self, *args): return libtgw_python38.IGMDSpi_OnEvent(self, *args)
    def OnMDSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDSnapshot(self, *args)
    def OnMDIndexSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDIndexSnapshot(self, *args)
    def OnMDOptionSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDOptionSnapshot(self, *args)
    def OnMDHKTSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDHKTSnapshot(self, *args)
    def OnMDAfterHourFixedPriceSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDAfterHourFixedPriceSnapshot(self, *args)
    def OnMDCSIIndexSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDCSIIndexSnapshot(self, *args)
    def OnMDCnIndexSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDCnIndexSnapshot(self, *args)
    def OnMDHKTRealtimeLimit(self, *args): return libtgw_python38.IGMDSpi_OnMDHKTRealtimeLimit(self, *args)
    def OnMDHKTProductStatus(self, *args): return libtgw_python38.IGMDSpi_OnMDHKTProductStatus(self, *args)
    def OnMDHKTVCM(self, *args): return libtgw_python38.IGMDSpi_OnMDHKTVCM(self, *args)
    def OnMDFutureSnapshot(self, *args): return libtgw_python38.IGMDSpi_OnMDFutureSnapshot(self, *args)
    def OnKLine(self, *args): return libtgw_python38.IGMDSpi_OnKLine(self, *args)
    def OnSnapshotDerive(self, *args): return libtgw_python38.IGMDSpi_OnSnapshotDerive(self, *args)
    def OnFactor(self, *args): return libtgw_python38.IGMDSpi_OnFactor(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDSpi(self)
        return weakref_proxy(self)
IGMDSpi_swigregister = libtgw_python38.IGMDSpi_swigregister
IGMDSpi_swigregister(IGMDSpi)

class Tools(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tools, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tools, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["CreateSubscribeItem"] = lambda x: libtgw_python38.Tools_CreateSubscribeItem
    if _newclass:CreateSubscribeItem = staticmethod(libtgw_python38.Tools_CreateSubscribeItem)
    __swig_getmethods__["CreateSubFactorItem"] = lambda x: libtgw_python38.Tools_CreateSubFactorItem
    if _newclass:CreateSubFactorItem = staticmethod(libtgw_python38.Tools_CreateSubFactorItem)
    __swig_getmethods__["CreateReqHistoryItem"] = lambda x: libtgw_python38.Tools_CreateReqHistoryItem
    if _newclass:CreateReqHistoryItem = staticmethod(libtgw_python38.Tools_CreateReqHistoryItem)
    __swig_getmethods__["SetSubscribeItem"] = lambda x: libtgw_python38.Tools_SetSubscribeItem
    if _newclass:SetSubscribeItem = staticmethod(libtgw_python38.Tools_SetSubscribeItem)
    __swig_getmethods__["SetSubFactorItem"] = lambda x: libtgw_python38.Tools_SetSubFactorItem
    if _newclass:SetSubFactorItem = staticmethod(libtgw_python38.Tools_SetSubFactorItem)
    __swig_getmethods__["SetReqHistoryItem"] = lambda x: libtgw_python38.Tools_SetReqHistoryItem
    if _newclass:SetReqHistoryItem = staticmethod(libtgw_python38.Tools_SetReqHistoryItem)
    __swig_getmethods__["DestroySubscribeItem"] = lambda x: libtgw_python38.Tools_DestroySubscribeItem
    if _newclass:DestroySubscribeItem = staticmethod(libtgw_python38.Tools_DestroySubscribeItem)
    __swig_getmethods__["DestroySubFactorItem"] = lambda x: libtgw_python38.Tools_DestroySubFactorItem
    if _newclass:DestroySubFactorItem = staticmethod(libtgw_python38.Tools_DestroySubFactorItem)
    __swig_getmethods__["DestroyReqHistoryItem"] = lambda x: libtgw_python38.Tools_DestroyReqHistoryItem
    if _newclass:DestroyReqHistoryItem = staticmethod(libtgw_python38.Tools_DestroyReqHistoryItem)
    __swig_getmethods__["GetSubscribeItemByIndex"] = lambda x: libtgw_python38.Tools_GetSubscribeItemByIndex
    if _newclass:GetSubscribeItemByIndex = staticmethod(libtgw_python38.Tools_GetSubscribeItemByIndex)
    __swig_getmethods__["GetSubFactorItemByIndex"] = lambda x: libtgw_python38.Tools_GetSubFactorItemByIndex
    if _newclass:GetSubFactorItemByIndex = staticmethod(libtgw_python38.Tools_GetSubFactorItemByIndex)
    __swig_getmethods__["GetReqHistoryItemByIndex"] = lambda x: libtgw_python38.Tools_GetReqHistoryItemByIndex
    if _newclass:GetReqHistoryItemByIndex = staticmethod(libtgw_python38.Tools_GetReqHistoryItemByIndex)
    __swig_getmethods__["GetDataByIndex"] = lambda x: libtgw_python38.Tools_GetDataByIndex
    if _newclass:GetDataByIndex = staticmethod(libtgw_python38.Tools_GetDataByIndex)
    __swig_getmethods__["GetSubCodeTableItemByIndex"] = lambda x: libtgw_python38.Tools_GetSubCodeTableItemByIndex
    if _newclass:GetSubCodeTableItemByIndex = staticmethod(libtgw_python38.Tools_GetSubCodeTableItemByIndex)
    __swig_getmethods__["GetInt64DataByIndex"] = lambda x: libtgw_python38.Tools_GetInt64DataByIndex
    if _newclass:GetInt64DataByIndex = staticmethod(libtgw_python38.Tools_GetInt64DataByIndex)
    __swig_getmethods__["Serialize"] = lambda x: libtgw_python38.Tools_Serialize
    if _newclass:Serialize = staticmethod(libtgw_python38.Tools_Serialize)
    __swig_getmethods__["ShowFactorInfo"] = lambda x: libtgw_python38.Tools_ShowFactorInfo
    if _newclass:ShowFactorInfo = staticmethod(libtgw_python38.Tools_ShowFactorInfo)
    __swig_getmethods__["Init"] = lambda x: libtgw_python38.Tools_Init
    if _newclass:Init = staticmethod(libtgw_python38.Tools_Init)
    __swig_getmethods__["WriteTitle"] = lambda x: libtgw_python38.Tools_WriteTitle
    if _newclass:WriteTitle = staticmethod(libtgw_python38.Tools_WriteTitle)
    __swig_getmethods__["WriteStockSnapshot"] = lambda x: libtgw_python38.Tools_WriteStockSnapshot
    if _newclass:WriteStockSnapshot = staticmethod(libtgw_python38.Tools_WriteStockSnapshot)
    __swig_getmethods__["WriteIndexSnapshot"] = lambda x: libtgw_python38.Tools_WriteIndexSnapshot
    if _newclass:WriteIndexSnapshot = staticmethod(libtgw_python38.Tools_WriteIndexSnapshot)
    __swig_getmethods__["WriteOptionSnapshot"] = lambda x: libtgw_python38.Tools_WriteOptionSnapshot
    if _newclass:WriteOptionSnapshot = staticmethod(libtgw_python38.Tools_WriteOptionSnapshot)
    __swig_getmethods__["WriteHKTSnapshot"] = lambda x: libtgw_python38.Tools_WriteHKTSnapshot
    if _newclass:WriteHKTSnapshot = staticmethod(libtgw_python38.Tools_WriteHKTSnapshot)
    __swig_getmethods__["WriteAfterHourFixPriceSnapshot"] = lambda x: libtgw_python38.Tools_WriteAfterHourFixPriceSnapshot
    if _newclass:WriteAfterHourFixPriceSnapshot = staticmethod(libtgw_python38.Tools_WriteAfterHourFixPriceSnapshot)
    __swig_getmethods__["WriteCSIIndexSnapshot"] = lambda x: libtgw_python38.Tools_WriteCSIIndexSnapshot
    if _newclass:WriteCSIIndexSnapshot = staticmethod(libtgw_python38.Tools_WriteCSIIndexSnapshot)
    __swig_getmethods__["WriteCnIndexSnapshot"] = lambda x: libtgw_python38.Tools_WriteCnIndexSnapshot
    if _newclass:WriteCnIndexSnapshot = staticmethod(libtgw_python38.Tools_WriteCnIndexSnapshot)
    __swig_getmethods__["WriteHKTRealLimit"] = lambda x: libtgw_python38.Tools_WriteHKTRealLimit
    if _newclass:WriteHKTRealLimit = staticmethod(libtgw_python38.Tools_WriteHKTRealLimit)
    __swig_getmethods__["WriteHKTProduStatus"] = lambda x: libtgw_python38.Tools_WriteHKTProduStatus
    if _newclass:WriteHKTProduStatus = staticmethod(libtgw_python38.Tools_WriteHKTProduStatus)
    __swig_getmethods__["WriteHKTVCM"] = lambda x: libtgw_python38.Tools_WriteHKTVCM
    if _newclass:WriteHKTVCM = staticmethod(libtgw_python38.Tools_WriteHKTVCM)
    __swig_getmethods__["WriteFutureSnapshot"] = lambda x: libtgw_python38.Tools_WriteFutureSnapshot
    if _newclass:WriteFutureSnapshot = staticmethod(libtgw_python38.Tools_WriteFutureSnapshot)
    __swig_getmethods__["WriteKline"] = lambda x: libtgw_python38.Tools_WriteKline
    if _newclass:WriteKline = staticmethod(libtgw_python38.Tools_WriteKline)
    __swig_getmethods__["WriteSnapshotDerive"] = lambda x: libtgw_python38.Tools_WriteSnapshotDerive
    if _newclass:WriteSnapshotDerive = staticmethod(libtgw_python38.Tools_WriteSnapshotDerive)
    __swig_getmethods__["WriteFactor"] = lambda x: libtgw_python38.Tools_WriteFactor
    if _newclass:WriteFactor = staticmethod(libtgw_python38.Tools_WriteFactor)
    __swig_getmethods__["Release"] = lambda x: libtgw_python38.Tools_Release
    if _newclass:Release = staticmethod(libtgw_python38.Tools_Release)
    __swig_getmethods__["WriteQueryTickOrder"] = lambda x: libtgw_python38.Tools_WriteQueryTickOrder
    if _newclass:WriteQueryTickOrder = staticmethod(libtgw_python38.Tools_WriteQueryTickOrder)
    __swig_getmethods__["WriteQueryTickExecution"] = lambda x: libtgw_python38.Tools_WriteQueryTickExecution
    if _newclass:WriteQueryTickExecution = staticmethod(libtgw_python38.Tools_WriteQueryTickExecution)
    __swig_getmethods__["WriteQueryOrderQueue"] = lambda x: libtgw_python38.Tools_WriteQueryOrderQueue
    if _newclass:WriteQueryOrderQueue = staticmethod(libtgw_python38.Tools_WriteQueryOrderQueue)
    __swig_getmethods__["WriteQueryCodeTable"] = lambda x: libtgw_python38.Tools_WriteQueryCodeTable
    if _newclass:WriteQueryCodeTable = staticmethod(libtgw_python38.Tools_WriteQueryCodeTable)
    __swig_getmethods__["WriteQuerySecurInfo"] = lambda x: libtgw_python38.Tools_WriteQuerySecurInfo
    if _newclass:WriteQuerySecurInfo = staticmethod(libtgw_python38.Tools_WriteQuerySecurInfo)
    __swig_getmethods__["WriteQueryExFactor"] = lambda x: libtgw_python38.Tools_WriteQueryExFactor
    if _newclass:WriteQueryExFactor = staticmethod(libtgw_python38.Tools_WriteQueryExFactor)
    __swig_getmethods__["WriteQueryThirdInfo"] = lambda x: libtgw_python38.Tools_WriteQueryThirdInfo
    if _newclass:WriteQueryThirdInfo = staticmethod(libtgw_python38.Tools_WriteQueryThirdInfo)
    __swig_getmethods__["WriteQueryStockSnapshot"] = lambda x: libtgw_python38.Tools_WriteQueryStockSnapshot
    if _newclass:WriteQueryStockSnapshot = staticmethod(libtgw_python38.Tools_WriteQueryStockSnapshot)
    __swig_getmethods__["WriteQueryIndexSnapshot"] = lambda x: libtgw_python38.Tools_WriteQueryIndexSnapshot
    if _newclass:WriteQueryIndexSnapshot = staticmethod(libtgw_python38.Tools_WriteQueryIndexSnapshot)
    __swig_getmethods__["WriteQueryOptionSnapshot"] = lambda x: libtgw_python38.Tools_WriteQueryOptionSnapshot
    if _newclass:WriteQueryOptionSnapshot = staticmethod(libtgw_python38.Tools_WriteQueryOptionSnapshot)
    __swig_getmethods__["WriteQueryHKTSnapshot"] = lambda x: libtgw_python38.Tools_WriteQueryHKTSnapshot
    if _newclass:WriteQueryHKTSnapshot = staticmethod(libtgw_python38.Tools_WriteQueryHKTSnapshot)
    __swig_getmethods__["WriteQueryFutureSnapshot"] = lambda x: libtgw_python38.Tools_WriteQueryFutureSnapshot
    if _newclass:WriteQueryFutureSnapshot = staticmethod(libtgw_python38.Tools_WriteQueryFutureSnapshot)
    __swig_getmethods__["WriteQueryKline"] = lambda x: libtgw_python38.Tools_WriteQueryKline
    if _newclass:WriteQueryKline = staticmethod(libtgw_python38.Tools_WriteQueryKline)
    __swig_getmethods__["WriteQueryFactor"] = lambda x: libtgw_python38.Tools_WriteQueryFactor
    if _newclass:WriteQueryFactor = staticmethod(libtgw_python38.Tools_WriteQueryFactor)
    __swig_getmethods__["WriteReplayTickExecution"] = lambda x: libtgw_python38.Tools_WriteReplayTickExecution
    if _newclass:WriteReplayTickExecution = staticmethod(libtgw_python38.Tools_WriteReplayTickExecution)
    __swig_getmethods__["WriteReplaySnapshot"] = lambda x: libtgw_python38.Tools_WriteReplaySnapshot
    if _newclass:WriteReplaySnapshot = staticmethod(libtgw_python38.Tools_WriteReplaySnapshot)
    __swig_getmethods__["WriteReplayKline"] = lambda x: libtgw_python38.Tools_WriteReplayKline
    if _newclass:WriteReplayKline = staticmethod(libtgw_python38.Tools_WriteReplayKline)
    __swig_getmethods__["FreeMemory"] = lambda x: libtgw_python38.Tools_FreeMemory
    if _newclass:FreeMemory = staticmethod(libtgw_python38.Tools_FreeMemory)
    __swig_destroy__ = libtgw_python38.delete_Tools
    __del__ = lambda self : None;
Tools_swigregister = libtgw_python38.Tools_swigregister
Tools_swigregister(Tools)

def Tools_CreateSubscribeItem(*args):
  return libtgw_python38.Tools_CreateSubscribeItem(*args)
Tools_CreateSubscribeItem = libtgw_python38.Tools_CreateSubscribeItem

def Tools_CreateSubFactorItem(*args):
  return libtgw_python38.Tools_CreateSubFactorItem(*args)
Tools_CreateSubFactorItem = libtgw_python38.Tools_CreateSubFactorItem

def Tools_CreateReqHistoryItem(*args):
  return libtgw_python38.Tools_CreateReqHistoryItem(*args)
Tools_CreateReqHistoryItem = libtgw_python38.Tools_CreateReqHistoryItem

def Tools_SetSubscribeItem(*args):
  return libtgw_python38.Tools_SetSubscribeItem(*args)
Tools_SetSubscribeItem = libtgw_python38.Tools_SetSubscribeItem

def Tools_SetSubFactorItem(*args):
  return libtgw_python38.Tools_SetSubFactorItem(*args)
Tools_SetSubFactorItem = libtgw_python38.Tools_SetSubFactorItem

def Tools_SetReqHistoryItem(*args):
  return libtgw_python38.Tools_SetReqHistoryItem(*args)
Tools_SetReqHistoryItem = libtgw_python38.Tools_SetReqHistoryItem

def Tools_DestroySubscribeItem(*args):
  return libtgw_python38.Tools_DestroySubscribeItem(*args)
Tools_DestroySubscribeItem = libtgw_python38.Tools_DestroySubscribeItem

def Tools_DestroySubFactorItem(*args):
  return libtgw_python38.Tools_DestroySubFactorItem(*args)
Tools_DestroySubFactorItem = libtgw_python38.Tools_DestroySubFactorItem

def Tools_DestroyReqHistoryItem(*args):
  return libtgw_python38.Tools_DestroyReqHistoryItem(*args)
Tools_DestroyReqHistoryItem = libtgw_python38.Tools_DestroyReqHistoryItem

def Tools_GetSubscribeItemByIndex(*args):
  return libtgw_python38.Tools_GetSubscribeItemByIndex(*args)
Tools_GetSubscribeItemByIndex = libtgw_python38.Tools_GetSubscribeItemByIndex

def Tools_GetSubFactorItemByIndex(*args):
  return libtgw_python38.Tools_GetSubFactorItemByIndex(*args)
Tools_GetSubFactorItemByIndex = libtgw_python38.Tools_GetSubFactorItemByIndex

def Tools_GetReqHistoryItemByIndex(*args):
  return libtgw_python38.Tools_GetReqHistoryItemByIndex(*args)
Tools_GetReqHistoryItemByIndex = libtgw_python38.Tools_GetReqHistoryItemByIndex

def Tools_GetDataByIndex(*args):
  return libtgw_python38.Tools_GetDataByIndex(*args)
Tools_GetDataByIndex = libtgw_python38.Tools_GetDataByIndex

def Tools_GetSubCodeTableItemByIndex(*args):
  return libtgw_python38.Tools_GetSubCodeTableItemByIndex(*args)
Tools_GetSubCodeTableItemByIndex = libtgw_python38.Tools_GetSubCodeTableItemByIndex

def Tools_GetInt64DataByIndex(*args):
  return libtgw_python38.Tools_GetInt64DataByIndex(*args)
Tools_GetInt64DataByIndex = libtgw_python38.Tools_GetInt64DataByIndex

def Tools_Serialize(*args):
  return libtgw_python38.Tools_Serialize(*args)
Tools_Serialize = libtgw_python38.Tools_Serialize

def Tools_ShowFactorInfo(*args):
  return libtgw_python38.Tools_ShowFactorInfo(*args)
Tools_ShowFactorInfo = libtgw_python38.Tools_ShowFactorInfo

def Tools_Init(*args):
  return libtgw_python38.Tools_Init(*args)
Tools_Init = libtgw_python38.Tools_Init

def Tools_WriteTitle():
  return libtgw_python38.Tools_WriteTitle()
Tools_WriteTitle = libtgw_python38.Tools_WriteTitle

def Tools_WriteStockSnapshot(*args):
  return libtgw_python38.Tools_WriteStockSnapshot(*args)
Tools_WriteStockSnapshot = libtgw_python38.Tools_WriteStockSnapshot

def Tools_WriteIndexSnapshot(*args):
  return libtgw_python38.Tools_WriteIndexSnapshot(*args)
Tools_WriteIndexSnapshot = libtgw_python38.Tools_WriteIndexSnapshot

def Tools_WriteOptionSnapshot(*args):
  return libtgw_python38.Tools_WriteOptionSnapshot(*args)
Tools_WriteOptionSnapshot = libtgw_python38.Tools_WriteOptionSnapshot

def Tools_WriteHKTSnapshot(*args):
  return libtgw_python38.Tools_WriteHKTSnapshot(*args)
Tools_WriteHKTSnapshot = libtgw_python38.Tools_WriteHKTSnapshot

def Tools_WriteAfterHourFixPriceSnapshot(*args):
  return libtgw_python38.Tools_WriteAfterHourFixPriceSnapshot(*args)
Tools_WriteAfterHourFixPriceSnapshot = libtgw_python38.Tools_WriteAfterHourFixPriceSnapshot

def Tools_WriteCSIIndexSnapshot(*args):
  return libtgw_python38.Tools_WriteCSIIndexSnapshot(*args)
Tools_WriteCSIIndexSnapshot = libtgw_python38.Tools_WriteCSIIndexSnapshot

def Tools_WriteCnIndexSnapshot(*args):
  return libtgw_python38.Tools_WriteCnIndexSnapshot(*args)
Tools_WriteCnIndexSnapshot = libtgw_python38.Tools_WriteCnIndexSnapshot

def Tools_WriteHKTRealLimit(*args):
  return libtgw_python38.Tools_WriteHKTRealLimit(*args)
Tools_WriteHKTRealLimit = libtgw_python38.Tools_WriteHKTRealLimit

def Tools_WriteHKTProduStatus(*args):
  return libtgw_python38.Tools_WriteHKTProduStatus(*args)
Tools_WriteHKTProduStatus = libtgw_python38.Tools_WriteHKTProduStatus

def Tools_WriteHKTVCM(*args):
  return libtgw_python38.Tools_WriteHKTVCM(*args)
Tools_WriteHKTVCM = libtgw_python38.Tools_WriteHKTVCM

def Tools_WriteFutureSnapshot(*args):
  return libtgw_python38.Tools_WriteFutureSnapshot(*args)
Tools_WriteFutureSnapshot = libtgw_python38.Tools_WriteFutureSnapshot

def Tools_WriteKline(*args):
  return libtgw_python38.Tools_WriteKline(*args)
Tools_WriteKline = libtgw_python38.Tools_WriteKline

def Tools_WriteSnapshotDerive(*args):
  return libtgw_python38.Tools_WriteSnapshotDerive(*args)
Tools_WriteSnapshotDerive = libtgw_python38.Tools_WriteSnapshotDerive

def Tools_WriteFactor(*args):
  return libtgw_python38.Tools_WriteFactor(*args)
Tools_WriteFactor = libtgw_python38.Tools_WriteFactor

def Tools_Release():
  return libtgw_python38.Tools_Release()
Tools_Release = libtgw_python38.Tools_Release

def Tools_WriteQueryTickOrder(*args):
  return libtgw_python38.Tools_WriteQueryTickOrder(*args)
Tools_WriteQueryTickOrder = libtgw_python38.Tools_WriteQueryTickOrder

def Tools_WriteQueryTickExecution(*args):
  return libtgw_python38.Tools_WriteQueryTickExecution(*args)
Tools_WriteQueryTickExecution = libtgw_python38.Tools_WriteQueryTickExecution

def Tools_WriteQueryOrderQueue(*args):
  return libtgw_python38.Tools_WriteQueryOrderQueue(*args)
Tools_WriteQueryOrderQueue = libtgw_python38.Tools_WriteQueryOrderQueue

def Tools_WriteQueryCodeTable(*args):
  return libtgw_python38.Tools_WriteQueryCodeTable(*args)
Tools_WriteQueryCodeTable = libtgw_python38.Tools_WriteQueryCodeTable

def Tools_WriteQuerySecurInfo(*args):
  return libtgw_python38.Tools_WriteQuerySecurInfo(*args)
Tools_WriteQuerySecurInfo = libtgw_python38.Tools_WriteQuerySecurInfo

def Tools_WriteQueryExFactor(*args):
  return libtgw_python38.Tools_WriteQueryExFactor(*args)
Tools_WriteQueryExFactor = libtgw_python38.Tools_WriteQueryExFactor

def Tools_WriteQueryThirdInfo(*args):
  return libtgw_python38.Tools_WriteQueryThirdInfo(*args)
Tools_WriteQueryThirdInfo = libtgw_python38.Tools_WriteQueryThirdInfo

def Tools_WriteQueryStockSnapshot(*args):
  return libtgw_python38.Tools_WriteQueryStockSnapshot(*args)
Tools_WriteQueryStockSnapshot = libtgw_python38.Tools_WriteQueryStockSnapshot

def Tools_WriteQueryIndexSnapshot(*args):
  return libtgw_python38.Tools_WriteQueryIndexSnapshot(*args)
Tools_WriteQueryIndexSnapshot = libtgw_python38.Tools_WriteQueryIndexSnapshot

def Tools_WriteQueryOptionSnapshot(*args):
  return libtgw_python38.Tools_WriteQueryOptionSnapshot(*args)
Tools_WriteQueryOptionSnapshot = libtgw_python38.Tools_WriteQueryOptionSnapshot

def Tools_WriteQueryHKTSnapshot(*args):
  return libtgw_python38.Tools_WriteQueryHKTSnapshot(*args)
Tools_WriteQueryHKTSnapshot = libtgw_python38.Tools_WriteQueryHKTSnapshot

def Tools_WriteQueryFutureSnapshot(*args):
  return libtgw_python38.Tools_WriteQueryFutureSnapshot(*args)
Tools_WriteQueryFutureSnapshot = libtgw_python38.Tools_WriteQueryFutureSnapshot

def Tools_WriteQueryKline(*args):
  return libtgw_python38.Tools_WriteQueryKline(*args)
Tools_WriteQueryKline = libtgw_python38.Tools_WriteQueryKline

def Tools_WriteQueryFactor(*args):
  return libtgw_python38.Tools_WriteQueryFactor(*args)
Tools_WriteQueryFactor = libtgw_python38.Tools_WriteQueryFactor

def Tools_WriteReplayTickExecution(*args):
  return libtgw_python38.Tools_WriteReplayTickExecution(*args)
Tools_WriteReplayTickExecution = libtgw_python38.Tools_WriteReplayTickExecution

def Tools_WriteReplaySnapshot(*args):
  return libtgw_python38.Tools_WriteReplaySnapshot(*args)
Tools_WriteReplaySnapshot = libtgw_python38.Tools_WriteReplaySnapshot

def Tools_WriteReplayKline(*args):
  return libtgw_python38.Tools_WriteReplayKline(*args)
Tools_WriteReplayKline = libtgw_python38.Tools_WriteReplayKline

def Tools_FreeMemory(*args):
  return libtgw_python38.Tools_FreeMemory(*args)
Tools_FreeMemory = libtgw_python38.Tools_FreeMemory

class IGMDHistorySpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDHistorySpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDHistorySpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDHistorySpi
    __del__ = lambda self : None;
    def OnMDSnapshot(self, *args): return libtgw_python38.IGMDHistorySpi_OnMDSnapshot(self, *args)
    def OnMDIndexSnapshot(self, *args): return libtgw_python38.IGMDHistorySpi_OnMDIndexSnapshot(self, *args)
    def OnMDHKTSnapshot(self, *args): return libtgw_python38.IGMDHistorySpi_OnMDHKTSnapshot(self, *args)
    def OnMDOptionSnapshot(self, *args): return libtgw_python38.IGMDHistorySpi_OnMDOptionSnapshot(self, *args)
    def OnMDTickExecution(self, *args): return libtgw_python38.IGMDHistorySpi_OnMDTickExecution(self, *args)
    def OnMDKline(self, *args): return libtgw_python38.IGMDHistorySpi_OnMDKline(self, *args)
    def OnRspTaskStatus(self, *args): return libtgw_python38.IGMDHistorySpi_OnRspTaskStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDHistorySpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDHistorySpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDHistorySpi(self)
        return weakref_proxy(self)
IGMDHistorySpi_swigregister = libtgw_python38.IGMDHistorySpi_swigregister
IGMDHistorySpi_swigregister(IGMDHistorySpi)

class IGMDSnapshotSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDSnapshotSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDSnapshotSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDSnapshotSpi
    __del__ = lambda self : None;
    def OnMDSnapshotL2(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnMDSnapshotL2(self, *args)
    def OnMDSnapshotL1(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnMDSnapshotL1(self, *args)
    def OnMDIndexSnapshot(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnMDIndexSnapshot(self, *args)
    def OnMDHKTSnapshot(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnMDHKTSnapshot(self, *args)
    def OnMDOptionSnapshot(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnMDOptionSnapshot(self, *args)
    def OnMDFutureSnapshot(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnMDFutureSnapshot(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDSnapshotSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDSnapshotSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDSnapshotSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDSnapshotSpi(self)
        return weakref_proxy(self)
IGMDSnapshotSpi_swigregister = libtgw_python38.IGMDSnapshotSpi_swigregister
IGMDSnapshotSpi_swigregister(IGMDSnapshotSpi)

class IGMDTickOrderSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDTickOrderSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDTickOrderSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDTickOrderSpi
    __del__ = lambda self : None;
    def OnMDTickOrder(self, *args): return libtgw_python38.IGMDTickOrderSpi_OnMDTickOrder(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDTickOrderSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDTickOrderSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDTickOrderSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDTickOrderSpi(self)
        return weakref_proxy(self)
IGMDTickOrderSpi_swigregister = libtgw_python38.IGMDTickOrderSpi_swigregister
IGMDTickOrderSpi_swigregister(IGMDTickOrderSpi)

class IGMDTickExecutionSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDTickExecutionSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDTickExecutionSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDTickExecutionSpi
    __del__ = lambda self : None;
    def OnMDTickExecution(self, *args): return libtgw_python38.IGMDTickExecutionSpi_OnMDTickExecution(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDTickExecutionSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDTickExecutionSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDTickExecutionSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDTickExecutionSpi(self)
        return weakref_proxy(self)
IGMDTickExecutionSpi_swigregister = libtgw_python38.IGMDTickExecutionSpi_swigregister
IGMDTickExecutionSpi_swigregister(IGMDTickExecutionSpi)

class IGMDOrderQueueSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDOrderQueueSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDOrderQueueSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDOrderQueueSpi
    __del__ = lambda self : None;
    def OnMDOrderQueue(self, *args): return libtgw_python38.IGMDOrderQueueSpi_OnMDOrderQueue(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDOrderQueueSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDOrderQueueSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDOrderQueueSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDOrderQueueSpi(self)
        return weakref_proxy(self)
IGMDOrderQueueSpi_swigregister = libtgw_python38.IGMDOrderQueueSpi_swigregister
IGMDOrderQueueSpi_swigregister(IGMDOrderQueueSpi)

class IGMDKlineSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDKlineSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDKlineSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDKlineSpi
    __del__ = lambda self : None;
    def OnMDKLine(self, *args): return libtgw_python38.IGMDKlineSpi_OnMDKLine(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDKlineSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDKlineSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDKlineSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDKlineSpi(self)
        return weakref_proxy(self)
IGMDKlineSpi_swigregister = libtgw_python38.IGMDKlineSpi_swigregister
IGMDKlineSpi_swigregister(IGMDKlineSpi)

class IGMDCodeTableSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDCodeTableSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDCodeTableSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDCodeTableSpi
    __del__ = lambda self : None;
    def OnMDCodeTable(self, *args): return libtgw_python38.IGMDCodeTableSpi_OnMDCodeTable(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDCodeTableSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDCodeTableSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDCodeTableSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDCodeTableSpi(self)
        return weakref_proxy(self)
IGMDCodeTableSpi_swigregister = libtgw_python38.IGMDCodeTableSpi_swigregister
IGMDCodeTableSpi_swigregister(IGMDCodeTableSpi)

class IGMDSecuritiesInfoSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDSecuritiesInfoSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDSecuritiesInfoSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDSecuritiesInfoSpi
    __del__ = lambda self : None;
    def OnMDSecuritiesInfo(self, *args): return libtgw_python38.IGMDSecuritiesInfoSpi_OnMDSecuritiesInfo(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDSecuritiesInfoSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDSecuritiesInfoSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDSecuritiesInfoSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDSecuritiesInfoSpi(self)
        return weakref_proxy(self)
IGMDSecuritiesInfoSpi_swigregister = libtgw_python38.IGMDSecuritiesInfoSpi_swigregister
IGMDSecuritiesInfoSpi_swigregister(IGMDSecuritiesInfoSpi)

class IGMDExFactorSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDExFactorSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDExFactorSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDExFactorSpi
    __del__ = lambda self : None;
    def OnMDExFactor(self, *args): return libtgw_python38.IGMDExFactorSpi_OnMDExFactor(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDExFactorSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDExFactorSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDExFactorSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDExFactorSpi(self)
        return weakref_proxy(self)
IGMDExFactorSpi_swigregister = libtgw_python38.IGMDExFactorSpi_swigregister
IGMDExFactorSpi_swigregister(IGMDExFactorSpi)

class IGMDFactorSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDFactorSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDFactorSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDFactorSpi
    __del__ = lambda self : None;
    def OnFactor(self, *args): return libtgw_python38.IGMDFactorSpi_OnFactor(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDFactorSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDFactorSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDFactorSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDFactorSpi(self)
        return weakref_proxy(self)
IGMDFactorSpi_swigregister = libtgw_python38.IGMDFactorSpi_swigregister
IGMDFactorSpi_swigregister(IGMDFactorSpi)

class IGMDThirdInfoSpi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IGMDThirdInfoSpi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IGMDThirdInfoSpi, name)
    __repr__ = _swig_repr
    __swig_destroy__ = libtgw_python38.delete_IGMDThirdInfoSpi
    __del__ = lambda self : None;
    def OnThirdInfo(self, *args): return libtgw_python38.IGMDThirdInfoSpi_OnThirdInfo(self, *args)
    def OnStatus(self, *args): return libtgw_python38.IGMDThirdInfoSpi_OnStatus(self, *args)
    def __init__(self): 
        if self.__class__ == IGMDThirdInfoSpi:
            _self = None
        else:
            _self = self
        this = libtgw_python38.new_IGMDThirdInfoSpi(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        libtgw_python38.disown_IGMDThirdInfoSpi(self)
        return weakref_proxy(self)
IGMDThirdInfoSpi_swigregister = libtgw_python38.IGMDThirdInfoSpi_swigregister
IGMDThirdInfoSpi_swigregister(IGMDThirdInfoSpi)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def iterator(self): return libtgw_python38.Vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return libtgw_python38.Vector___nonzero__(self)
    def __bool__(self): return libtgw_python38.Vector___bool__(self)
    def __len__(self): return libtgw_python38.Vector___len__(self)
    def pop(self): return libtgw_python38.Vector_pop(self)
    def __getslice__(self, *args): return libtgw_python38.Vector___getslice__(self, *args)
    def __setslice__(self, *args): return libtgw_python38.Vector___setslice__(self, *args)
    def __delslice__(self, *args): return libtgw_python38.Vector___delslice__(self, *args)
    def __delitem__(self, *args): return libtgw_python38.Vector___delitem__(self, *args)
    def __getitem__(self, *args): return libtgw_python38.Vector___getitem__(self, *args)
    def __setitem__(self, *args): return libtgw_python38.Vector___setitem__(self, *args)
    def append(self, *args): return libtgw_python38.Vector_append(self, *args)
    def empty(self): return libtgw_python38.Vector_empty(self)
    def size(self): return libtgw_python38.Vector_size(self)
    def clear(self): return libtgw_python38.Vector_clear(self)
    def swap(self, *args): return libtgw_python38.Vector_swap(self, *args)
    def get_allocator(self): return libtgw_python38.Vector_get_allocator(self)
    def begin(self): return libtgw_python38.Vector_begin(self)
    def end(self): return libtgw_python38.Vector_end(self)
    def rbegin(self): return libtgw_python38.Vector_rbegin(self)
    def rend(self): return libtgw_python38.Vector_rend(self)
    def pop_back(self): return libtgw_python38.Vector_pop_back(self)
    def erase(self, *args): return libtgw_python38.Vector_erase(self, *args)
    def __init__(self, *args): 
        this = libtgw_python38.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return libtgw_python38.Vector_push_back(self, *args)
    def front(self): return libtgw_python38.Vector_front(self)
    def back(self): return libtgw_python38.Vector_back(self)
    def assign(self, *args): return libtgw_python38.Vector_assign(self, *args)
    def resize(self, *args): return libtgw_python38.Vector_resize(self, *args)
    def insert(self, *args): return libtgw_python38.Vector_insert(self, *args)
    def reserve(self, *args): return libtgw_python38.Vector_reserve(self, *args)
    def capacity(self): return libtgw_python38.Vector_capacity(self)
    __swig_destroy__ = libtgw_python38.delete_Vector
    __del__ = lambda self : None;
Vector_swigregister = libtgw_python38.Vector_swigregister
Vector_swigregister(Vector)

# This file is compatible with both classic and new-style classes.


